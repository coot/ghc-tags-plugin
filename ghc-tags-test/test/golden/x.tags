!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
$(ACLOCAL_M4)	src/Makefile.in	/^$(ACLOCAL_M4):  $(am__aclocal_m4_deps)$/;"	t
$(am__aclocal_m4_deps)	src/Makefile.in	/^$(am__aclocal_m4_deps):$/;"	t
$(am__depfiles_remade)	src/Makefile.in	/^$(am__depfiles_remade):$/;"	t
$(srcdir)/Makefile.in	src/Makefile.in	/^$(srcdir)\/Makefile.in:  $(srcdir)\/Makefile.am  $(am__configure_deps)$/;"	t
$(top_builddir)/config.status	src/Makefile.in	/^$(top_builddir)\/config.status: $(top_srcdir)\/configure $(CONFIG_STATUS_DEPENDENCIES)$/;"	t
$(top_srcdir)/configure	src/Makefile.in	/^$(top_srcdir)\/configure:  $(am__configure_deps)$/;"	t
.cpp.lo	src/Makefile.in	/^.cpp.lo:$/;"	t
.cpp.o	src/Makefile.in	/^.cpp.o:$/;"	t
.cpp.obj	src/Makefile.in	/^.cpp.obj:$/;"	t
ACLOCAL	src/Makefile.in	/^ACLOCAL = @ACLOCAL@$/;"	m
ACLOCAL_M4	src/Makefile.in	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	src/Makefile.in	/^AMTAR = @AMTAR@$/;"	m
AM_CPPFLAGS	src/Makefile.am	/^AM_CPPFLAGS= $(all_includes)$/;"	m
AM_CPPFLAGS	src/Makefile.in	/^AM_CPPFLAGS = $(all_includes)$/;"	m
AM_DEFAULT_VERBOSITY	src/Makefile.in	/^AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@$/;"	m
AM_V_CXX	src/Makefile.in	/^AM_V_CXX = $(am__v_CXX_@AM_V@)$/;"	m
AM_V_CXXLD	src/Makefile.in	/^AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)$/;"	m
AM_V_GEN	src/Makefile.in	/^AM_V_GEN = $(am__v_GEN_@AM_V@)$/;"	m
AM_V_P	src/Makefile.in	/^AM_V_P = $(am__v_P_@AM_V@)$/;"	m
AM_V_at	src/Makefile.in	/^AM_V_at = $(am__v_at_@AM_V@)$/;"	m
AM_V_lt	src/Makefile.in	/^AM_V_lt = $(am__v_lt_@AM_V@)$/;"	m
AR	src/Makefile.in	/^AR = @AR@$/;"	m
AST	src/format.h	/^enum class ListType { Group, FirstOf, AST };$/;"	e	enum:Format::ListType
AST	src/format.h	/^template <typename CharT> using AST = List<ListType::AST, CharT>;$/;"	t	namespace:Format	typeref:typename:List<ListType::AST,CharT>
AUTOCONF	src/Makefile.in	/^AUTOCONF = @AUTOCONF@$/;"	m
AUTOHEADER	src/Makefile.in	/^AUTOHEADER = @AUTOHEADER@$/;"	m
AUTOMAKE	src/Makefile.in	/^AUTOMAKE = @AUTOMAKE@$/;"	m
AWK	src/Makefile.in	/^AWK = @AWK@$/;"	m
Accessor	src/screens/screen.h	/^	> Accessor;$/;"	t	struct:Screen
ActionChain	src/bindings.h	/^	typedef std::vector<std::shared_ptr<Actions::BaseAction>> ActionChain;$/;"	t	struct:Binding	typeref:typename:std::vector<std::shared_ptr<Actions::BaseAction>>
Actions	src/actions.cpp	/^namespace Actions {$/;"	n	file:
Actions	src/actions.h	/^namespace Actions {$/;"	n
Actions	src/macro_utilities.cpp	/^namespace Actions {$/;"	n	file:
Actions	src/macro_utilities.h	/^namespace Actions {$/;"	n
Add	src/actions.h	/^	Add(): BaseAction(Type::Add, "add") { }$/;"	f	struct:Actions::Add
Add	src/actions.h	/^	Add,$/;"	e	enum:Actions::Type
Add	src/actions.h	/^struct Add: BaseAction$/;"	s	namespace:Actions
Add	src/mpdpp.cpp	/^void Connection::Add(const std::string &path)$/;"	f	class:MPD::Connection	typeref:typename:void
AddItemToPlaylist	src/actions.h	/^	AddItemToPlaylist(): BaseAction(Type::AddItemToPlaylist, "add_item_to_playlist") { }$/;"	f	struct:Actions::AddItemToPlaylist
AddItemToPlaylist	src/actions.h	/^	AddItemToPlaylist,$/;"	e	enum:Actions::Type
AddItemToPlaylist	src/actions.h	/^struct AddItemToPlaylist: BaseAction$/;"	s	namespace:Actions
AddRandomItems	src/actions.h	/^	AddRandomItems(): BaseAction(Type::AddRandomItems, "add_random_items") { }$/;"	f	struct:Actions::AddRandomItems
AddRandomItems	src/actions.h	/^	AddRandomItems,$/;"	e	enum:Actions::Type
AddRandomItems	src/actions.h	/^struct AddRandomItems: BaseAction$/;"	s	namespace:Actions
AddRandomSongs	src/mpdpp.cpp	/^bool Connection::AddRandomSongs(size_t number, std::string random_exclude_pattern, std::mt19937 /;"	f	class:MPD::Connection	typeref:typename:bool
AddRandomTag	src/mpdpp.cpp	/^bool Connection::AddRandomTag(mpd_tag_type tag, size_t number, std::mt19937 &rng)$/;"	f	class:MPD::Connection	typeref:typename:bool
AddRemove	src/enums.h	/^enum class SpaceAddMode { AddRemove, AlwaysAdd };$/;"	e	enum:SpaceAddMode
AddSearch	src/mpdpp.cpp	/^void Connection::AddSearch(mpd_tag_type item, const std::string &str) const$/;"	f	class:MPD::Connection	typeref:typename:void
AddSearchAny	src/mpdpp.cpp	/^void Connection::AddSearchAny(const std::string &str) const$/;"	f	class:MPD::Connection	typeref:typename:void
AddSearchURI	src/mpdpp.cpp	/^void Connection::AddSearchURI(const std::string &str) const$/;"	f	class:MPD::Connection	typeref:typename:void
AddSelectedItems	src/actions.h	/^	AddSelectedItems(): BaseAction(Type::AddSelectedItems, "add_selected_items") { }$/;"	f	struct:Actions::AddSelectedItems
AddSelectedItems	src/actions.h	/^	AddSelectedItems,$/;"	e	enum:Actions::Type
AddSelectedItems	src/actions.h	/^struct AddSelectedItems: BaseAction$/;"	s	namespace:Actions
AddSong	src/mpdpp.cpp	/^int Connection::AddSong(const Song &s, int pos)$/;"	f	class:MPD::Connection	typeref:typename:int
AddSong	src/mpdpp.cpp	/^int Connection::AddSong(const std::string &path, int pos)$/;"	f	class:MPD::Connection	typeref:typename:int
AddToPlaylist	src/mpdpp.cpp	/^void Connection::AddToPlaylist(const std::string &path, const Song &s)$/;"	f	class:MPD::Connection	typeref:typename:void
AddToPlaylist	src/mpdpp.cpp	/^void Connection::AddToPlaylist(const std::string &path, const std::string &file)$/;"	f	class:MPD::Connection	typeref:typename:void
Album	src/screens/media_library.cpp	/^	typedef MediaLibrary::Album Album;$/;"	t	class:__anon50035b830111::SortAlbumEntries	typeref:typename:MediaLibrary::Album	file:
Album	src/screens/media_library.h	/^		Album(std::string tag_, std::string album_, std::string date_, time_t mtime_)$/;"	f	struct:MediaLibrary::Album
Album	src/screens/media_library.h	/^	struct Album$/;"	s	struct:MediaLibrary
AlbumEntry	src/screens/media_library.cpp	/^typedef MediaLibrary::AlbumEntry AlbumEntry;$/;"	t	namespace:__anon50035b830111	typeref:typename:MediaLibrary::AlbumEntry	file:
AlbumEntry	src/screens/media_library.h	/^		AlbumEntry() : m_all_tracks_entry(false), m_album("", "", "", 0) { }$/;"	f	struct:MediaLibrary::AlbumEntry
AlbumEntry	src/screens/media_library.h	/^		explicit AlbumEntry(Album album_) : m_all_tracks_entry(false), m_album(album_) { }$/;"	f	struct:MediaLibrary::AlbumEntry
AlbumEntry	src/screens/media_library.h	/^	struct AlbumEntry$/;"	s	struct:MediaLibrary
AlbumEntryMatcher	src/screens/media_library.cpp	/^bool AlbumEntryMatcher(const Regex::Regex &rx, const NC::Menu<AlbumEntry>::Item &item, bool filt/;"	f	namespace:__anon50035b830711	typeref:typename:bool
AlbumToString	src/screens/media_library.cpp	/^std::string AlbumToString(const AlbumEntry &ae)$/;"	f	namespace:__anon50035b830711	typeref:typename:std::string
Albums	src/screens/media_library.h	/^	NC::Menu<AlbumEntry> Albums;$/;"	m	struct:MediaLibrary	typeref:typename:NC::Menu<AlbumEntry>
All	src/format.h	/^const unsigned All = Color | Format | OutputSwitch | Tag;$/;"	v	namespace:Format::Flags	typeref:typename:const unsigned
AltCharset	src/curses/window.h	/^	AltCharset, NoAltCharset$/;"	e	enum:NC::Format
Alternative	src/enums.h	/^enum class Design { Classic, Alternative };$/;"	e	enum:Design
AlwaysAdd	src/enums.h	/^enum class SpaceAddMode { AddRemove, AlwaysAdd };$/;"	e	enum:SpaceAddMode
ApplyFilter	src/actions.h	/^	ApplyFilter(): BaseAction(Type::ApplyFilter, "apply_filter") { }$/;"	f	struct:Actions::ApplyFilter
ApplyFilter	src/actions.h	/^	ApplyFilter,$/;"	e	enum:Actions::Type
ApplyFilter	src/actions.h	/^struct ApplyFilter: public BaseAction$/;"	s	namespace:Actions
ApplyFilterImmediately	src/statusbar.h	/^	ApplyFilterImmediately(Filterable *w)$/;"	f	struct:Statusbar::Helpers::ApplyFilterImmediately
ApplyFilterImmediately	src/statusbar.h	/^struct ApplyFilterImmediately$/;"	s	namespace:Statusbar::Helpers
Arguments	src/lastfm_service.h	/^	typedef std::map<std::string, std::string> Arguments;$/;"	t	struct:LastFm::Service	typeref:typename:std::map<std::string,std::string>
ArtistInfo	src/lastfm_service.h	/^	ArtistInfo(std::string artist, std::string lang)$/;"	f	struct:LastFm::ArtistInfo
ArtistInfo	src/lastfm_service.h	/^struct ArtistInfo : public Service$/;"	s	namespace:LastFm
AvailableActions	src/actions.cpp	/^std::vector<std::shared_ptr<Actions::BaseAction>> AvailableActions;$/;"	v	namespace:__anon343209de0111	typeref:typename:std::vector<std::shared_ptr<Actions::BaseAction>>
AzLyricsFetcher	src/lyrics_fetcher.h	/^struct AzLyricsFetcher : public GoogleLyricsFetcher$/;"	s
BOOST_CPPFLAGS	src/Makefile.in	/^BOOST_CPPFLAGS = @BOOST_CPPFLAGS@$/;"	m
BOOST_DATE_TIME_LDFLAGS	src/Makefile.in	/^BOOST_DATE_TIME_LDFLAGS = @BOOST_DATE_TIME_LDFLAGS@$/;"	m
BOOST_DATE_TIME_LDPATH	src/Makefile.in	/^BOOST_DATE_TIME_LDPATH = @BOOST_DATE_TIME_LDPATH@$/;"	m
BOOST_DATE_TIME_LIBS	src/Makefile.in	/^BOOST_DATE_TIME_LIBS = @BOOST_DATE_TIME_LIBS@$/;"	m
BOOST_FILESYSTEM_LDFLAGS	src/Makefile.in	/^BOOST_FILESYSTEM_LDFLAGS = @BOOST_FILESYSTEM_LDFLAGS@$/;"	m
BOOST_FILESYSTEM_LDPATH	src/Makefile.in	/^BOOST_FILESYSTEM_LDPATH = @BOOST_FILESYSTEM_LDPATH@$/;"	m
BOOST_FILESYSTEM_LIBS	src/Makefile.in	/^BOOST_FILESYSTEM_LIBS = @BOOST_FILESYSTEM_LIBS@$/;"	m
BOOST_LDPATH	src/Makefile.in	/^BOOST_LDPATH = @BOOST_LDPATH@$/;"	m
BOOST_LOCALE_LDFLAGS	src/Makefile.in	/^BOOST_LOCALE_LDFLAGS = @BOOST_LOCALE_LDFLAGS@$/;"	m
BOOST_LOCALE_LDPATH	src/Makefile.in	/^BOOST_LOCALE_LDPATH = @BOOST_LOCALE_LDPATH@$/;"	m
BOOST_LOCALE_LIBS	src/Makefile.in	/^BOOST_LOCALE_LIBS = @BOOST_LOCALE_LIBS@$/;"	m
BOOST_PROGRAM_OPTIONS_LDFLAGS	src/Makefile.in	/^BOOST_PROGRAM_OPTIONS_LDFLAGS = @BOOST_PROGRAM_OPTIONS_LDFLAGS@$/;"	m
BOOST_PROGRAM_OPTIONS_LDPATH	src/Makefile.in	/^BOOST_PROGRAM_OPTIONS_LDPATH = @BOOST_PROGRAM_OPTIONS_LDPATH@$/;"	m
BOOST_PROGRAM_OPTIONS_LIBS	src/Makefile.in	/^BOOST_PROGRAM_OPTIONS_LIBS = @BOOST_PROGRAM_OPTIONS_LIBS@$/;"	m
BOOST_REGEX_LDFLAGS	src/Makefile.in	/^BOOST_REGEX_LDFLAGS = @BOOST_REGEX_LDFLAGS@$/;"	m
BOOST_REGEX_LDPATH	src/Makefile.in	/^BOOST_REGEX_LDPATH = @BOOST_REGEX_LDPATH@$/;"	m
BOOST_REGEX_LIBS	src/Makefile.in	/^BOOST_REGEX_LIBS = @BOOST_REGEX_LIBS@$/;"	m
BOOST_ROOT	src/Makefile.in	/^BOOST_ROOT = @BOOST_ROOT@$/;"	m
BOOST_SYSTEM_LDFLAGS	src/Makefile.in	/^BOOST_SYSTEM_LDFLAGS = @BOOST_SYSTEM_LDFLAGS@$/;"	m
BOOST_SYSTEM_LDPATH	src/Makefile.in	/^BOOST_SYSTEM_LDPATH = @BOOST_SYSTEM_LDPATH@$/;"	m
BOOST_SYSTEM_LIBS	src/Makefile.in	/^BOOST_SYSTEM_LIBS = @BOOST_SYSTEM_LIBS@$/;"	m
BOOST_THREAD_LDFLAGS	src/Makefile.in	/^BOOST_THREAD_LDFLAGS = @BOOST_THREAD_LDFLAGS@$/;"	m
BOOST_THREAD_LDPATH	src/Makefile.in	/^BOOST_THREAD_LDPATH = @BOOST_THREAD_LDPATH@$/;"	m
BOOST_THREAD_LIBS	src/Makefile.in	/^BOOST_THREAD_LIBS = @BOOST_THREAD_LIBS@$/;"	m
BUTTON5_PRESSED	src/curses/window.h	/^# define BUTTON5_PRESSED /;"	d
Backspace	src/curses/window.h	/^const Type Backspace = 127;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Backward	src/enums.h	/^enum class SearchDirection { Backward, Forward };$/;"	e	enum:SearchDirection
Base	src/format.h	/^	typedef std::vector<Expression<CharT>> Base;$/;"	t	struct:Format::List	typeref:typename:std::vector<Expression<CharT>>
BaseAction	src/actions.h	/^	BaseAction(Type type_, const char *name_): m_name(name_), m_type(type_) { }$/;"	f	struct:Actions::BaseAction
BaseAction	src/actions.h	/^struct BaseAction$/;"	s	namespace:Actions
BaseScreen	src/screens/screen.h	/^	BaseScreen() : hasToBeResized(false) { }$/;"	f	struct:BaseScreen
BaseScreen	src/screens/screen.h	/^struct BaseScreen$/;"	s
BasicBuffer	src/curses/strbuffer.h	/^template <typename CharT> class BasicBuffer$/;"	c	namespace:NC
Binding	src/bindings.h	/^	Binding(Actions::Type at)$/;"	f	struct:Binding
Binding	src/bindings.h	/^	Binding(ArgT &&actions_)$/;"	f	struct:Binding
Binding	src/bindings.h	/^struct Binding$/;"	s
BindingIterator	src/bindings.h	/^	typedef BindingsMap::value_type::second_type::iterator BindingIterator;$/;"	t	class:BindingsConfiguration	typeref:typename:BindingsMap::value_type::second_type::iterator
BindingIteratorPair	src/bindings.h	/^	typedef std::pair<BindingIterator, BindingIterator> BindingIteratorPair;$/;"	t	class:BindingsConfiguration	typeref:typename:std::pair<BindingIterator,BindingIterator>
Bindings	src/bindings.cpp	/^BindingsConfiguration Bindings;$/;"	v	typeref:typename:BindingsConfiguration
BindingsConfiguration	src/bindings.h	/^class BindingsConfiguration$/;"	c
BindingsMap	src/bindings.h	/^	typedef std::unordered_map<NC::Key::Type, std::vector<Binding>> BindingsMap;$/;"	t	class:BindingsConfiguration	typeref:typename:std::unordered_map<NC::Key::Type,std::vector<Binding>>
Black	src/curses/window.h	/^	static Color Black;$/;"	m	struct:NC::Color	typeref:typename:Color
Blue	src/curses/window.h	/^	static Color Blue;$/;"	m	struct:NC::Color	typeref:typename:Color
Bold	src/curses/window.h	/^	Bold, NoBold,$/;"	e	enum:NC::Format
Border	src/curses/window.h	/^typedef boost::optional<Color> Border;$/;"	t	namespace:NC	typeref:typename:boost::optional<Color>
Browser	src/screens/browser.cpp	/^Browser::Browser()$/;"	f	class:Browser
Browser	src/screens/browser.h	/^struct Browser: Screen<BrowserWindow>, Filterable, HasSongs, Searchable, Tabbable$/;"	s
Browser	src/screens/screen_type.h	/^	Browser,$/;"	e	enum:ScreenType
BrowserWindow	src/screens/browser.h	/^	BrowserWindow() { }$/;"	f	struct:BrowserWindow
BrowserWindow	src/screens/browser.h	/^	BrowserWindow(NC::Menu<MPD::Item> &&base)$/;"	f	struct:BrowserWindow
BrowserWindow	src/screens/browser.h	/^struct BrowserWindow: NC::Menu<MPD::Item>, SongList$/;"	s
Buffer	src/curses/strbuffer.h	/^typedef BasicBuffer<char> Buffer;$/;"	t	namespace:NC	typeref:typename:BasicBuffer<char>
CC	src/Makefile.in	/^CC = @CC@$/;"	m
CCDEPMODE	src/Makefile.in	/^CCDEPMODE = @CCDEPMODE@$/;"	m
CFLAGS	src/Makefile.in	/^CFLAGS = @CFLAGS@$/;"	m
CONFIG_CLEAN_FILES	src/Makefile.in	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	src/Makefile.in	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	src/Makefile.in	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	src/Makefile.in	/^CPP = @CPP@$/;"	m
CPPFLAGS	src/Makefile.in	/^CPPFLAGS = @CPPFLAGS@$/;"	m
CTAGS	src/Makefile.in	/^CTAGS = ctags$/;"	m
CTAGS	src/Makefile.in	/^CTAGS: ctags$/;"	t
CXX	src/Makefile.in	/^CXX = @CXX@$/;"	m
CXXCOMPILE	src/Makefile.in	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	src/Makefile.in	/^CXXCPP = @CXXCPP@$/;"	m
CXXDEPMODE	src/Makefile.in	/^CXXDEPMODE = @CXXDEPMODE@$/;"	m
CXXFLAGS	src/Makefile.in	/^CXXFLAGS = @CXXFLAGS@$/;"	m
CXXLD	src/Makefile.in	/^CXXLD = $(CXX)$/;"	m
CXXLINK	src/Makefile.in	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	src/Makefile.in	/^CYGPATH_W = @CYGPATH_W@$/;"	m
CapitalizeFirstLetters	src/screens/tag_editor.cpp	/^std::string CapitalizeFirstLetters(const std::string &s)$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:std::string
CapitalizeFirstLetters	src/screens/tag_editor.cpp	/^void CapitalizeFirstLetters(MPD::MutableSong &s)$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:void
ChangeBrowseMode	src/actions.h	/^	ChangeBrowseMode(): BaseAction(Type::ChangeBrowseMode, "change_browse_mode") { }$/;"	f	struct:Actions::ChangeBrowseMode
ChangeBrowseMode	src/actions.h	/^	ChangeBrowseMode,$/;"	e	enum:Actions::Type
ChangeBrowseMode	src/actions.h	/^struct ChangeBrowseMode: BaseAction$/;"	s	namespace:Actions
ChangeVolume	src/mpdpp.cpp	/^void Connection::ChangeVolume(int change)$/;"	f	class:MPD::Connection	typeref:typename:void
Changes	src/status.h	/^namespace Changes {$/;"	n	namespace:Status
Charset	src/charset.cpp	/^namespace Charset {$/;"	n	file:
Charset	src/charset.h	/^namespace Charset {$/;"	n
Classic	src/enums.h	/^enum class Design { Classic, Alternative };$/;"	e	enum:Design
Classic	src/enums.h	/^enum class DisplayMode { Classic, Columns };$/;"	e	enum:DisplayMode
ClearMainPlaylist	src/actions.h	/^	ClearMainPlaylist(): BaseAction(Type::ClearMainPlaylist, "clear_main_playlist") { }$/;"	f	struct:Actions::ClearMainPlaylist
ClearMainPlaylist	src/actions.h	/^	ClearMainPlaylist,$/;"	e	enum:Actions::Type
ClearMainPlaylist	src/actions.h	/^struct ClearMainPlaylist: BaseAction$/;"	s	namespace:Actions
ClearMainPlaylist	src/mpdpp.cpp	/^void Connection::ClearMainPlaylist()$/;"	f	class:MPD::Connection	typeref:typename:void
ClearPlaylist	src/actions.h	/^	ClearPlaylist(): BaseAction(Type::ClearPlaylist, "clear_playlist") { }$/;"	f	struct:Actions::ClearPlaylist
ClearPlaylist	src/actions.h	/^	ClearPlaylist,$/;"	e	enum:Actions::Type
ClearPlaylist	src/actions.h	/^struct ClearPlaylist: BaseAction$/;"	s	namespace:Actions
ClearPlaylist	src/mpdpp.cpp	/^void Connection::ClearPlaylist(const std::string &playlist)$/;"	f	class:MPD::Connection	typeref:typename:void
ClearToEOL	src/curses/window.h	/^enum class TermManip { ClearToEOL };$/;"	e	enum:NC::TermManip
ClientError	src/mpdpp.h	/^	ClientError(mpd_error code_, std::string msg, bool clearable_)$/;"	f	struct:MPD::ClientError
ClientError	src/mpdpp.h	/^struct ClientError: public std::exception$/;"	s	namespace:MPD
Clock	src/screens/clock.cpp	/^Clock::Clock()$/;"	f	class:Clock
Clock	src/screens/clock.h	/^struct Clock: Screen<NC::Window>, Tabbable$/;"	s
Clock	src/screens/screen_type.h	/^	Clock,$/;"	e	enum:ScreenType
Color	src/curses/window.h	/^	Color() : m_impl(0, 0, true, false) { }$/;"	f	struct:NC::Color
Color	src/curses/window.h	/^	Color(short foreground_value, short background_value,$/;"	f	struct:NC::Color
Color	src/curses/window.h	/^struct Color$/;"	s	namespace:NC
Color	src/format.h	/^const unsigned Color = 1;$/;"	v	namespace:Format::Flags	typeref:typename:const unsigned
Column	src/settings.h	/^	Column() : stretch_limit(-1), right_alignment(0), display_empty_tag(1) { }$/;"	f	struct:Column
Column	src/settings.h	/^struct Column$/;"	s
Columns	src/display.cpp	/^std::string Display::Columns(size_t list_width)$/;"	f	class:Display	typeref:typename:std::string
Columns	src/enums.h	/^enum class DisplayMode { Classic, Columns };$/;"	e	enum:DisplayMode
Command	src/bindings.cpp	/^	enum class InProgress { None, Command, Key };$/;"	e	enum:BindingsConfiguration::read::InProgress	file:
Command	src/bindings.h	/^	Command(ArgT &&binding_, bool immediate_)$/;"	f	struct:Command
Command	src/bindings.h	/^struct Command$/;"	s
CommandsSet	src/bindings.h	/^	typedef std::unordered_map<std::string, Command> CommandsSet;$/;"	t	class:BindingsConfiguration	typeref:typename:std::unordered_map<std::string,Command>
CommitCommandsList	src/mpdpp.cpp	/^void Connection::CommitCommandsList()$/;"	f	class:MPD::Connection	typeref:typename:void
CommitSearchSongs	src/mpdpp.cpp	/^SongIterator Connection::CommitSearchSongs()$/;"	f	class:MPD::Connection	typeref:typename:SongIterator
Component	src/screens/sel_items_adder.h	/^	typedef typename std::remove_pointer<WindowType>::type Component;$/;"	t	struct:SelectedItemsAdder	typeref:typename:std::remove_pointer<WindowType>::type
Config	src/settings.cpp	/^Configuration Config;$/;"	v	typeref:typename:Configuration
Configuration	src/settings.h	/^	Configuration()$/;"	f	struct:Configuration
Configuration	src/settings.h	/^struct Configuration$/;"	s
Connect	src/mpdpp.cpp	/^void Connection::Connect()$/;"	f	class:MPD::Connection	typeref:typename:void
Connected	src/mpdpp.cpp	/^bool Connection::Connected() const$/;"	f	class:MPD::Connection	typeref:typename:bool
Connection	src/mpdpp.cpp	/^Connection::Connection() : m_connection(nullptr),$/;"	f	class:MPD::Connection
Connection	src/mpdpp.h	/^struct Connection$/;"	s	namespace:MPD
ConnectionDeleter	src/mpdpp.h	/^	struct ConnectionDeleter {$/;"	s	struct:MPD::Connection
Const	src/song_list.h	/^	enum class State { Undefined, Const, Mutable };$/;"	e	enum:SongProperties::State
Const	src/utility/const.h	/^enum class Const { Yes, No };$/;"	g
ConstBindingIterator	src/bindings.h	/^	typedef BindingsMap::value_type::second_type::const_iterator ConstBindingIterator;$/;"	t	class:BindingsConfiguration	typeref:typename:BindingsMap::value_type::second_type::const_iterator
ConstIterator	src/curses/menu.h	/^	typedef PropertiesIterator<const Properties> ConstIterator;$/;"	t	struct:NC::List	typeref:typename:PropertiesIterator<const Properties>
ConstIterator	src/curses/menu.h	/^	typedef typename std::vector<Item>::const_iterator ConstIterator;$/;"	t	struct:NC::Menu	typeref:typename:std::vector<Item>::const_iterator
ConstPropertiesIterator	src/curses/menu.h	/^		ConstIterator> ConstPropertiesIterator;$/;"	t	struct:NC::Menu	typeref:typename:boost::transform_iterator<typename Item::template ExtractProperties<Const::Yes>,ConstIterator>
ConstReverseIterator	src/curses/menu.h	/^	typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;$/;"	t	struct:NC::Menu	typeref:typename:std::reverse_iterator<ConstIterator>
ConstReverseValueIterator	src/curses/menu.h	/^	typedef std::reverse_iterator<ConstValueIterator> ConstReverseValueIterator;$/;"	t	struct:NC::Menu	typeref:typename:std::reverse_iterator<ConstValueIterator>
ConstSongIterator	src/song_list.h	/^typedef SongIteratorT<Const::Yes> ConstSongIterator;$/;"	t	typeref:typename:SongIteratorT<Const::Yes>
ConstValueIterator	src/curses/menu.h	/^		ConstIterator> ConstValueIterator;$/;"	t	struct:NC::Menu	typeref:typename:boost::transform_iterator<typename Item::template ExtractValue<Const::Yes>,ConstIterator>
ConstWindowReference	src/screens/screen.h	/^	>::type ConstWindowReference;$/;"	t	struct:Screen	typeref:typename:std::add_lvalue_reference<typename std::add_const<WindowType>::type>::type
ConstraintsNames	src/screens/search_engine.cpp	/^const char *SearchEngine::ConstraintsNames[] =$/;"	m	class:SearchEngine	typeref:typename:const char * []
ConstraintsNames	src/screens/search_engine.h	/^	static const char *ConstraintsNames[];$/;"	m	struct:SearchEngine	typeref:typename:const char * []
ConstraintsNumber	src/screens/search_engine.h	/^	static const size_t ConstraintsNumber = 11;$/;"	m	struct:SearchEngine	typeref:typename:const size_t
ConsumerState	src/screens/lyrics.h	/^		ConsumerState()$/;"	f	struct:Lyrics::ConsumerState
ConsumerState	src/screens/lyrics.h	/^	struct ConsumerState$/;"	s	struct:Lyrics
Content	src/screens/playlist_editor.h	/^	SongMenu Content;$/;"	m	struct:PlaylistEditor	typeref:typename:SongMenu
ConversionError	src/utility/conversion.h	/^	ConversionError(std::string source) : m_source_value(source) { }$/;"	f	struct:ConversionError
ConversionError	src/utility/conversion.h	/^struct ConversionError$/;"	s
CropMainPlaylist	src/actions.h	/^	CropMainPlaylist(): BaseAction(Type::CropMainPlaylist, "crop_main_playlist") { }$/;"	f	struct:Actions::CropMainPlaylist
CropMainPlaylist	src/actions.h	/^	CropMainPlaylist,$/;"	e	enum:Actions::Type
CropMainPlaylist	src/actions.h	/^struct CropMainPlaylist: BaseAction$/;"	s	namespace:Actions
CropPlaylist	src/actions.h	/^	CropPlaylist(): BaseAction(Type::CropPlaylist, "crop_playlist") { }$/;"	f	struct:Actions::CropPlaylist
CropPlaylist	src/actions.h	/^	CropPlaylist,$/;"	e	enum:Actions::Type
CropPlaylist	src/actions.h	/^struct CropPlaylist: BaseAction$/;"	s	namespace:Actions
Ctrl_A	src/curses/window.h	/^const Type Ctrl_A            = 1;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_B	src/curses/window.h	/^const Type Ctrl_B            = 2;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_Backslash	src/curses/window.h	/^const Type Ctrl_Backslash    = 28;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_C	src/curses/window.h	/^const Type Ctrl_C            = 3;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_Caret	src/curses/window.h	/^const Type Ctrl_Caret        = 30;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_D	src/curses/window.h	/^const Type Ctrl_D            = 4;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_E	src/curses/window.h	/^const Type Ctrl_E            = 5;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_F	src/curses/window.h	/^const Type Ctrl_F            = 6;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_G	src/curses/window.h	/^const Type Ctrl_G            = 7;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_H	src/curses/window.h	/^const Type Ctrl_H            = 8;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_I	src/curses/window.h	/^const Type Ctrl_I            = 9;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_J	src/curses/window.h	/^const Type Ctrl_J            = 10;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_K	src/curses/window.h	/^const Type Ctrl_K            = 11;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_L	src/curses/window.h	/^const Type Ctrl_L            = 12;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_LeftBracket	src/curses/window.h	/^const Type Ctrl_LeftBracket  = 27;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_M	src/curses/window.h	/^const Type Ctrl_M            = 13;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_N	src/curses/window.h	/^const Type Ctrl_N            = 14;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_O	src/curses/window.h	/^const Type Ctrl_O            = 15;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_P	src/curses/window.h	/^const Type Ctrl_P            = 16;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_Q	src/curses/window.h	/^const Type Ctrl_Q            = 17;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_R	src/curses/window.h	/^const Type Ctrl_R            = 18;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_RightBracket	src/curses/window.h	/^const Type Ctrl_RightBracket = 29;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_S	src/curses/window.h	/^const Type Ctrl_S            = 19;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_T	src/curses/window.h	/^const Type Ctrl_T            = 20;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_U	src/curses/window.h	/^const Type Ctrl_U            = 21;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_Underscore	src/curses/window.h	/^const Type Ctrl_Underscore   = 31;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_V	src/curses/window.h	/^const Type Ctrl_V            = 22;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_W	src/curses/window.h	/^const Type Ctrl_W            = 23;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_X	src/curses/window.h	/^const Type Ctrl_X            = 24;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_Y	src/curses/window.h	/^const Type Ctrl_Y            = 25;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Ctrl_Z	src/curses/window.h	/^const Type Ctrl_Z            = 26;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Curl	src/curl_handle.h	/^namespace Curl$/;"	n
CurrentDir	src/screens/tag_editor.h	/^	const std::string &CurrentDir() { return itsBrowsedDir; }$/;"	f	struct:TagEditor	typeref:typename:const std::string &
CustomFormat	src/enums.h	/^enum class SortMode { Name, ModificationTime, CustomFormat, NoOp };$/;"	e	enum:SortMode
Cyan	src/curses/window.h	/^	static Color Cyan;$/;"	m	struct:NC::Color	typeref:typename:Color
DEFAULT_INCLUDES	src/Makefile.in	/^DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)$/;"	m
DEFS	src/Makefile.in	/^DEFS = @DEFS@$/;"	m
DEPDIR	src/Makefile.in	/^DEPDIR = @DEPDIR@$/;"	m
DISTCHECK_CONFIGURE_FLAGS	src/Makefile.in	/^DISTCHECK_CONFIGURE_FLAGS = @DISTCHECK_CONFIGURE_FLAGS@$/;"	m
DISTFILES	src/Makefile.in	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	src/Makefile.in	/^DIST_COMMON = $(srcdir)\/Makefile.am $(noinst_HEADERS) \\$/;"	m
DIST_SOURCES	src/Makefile.in	/^DIST_SOURCES = $(ncmpcpp_SOURCES)$/;"	m
DLLTOOL	src/Makefile.in	/^DLLTOOL = @DLLTOOL@$/;"	m
DSYMUTIL	src/Makefile.in	/^DSYMUTIL = @DSYMUTIL@$/;"	m
DUMPBIN	src/Makefile.in	/^DUMPBIN = @DUMPBIN@$/;"	m
Date_	src/screens/media_library.cpp	/^std::string Date_(std::string date)$/;"	f	namespace:__anon50035b830111	typeref:typename:std::string
Default	src/curses/window.cpp	/^Color Color::Default(0, 0, true, false);$/;"	m	class:NC::Color	typeref:typename:Color
Default	src/curses/window.h	/^	static Color Default;$/;"	m	struct:NC::Color	typeref:typename:Color
Delete	src/curses/window.h	/^const Type Delete   = Special | 257;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Delete	src/mpdpp.cpp	/^void Connection::Delete(unsigned pos)$/;"	f	class:MPD::Connection	typeref:typename:void
DeleteBrowserItems	src/actions.h	/^	DeleteBrowserItems(): BaseAction(Type::DeleteBrowserItems, "delete_browser_items") { }$/;"	f	struct:Actions::DeleteBrowserItems
DeleteBrowserItems	src/actions.h	/^	DeleteBrowserItems,$/;"	e	enum:Actions::Type
DeleteBrowserItems	src/actions.h	/^struct DeleteBrowserItems: BaseAction$/;"	s	namespace:Actions
DeletePlaylist	src/mpdpp.cpp	/^void Connection::DeletePlaylist(const std::string &name)$/;"	f	class:MPD::Connection	typeref:typename:void
DeletePlaylistItems	src/actions.h	/^	DeletePlaylistItems(): BaseAction(Type::DeletePlaylistItems, "delete_playlist_items") { }$/;"	f	struct:Actions::DeletePlaylistItems
DeletePlaylistItems	src/actions.h	/^	DeletePlaylistItems,$/;"	e	enum:Actions::Type
DeletePlaylistItems	src/actions.h	/^struct DeletePlaylistItems: BaseAction$/;"	s	namespace:Actions
DeleteStoredPlaylist	src/actions.h	/^	DeleteStoredPlaylist(): BaseAction(Type::DeleteStoredPlaylist, "delete_stored_playlist") { }$/;"	f	struct:Actions::DeleteStoredPlaylist
DeleteStoredPlaylist	src/actions.h	/^	DeleteStoredPlaylist,$/;"	e	enum:Actions::Type
DeleteStoredPlaylist	src/actions.h	/^struct DeleteStoredPlaylist: BaseAction$/;"	s	namespace:Actions
Design	src/enums.h	/^enum class Design { Classic, Alternative };$/;"	g
DirEntryMatcher	src/screens/tag_editor.cpp	/^bool DirEntryMatcher(const Regex::Regex &rx, const std::pair<std::string, std::string> &dir, boo/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:bool
Directory	src/mpdpp.h	/^	Directory()$/;"	f	struct:MPD::Directory
Directory	src/mpdpp.h	/^	Directory(const mpd_directory *directory)$/;"	f	struct:MPD::Directory
Directory	src/mpdpp.h	/^	Directory(std::string path_, time_t last_modified = 0)$/;"	f	struct:MPD::Directory
Directory	src/mpdpp.h	/^	enum class Type { Directory, Song, Playlist };$/;"	e	enum:MPD::Item::Type
Directory	src/mpdpp.h	/^struct Directory$/;"	s	namespace:MPD
DirectoryIterator	src/mpdpp.h	/^typedef Iterator<Directory> DirectoryIterator;$/;"	t	namespace:MPD	typeref:typename:Iterator<Directory>
Dirs	src/screens/tag_editor.h	/^	NC::Menu< std::pair<std::string, std::string> > *Dirs;$/;"	m	struct:TagEditor	typeref:typename:NC::Menu<std::pair<std::string,std::string>> *
DisableOutput	src/mpdpp.cpp	/^void Connection::DisableOutput(int id)$/;"	f	class:MPD::Connection	typeref:typename:void
Disconnect	src/mpdpp.cpp	/^void Connection::Disconnect()$/;"	f	class:MPD::Connection	typeref:typename:void
Display	src/display.h	/^namespace Display {$/;"	n
DisplayComponent	src/screens/sel_items_adder.cpp	/^void DisplayComponent(SelectedItemsAdder::Component &menu)$/;"	f	namespace:__anon024c12b30111	typeref:typename:void
DisplayMode	src/enums.h	/^enum class DisplayMode { Classic, Columns };$/;"	g
Down	src/curses/window.h	/^const Type Down     = Special | 263;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Down	src/curses/window.h	/^enum class Scroll { Up, Down, PageUp, PageDown, Home, End };$/;"	e	enum:NC::Scroll
DrawFrequencySpectrum	src/screens/visualizer.cpp	/^void Visualizer::DrawFrequencySpectrum(int16_t *buf, ssize_t samples, size_t y_offset, size_t he/;"	f	class:Visualizer	typeref:typename:void
DrawFrequencySpectrumStereo	src/screens/visualizer.cpp	/^void Visualizer::DrawFrequencySpectrumStereo(int16_t *buf_left, int16_t *buf_right, ssize_t samp/;"	f	class:Visualizer	typeref:typename:void
DrawSoundEllipse	src/screens/visualizer.cpp	/^void Visualizer::DrawSoundEllipse(int16_t *buf, ssize_t samples, size_t, size_t height)$/;"	f	class:Visualizer	typeref:typename:void
DrawSoundEllipseStereo	src/screens/visualizer.cpp	/^void Visualizer::DrawSoundEllipseStereo(int16_t *buf_left, int16_t *buf_right, ssize_t samples, /;"	f	class:Visualizer	typeref:typename:void
DrawSoundWave	src/screens/visualizer.cpp	/^void Visualizer::DrawSoundWave(int16_t *buf, ssize_t samples, size_t y_offset, size_t height)$/;"	f	class:Visualizer	typeref:typename:void
DrawSoundWaveFill	src/screens/visualizer.cpp	/^void Visualizer::DrawSoundWaveFill(int16_t *buf, ssize_t samples, size_t y_offset, size_t height/;"	f	class:Visualizer	typeref:typename:void
DrawSoundWaveFillStereo	src/screens/visualizer.cpp	/^void Visualizer::DrawSoundWaveFillStereo(int16_t *buf_left, int16_t *buf_right, ssize_t samples,/;"	f	class:Visualizer	typeref:typename:void
DrawSoundWaveStereo	src/screens/visualizer.cpp	/^void Visualizer::DrawSoundWaveStereo(int16_t *buf_left, int16_t *buf_right, ssize_t samples, siz/;"	f	class:Visualizer	typeref:typename:void
Dummy	src/actions.h	/^	Dummy(): BaseAction(Type::Dummy, "dummy") { }$/;"	f	struct:Actions::Dummy
Dummy	src/actions.h	/^	Dummy,$/;"	e	enum:Actions::Type
Dummy	src/actions.h	/^struct Dummy: BaseAction$/;"	s	namespace:Actions
ECHO_C	src/Makefile.in	/^ECHO_C = @ECHO_C@$/;"	m
ECHO_N	src/Makefile.in	/^ECHO_N = @ECHO_N@$/;"	m
ECHO_T	src/Makefile.in	/^ECHO_T = @ECHO_T@$/;"	m
EGREP	src/Makefile.in	/^EGREP = @EGREP@$/;"	m
ETAGS	src/Makefile.in	/^ETAGS = etags$/;"	m
EXEEXT	src/Makefile.in	/^EXEEXT = @EXEEXT@$/;"	m
EditDirectoryName	src/actions.h	/^	EditDirectoryName(): BaseAction(Type::EditDirectoryName, "edit_directory_name") { }$/;"	f	struct:Actions::EditDirectoryName
EditDirectoryName	src/actions.h	/^	EditDirectoryName,$/;"	e	enum:Actions::Type
EditDirectoryName	src/actions.h	/^struct EditDirectoryName: BaseAction$/;"	s	namespace:Actions
EditLibraryAlbum	src/actions.h	/^	EditLibraryAlbum(): BaseAction(Type::EditLibraryAlbum, "edit_library_album") { }$/;"	f	struct:Actions::EditLibraryAlbum
EditLibraryAlbum	src/actions.h	/^	EditLibraryAlbum,$/;"	e	enum:Actions::Type
EditLibraryAlbum	src/actions.h	/^struct EditLibraryAlbum: BaseAction$/;"	s	namespace:Actions
EditLibraryTag	src/actions.h	/^	EditLibraryTag(): BaseAction(Type::EditLibraryTag, "edit_library_tag") { }$/;"	f	struct:Actions::EditLibraryTag
EditLibraryTag	src/actions.h	/^	EditLibraryTag,$/;"	e	enum:Actions::Type
EditLibraryTag	src/actions.h	/^struct EditLibraryTag: BaseAction$/;"	s	namespace:Actions
EditLyrics	src/actions.h	/^	EditLyrics(): BaseAction(Type::EditLyrics, "edit_lyrics") { }$/;"	f	struct:Actions::EditLyrics
EditLyrics	src/actions.h	/^	EditLyrics,$/;"	e	enum:Actions::Type
EditLyrics	src/actions.h	/^struct EditLyrics: BaseAction$/;"	s	namespace:Actions
EditPlaylistName	src/actions.h	/^	EditPlaylistName(): BaseAction(Type::EditPlaylistName, "edit_playlist_name") { }$/;"	f	struct:Actions::EditPlaylistName
EditPlaylistName	src/actions.h	/^	EditPlaylistName,$/;"	e	enum:Actions::Type
EditPlaylistName	src/actions.h	/^struct EditPlaylistName: BaseAction$/;"	s	namespace:Actions
EditSong	src/actions.h	/^	EditSong(): BaseAction(Type::EditSong, "edit_song") { }$/;"	f	struct:Actions::EditSong
EditSong	src/actions.h	/^	EditSong,$/;"	e	enum:Actions::Type
EditSong	src/actions.h	/^struct EditSong: BaseAction$/;"	s	namespace:Actions
EditedSongs	src/screens/tag_editor.h	/^	std::vector<MPD::MutableSong *> EditedSongs;$/;"	m	struct:TagEditor	typeref:typename:std::vector<MPD::MutableSong * >
Ellipse	src/enums.h	/^	Ellipse$/;"	e	enum:VisualizerType
Empty	src/format.h	/^enum class Result { Empty, Missing, Ok };$/;"	e	enum:Format::Result
EnableOutput	src/mpdpp.cpp	/^void Connection::EnableOutput(int id)$/;"	f	class:MPD::Connection	typeref:typename:void
End	src/curses/formatted_color.h	/^		explicit End(const FormattedColor &fc)$/;"	f	struct:NC::FormattedColor::End
End	src/curses/formatted_color.h	/^	struct End$/;"	s	struct:NC::FormattedColor
End	src/curses/window.cpp	/^Color Color::End(0, 0, false, true);$/;"	m	class:NC::Color	typeref:typename:Color
End	src/curses/window.h	/^	static Color End;$/;"	m	struct:NC::Color	typeref:typename:Color
End	src/curses/window.h	/^const Type End      = Special | 259;$/;"	v	namespace:NC::Key	typeref:typename:const Type
End	src/curses/window.h	/^enum class Scroll { Up, Down, PageUp, PageDown, Home, End };$/;"	e	enum:NC::Scroll
Enter	src/curses/window.h	/^const Type Enter  = 13;$/;"	v	namespace:NC::Key	typeref:typename:const Type
EnterDirectory	src/actions.h	/^	EnterDirectory(): BaseAction(Type::EnterDirectory, "enter_directory") { }$/;"	f	struct:Actions::EnterDirectory
EnterDirectory	src/actions.h	/^	EnterDirectory,$/;"	e	enum:Actions::Type
EnterDirectory	src/actions.h	/^struct EnterDirectory: BaseAction$/;"	s	namespace:Actions
Entry	src/screens/sel_items_adder.h	/^	typedef Component::Item::Type Entry;$/;"	t	struct:SelectedItemsAdder	typeref:typename:Component::Item::Type
Entry	src/screens/sort_playlist.cpp	/^	typedef WindowType::Item::Type Entry;$/;"	t	function:SortPlaylistDialog::SortPlaylistDialog	typeref:typename:WindowType::Item::Type	file:
EntryMatcher	src/screens/sel_items_adder.cpp	/^bool EntryMatcher(const Regex::Regex &rx, const NC::Menu<SelectedItemsAdder::Entry>::Item &item)$/;"	f	namespace:__anon024c12b30111	typeref:typename:bool
EoF	src/curses/window.h	/^const Type EoF      = Special | 279;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Escape	src/curses/window.h	/^const Type Escape = 27;$/;"	v	namespace:NC::Key	typeref:typename:const Type
ExecuteCommand	src/actions.h	/^	ExecuteCommand(): BaseAction(Type::ExecuteCommand, "execute_command") { }$/;"	f	struct:Actions::ExecuteCommand
ExecuteCommand	src/actions.h	/^	ExecuteCommand,$/;"	e	enum:Actions::Type
ExecuteCommand	src/actions.h	/^struct ExecuteCommand: BaseAction$/;"	s	namespace:Actions
ExitMainLoop	src/actions.cpp	/^bool ExitMainLoop = false;$/;"	v	namespace:Actions	typeref:typename:bool
Expression	src/format.h	/^using Expression = boost::variant<$/;"	t	namespace:Format
ExtractProperties	src/curses/menu.h	/^		struct ExtractProperties$/;"	s	struct:NC::Menu::Item
ExtractValue	src/curses/menu.h	/^		struct ExtractValue$/;"	s	struct:NC::Menu::Item
Extractor	src/helpers/song_iterator_maker.h	/^		> Extractor;$/;"	t	function:makeConstSongIterator	typeref:typename:SongPropertiesExtractor<typename ConstIteratorT::value_type::Type>
Extractor	src/helpers/song_iterator_maker.h	/^		> Extractor;$/;"	t	function:makeSongIterator	typeref:typename:SongPropertiesExtractor<typename IteratorT::value_type::Type>
F1	src/curses/window.h	/^const Type F1       = Special | 266;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F10	src/curses/window.h	/^const Type F10      = Special | 275;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F11	src/curses/window.h	/^const Type F11      = Special | 276;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F12	src/curses/window.h	/^const Type F12      = Special | 277;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F2	src/curses/window.h	/^const Type F2       = Special | 267;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F3	src/curses/window.h	/^const Type F3       = Special | 268;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F4	src/curses/window.h	/^const Type F4       = Special | 269;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F5	src/curses/window.h	/^const Type F5       = Special | 270;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F6	src/curses/window.h	/^const Type F6       = Special | 271;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F7	src/curses/window.h	/^const Type F7       = Special | 272;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F8	src/curses/window.h	/^const Type F8       = Special | 273;$/;"	v	namespace:NC::Key	typeref:typename:const Type
F9	src/curses/window.h	/^const Type F9       = Special | 274;$/;"	v	namespace:NC::Key	typeref:typename:const Type
FDCallbacks	src/curses/window.h	/^	typedef std::vector< std::pair<int, void (*)()> > FDCallbacks;$/;"	t	struct:NC::Window
FDCallbacksListEmpty	src/curses/window.cpp	/^bool Window::FDCallbacksListEmpty() const$/;"	f	class:NC::Window	typeref:typename:bool
FGREP	src/Makefile.in	/^FGREP = @FGREP@$/;"	m
FParser	src/screens/tag_editor.h	/^	NC::Menu<std::string> *FParser;$/;"	m	struct:TagEditor	typeref:typename:NC::Menu<std::string> *
FParserDialog	src/screens/tag_editor.h	/^	NC::Menu<std::string> *FParserDialog;$/;"	m	struct:TagEditor	typeref:typename:NC::Menu<std::string> *
FParserDialogHeight	src/screens/tag_editor.cpp	/^size_t FParserDialogHeight;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
FParserDialogWidth	src/screens/tag_editor.cpp	/^size_t FParserDialogWidth;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
FParserHeight	src/screens/tag_editor.cpp	/^size_t FParserHeight;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
FParserHelper	src/screens/tag_editor.h	/^	NC::Scrollpad *FParserHelper;$/;"	m	struct:TagEditor	typeref:typename:NC::Scrollpad *
FParserLegend	src/screens/tag_editor.h	/^	NC::Scrollpad *FParserLegend;$/;"	m	struct:TagEditor	typeref:typename:NC::Scrollpad *
FParserPreview	src/screens/tag_editor.h	/^	NC::Scrollpad *FParserPreview;$/;"	m	struct:TagEditor	typeref:typename:NC::Scrollpad *
FParserUsePreview	src/screens/tag_editor.h	/^	bool FParserUsePreview;$/;"	m	struct:TagEditor	typeref:typename:bool
FParserWidth	src/screens/tag_editor.cpp	/^size_t FParserWidth;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
FParserWidthOne	src/screens/tag_editor.cpp	/^size_t FParserWidthOne;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
FParserWidthTwo	src/screens/tag_editor.cpp	/^size_t FParserWidthTwo;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
FetchLyricsInBackground	src/actions.h	/^	FetchLyricsInBackground()$/;"	f	struct:Actions::FetchLyricsInBackground
FetchLyricsInBackground	src/actions.h	/^	FetchLyricsInBackground,$/;"	e	enum:Actions::Type
FetchLyricsInBackground	src/actions.h	/^struct FetchLyricsInBackground: BaseAction$/;"	s	namespace:Actions
Fetcher	src/mpdpp.h	/^		typedef std::function<bool(State &)> Fetcher;$/;"	t	struct:MPD::Iterator::State
Filter	src/regex_filter.h	/^	Filter() { }$/;"	f	struct:Regex::Filter
Filter	src/regex_filter.h	/^	Filter(const std::string &constraint_,$/;"	f	struct:Regex::Filter
Filter	src/regex_filter.h	/^struct Filter$/;"	s	namespace:Regex
FilterFunction	src/regex_filter.h	/^	typedef std::function<bool(const Regex &, const Item &)> FilterFunction;$/;"	t	struct:Regex::ItemFilter
FilterFunction	src/regex_filter.h	/^	typedef std::function<bool(const Regex &, const T &)> FilterFunction;$/;"	t	struct:Regex::Filter
FilterPredicate	src/curses/menu.h	/^	typedef std::function<bool(const Item &)> FilterPredicate;$/;"	t	struct:NC::Menu
Filterable	src/interfaces.h	/^struct Filterable$/;"	s
Find	src/actions.h	/^	Find(): BaseAction(Type::Find, "find") { }$/;"	f	struct:Actions::Find
Find	src/actions.h	/^	Find,$/;"	e	enum:Actions::Type
Find	src/actions.h	/^struct Find: BaseAction$/;"	s	namespace:Actions
FindImmediately	src/statusbar.h	/^	FindImmediately(Searchable *w, SearchDirection direction)$/;"	f	struct:Statusbar::Helpers::FindImmediately
FindImmediately	src/statusbar.h	/^struct FindImmediately$/;"	s	namespace:Statusbar::Helpers
FindItemBackward	src/actions.h	/^	FindItemBackward(): BaseAction(Type::FindItemBackward, "find_item_backward") { }$/;"	f	struct:Actions::FindItemBackward
FindItemBackward	src/actions.h	/^	FindItemBackward,$/;"	e	enum:Actions::Type
FindItemBackward	src/actions.h	/^struct FindItemBackward: BaseAction$/;"	s	namespace:Actions
FindItemForward	src/actions.h	/^	FindItemForward(): BaseAction(Type::FindItemForward, "find_item_forward") { }$/;"	f	struct:Actions::FindItemForward
FindItemForward	src/actions.h	/^	FindItemForward,$/;"	e	enum:Actions::Type
FindItemForward	src/actions.h	/^struct FindItemForward: BaseAction$/;"	s	namespace:Actions
FindOutputID	src/screens/visualizer.cpp	/^void Visualizer::FindOutputID()$/;"	f	class:Visualizer	typeref:typename:void
FirstOf	src/format.h	/^enum class ListType { Group, FirstOf, AST };$/;"	e	enum:Format::ListType
FirstOf	src/format.h	/^template <typename CharT> using FirstOf = List<ListType::FirstOf, CharT>;$/;"	t	namespace:Format	typeref:typename:List<ListType::FirstOf,CharT>
Flags	src/format.h	/^namespace Flags {$/;"	n	namespace:Format
FooterHeight	src/actions.cpp	/^size_t FooterHeight;$/;"	v	namespace:Actions	typeref:typename:size_t
FooterStartY	src/actions.cpp	/^size_t FooterStartY;$/;"	v	namespace:Actions	typeref:typename:size_t
Format	src/curses/window.h	/^enum class Format {$/;"	g	namespace:NC
Format	src/format.cpp	/^namespace Format {$/;"	n	file:
Format	src/format.h	/^const unsigned Format = 2;$/;"	v	namespace:Format::Flags	typeref:typename:const unsigned
Format	src/format.h	/^namespace Format {$/;"	n
Format	src/format_impl.h	/^namespace Format {$/;"	n
Formats	src/curses/formatted_color.h	/^	typedef std::vector<Format> Formats;$/;"	t	struct:NC::FormattedColor	typeref:typename:std::vector<Format>
FormattedColor	src/curses/formatted_color.cpp	/^NC::FormattedColor::FormattedColor(Color color_, Formats formats_)$/;"	f	class:NC::FormattedColor
FormattedColor	src/curses/formatted_color.h	/^	FormattedColor() { }$/;"	f	struct:NC::FormattedColor
FormattedColor	src/curses/formatted_color.h	/^struct FormattedColor$/;"	s	namespace:NC
Forward	src/enums.h	/^enum class SearchDirection { Backward, Forward };$/;"	e	enum:SearchDirection
Function	src/runnable_item.h	/^	typedef std::function<FunctionT> Function;$/;"	t	struct:RunnableItem	typeref:typename:std::function<FunctionT>
GNUC_NORETURN	src/gcc.h	/^# define GNUC_NORETURN /;"	d
GNUC_NORETURN	src/gcc.h	/^# define GNUC_NORETURN$/;"	d
GNUC_PRINTF	src/gcc.h	/^# define GNUC_PRINTF(/;"	d
GNUC_UNUSED	src/gcc.h	/^# define GNUC_UNUSED /;"	d
GNUC_UNUSED	src/gcc.h	/^# define GNUC_UNUSED$/;"	d
GREP	src/Makefile.in	/^GREP = @GREP@$/;"	m
GTAGS	src/Makefile.in	/^GTAGS:$/;"	t
GenerateFilename	src/screens/tag_editor.cpp	/^std::string GenerateFilename(const MPD::MutableSong &s, const std::string &pattern)$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:std::string
GeniusFetcher	src/lyrics_fetcher.h	/^struct GeniusFetcher : public GoogleLyricsFetcher$/;"	s
Get	src/screens/song_info.h	/^		MPD::Song::GetFunction Get;$/;"	m	struct:SongInfo::Metadata	typeref:typename:MPD::Song::GetFunction
GetCurrentSong	src/mpdpp.cpp	/^Song Connection::GetCurrentSong()$/;"	f	class:MPD::Connection	typeref:typename:Song
GetDirectories	src/mpdpp.cpp	/^DirectoryIterator Connection::GetDirectories(const std::string &directory)$/;"	f	class:MPD::Connection	typeref:typename:DirectoryIterator
GetDirectory	src/mpdpp.cpp	/^ItemIterator Connection::GetDirectory(const std::string &directory)$/;"	f	class:MPD::Connection	typeref:typename:ItemIterator
GetDirectoryRecursive	src/mpdpp.cpp	/^SongIterator Connection::GetDirectoryRecursive(const std::string &directory)$/;"	f	class:MPD::Connection	typeref:typename:SongIterator
GetFD	src/mpdpp.h	/^	int GetFD() const { return m_fd; }$/;"	f	struct:MPD::Connection	typeref:typename:int
GetFunction	src/song.h	/^	typedef std::string (Song::*GetFunction)(unsigned) const;$/;"	t	struct:MPD::Song	typeref:typename:std::string (Song::*)(unsigned)const
GetFuns	src/screens/media_library.cpp	/^	static const std::array<MPD::Song::GetFunction, 3> GetFuns;$/;"	m	struct:__anon50035b830111::SortSongs	typeref:typename:const std::array<MPD::Song::GetFunction,3>	file:
GetFuns	src/screens/media_library.cpp	/^const std::array<MPD::Song::GetFunction, 3> SortSongs::GetFuns = {{$/;"	m	class:__anon50035b830111::SortSongs	typeref:typename:const std::array<MPD::Song::GetFunction,3>
GetHostname	src/mpdpp.h	/^	const std::string &GetHostname() { return m_host; }$/;"	f	struct:MPD::Connection	typeref:typename:const std::string &
GetList	src/mpdpp.cpp	/^StringIterator Connection::GetList(mpd_tag_type type)$/;"	f	class:MPD::Connection	typeref:typename:StringIterator
GetOutputs	src/mpdpp.cpp	/^OutputIterator Connection::GetOutputs()$/;"	f	class:MPD::Connection	typeref:typename:OutputIterator
GetPatternList	src/screens/tag_editor.cpp	/^void GetPatternList()$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:void
GetPlaylistChanges	src/mpdpp.cpp	/^SongIterator Connection::GetPlaylistChanges(unsigned version)$/;"	f	class:MPD::Connection	typeref:typename:SongIterator
GetPlaylistContent	src/mpdpp.cpp	/^SongIterator Connection::GetPlaylistContent(const std::string &path)$/;"	f	class:MPD::Connection	typeref:typename:SongIterator
GetPlaylistContentNoInfo	src/mpdpp.cpp	/^SongIterator Connection::GetPlaylistContentNoInfo(const std::string &path)$/;"	f	class:MPD::Connection	typeref:typename:SongIterator
GetPlaylists	src/mpdpp.cpp	/^PlaylistIterator Connection::GetPlaylists()$/;"	f	class:MPD::Connection	typeref:typename:PlaylistIterator
GetPort	src/mpdpp.h	/^	int GetPort() { return m_port; }$/;"	f	struct:MPD::Connection	typeref:typename:int
GetReplayGainMode	src/mpdpp.cpp	/^std::string Connection::GetReplayGainMode()$/;"	f	class:MPD::Connection	typeref:typename:std::string
GetSong	src/mpdpp.cpp	/^Song Connection::GetSong(const std::string &path)$/;"	f	class:MPD::Connection	typeref:typename:Song
GetSongIndexInPlaylist	src/screens/playlist_editor.cpp	/^boost::optional<size_t> GetSongIndexInPlaylist(MPD::Playlist playlist, const MPD::Song &song)$/;"	f	namespace:__anonfb05ef270511	typeref:typename:boost::optional<size_t>
GetSongs	src/mpdpp.cpp	/^SongIterator Connection::GetSongs(const std::string &directory)$/;"	f	class:MPD::Connection	typeref:typename:SongIterator
GetSupportedExtensions	src/mpdpp.cpp	/^StringIterator Connection::GetSupportedExtensions()$/;"	f	class:MPD::Connection	typeref:typename:StringIterator
GetTagTypes	src/mpdpp.cpp	/^StringIterator Connection::GetTagTypes()$/;"	f	class:MPD::Connection	typeref:typename:StringIterator
GetURLHandlers	src/mpdpp.cpp	/^StringIterator Connection::GetURLHandlers()$/;"	f	class:MPD::Connection	typeref:typename:StringIterator
Global	src/global.cpp	/^namespace Global {$/;"	n	file:
Global	src/global.h	/^namespace Global {$/;"	n
GoogleLyricsFetcher	src/lyrics_fetcher.h	/^struct GoogleLyricsFetcher : public LyricsFetcher$/;"	s
Goto	src/curses/menu_impl.h	/^bool Menu<ItemT>::Goto(size_t y)$/;"	f	class:NC::Menu	typeref:typename:bool
Green	src/curses/window.h	/^	static Color Green;$/;"	m	struct:NC::Color	typeref:typename:Color
Group	src/format.h	/^enum class ListType { Group, FirstOf, AST };$/;"	e	enum:Format::ListType
Group	src/format.h	/^template <typename CharT> using Group = List<ListType::Group, CharT>;$/;"	t	namespace:Format	typeref:typename:List<ListType::Group,CharT>
HEADERS	src/Makefile.in	/^HEADERS = $(noinst_HEADERS)$/;"	m
HasActions	src/interfaces.h	/^struct HasActions$/;"	s
HasColumns	src/interfaces.h	/^struct HasColumns$/;"	s
HasSongs	src/interfaces.h	/^struct HasSongs$/;"	s
Hash	src/song.h	/^	struct Hash {$/;"	s	struct:MPD::Song
HeaderHeight	src/actions.cpp	/^size_t HeaderHeight;$/;"	v	namespace:Actions	typeref:typename:size_t
Height	src/screens/clock.cpp	/^const size_t Clock::Height = 8;$/;"	m	class:Clock	typeref:typename:const size_t
Height	src/screens/clock.h	/^	static const size_t Height;$/;"	m	struct:Clock	typeref:typename:const size_t
Help	src/screens/help.cpp	/^Help::Help()$/;"	f	class:Help
Help	src/screens/help.h	/^struct Help: Screen<NC::Scrollpad>, Tabbable$/;"	s
Help	src/screens/screen_type.h	/^	Help,$/;"	e	enum:ScreenType
Helpers	src/statusbar.h	/^namespace Helpers {$/;"	n	namespace:Statusbar
Home	src/curses/window.h	/^const Type Home     = Special | 258;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Home	src/curses/window.h	/^enum class Scroll { Up, Down, PageUp, PageDown, Home, End };$/;"	e	enum:NC::Scroll
ICU_CFLAGS	src/Makefile.in	/^ICU_CFLAGS = @ICU_CFLAGS@$/;"	m
ICU_LIBS	src/Makefile.in	/^ICU_LIBS = @ICU_LIBS@$/;"	m
ID	src/Makefile.in	/^ID: $(am__tagged_files)$/;"	t
INSTALL	src/Makefile.in	/^INSTALL = @INSTALL@$/;"	m
INSTALL_DATA	src/Makefile.in	/^INSTALL_DATA = @INSTALL_DATA@$/;"	m
INSTALL_HEADER	src/Makefile.in	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	src/Makefile.in	/^INSTALL_PROGRAM = @INSTALL_PROGRAM@$/;"	m
INSTALL_SCRIPT	src/Makefile.in	/^INSTALL_SCRIPT = @INSTALL_SCRIPT@$/;"	m
INSTALL_STRIP_PROGRAM	src/Makefile.in	/^INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@$/;"	m
ImmediatelyReturnOneOf	src/statusbar.h	/^	ImmediatelyReturnOneOf(std::vector<std::string> arg)$/;"	f	struct:Statusbar::Helpers::ImmediatelyReturnOneOf
ImmediatelyReturnOneOf	src/statusbar.h	/^struct ImmediatelyReturnOneOf$/;"	s	namespace:Statusbar::Helpers
InProgress	src/bindings.cpp	/^	enum class InProgress { None, Command, Key };$/;"	g	function:BindingsConfiguration::read	file:
Inactive	src/curses/menu.h	/^			Inactive   = (1 << 2),$/;"	e	enum:NC::List::Properties::Type
Insert	src/curses/window.h	/^const Type Insert   = Special | 256;$/;"	v	namespace:NC::Key	typeref:typename:const Type
InternetLyricsFetcher	src/lyrics_fetcher.h	/^struct InternetLyricsFetcher : public GoogleLyricsFetcher$/;"	s
IntoSetFunction	src/screens/tag_editor.cpp	/^MPD::MutableSong::SetFunction IntoSetFunction(char c)$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:MPD::MutableSong::SetFunction
Item	src/curses/menu.h	/^		Item()$/;"	f	struct:NC::Menu::Item
Item	src/curses/menu.h	/^		Item(ValueT &&value_, PropertiesT properties_)$/;"	f	struct:NC::Menu::Item
Item	src/curses/menu.h	/^	struct Item$/;"	s	struct:NC::Menu
Item	src/mpdpp.h	/^	Item(Directory directory_)$/;"	f	struct:MPD::Item
Item	src/mpdpp.h	/^	Item(Playlist playlist_)$/;"	f	struct:MPD::Item
Item	src/mpdpp.h	/^	Item(Song song_)$/;"	f	struct:MPD::Item
Item	src/mpdpp.h	/^	Item(mpd_entity *entity)$/;"	f	struct:MPD::Item
Item	src/mpdpp.h	/^struct Item$/;"	s	namespace:MPD
Item	src/regex_filter.h	/^	typedef typename NC::Menu<T>::Item Item;$/;"	t	struct:Regex::Filter	typeref:typename:NC::Menu<T>::Item
Item	src/regex_filter.h	/^	typedef typename NC::Menu<T>::Item Item;$/;"	t	struct:Regex::ItemFilter	typeref:typename:NC::Menu<T>::Item
Item	src/runnable_item.h	/^	typedef ItemT Item;$/;"	t	struct:RunnableItem	typeref:typename:ItemT
ItemDisplayer	src/curses/menu.h	/^	typedef std::function<void(Menu<ItemT> &)> ItemDisplayer;$/;"	t	struct:NC::Menu
ItemFilter	src/regex_filter.h	/^	ItemFilter() { }$/;"	f	struct:Regex::ItemFilter
ItemFilter	src/regex_filter.h	/^	ItemFilter(const std::string &constraint_,$/;"	f	struct:Regex::ItemFilter
ItemFilter	src/regex_filter.h	/^template <typename T> struct ItemFilter$/;"	s	namespace:Regex
ItemIterator	src/mpdpp.h	/^typedef Iterator<Item> ItemIterator;$/;"	t	namespace:MPD	typeref:typename:Iterator<Item>
Item_	src/curses/menu.h	/^				Item>::type Item_;$/;"	t	struct:NC::Menu::Item::ExtractProperties	typeref:typename:std::conditional<const_==Const::Yes,const Item,Item>::type
Item_	src/curses/menu.h	/^				Item>::type Item_;$/;"	t	struct:NC::Menu::Item::ExtractValue	typeref:typename:std::conditional<const_==Const::Yes,const Item,Item>::type
Items	src/display.cpp	/^void Display::Items(NC::Menu<MPD::Item> &menu, const SongList &list)$/;"	f	class:Display	typeref:typename:void
Iterator	src/curses/menu.h	/^	typedef PropertiesIterator<Properties> Iterator;$/;"	t	struct:NC::List	typeref:typename:PropertiesIterator<Properties>
Iterator	src/curses/menu.h	/^	typedef typename std::vector<Item>::iterator Iterator;$/;"	t	struct:NC::Menu	typeref:typename:std::vector<Item>::iterator
Iterator	src/mpdpp.h	/^	Iterator()$/;"	f	struct:MPD::Iterator
Iterator	src/mpdpp.h	/^	Iterator(mpd_connection *connection, typename State::Fetcher fetcher)$/;"	f	struct:MPD::Iterator
Iterator	src/mpdpp.h	/^struct Iterator: std::iterator<std::input_iterator_tag, ObjectT>$/;"	s	namespace:MPD
Iterator	src/screens/sort_playlist.cpp	/^	typedef std::vector<MPD::Song>::iterator Iterator;$/;"	t	function:SortPlaylistDialog::sort	typeref:typename:std::vector<MPD::Song>::iterator	file:
JahLyricsFetcher	src/lyrics_fetcher.h	/^struct JahLyricsFetcher : public GoogleLyricsFetcher$/;"	s
JumpToBrowser	src/actions.h	/^	JumpToBrowser(): BaseAction(Type::JumpToBrowser, "jump_to_browser") { }$/;"	f	struct:Actions::JumpToBrowser
JumpToBrowser	src/actions.h	/^	JumpToBrowser,$/;"	e	enum:Actions::Type
JumpToBrowser	src/actions.h	/^struct JumpToBrowser: BaseAction$/;"	s	namespace:Actions
JumpToMediaLibrary	src/actions.h	/^	JumpToMediaLibrary(): BaseAction(Type::JumpToMediaLibrary, "jump_to_media_library") { }$/;"	f	struct:Actions::JumpToMediaLibrary
JumpToMediaLibrary	src/actions.h	/^	JumpToMediaLibrary,$/;"	e	enum:Actions::Type
JumpToMediaLibrary	src/actions.h	/^struct JumpToMediaLibrary: BaseAction$/;"	s	namespace:Actions
JumpToParentDirectory	src/actions.h	/^	JumpToParentDirectory(): BaseAction(Type::JumpToParentDirectory, "jump_to_parent_directory") { /;"	f	struct:Actions::JumpToParentDirectory
JumpToParentDirectory	src/actions.h	/^	JumpToParentDirectory,$/;"	e	enum:Actions::Type
JumpToParentDirectory	src/actions.h	/^struct JumpToParentDirectory: BaseAction$/;"	s	namespace:Actions
JumpToPlayingSong	src/actions.h	/^	JumpToPlayingSong(): BaseAction(Type::JumpToPlayingSong, "jump_to_playing_song") { }$/;"	f	struct:Actions::JumpToPlayingSong
JumpToPlayingSong	src/actions.h	/^	JumpToPlayingSong,$/;"	e	enum:Actions::Type
JumpToPlayingSong	src/actions.h	/^struct JumpToPlayingSong: BaseAction$/;"	s	namespace:Actions
JumpToPlaylistEditor	src/actions.h	/^	JumpToPlaylistEditor(): BaseAction(Type::JumpToPlaylistEditor, "jump_to_playlist_editor") { }$/;"	f	struct:Actions::JumpToPlaylistEditor
JumpToPlaylistEditor	src/actions.h	/^	JumpToPlaylistEditor,$/;"	e	enum:Actions::Type
JumpToPlaylistEditor	src/actions.h	/^struct JumpToPlaylistEditor: BaseAction$/;"	s	namespace:Actions
JumpToPositionInSong	src/actions.h	/^	JumpToPositionInSong(): BaseAction(Type::JumpToPositionInSong, "jump_to_position_in_song") { }$/;"	f	struct:Actions::JumpToPositionInSong
JumpToPositionInSong	src/actions.h	/^	JumpToPositionInSong,$/;"	e	enum:Actions::Type
JumpToPositionInSong	src/actions.h	/^struct JumpToPositionInSong: BaseAction$/;"	s	namespace:Actions
JumpToTagEditor	src/actions.h	/^	JumpToTagEditor(): BaseAction(Type::JumpToTagEditor, "jump_to_tag_editor") { }$/;"	f	struct:Actions::JumpToTagEditor
JumpToTagEditor	src/actions.h	/^	JumpToTagEditor,$/;"	e	enum:Actions::Type
JumpToTagEditor	src/actions.h	/^struct JumpToTagEditor: BaseAction$/;"	s	namespace:Actions
JustSomeLyricsFetcher	src/lyrics_fetcher.h	/^struct JustSomeLyricsFetcher : public GoogleLyricsFetcher$/;"	s
Key	src/bindings.cpp	/^	enum class InProgress { None, Command, Key };$/;"	e	enum:BindingsConfiguration::read::InProgress	file:
Key	src/curses/window.h	/^namespace Key {$/;"	n	namespace:NC
LD	src/Makefile.in	/^LD = @LD@$/;"	m
LDFLAGS	src/Makefile.in	/^LDFLAGS = @LDFLAGS@$/;"	m
LIBOBJS	src/Makefile.in	/^LIBOBJS = @LIBOBJS@$/;"	m
LIBS	src/Makefile.in	/^LIBS = @LIBS@$/;"	m
LIBTOOL	src/Makefile.in	/^LIBTOOL = @LIBTOOL@$/;"	m
LIPO	src/Makefile.in	/^LIPO = @LIPO@$/;"	m
LN_S	src/Makefile.in	/^LN_S = @LN_S@$/;"	m
LTCXXCOMPILE	src/Makefile.in	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	src/Makefile.in	/^LTLIBOBJS = @LTLIBOBJS@$/;"	m
LT_SYS_LIBRARY_PATH	src/Makefile.in	/^LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@$/;"	m
LastFm	src/lastfm_service.cpp	/^namespace LastFm {$/;"	n	file:
LastFm	src/lastfm_service.h	/^namespace LastFm {$/;"	n
Lastfm	src/screens/lastfm.cpp	/^Lastfm::Lastfm()$/;"	f	class:Lastfm
Lastfm	src/screens/lastfm.h	/^struct Lastfm: Screen<NC::Scrollpad>, Tabbable$/;"	s
Lastfm	src/screens/screen_type.h	/^	Lastfm,$/;"	e	enum:ScreenType
Left	src/curses/window.h	/^const Type Left     = Special | 264;$/;"	v	namespace:NC::Key	typeref:typename:const Type
LeftColumnStartX	src/screens/playlist_editor.cpp	/^size_t LeftColumnStartX;$/;"	v	namespace:__anonfb05ef270111	typeref:typename:size_t
LeftColumnStartX	src/screens/tag_editor.cpp	/^size_t LeftColumnStartX;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
LeftColumnWidth	src/screens/playlist_editor.cpp	/^size_t LeftColumnWidth;$/;"	v	namespace:__anonfb05ef270111	typeref:typename:size_t
LeftColumnWidth	src/screens/tag_editor.cpp	/^size_t LeftColumnWidth;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
List	src/curses/menu.h	/^struct List$/;"	s	namespace:NC
List	src/format.h	/^	List() { }$/;"	f	struct:Format::List
List	src/format.h	/^	List(Base &&base_)$/;"	f	struct:Format::List
List	src/format.h	/^struct List$/;"	s	namespace:Format
ListType	src/format.h	/^enum class ListType { Group, FirstOf, AST };$/;"	g	namespace:Format
LoadPlaylist	src/mpdpp.cpp	/^void Connection::LoadPlaylist(const std::string &name)$/;"	f	class:MPD::Connection	typeref:typename:void
LocaleBasedItemSorting	src/utility/comparators.h	/^	LocaleBasedItemSorting(const std::locale &loc, bool ignore_the, SortMode mode)$/;"	f	class:LocaleBasedItemSorting
LocaleBasedItemSorting	src/utility/comparators.h	/^class LocaleBasedItemSorting$/;"	c
LocaleBasedSorting	src/utility/comparators.h	/^	LocaleBasedSorting(const std::locale &loc, bool ignore_the) : m_cmp(loc, ignore_the) { }$/;"	f	class:LocaleBasedSorting
LocaleBasedSorting	src/utility/comparators.h	/^class LocaleBasedSorting$/;"	c
LocaleStringComparison	src/utility/comparators.h	/^	LocaleStringComparison(const std::locale &loc, bool ignore_the)$/;"	f	class:LocaleStringComparison
LocaleStringComparison	src/utility/comparators.h	/^class LocaleStringComparison$/;"	c
LocateSong	src/screens/tag_editor.cpp	/^void TagEditor::LocateSong(const MPD::Song &s)$/;"	f	class:TagEditor	typeref:typename:void
LowerAllLetters	src/screens/tag_editor.cpp	/^void LowerAllLetters(MPD::MutableSong &s)$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:void
Lyrics	src/screens/lyrics.cpp	/^Lyrics::Lyrics()$/;"	f	class:Lyrics
Lyrics	src/screens/lyrics.h	/^struct Lyrics: Screen<NC::Scrollpad>, Tabbable$/;"	s
Lyrics	src/screens/screen_type.h	/^	Lyrics,$/;"	e	enum:ScreenType
LyricsFetcher	src/lyrics_fetcher.h	/^struct LyricsFetcher$/;"	s
LyricsFetcher_	src/lyrics_fetcher.h	/^typedef std::unique_ptr<LyricsFetcher> LyricsFetcher_;$/;"	t	typeref:typename:std::unique_ptr<LyricsFetcher>
LyricsFetchers	src/lyrics_fetcher.h	/^typedef std::vector<LyricsFetcher_> LyricsFetchers;$/;"	t	typeref:typename:std::vector<LyricsFetcher_>
LyricsmaniaFetcher	src/lyrics_fetcher.h	/^struct LyricsmaniaFetcher : public GoogleLyricsFetcher$/;"	s
LyricwikiFetcher	src/lyrics_fetcher.h	/^struct LyricwikiFetcher : public LyricsFetcher$/;"	s
MAKEINFO	src/Makefile.in	/^MAKEINFO = @MAKEINFO@$/;"	m
MANIFEST_TOOL	src/Makefile.in	/^MANIFEST_TOOL = @MANIFEST_TOOL@$/;"	m
MKDIR_P	src/Makefile.in	/^MKDIR_P = @MKDIR_P@$/;"	m
MPD	src/mpdpp.cpp	/^namespace MPD {$/;"	n	file:
MPD	src/mpdpp.h	/^namespace MPD {$/;"	n
MPD	src/mutable_song.cpp	/^namespace MPD {$/;"	n	file:
MPD	src/mutable_song.h	/^namespace MPD {$/;"	n
MPD	src/song.cpp	/^namespace MPD {$/;"	n	file:
MPD	src/song.h	/^namespace MPD {$/;"	n
MacroUtility	src/actions.h	/^	MacroUtility = -1,$/;"	e	enum:Actions::Type
Magenta	src/curses/window.h	/^	static Color Magenta;$/;"	m	struct:NC::Color	typeref:typename:Color
MainHeight	src/global.cpp	/^size_t MainHeight;$/;"	v	namespace:Global	typeref:typename:size_t
MainStartY	src/global.cpp	/^size_t MainStartY;$/;"	v	namespace:Global	typeref:typename:size_t
Makefile	src/Makefile.in	/^Makefile: $(srcdir)\/Makefile.in $(top_builddir)\/config.status$/;"	t
MasterScreen	src/actions.h	/^	MasterScreen(): BaseAction(Type::MasterScreen, "master_screen") { }$/;"	f	struct:Actions::MasterScreen
MasterScreen	src/actions.h	/^	MasterScreen,$/;"	e	enum:Actions::Type
MasterScreen	src/actions.h	/^struct MasterScreen: BaseAction$/;"	s	namespace:Actions
MatchToPattern	src/screens/search_engine.h	/^	static bool MatchToPattern;$/;"	m	struct:SearchEngine	typeref:typename:bool
MediaLibrary	src/screens/media_library.cpp	/^MediaLibrary::MediaLibrary()$/;"	f	class:MediaLibrary
MediaLibrary	src/screens/media_library.h	/^struct MediaLibrary: Screen<NC::Window *>, Filterable, HasColumns, HasSongs, Searchable, Tabbabl/;"	s
MediaLibrary	src/screens/screen_type.h	/^	MediaLibrary,$/;"	e	enum:ScreenType
Menu	src/curses/menu.h	/^struct Menu: Window, List$/;"	s	namespace:NC
Menu	src/curses/menu_impl.h	/^Menu<ItemT>::Menu()$/;"	f	class:NC::Menu
Menu	src/curses/menu_impl.h	/^Menu<ItemT>::Menu(Menu &&rhs)$/;"	f	class:NC::Menu
Menu	src/curses/menu_impl.h	/^Menu<ItemT>::Menu(const Menu &rhs)$/;"	f	class:NC::Menu
Menu	src/curses/menu_impl.h	/^Menu<ItemT>::Menu(size_t startx,$/;"	f	class:NC::Menu
MenuT	src/regex_filter.h	/^	typedef NC::Menu<T> MenuT;$/;"	t	struct:Regex::Filter	typeref:typename:NC::Menu<T>
MenuT	src/regex_filter.h	/^	typedef NC::Menu<T> MenuT;$/;"	t	struct:Regex::ItemFilter	typeref:typename:NC::Menu<T>
Metadata	src/screens/song_info.h	/^	struct Metadata$/;"	s	struct:SongInfo
MetrolyricsFetcher	src/lyrics_fetcher.h	/^struct MetrolyricsFetcher : public GoogleLyricsFetcher$/;"	s
MiddleColumnStartX	src/screens/tag_editor.cpp	/^size_t MiddleColumnStartX;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
MiddleColumnWidth	src/screens/tag_editor.cpp	/^size_t MiddleColumnWidth;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
Missing	src/format.h	/^enum class Result { Empty, Missing, Ok };$/;"	e	enum:Format::Result
ModificationTime	src/enums.h	/^enum class SortMode { Name, ModificationTime, CustomFormat, NoOp };$/;"	e	enum:SortMode
Mouse	src/curses/window.cpp	/^namespace Mouse {$/;"	n	namespace:NC	file:
Mouse	src/curses/window.h	/^const Type Mouse    = Special | 278;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Mouse	src/curses/window.h	/^namespace Mouse {$/;"	n	namespace:NC
MouseEvent	src/actions.h	/^	MouseEvent(): BaseAction(Type::MouseEvent, "mouse_event")$/;"	f	struct:Actions::MouseEvent
MouseEvent	src/actions.h	/^	MouseEvent,$/;"	e	enum:Actions::Type
MouseEvent	src/actions.h	/^struct MouseEvent: BaseAction$/;"	s	namespace:Actions
Move	src/mpdpp.cpp	/^void Connection::Move(unsigned from, unsigned to)$/;"	f	class:MPD::Connection	typeref:typename:void
MoveEnd	src/actions.h	/^	MoveEnd(): BaseAction(Type::MoveEnd, "move_end") { }$/;"	f	struct:Actions::MoveEnd
MoveEnd	src/actions.h	/^	MoveEnd,$/;"	e	enum:Actions::Type
MoveEnd	src/actions.h	/^struct MoveEnd: BaseAction$/;"	s	namespace:Actions
MoveHome	src/actions.h	/^	MoveHome(): BaseAction(Type::MoveHome, "move_home") { }$/;"	f	struct:Actions::MoveHome
MoveHome	src/actions.h	/^	MoveHome,$/;"	e	enum:Actions::Type
MoveHome	src/actions.h	/^struct MoveHome: BaseAction$/;"	s	namespace:Actions
MoveSelectedItemsDown	src/actions.h	/^	MoveSelectedItemsDown(): BaseAction(Type::MoveSelectedItemsDown, "move_selected_items_down") { /;"	f	struct:Actions::MoveSelectedItemsDown
MoveSelectedItemsDown	src/actions.h	/^	MoveSelectedItemsDown,$/;"	e	enum:Actions::Type
MoveSelectedItemsDown	src/actions.h	/^struct MoveSelectedItemsDown: BaseAction$/;"	s	namespace:Actions
MoveSelectedItemsTo	src/actions.h	/^	MoveSelectedItemsTo(): BaseAction(Type::MoveSelectedItemsTo, "move_selected_items_to") { }$/;"	f	struct:Actions::MoveSelectedItemsTo
MoveSelectedItemsTo	src/actions.h	/^	MoveSelectedItemsTo,$/;"	e	enum:Actions::Type
MoveSelectedItemsTo	src/actions.h	/^struct MoveSelectedItemsTo: BaseAction$/;"	s	namespace:Actions
MoveSelectedItemsUp	src/actions.h	/^	MoveSelectedItemsUp(): BaseAction(Type::MoveSelectedItemsUp, "move_selected_items_up") { }$/;"	f	struct:Actions::MoveSelectedItemsUp
MoveSelectedItemsUp	src/actions.h	/^	MoveSelectedItemsUp,$/;"	e	enum:Actions::Type
MoveSelectedItemsUp	src/actions.h	/^struct MoveSelectedItemsUp: BaseAction$/;"	s	namespace:Actions
MoveSortOrderDown	src/actions.h	/^	MoveSortOrderDown(): BaseAction(Type::MoveSortOrderDown, "move_sort_order_down") { }$/;"	f	struct:Actions::MoveSortOrderDown
MoveSortOrderDown	src/actions.h	/^	MoveSortOrderDown,$/;"	e	enum:Actions::Type
MoveSortOrderDown	src/actions.h	/^struct MoveSortOrderDown: BaseAction$/;"	s	namespace:Actions
MoveSortOrderUp	src/actions.h	/^	MoveSortOrderUp(): BaseAction(Type::MoveSortOrderUp, "move_sort_order_up") { }$/;"	f	struct:Actions::MoveSortOrderUp
MoveSortOrderUp	src/actions.h	/^	MoveSortOrderUp,$/;"	e	enum:Actions::Type
MoveSortOrderUp	src/actions.h	/^struct MoveSortOrderUp: BaseAction$/;"	s	namespace:Actions
MoveToAlbum	src/screens/media_library.cpp	/^bool MoveToAlbum(NC::Menu<AlbumEntry> &albums, const std::string &primary_tag, const MPD::Song &/;"	f	namespace:__anon50035b830711	typeref:typename:bool
MoveToTag	src/screens/media_library.cpp	/^bool MoveToTag(NC::Menu<PrimaryTag> &tags, const std::string &primary_tag)$/;"	f	namespace:__anon50035b830711	typeref:typename:bool
Mpd	src/mpdpp.cpp	/^MPD::Connection Mpd;$/;"	v	typeref:typename:MPD::Connection
Mutable	src/song_list.h	/^	enum class State { Undefined, Const, Mutable };$/;"	e	enum:SongProperties::State
MutableSong	src/mutable_song.h	/^	MutableSong() : m_mtime(0), m_duration(0) { }$/;"	f	struct:MPD::MutableSong
MutableSong	src/mutable_song.h	/^	MutableSong(Song s) : Song(s), m_mtime(0), m_duration(0) { }$/;"	f	struct:MPD::MutableSong
MutableSong	src/mutable_song.h	/^struct MutableSong : public Song$/;"	s	namespace:MPD
NC	src/curses/formatted_color.h	/^namespace NC {$/;"	n
NC	src/curses/menu.h	/^namespace NC {$/;"	n
NC	src/curses/menu_impl.h	/^namespace NC {$/;"	n
NC	src/curses/scrollpad.cpp	/^namespace NC {$/;"	n	file:
NC	src/curses/scrollpad.h	/^namespace NC {$/;"	n
NC	src/curses/strbuffer.h	/^namespace NC {$/;"	n
NC	src/curses/window.cpp	/^namespace NC {$/;"	n	file:
NC	src/curses/window.h	/^namespace NC {$/;"	n
NCMPCPP_ACTIONS_H	src/actions.h	/^#define NCMPCPP_ACTIONS_H$/;"	d
NCMPCPP_BINDINGS_H	src/bindings.h	/^#define NCMPCPP_BINDINGS_H$/;"	d
NCMPCPP_BROWSER_H	src/screens/browser.h	/^#define NCMPCPP_BROWSER_H$/;"	d
NCMPCPP_CHARSET_H	src/charset.h	/^#define NCMPCPP_CHARSET_H$/;"	d
NCMPCPP_CLOCK_H	src/screens/clock.h	/^#define NCMPCPP_CLOCK_H$/;"	d
NCMPCPP_CONFIGURATION_H	src/configuration.h	/^#define NCMPCPP_CONFIGURATION_H$/;"	d
NCMPCPP_CURL_HANDLE_H	src/curl_handle.h	/^#define NCMPCPP_CURL_HANDLE_H$/;"	d
NCMPCPP_DISPLAY_H	src/display.h	/^#define NCMPCPP_DISPLAY_H$/;"	d
NCMPCPP_EDITABLE_SONG_H	src/mutable_song.h	/^#define NCMPCPP_EDITABLE_SONG_H$/;"	d
NCMPCPP_ENUMS_H	src/enums.h	/^#define NCMPCPP_ENUMS_H$/;"	d
NCMPCPP_EXEC_ITEM_H	src/runnable_item.h	/^#define NCMPCPP_EXEC_ITEM_H$/;"	d
NCMPCPP_FORMATTED_COLOR_H	src/curses/formatted_color.h	/^#define NCMPCPP_FORMATTED_COLOR_H$/;"	d
NCMPCPP_GLOBAL_H	src/global.h	/^#define NCMPCPP_GLOBAL_H$/;"	d
NCMPCPP_HAVE_FORMAT_H	src/format.h	/^#define NCMPCPP_HAVE_FORMAT_H$/;"	d
NCMPCPP_HAVE_FORMAT_IMPL_H	src/format_impl.h	/^#define NCMPCPP_HAVE_FORMAT_IMPL_H$/;"	d
NCMPCPP_HELPERS_H	src/helpers.h	/^#define NCMPCPP_HELPERS_H$/;"	d
NCMPCPP_HELPERS_SONG_ITERATOR_MAKER_H	src/helpers/song_iterator_maker.h	/^#define NCMPCPP_HELPERS_SONG_ITERATOR_MAKER_H$/;"	d
NCMPCPP_HELP_H	src/screens/help.h	/^#define NCMPCPP_HELP_H$/;"	d
NCMPCPP_INTERFACES_H	src/interfaces.h	/^#define NCMPCPP_INTERFACES_H$/;"	d
NCMPCPP_LASTFM_H	src/screens/lastfm.h	/^#define NCMPCPP_LASTFM_H$/;"	d
NCMPCPP_LASTFM_SERVICE_H	src/lastfm_service.h	/^#define NCMPCPP_LASTFM_SERVICE_H$/;"	d
NCMPCPP_LYRICS_FETCHER_H	src/lyrics_fetcher.h	/^#define NCMPCPP_LYRICS_FETCHER_H$/;"	d
NCMPCPP_LYRICS_H	src/screens/lyrics.h	/^#define NCMPCPP_LYRICS_H$/;"	d
NCMPCPP_MACRO_UTILITIES_H	src/macro_utilities.h	/^#define NCMPCPP_MACRO_UTILITIES_H$/;"	d
NCMPCPP_MEDIA_LIBRARY_H	src/screens/media_library.h	/^#define NCMPCPP_MEDIA_LIBRARY_H$/;"	d
NCMPCPP_MENU_H	src/curses/menu.h	/^#define NCMPCPP_MENU_H$/;"	d
NCMPCPP_MENU_IMPL_H	src/curses/menu_impl.h	/^#define NCMPCPP_MENU_IMPL_H$/;"	d
NCMPCPP_MPDPP_H	src/mpdpp.h	/^#define NCMPCPP_MPDPP_H$/;"	d
NCMPCPP_OUTPUTS_H	src/screens/outputs.h	/^#define NCMPCPP_OUTPUTS_H$/;"	d
NCMPCPP_PLAYLIST_EDITOR_H	src/screens/playlist_editor.h	/^#define NCMPCPP_PLAYLIST_EDITOR_H$/;"	d
NCMPCPP_PLAYLIST_H	src/screens/playlist.h	/^#define NCMPCPP_PLAYLIST_H$/;"	d
NCMPCPP_REGEX_FILTER_H	src/regex_filter.h	/^#define NCMPCPP_REGEX_FILTER_H$/;"	d
NCMPCPP_SCREEN_H	src/screens/screen.h	/^#define NCMPCPP_SCREEN_H$/;"	d
NCMPCPP_SCREEN_SWITCHER_H	src/screens/screen_switcher.h	/^#define NCMPCPP_SCREEN_SWITCHER_H$/;"	d
NCMPCPP_SCREEN_TYPE_H	src/screens/screen_type.h	/^#define NCMPCPP_SCREEN_TYPE_H$/;"	d
NCMPCPP_SCROLLPAD_H	src/curses/scrollpad.h	/^#define NCMPCPP_SCROLLPAD_H$/;"	d
NCMPCPP_SEARCH_ENGINE_H	src/screens/search_engine.h	/^#define NCMPCPP_SEARCH_ENGINE_H$/;"	d
NCMPCPP_SEL_ITEMS_ADDER_H	src/screens/sel_items_adder.h	/^#define NCMPCPP_SEL_ITEMS_ADDER_H$/;"	d
NCMPCPP_SERVER_INFO_H	src/screens/server_info.h	/^#define NCMPCPP_SERVER_INFO_H$/;"	d
NCMPCPP_SETTINGS_H	src/settings.h	/^#define NCMPCPP_SETTINGS_H$/;"	d
NCMPCPP_SONG_H	src/song.h	/^#define NCMPCPP_SONG_H$/;"	d
NCMPCPP_SONG_INFO_H	src/screens/song_info.h	/^#define NCMPCPP_SONG_INFO_H$/;"	d
NCMPCPP_SONG_LIST_H	src/song_list.h	/^#define NCMPCPP_SONG_LIST_H$/;"	d
NCMPCPP_SORT_PLAYLIST_H	src/screens/sort_playlist.h	/^#define NCMPCPP_SORT_PLAYLIST_H$/;"	d
NCMPCPP_STATUSBAR_H	src/statusbar.h	/^#define NCMPCPP_STATUSBAR_H$/;"	d
NCMPCPP_STATUS_CHECKER_H	src/status.h	/^#define NCMPCPP_STATUS_CHECKER_H$/;"	d
NCMPCPP_STRBUFFER_H	src/curses/strbuffer.h	/^#define NCMPCPP_STRBUFFER_H$/;"	d
NCMPCPP_TAGS_H	src/tags.h	/^#define NCMPCPP_TAGS_H$/;"	d
NCMPCPP_TAG_EDITOR_H	src/screens/tag_editor.h	/^#define NCMPCPP_TAG_EDITOR_H$/;"	d
NCMPCPP_TINY_TAG_EDITOR_H	src/screens/tiny_tag_editor.h	/^#define NCMPCPP_TINY_TAG_EDITOR_H$/;"	d
NCMPCPP_TITLE_H	src/title.h	/^#define NCMPCPP_TITLE_H$/;"	d
NCMPCPP_UTILITY_COMPARATORS_H	src/utility/comparators.h	/^#define NCMPCPP_UTILITY_COMPARATORS_H$/;"	d
NCMPCPP_UTILITY_CONST_H	src/utility/const.h	/^#define NCMPCPP_UTILITY_CONST_H$/;"	d
NCMPCPP_UTILITY_CONVERSION_H	src/utility/conversion.h	/^#define NCMPCPP_UTILITY_CONVERSION_H$/;"	d
NCMPCPP_UTILITY_FUNCTIONAL_H	src/utility/functional.h	/^#define NCMPCPP_UTILITY_FUNCTIONAL_H$/;"	d
NCMPCPP_UTILITY_HTML_H	src/utility/html.h	/^#define NCMPCPP_UTILITY_HTML_H$/;"	d
NCMPCPP_UTILITY_OPTION_PARSER_H	src/utility/option_parser.h	/^#define NCMPCPP_UTILITY_OPTION_PARSER_H$/;"	d
NCMPCPP_UTILITY_READLINE_H	src/utility/readline.h	/^#define NCMPCPP_UTILITY_READLINE_H$/;"	d
NCMPCPP_UTILITY_SCOPED_VALUE_H	src/utility/scoped_value.h	/^#define NCMPCPP_UTILITY_SCOPED_VALUE_H$/;"	d
NCMPCPP_UTILITY_SHARED_RESOURCE_H	src/utility/shared_resource.h	/^#define NCMPCPP_UTILITY_SHARED_RESOURCE_H$/;"	d
NCMPCPP_UTILITY_STORAGE_KIND_H	src/utility/storage_kind.h	/^#define NCMPCPP_UTILITY_STORAGE_KIND_H$/;"	d
NCMPCPP_UTILITY_STRING_H	src/utility/string.h	/^#define NCMPCPP_UTILITY_STRING_H$/;"	d
NCMPCPP_UTILITY_TYPE_CONVERSIONS_H	src/utility/type_conversions.h	/^#define NCMPCPP_UTILITY_TYPE_CONVERSIONS_H$/;"	d
NCMPCPP_UTILITY_WIDE_STRING_H	src/utility/wide_string.h	/^#define NCMPCPP_UTILITY_WIDE_STRING_H$/;"	d
NCMPCPP_VISUALIZER_H	src/screens/visualizer.h	/^#define NCMPCPP_VISUALIZER_H$/;"	d
NCMPCPP_WINDOW_H	src/curses/window.h	/^#define NCMPCPP_WINDOW_H$/;"	d
NCURSES_NOMACROS	src/curses/window.h	/^#define NCURSES_NOMACROS /;"	d
NM	src/Makefile.in	/^NM = @NM@$/;"	m
NMEDIT	src/Makefile.in	/^NMEDIT = @NMEDIT@$/;"	m
NORMAL_INSTALL	src/Makefile.in	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	src/Makefile.in	/^NORMAL_UNINSTALL = :$/;"	m
Name	src/enums.h	/^enum class SortMode { Name, ModificationTime, CustomFormat, NoOp };$/;"	e	enum:SortMode
Name	src/screens/song_info.h	/^		const char *Name;$/;"	m	struct:SongInfo::Metadata	typeref:typename:const char *
Next	src/actions.h	/^	Next,$/;"	e	enum:Actions::Type
Next	src/mpdpp.cpp	/^void Connection::Next()$/;"	f	class:MPD::Connection	typeref:typename:void
NextColumn	src/actions.h	/^	NextColumn(): BaseAction(Type::NextColumn, "next_column") { }$/;"	f	struct:Actions::NextColumn
NextColumn	src/actions.h	/^	NextColumn,$/;"	e	enum:Actions::Type
NextColumn	src/actions.h	/^struct NextColumn: BaseAction$/;"	s	namespace:Actions
NextFoundItem	src/actions.h	/^	NextFoundItem(): BaseAction(Type::NextFoundItem, "next_found_item") { }$/;"	f	struct:Actions::NextFoundItem
NextFoundItem	src/actions.h	/^	NextFoundItem,$/;"	e	enum:Actions::Type
NextFoundItem	src/actions.h	/^struct NextFoundItem: BaseAction$/;"	s	namespace:Actions
NextScreen	src/actions.h	/^	NextScreen(): BaseAction(Type::NextScreen, "next_screen") { }$/;"	f	struct:Actions::NextScreen
NextScreen	src/actions.h	/^	NextScreen,$/;"	e	enum:Actions::Type
NextScreen	src/actions.h	/^struct NextScreen: BaseAction$/;"	s	namespace:Actions
NextSong	src/actions.h	/^	NextSong(): BaseAction(Type::Next, "next") { }$/;"	f	struct:Actions::NextSong
NextSong	src/actions.h	/^struct NextSong: BaseAction$/;"	s	namespace:Actions
No	src/helpers.h	/^enum ReapplyFilter { Yes, No };$/;"	e	enum:ReapplyFilter
No	src/utility/const.h	/^enum class Const { Yes, No };$/;"	e	enum:Const
NoAltCharset	src/curses/window.h	/^	AltCharset, NoAltCharset$/;"	e	enum:NC::Format
NoBold	src/curses/window.h	/^	Bold, NoBold,$/;"	e	enum:NC::Format
NoOp	src/enums.h	/^enum class SortMode { Name, ModificationTime, CustomFormat, NoOp };$/;"	e	enum:SortMode
NoReverse	src/curses/window.h	/^	Reverse, NoReverse,$/;"	e	enum:NC::Format
NoUnderline	src/curses/window.h	/^	Underline, NoUnderline,$/;"	e	enum:NC::Format
NoidleCallback	src/mpdpp.h	/^	typedef std::function<void(int)> NoidleCallback;$/;"	t	struct:MPD::Connection
None	src/bindings.cpp	/^	enum class InProgress { None, Command, Key };$/;"	e	enum:BindingsConfiguration::read::InProgress	file:
None	src/curses/menu.h	/^			None       = 0,$/;"	e	enum:NC::List::Properties::Type
None	src/curses/window.h	/^const Type None = -1;$/;"	v	namespace:NC::Key	typeref:typename:const Type
None	src/format.h	/^const unsigned None = 0;$/;"	v	namespace:Format::Flags	typeref:typename:const unsigned
Null	src/curses/window.h	/^const Type Null      = 0;$/;"	v	namespace:NC::Key	typeref:typename:const Type
OBJDUMP	src/Makefile.in	/^OBJDUMP = @OBJDUMP@$/;"	m
OBJEXT	src/Makefile.in	/^OBJEXT = @OBJEXT@$/;"	m
OTOOL	src/Makefile.in	/^OTOOL = @OTOOL@$/;"	m
OTOOL64	src/Makefile.in	/^OTOOL64 = @OTOOL64@$/;"	m
Ok	src/format.h	/^enum class Result { Empty, Missing, Ok };$/;"	e	enum:Format::Result
OriginalStatusbarVisibility	src/actions.cpp	/^bool OriginalStatusbarVisibility;$/;"	v	namespace:Actions	typeref:typename:bool
OtherString	src/format_impl.h	/^ 		typedef std::basic_string<OtherCharT> OtherString;$/;"	t	struct:Format::Printer	typeref:typename:std::basic_string<OtherCharT>
OutOfBounds	src/utility/conversion.h	/^	OutOfBounds(std::string msg) : m_error_message(msg) { }$/;"	f	struct:OutOfBounds
OutOfBounds	src/utility/conversion.h	/^struct OutOfBounds : std::exception$/;"	s
Output	src/mpdpp.h	/^	Output() { }$/;"	f	struct:MPD::Output
Output	src/mpdpp.h	/^	Output(mpd_output *output)$/;"	f	struct:MPD::Output
Output	src/mpdpp.h	/^struct Output$/;"	s	namespace:MPD
OutputIterator	src/mpdpp.h	/^typedef Iterator<Output> OutputIterator;$/;"	t	namespace:MPD	typeref:typename:Iterator<Output>
OutputSwitch	src/format.h	/^const unsigned OutputSwitch = 4;$/;"	v	namespace:Format::Flags	typeref:typename:const unsigned
OutputSwitch	src/format.h	/^struct OutputSwitch { };$/;"	s	namespace:Format
Outputs	src/screens/outputs.cpp	/^Outputs::Outputs()$/;"	f	class:Outputs
Outputs	src/screens/outputs.h	/^struct Outputs: Screen<NC::Menu<MPD::Output>>, Tabbable$/;"	s
Outputs	src/screens/screen_type.h	/^	Outputs,$/;"	e	enum:ScreenType
PACKAGE	src/Makefile.in	/^PACKAGE = @PACKAGE@$/;"	m
PACKAGE_BUGREPORT	src/Makefile.in	/^PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@$/;"	m
PACKAGE_NAME	src/Makefile.in	/^PACKAGE_NAME = @PACKAGE_NAME@$/;"	m
PACKAGE_STRING	src/Makefile.in	/^PACKAGE_STRING = @PACKAGE_STRING@$/;"	m
PACKAGE_TARNAME	src/Makefile.in	/^PACKAGE_TARNAME = @PACKAGE_TARNAME@$/;"	m
PACKAGE_URL	src/Makefile.in	/^PACKAGE_URL = @PACKAGE_URL@$/;"	m
PACKAGE_VERSION	src/Makefile.in	/^PACKAGE_VERSION = @PACKAGE_VERSION@$/;"	m
PATH_SEPARATOR	src/Makefile.in	/^PATH_SEPARATOR = @PATH_SEPARATOR@$/;"	m
PKG_CONFIG	src/Makefile.in	/^PKG_CONFIG = @PKG_CONFIG@$/;"	m
PKG_CONFIG_LIBDIR	src/Makefile.in	/^PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@$/;"	m
PKG_CONFIG_PATH	src/Makefile.in	/^PKG_CONFIG_PATH = @PKG_CONFIG_PATH@$/;"	m
PLyricsFetcher	src/lyrics_fetcher.h	/^struct PLyricsFetcher : public GoogleLyricsFetcher$/;"	s
POST_INSTALL	src/Makefile.in	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	src/Makefile.in	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	src/Makefile.in	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	src/Makefile.in	/^PRE_UNINSTALL = :$/;"	m
PROGRAMS	src/Makefile.in	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PageDown	src/actions.h	/^	PageDown(): BaseAction(Type::PageDown, "page_down") { }$/;"	f	struct:Actions::PageDown
PageDown	src/actions.h	/^	PageDown,$/;"	e	enum:Actions::Type
PageDown	src/actions.h	/^struct PageDown: BaseAction$/;"	s	namespace:Actions
PageDown	src/curses/window.h	/^const Type PageDown = Special | 261;$/;"	v	namespace:NC::Key	typeref:typename:const Type
PageDown	src/curses/window.h	/^enum class Scroll { Up, Down, PageUp, PageDown, Home, End };$/;"	e	enum:NC::Scroll
PageUp	src/actions.h	/^	PageUp(): BaseAction(Type::PageUp, "page_up") { }$/;"	f	struct:Actions::PageUp
PageUp	src/actions.h	/^	PageUp,$/;"	e	enum:Actions::Type
PageUp	src/actions.h	/^struct PageUp: BaseAction$/;"	s	namespace:Actions
PageUp	src/curses/window.h	/^const Type PageUp   = Special | 260;$/;"	v	namespace:NC::Key	typeref:typename:const Type
PageUp	src/curses/window.h	/^enum class Scroll { Up, Down, PageUp, PageDown, Home, End };$/;"	e	enum:NC::Scroll
ParseFilename	src/screens/tag_editor.cpp	/^std::string ParseFilename(MPD::MutableSong &s, std::string mask, bool preview)$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:std::string
Patterns	src/screens/tag_editor.cpp	/^std::list<std::string> Patterns;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:std::list<std::string>
PatternsFile	src/screens/tag_editor.cpp	/^std::string PatternsFile = "patterns.list";$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:std::string
Pause	src/actions.h	/^	Pause(): BaseAction(Type::Pause, "pause") { }$/;"	f	struct:Actions::Pause
Pause	src/actions.h	/^	Pause,$/;"	e	enum:Actions::Type
Pause	src/actions.h	/^struct Pause: BaseAction$/;"	s	namespace:Actions
Pause	src/mpdpp.cpp	/^void Connection::Pause(bool state)$/;"	f	class:MPD::Connection	typeref:typename:void
Play	src/actions.h	/^	Play(): BaseAction(Type::Play, "play") { }$/;"	f	struct:Actions::Play
Play	src/actions.h	/^	Play,$/;"	e	enum:Actions::Type
Play	src/actions.h	/^struct Play: BaseAction$/;"	s	namespace:Actions
Play	src/mpdpp.cpp	/^void Connection::Play()$/;"	f	class:MPD::Connection	typeref:typename:void
Play	src/mpdpp.cpp	/^void Connection::Play(int pos)$/;"	f	class:MPD::Connection	typeref:typename:void
PlayID	src/mpdpp.cpp	/^void Connection::PlayID(int id)$/;"	f	class:MPD::Connection	typeref:typename:void
PlayItem	src/actions.h	/^	PlayItem(): BaseAction(Type::PlayItem, "play_item") { }$/;"	f	struct:Actions::PlayItem
PlayItem	src/actions.h	/^	PlayItem,$/;"	e	enum:Actions::Type
PlayItem	src/actions.h	/^struct PlayItem: BaseAction$/;"	s	namespace:Actions
PlayerState	src/mpdpp.h	/^enum PlayerState { psUnknown, psStop, psPlay, psPause };$/;"	g	namespace:MPD
Playlist	src/mpdpp.h	/^	Playlist()$/;"	f	struct:MPD::Playlist
Playlist	src/mpdpp.h	/^	Playlist(const mpd_playlist *playlist)$/;"	f	struct:MPD::Playlist
Playlist	src/mpdpp.h	/^	Playlist(std::string path_, time_t last_modified = 0)$/;"	f	struct:MPD::Playlist
Playlist	src/mpdpp.h	/^	enum class Type { Directory, Song, Playlist };$/;"	e	enum:MPD::Item::Type
Playlist	src/mpdpp.h	/^struct Playlist$/;"	s	namespace:MPD
Playlist	src/screens/playlist.cpp	/^Playlist::Playlist()$/;"	f	class:Playlist
Playlist	src/screens/playlist.h	/^struct Playlist: Screen<SongMenu>, Filterable, HasSongs, Searchable, Tabbable$/;"	s
Playlist	src/screens/screen_type.h	/^	Playlist,$/;"	e	enum:ScreenType
PlaylistDelete	src/mpdpp.cpp	/^void Connection::PlaylistDelete(const std::string &playlist, unsigned pos)$/;"	f	class:MPD::Connection	typeref:typename:void
PlaylistEditor	src/screens/playlist_editor.cpp	/^PlaylistEditor::PlaylistEditor()$/;"	f	class:PlaylistEditor
PlaylistEditor	src/screens/playlist_editor.h	/^struct PlaylistEditor: Screen<NC::Window *>, Filterable, HasColumns, HasSongs, Searchable, Tabba/;"	s
PlaylistEditor	src/screens/screen_type.h	/^	PlaylistEditor,$/;"	e	enum:ScreenType
PlaylistEntryMatcher	src/screens/playlist_editor.cpp	/^bool PlaylistEntryMatcher(const Regex::Regex &rx, const MPD::Playlist &playlist)$/;"	f	namespace:__anonfb05ef270511	typeref:typename:bool
PlaylistIterator	src/mpdpp.h	/^typedef Iterator<Playlist> PlaylistIterator;$/;"	t	namespace:MPD	typeref:typename:Iterator<Playlist>
PlaylistMove	src/mpdpp.cpp	/^void Connection::PlaylistMove(const std::string &path, int from, int to)$/;"	f	class:MPD::Connection	typeref:typename:void
Playlists	src/screens/playlist_editor.h	/^	NC::Menu<MPD::Playlist> Playlists;$/;"	m	struct:PlaylistEditor	typeref:typename:NC::Menu<MPD::Playlist>
Prepare	src/screens/clock.cpp	/^void Clock::Prepare()$/;"	f	class:Clock	typeref:typename:void
Prepare	src/screens/search_engine.cpp	/^void SearchEngine::Prepare()$/;"	f	class:SearchEngine	typeref:typename:void
PrepareSong	src/screens/song_info.cpp	/^void SongInfo::PrepareSong(const MPD::Song &s)$/;"	f	class:SongInfo	typeref:typename:void
Prev	src/mpdpp.cpp	/^void Connection::Prev()$/;"	f	class:MPD::Connection	typeref:typename:void
Previous	src/actions.h	/^	Previous,$/;"	e	enum:Actions::Type
PreviousColumn	src/actions.h	/^	PreviousColumn(): BaseAction(Type::PreviousColumn, "previous_column") { }$/;"	f	struct:Actions::PreviousColumn
PreviousColumn	src/actions.h	/^	PreviousColumn,$/;"	e	enum:Actions::Type
PreviousColumn	src/actions.h	/^struct PreviousColumn: BaseAction$/;"	s	namespace:Actions
PreviousFoundItem	src/actions.h	/^	PreviousFoundItem(): BaseAction(Type::PreviousFoundItem, "previous_found_item") { }$/;"	f	struct:Actions::PreviousFoundItem
PreviousFoundItem	src/actions.h	/^	PreviousFoundItem,$/;"	e	enum:Actions::Type
PreviousFoundItem	src/actions.h	/^struct PreviousFoundItem: BaseAction$/;"	s	namespace:Actions
PreviousScreen	src/actions.h	/^	PreviousScreen(): BaseAction(Type::PreviousScreen, "previous_screen") { }$/;"	f	struct:Actions::PreviousScreen
PreviousScreen	src/actions.h	/^	PreviousScreen,$/;"	e	enum:Actions::Type
PreviousScreen	src/actions.h	/^struct PreviousScreen: BaseAction$/;"	s	namespace:Actions
PreviousSong	src/actions.h	/^	PreviousSong(): BaseAction(Type::Previous, "previous") { }$/;"	f	struct:Actions::PreviousSong
PreviousSong	src/actions.h	/^struct PreviousSong: BaseAction$/;"	s	namespace:Actions
PrimaryTag	src/screens/media_library.cpp	/^typedef MediaLibrary::PrimaryTag PrimaryTag;$/;"	t	namespace:__anon50035b830111	typeref:typename:MediaLibrary::PrimaryTag	file:
PrimaryTag	src/screens/media_library.h	/^		PrimaryTag() : m_mtime(0) { }$/;"	f	struct:MediaLibrary::PrimaryTag
PrimaryTag	src/screens/media_library.h	/^		PrimaryTag(std::string tag_, time_t mtime_)$/;"	f	struct:MediaLibrary::PrimaryTag
PrimaryTag	src/screens/media_library.h	/^	struct PrimaryTag$/;"	s	struct:MediaLibrary
Printer	src/format_impl.h	/^	Printer(OutputT &os, const MPD::Song *song, SecondOutputT *second_os, const unsigned flags)$/;"	f	struct:Format::Printer
Printer	src/format_impl.h	/^struct Printer: boost::static_visitor<Result>$/;"	s	namespace:Format
Progressbar	src/statusbar.h	/^namespace Progressbar {$/;"	n
PromptAborted	src/curses/window.h	/^	PromptAborted() { }$/;"	f	struct:NC::PromptAborted
PromptAborted	src/curses/window.h	/^	PromptAborted(ArgT &&prompt)$/;"	f	struct:NC::PromptAborted
PromptAborted	src/curses/window.h	/^struct PromptAborted : std::exception$/;"	s	namespace:NC
PromptHook	src/curses/window.h	/^	typedef std::function<bool(const char *)> PromptHook;$/;"	t	struct:NC::Window
Properties	src/curses/menu.h	/^		Properties(Type properties = Selectable)$/;"	f	struct:NC::List::Properties
Properties	src/curses/menu.h	/^	struct Properties$/;"	s	struct:NC::List
Properties	src/curses/strbuffer.h	/^	typedef std::multimap<size_t, Property> Properties;$/;"	t	class:NC::BasicBuffer	typeref:typename:std::multimap<size_t,Property>
PropertiesIterator	src/curses/menu.h	/^		Iterator> PropertiesIterator;$/;"	t	struct:NC::Menu	typeref:typename:boost::transform_iterator<typename Item::template ExtractProperties<Const::No>,Iterator>
PropertiesIterator	src/curses/menu.h	/^	using PropertiesIterator = boost::range_detail::any_iterator<$/;"	t	struct:NC::List	typeref:typename:boost::range_detail::any_iterator<ValueT,boost::random_access_traversal_tag,ValueT &,std::ptrdiff_t>
Properties_	src/curses/menu.h	/^				Properties>::type Properties_;$/;"	t	struct:NC::Menu::Item::ExtractProperties	typeref:typename:std::conditional<const_==Const::Yes,const Properties,Properties>::type
Property	src/curses/strbuffer.h	/^		Property(ArgT &&arg, size_t id_)$/;"	f	struct:NC::BasicBuffer::Property
Property	src/curses/strbuffer.h	/^	struct Property$/;"	s	class:NC::BasicBuffer
PushCharacters	src/macro_utilities.cpp	/^PushCharacters::PushCharacters(NC::Window **w, std::vector<NC::Key::Type> &&queue)$/;"	f	class:Actions::PushCharacters
PushCharacters	src/macro_utilities.h	/^struct PushCharacters: BaseAction$/;"	s	namespace:Actions
Quit	src/actions.h	/^	Quit(): BaseAction(Type::Quit, "quit") { }$/;"	f	struct:Actions::Quit
Quit	src/actions.h	/^	Quit,$/;"	e	enum:Actions::Type
Quit	src/actions.h	/^struct Quit: BaseAction$/;"	s	namespace:Actions
RANLIB	src/Makefile.in	/^RANLIB = @RANLIB@$/;"	m
RNG	src/global.cpp	/^std::mt19937 RNG;$/;"	v	namespace:Global	typeref:typename:std::mt19937
ReapplyFilter	src/helpers.h	/^enum ReapplyFilter { Yes, No };$/;"	g
Red	src/curses/window.h	/^	static Color Red;$/;"	m	struct:NC::Color	typeref:typename:Color
Reference	src/utility/storage_kind.h	/^enum class StorageKind { Reference, Value };$/;"	e	enum:StorageKind
RefetchLyrics	src/actions.h	/^	RefetchLyrics(): BaseAction(Type::RefetchLyrics, "refetch_lyrics") { }$/;"	f	struct:Actions::RefetchLyrics
RefetchLyrics	src/actions.h	/^	RefetchLyrics,$/;"	e	enum:Actions::Type
RefetchLyrics	src/actions.h	/^struct RefetchLyrics: BaseAction$/;"	s	namespace:Actions
Regex	src/regex_filter.h	/^Regex;$/;"	t	namespace:Regex	typeref:typename:boost::u32regex
Regex	src/regex_filter.h	/^namespace Regex {$/;"	n
RemoveSelection	src/actions.h	/^	RemoveSelection(): BaseAction(Type::RemoveSelection, "remove_selection") { }$/;"	f	struct:Actions::RemoveSelection
RemoveSelection	src/actions.h	/^	RemoveSelection,$/;"	e	enum:Actions::Type
RemoveSelection	src/actions.h	/^struct RemoveSelection: BaseAction$/;"	s	namespace:Actions
Rename	src/mpdpp.cpp	/^void Connection::Rename(const std::string &from, const std::string &to)$/;"	f	class:MPD::Connection	typeref:typename:void
ReplayGainInfo	src/tags.h	/^	ReplayGainInfo() { }$/;"	f	struct:Tags::ReplayGainInfo
ReplayGainInfo	src/tags.h	/^	ReplayGainInfo(std::string reference_loudness, std::string track_gain,$/;"	f	struct:Tags::ReplayGainInfo
ReplayGainInfo	src/tags.h	/^struct ReplayGainInfo$/;"	s	namespace:Tags
ReplayGainMode	src/mpdpp.h	/^enum ReplayGainMode { rgmOff, rgmTrack, rgmAlbum };$/;"	g	namespace:MPD
ReplaySong	src/actions.h	/^	ReplaySong(): BaseAction(Type::ReplaySong, "replay_song") { }$/;"	f	struct:Actions::ReplaySong
ReplaySong	src/actions.h	/^	ReplaySong,$/;"	e	enum:Actions::Type
ReplaySong	src/actions.h	/^struct ReplaySong: BaseAction$/;"	s	namespace:Actions
RequireRunnable	src/macro_utilities.cpp	/^RequireRunnable::RequireRunnable(std::shared_ptr<BaseAction> action)$/;"	f	class:Actions::RequireRunnable
RequireRunnable	src/macro_utilities.h	/^struct RequireRunnable: BaseAction$/;"	s	namespace:Actions
RequireScreen	src/macro_utilities.cpp	/^RequireScreen::RequireScreen(ScreenType screen_type)$/;"	f	class:Actions::RequireScreen
RequireScreen	src/macro_utilities.h	/^struct RequireScreen: BaseAction$/;"	s	namespace:Actions
ResetAutoScaleMultiplier	src/screens/visualizer.cpp	/^void Visualizer::ResetAutoScaleMultiplier()$/;"	f	class:Visualizer	typeref:typename:void
ResetButton	src/screens/search_engine.cpp	/^size_t SearchEngine::ResetButton = 16;$/;"	m	class:SearchEngine	typeref:typename:size_t
ResetButton	src/screens/search_engine.h	/^	static size_t ResetButton;$/;"	m	struct:SearchEngine	typeref:typename:size_t
ResetFD	src/screens/visualizer.cpp	/^void Visualizer::ResetFD()$/;"	f	class:Visualizer	typeref:typename:void
ResetSearchEngine	src/actions.h	/^	ResetSearchEngine(): BaseAction(Type::ResetSearchEngine, "reset_search_engine") { }$/;"	f	struct:Actions::ResetSearchEngine
ResetSearchEngine	src/actions.h	/^	ResetSearchEngine,$/;"	e	enum:Actions::Type
ResetSearchEngine	src/actions.h	/^struct ResetSearchEngine: BaseAction$/;"	s	namespace:Actions
Resource	src/utility/shared_resource.h	/^		Resource(std::mutex &mutex, ResourceT &resource)$/;"	f	struct:Shared::Resource
Resource	src/utility/shared_resource.h	/^	struct Resource$/;"	s	struct:Shared
Result	src/format.h	/^enum class Result { Empty, Missing, Ok };$/;"	g	namespace:Format
Result	src/lastfm_service.h	/^	typedef std::pair<bool, std::string> Result;$/;"	t	struct:LastFm::Service	typeref:typename:std::pair<bool,std::string>
Result	src/lyrics_fetcher.h	/^	typedef std::pair<bool, std::string> Result;$/;"	t	struct:LyricsFetcher	typeref:typename:std::pair<bool,std::string>
Reverse	src/curses/window.h	/^	Reverse, NoReverse,$/;"	e	enum:NC::Format
ReverseIterator	src/curses/menu.h	/^	typedef std::reverse_iterator<Iterator> ReverseIterator;$/;"	t	struct:NC::Menu	typeref:typename:std::reverse_iterator<Iterator>
ReversePlaylist	src/actions.h	/^	ReversePlaylist(): BaseAction(Type::ReversePlaylist, "reverse_playlist") { }$/;"	f	struct:Actions::ReversePlaylist
ReversePlaylist	src/actions.h	/^	ReversePlaylist,$/;"	e	enum:Actions::Type
ReversePlaylist	src/actions.h	/^struct ReversePlaylist: BaseAction$/;"	s	namespace:Actions
ReverseSelection	src/actions.h	/^	ReverseSelection(): BaseAction(Type::ReverseSelection, "reverse_selection") { }$/;"	f	struct:Actions::ReverseSelection
ReverseSelection	src/actions.h	/^	ReverseSelection,$/;"	e	enum:Actions::Type
ReverseSelection	src/actions.h	/^struct ReverseSelection: BaseAction$/;"	s	namespace:Actions
ReverseValueIterator	src/curses/menu.h	/^	typedef std::reverse_iterator<ValueIterator> ReverseValueIterator;$/;"	t	struct:NC::Menu	typeref:typename:std::reverse_iterator<ValueIterator>
Right	src/curses/window.h	/^const Type Right    = Special | 265;$/;"	v	namespace:NC::Key	typeref:typename:const Type
RightColumnStartX	src/screens/playlist_editor.cpp	/^size_t RightColumnStartX;$/;"	v	namespace:__anonfb05ef270111	typeref:typename:size_t
RightColumnStartX	src/screens/tag_editor.cpp	/^size_t RightColumnStartX;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
RightColumnWidth	src/screens/playlist_editor.cpp	/^size_t RightColumnWidth;$/;"	v	namespace:__anonfb05ef270111	typeref:typename:size_t
RightColumnWidth	src/screens/tag_editor.cpp	/^size_t RightColumnWidth;$/;"	v	namespace:__anonf6e1b7d10111	typeref:typename:size_t
RunAction	src/actions.h	/^	RunAction(): BaseAction(Type::RunAction, "run_action") { }$/;"	f	struct:Actions::RunAction
RunAction	src/actions.h	/^	RunAction,$/;"	e	enum:Actions::Type
RunAction	src/actions.h	/^struct RunAction: BaseAction$/;"	s	namespace:Actions
RunExternalCommand	src/macro_utilities.cpp	/^RunExternalCommand::RunExternalCommand(std::string &&command)$/;"	f	class:Actions::RunExternalCommand
RunExternalCommand	src/macro_utilities.h	/^struct RunExternalCommand: BaseAction$/;"	s	namespace:Actions
RunnableItem	src/runnable_item.h	/^	RunnableItem() { }$/;"	f	struct:RunnableItem
RunnableItem	src/runnable_item.h	/^	RunnableItem(Arg1 &&opt, Arg2 &&f)$/;"	f	struct:RunnableItem
RunnableItem	src/runnable_item.h	/^struct RunnableItem$/;"	s
SED	src/Makefile.in	/^SED = @SED@$/;"	m
SEItem	src/screens/search_engine.h	/^	SEItem() : m_is_song(false), m_buffer(0) { }$/;"	f	struct:SEItem
SEItem	src/screens/search_engine.h	/^	SEItem(NC::Buffer *buf) : m_is_song(false), m_buffer(buf) { }$/;"	f	struct:SEItem
SEItem	src/screens/search_engine.h	/^	SEItem(const MPD::Song &s) : m_is_song(true), m_song(s) { }$/;"	f	struct:SEItem
SEItem	src/screens/search_engine.h	/^	SEItem(const SEItem &ei) { *this = ei; }$/;"	f	struct:SEItem
SEItem	src/screens/search_engine.h	/^struct SEItem$/;"	s
SEItemEntryMatcher	src/screens/search_engine.cpp	/^bool SEItemEntryMatcher(const Regex::Regex &rx, const NC::Menu<SEItem>::Item &item, bool filter)$/;"	f	namespace:__anon1a0bc75a0211	typeref:typename:bool
SEItemToString	src/screens/search_engine.cpp	/^std::string SEItemToString(const SEItem &ei)$/;"	f	namespace:__anon1a0bc75a0211	typeref:typename:std::string
SEItems	src/display.cpp	/^void Display::SEItems(NC::Menu<SEItem> &menu, const SongList &list)$/;"	f	class:Display	typeref:typename:void
SET_MAKE	src/Makefile.in	/^SET_MAKE = @SET_MAKE@$/;"	m
SHELL	src/Makefile.in	/^SHELL = @SHELL@$/;"	m
SOURCES	src/Makefile.in	/^SOURCES = $(ncmpcpp_SOURCES)$/;"	m
STRIP	src/Makefile.in	/^STRIP = @STRIP@$/;"	m
Samples	src/screens/visualizer.cpp	/^using Samples = std::vector<int16_t>;$/;"	t	typeref:typename:std::vector<int16_t>	file:
SavePatternList	src/screens/tag_editor.cpp	/^void SavePatternList()$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:void
SavePlaylist	src/actions.h	/^	SavePlaylist(): BaseAction(Type::SavePlaylist, "save_playlist") { }$/;"	f	struct:Actions::SavePlaylist
SavePlaylist	src/actions.h	/^	SavePlaylist,$/;"	e	enum:Actions::Type
SavePlaylist	src/actions.h	/^struct SavePlaylist: BaseAction$/;"	s	namespace:Actions
SavePlaylist	src/mpdpp.cpp	/^void Connection::SavePlaylist(const std::string &name)$/;"	f	class:MPD::Connection	typeref:typename:void
SaveTagChanges	src/actions.h	/^	SaveTagChanges(): BaseAction(Type::SaveTagChanges, "save_tag_changes") { }$/;"	f	struct:Actions::SaveTagChanges
SaveTagChanges	src/actions.h	/^	SaveTagChanges,$/;"	e	enum:Actions::Type
SaveTagChanges	src/actions.h	/^struct SaveTagChanges: BaseAction$/;"	s	namespace:Actions
ScopedLock	src/statusbar.cpp	/^Progressbar::ScopedLock::ScopedLock() noexcept$/;"	f	class:Progressbar::ScopedLock
ScopedLock	src/statusbar.cpp	/^Statusbar::ScopedLock::ScopedLock() noexcept$/;"	f	class:Statusbar::ScopedLock
ScopedLock	src/statusbar.h	/^struct ScopedLock$/;"	s	namespace:Progressbar
ScopedLock	src/statusbar.h	/^struct ScopedLock$/;"	s	namespace:Statusbar
ScopedPromptHook	src/curses/window.h	/^		ScopedPromptHook(Window &w, HelperT &&helper) noexcept$/;"	f	struct:NC::Window::ScopedPromptHook
ScopedPromptHook	src/curses/window.h	/^	struct ScopedPromptHook$/;"	s	struct:NC::Window
ScopedTimeout	src/curses/window.h	/^		ScopedTimeout(Window &w, int new_timeout)$/;"	f	struct:NC::Window::ScopedTimeout
ScopedTimeout	src/curses/window.h	/^	struct ScopedTimeout$/;"	s	struct:NC::Window
ScopedUnfilteredMenu	src/helpers.h	/^	ScopedUnfilteredMenu(ReapplyFilter reapply_filter, NC::Menu<ItemT> &menu)$/;"	f	struct:ScopedUnfilteredMenu
ScopedUnfilteredMenu	src/helpers.h	/^struct ScopedUnfilteredMenu$/;"	s
ScopedValue	src/utility/scoped_value.h	/^	ScopedValue(ValueT &ref, ValueT &&new_value)$/;"	f	struct:ScopedValue
ScopedValue	src/utility/scoped_value.h	/^struct ScopedValue$/;"	s
Screen	src/screens/screen.h	/^	Screen() { }$/;"	f	struct:Screen
Screen	src/screens/screen.h	/^	Screen(WindowT w_) : w(w_) { }$/;"	f	struct:Screen
Screen	src/screens/screen.h	/^template <typename WindowT> struct Screen : public BaseScreen$/;"	s
ScreenType	src/screens/screen_type.h	/^enum class ScreenType {$/;"	g
Scroll	src/curses/window.h	/^enum class Scroll { Up, Down, PageUp, PageDown, Home, End };$/;"	g	namespace:NC
ScrollDown	src/actions.h	/^	ScrollDown(): BaseAction(Type::ScrollDown, "scroll_down") { }$/;"	f	struct:Actions::ScrollDown
ScrollDown	src/actions.h	/^	ScrollDown,$/;"	e	enum:Actions::Type
ScrollDown	src/actions.h	/^struct ScrollDown: BaseAction$/;"	s	namespace:Actions
ScrollDownAlbum	src/actions.h	/^	ScrollDownAlbum(): BaseAction(Type::ScrollDownAlbum, "scroll_down_album") { }$/;"	f	struct:Actions::ScrollDownAlbum
ScrollDownAlbum	src/actions.h	/^	ScrollDownAlbum,$/;"	e	enum:Actions::Type
ScrollDownAlbum	src/actions.h	/^struct ScrollDownAlbum: BaseAction$/;"	s	namespace:Actions
ScrollDownArtist	src/actions.h	/^	ScrollDownArtist(): BaseAction(Type::ScrollDownArtist, "scroll_down_artist") { }$/;"	f	struct:Actions::ScrollDownArtist
ScrollDownArtist	src/actions.h	/^	ScrollDownArtist,$/;"	e	enum:Actions::Type
ScrollDownArtist	src/actions.h	/^struct ScrollDownArtist: BaseAction$/;"	s	namespace:Actions
ScrollUp	src/actions.h	/^	ScrollUp(): BaseAction(Type::ScrollUp, "scroll_up") { }$/;"	f	struct:Actions::ScrollUp
ScrollUp	src/actions.h	/^	ScrollUp,$/;"	e	enum:Actions::Type
ScrollUp	src/actions.h	/^struct ScrollUp: BaseAction$/;"	s	namespace:Actions
ScrollUpAlbum	src/actions.h	/^	ScrollUpAlbum(): BaseAction(Type::ScrollUpAlbum, "scroll_up_album") { }$/;"	f	struct:Actions::ScrollUpAlbum
ScrollUpAlbum	src/actions.h	/^	ScrollUpAlbum,$/;"	e	enum:Actions::Type
ScrollUpAlbum	src/actions.h	/^struct ScrollUpAlbum: BaseAction$/;"	s	namespace:Actions
ScrollUpArtist	src/actions.h	/^	ScrollUpArtist(): BaseAction(Type::ScrollUpArtist, "scroll_up_artist") { }$/;"	f	struct:Actions::ScrollUpArtist
ScrollUpArtist	src/actions.h	/^	ScrollUpArtist,$/;"	e	enum:Actions::Type
ScrollUpArtist	src/actions.h	/^struct ScrollUpArtist: BaseAction$/;"	s	namespace:Actions
Scroller	src/helpers.cpp	/^std::wstring Scroller(const std::wstring &str, size_t &pos, size_t width)$/;"	f	typeref:typename:std::wstring
Scrollpad	src/curses/scrollpad.cpp	/^Scrollpad::Scrollpad(size_t startx,$/;"	f	class:NC::Scrollpad
Scrollpad	src/curses/scrollpad.h	/^	Scrollpad() { }$/;"	f	struct:NC::Scrollpad
Scrollpad	src/curses/scrollpad.h	/^struct Scrollpad: public Window$/;"	s	namespace:NC
Search	src/screens/search_engine.cpp	/^void SearchEngine::Search()$/;"	f	class:SearchEngine	typeref:typename:void
SearchButton	src/screens/search_engine.cpp	/^size_t SearchEngine::SearchButton = 15;$/;"	m	class:SearchEngine	typeref:typename:size_t
SearchButton	src/screens/search_engine.h	/^	static size_t SearchButton;$/;"	m	struct:SearchEngine	typeref:typename:size_t
SearchDirection	src/enums.h	/^enum class SearchDirection { Backward, Forward };$/;"	g
SearchEngine	src/screens/screen_type.h	/^	SearchEngine,$/;"	e	enum:ScreenType
SearchEngine	src/screens/search_engine.cpp	/^SearchEngine::SearchEngine()$/;"	f	class:SearchEngine
SearchEngine	src/screens/search_engine.h	/^struct SearchEngine: Screen<SearchEngineWindow>, Filterable, HasActions, HasSongs, Searchable, T/;"	s
SearchEngineWindow	src/screens/search_engine.h	/^	SearchEngineWindow() { }$/;"	f	struct:SearchEngineWindow
SearchEngineWindow	src/screens/search_engine.h	/^	SearchEngineWindow(NC::Menu<SEItem> &&base)$/;"	f	struct:SearchEngineWindow
SearchEngineWindow	src/screens/search_engine.h	/^struct SearchEngineWindow: NC::Menu<SEItem>, SongList$/;"	s
SearchMode	src/screens/search_engine.h	/^	const char **SearchMode;$/;"	m	struct:SearchEngine	typeref:typename:const char **
SearchModes	src/screens/search_engine.cpp	/^const char *SearchEngine::SearchModes[] =$/;"	m	class:SearchEngine	typeref:typename:const char * []
SearchModes	src/screens/search_engine.h	/^	static const char *SearchModes[];$/;"	m	struct:SearchEngine	typeref:typename:const char * []
Searchable	src/interfaces.h	/^struct Searchable$/;"	s
Seek	src/mpdpp.cpp	/^void Connection::Seek(unsigned pos, unsigned where)$/;"	f	class:MPD::Connection	typeref:typename:void
SeekBackward	src/actions.h	/^	SeekBackward(): BaseAction(Type::SeekBackward, "seek_backward") { }$/;"	f	struct:Actions::SeekBackward
SeekBackward	src/actions.h	/^	SeekBackward,$/;"	e	enum:Actions::Type
SeekBackward	src/actions.h	/^struct SeekBackward: BaseAction$/;"	s	namespace:Actions
SeekForward	src/actions.h	/^	SeekForward(): BaseAction(Type::SeekForward, "seek_forward") { }$/;"	f	struct:Actions::SeekForward
SeekForward	src/actions.h	/^	SeekForward,$/;"	e	enum:Actions::Type
SeekForward	src/actions.h	/^struct SeekForward: BaseAction$/;"	s	namespace:Actions
SeekingInProgress	src/global.cpp	/^bool SeekingInProgress = false;$/;"	v	namespace:Global	typeref:typename:bool
SelectAlbum	src/actions.h	/^	SelectAlbum(): BaseAction(Type::SelectAlbum, "select_album") { }$/;"	f	struct:Actions::SelectAlbum
SelectAlbum	src/actions.h	/^	SelectAlbum,$/;"	e	enum:Actions::Type
SelectAlbum	src/actions.h	/^struct SelectAlbum: BaseAction$/;"	s	namespace:Actions
SelectFoundItems	src/actions.h	/^	SelectFoundItems(): BaseAction(Type::SelectFoundItems, "select_found_items") { }$/;"	f	struct:Actions::SelectFoundItems
SelectFoundItems	src/actions.h	/^	SelectFoundItems,$/;"	e	enum:Actions::Type
SelectFoundItems	src/actions.h	/^struct SelectFoundItems: BaseAction$/;"	s	namespace:Actions
SelectItem	src/actions.h	/^	SelectItem(): BaseAction(Type::SelectItem, "select_item") { }$/;"	f	struct:Actions::SelectItem
SelectItem	src/actions.h	/^	SelectItem,$/;"	e	enum:Actions::Type
SelectItem	src/actions.h	/^struct SelectItem: BaseAction$/;"	s	namespace:Actions
SelectRange	src/actions.h	/^	SelectRange(): BaseAction(Type::SelectRange, "select_range") { }$/;"	f	struct:Actions::SelectRange
SelectRange	src/actions.h	/^	SelectRange,$/;"	e	enum:Actions::Type
SelectRange	src/actions.h	/^struct SelectRange: BaseAction$/;"	s	namespace:Actions
Selectable	src/curses/menu.h	/^			Selectable = (1 << 0),$/;"	e	enum:NC::List::Properties::Type
Selected	src/curses/menu.h	/^			Selected   = (1 << 1),$/;"	e	enum:NC::List::Properties::Type
SelectedItemsAdder	src/screens/screen_type.h	/^	SelectedItemsAdder,$/;"	e	enum:ScreenType
SelectedItemsAdder	src/screens/sel_items_adder.cpp	/^SelectedItemsAdder::SelectedItemsAdder()$/;"	f	class:SelectedItemsAdder
SelectedItemsAdder	src/screens/sel_items_adder.h	/^struct SelectedItemsAdder: Screen<NC::Menu<RunnableItem<std::string, void()>> *>, HasActions, Se/;"	s
Self	src/screens/sel_items_adder.h	/^	typedef SelectedItemsAdder Self;$/;"	t	struct:SelectedItemsAdder	typeref:typename:SelectedItemsAdder
Self	src/screens/sort_playlist.h	/^	typedef SortPlaylistDialog Self;$/;"	t	struct:SortPlaylistDialog	typeref:typename:SortPlaylistDialog
SendPassword	src/mpdpp.cpp	/^void Connection::SendPassword()$/;"	f	class:MPD::Connection	typeref:typename:void
Separator	src/curses/menu.h	/^			Separator  = (1 << 3)$/;"	e	enum:NC::List::Properties::Type
ServerError	src/mpdpp.h	/^	ServerError(mpd_server_error code_, std::string msg, bool clearable_)$/;"	f	struct:MPD::ServerError
ServerError	src/mpdpp.h	/^struct ServerError: public std::exception$/;"	s	namespace:MPD
ServerInfo	src/screens/screen_type.h	/^	ServerInfo,$/;"	e	enum:ScreenType
ServerInfo	src/screens/server_info.cpp	/^ServerInfo::ServerInfo()$/;"	f	class:ServerInfo
ServerInfo	src/screens/server_info.h	/^struct ServerInfo: Screen<NC::Scrollpad>, Tabbable$/;"	s
Service	src/lastfm_service.h	/^	Service(Arguments args) : m_arguments(args) { }$/;"	f	struct:LastFm::Service
Service	src/lastfm_service.h	/^struct Service$/;"	s	namespace:LastFm
Set	src/screens/clock.cpp	/^void Clock::Set(int t, int n)$/;"	f	class:Clock	typeref:typename:void
Set	src/screens/song_info.h	/^		MPD::MutableSong::SetFunction Set;$/;"	m	struct:SongInfo::Metadata	typeref:typename:MPD::MutableSong::SetFunction
SetConsume	src/mpdpp.cpp	/^void Connection::SetConsume(bool mode)$/;"	f	class:MPD::Connection	typeref:typename:void
SetCrossfade	src/actions.h	/^	SetCrossfade(): BaseAction(Type::SetCrossfade, "set_crossfade") { }$/;"	f	struct:Actions::SetCrossfade
SetCrossfade	src/actions.h	/^	SetCrossfade,$/;"	e	enum:Actions::Type
SetCrossfade	src/actions.h	/^struct SetCrossfade: BaseAction$/;"	s	namespace:Actions
SetCrossfade	src/mpdpp.cpp	/^void Connection::SetCrossfade(unsigned crossfade)$/;"	f	class:MPD::Connection	typeref:typename:void
SetDimensions	src/screens/server_info.cpp	/^void ServerInfo::SetDimensions()$/;"	f	class:ServerInfo	typeref:typename:void
SetDimensions	src/screens/tag_editor.cpp	/^void TagEditor::SetDimensions(size_t x_offset, size_t width)$/;"	f	class:TagEditor	typeref:typename:void
SetEdited	src/screens/tiny_tag_editor.cpp	/^void TinyTagEditor::SetEdited(const MPD::Song &s)$/;"	f	class:TinyTagEditor	typeref:typename:void
SetFD	src/screens/visualizer.cpp	/^void Visualizer::SetFD()$/;"	f	class:Visualizer	typeref:typename:void
SetFunction	src/mutable_song.h	/^	typedef void (MutableSong::*SetFunction)(const std::string &, unsigned);$/;"	t	struct:MPD::MutableSong	typeref:typename:void (MutableSong::*)(const std::string &,unsigned)
SetHostname	src/mpdpp.cpp	/^void Connection::SetHostname(const std::string &host)$/;"	f	class:MPD::Connection	typeref:typename:void
SetPassword	src/mpdpp.h	/^	void SetPassword(const std::string &password) { m_password = password; }$/;"	f	struct:MPD::Connection	typeref:typename:void
SetPort	src/mpdpp.h	/^	void SetPort(int port) { m_port = port; }$/;"	f	struct:MPD::Connection	typeref:typename:void
SetPriority	src/mpdpp.cpp	/^void Connection::SetPriority(const Song &s, int prio)$/;"	f	class:MPD::Connection	typeref:typename:void
SetRandom	src/mpdpp.cpp	/^void Connection::SetRandom(bool mode)$/;"	f	class:MPD::Connection	typeref:typename:void
SetRepeat	src/mpdpp.cpp	/^void Connection::SetRepeat(bool mode)$/;"	f	class:MPD::Connection	typeref:typename:void
SetReplayGainMode	src/mpdpp.cpp	/^void Connection::SetReplayGainMode(ReplayGainMode mode)$/;"	f	class:MPD::Connection	typeref:typename:void
SetSelectedItemsPriority	src/actions.h	/^	SetSelectedItemsPriority()$/;"	f	struct:Actions::SetSelectedItemsPriority
SetSelectedItemsPriority	src/actions.h	/^	SetSelectedItemsPriority,$/;"	e	enum:Actions::Type
SetSelectedItemsPriority	src/actions.h	/^struct SetSelectedItemsPriority: BaseAction$/;"	s	namespace:Actions
SetSingle	src/mpdpp.cpp	/^void Connection::SetSingle(bool mode)$/;"	f	class:MPD::Connection	typeref:typename:void
SetTimeout	src/mpdpp.h	/^	void SetTimeout(int timeout) { m_timeout = timeout; }$/;"	f	struct:MPD::Connection	typeref:typename:void
SetVolume	src/actions.h	/^	SetVolume(): BaseAction(Type::SetVolume, "set_volume") { }$/;"	f	struct:Actions::SetVolume
SetVolume	src/actions.h	/^	SetVolume,$/;"	e	enum:Actions::Type
SetVolume	src/actions.h	/^struct SetVolume: BaseAction$/;"	s	namespace:Actions
SetVolume	src/mpdpp.cpp	/^void Connection::SetVolume(unsigned vol)$/;"	f	class:MPD::Connection	typeref:typename:void
Shared	src/utility/shared_resource.h	/^	Shared(){ }$/;"	f	struct:Shared
Shared	src/utility/shared_resource.h	/^	Shared(ValueT &&value)$/;"	f	struct:Shared
Shared	src/utility/shared_resource.h	/^struct Shared$/;"	s
ShowArtistInfo	src/actions.h	/^	ShowArtistInfo(): BaseAction(Type::ShowArtistInfo, "show_artist_info") { }$/;"	f	struct:Actions::ShowArtistInfo
ShowArtistInfo	src/actions.h	/^	ShowArtistInfo,$/;"	e	enum:Actions::Type
ShowArtistInfo	src/actions.h	/^struct ShowArtistInfo: BaseAction$/;"	s	namespace:Actions
ShowBrowser	src/actions.h	/^	ShowBrowser(): BaseAction(Type::ShowBrowser, "show_browser") { }$/;"	f	struct:Actions::ShowBrowser
ShowBrowser	src/actions.h	/^	ShowBrowser,$/;"	e	enum:Actions::Type
ShowBrowser	src/actions.h	/^struct ShowBrowser: BaseAction$/;"	s	namespace:Actions
ShowClock	src/actions.h	/^	ShowClock(): BaseAction(Type::ShowClock, "show_clock") { }$/;"	f	struct:Actions::ShowClock
ShowClock	src/actions.h	/^	ShowClock,$/;"	e	enum:Actions::Type
ShowClock	src/actions.h	/^struct ShowClock: BaseAction$/;"	s	namespace:Actions
ShowDuplicateTags	src/song.cpp	/^bool Song::ShowDuplicateTags = true;$/;"	m	class:MPD::Song	typeref:typename:bool
ShowDuplicateTags	src/song.h	/^	static bool ShowDuplicateTags;$/;"	m	struct:MPD::Song	typeref:typename:bool
ShowHelp	src/actions.h	/^	ShowHelp(): BaseAction(Type::ShowHelp, "show_help") { }$/;"	f	struct:Actions::ShowHelp
ShowHelp	src/actions.h	/^	ShowHelp,$/;"	e	enum:Actions::Type
ShowHelp	src/actions.h	/^struct ShowHelp: BaseAction$/;"	s	namespace:Actions
ShowLyrics	src/actions.h	/^	ShowLyrics(): BaseAction(Type::ShowLyrics, "show_lyrics") { }$/;"	f	struct:Actions::ShowLyrics
ShowLyrics	src/actions.h	/^	ShowLyrics,$/;"	e	enum:Actions::Type
ShowLyrics	src/actions.h	/^struct ShowLyrics: BaseAction$/;"	s	namespace:Actions
ShowMediaLibrary	src/actions.h	/^	ShowMediaLibrary(): BaseAction(Type::ShowMediaLibrary, "show_media_library") { }$/;"	f	struct:Actions::ShowMediaLibrary
ShowMediaLibrary	src/actions.h	/^	ShowMediaLibrary,$/;"	e	enum:Actions::Type
ShowMediaLibrary	src/actions.h	/^struct ShowMediaLibrary: BaseAction$/;"	s	namespace:Actions
ShowMessages	src/global.cpp	/^bool ShowMessages = false;$/;"	v	namespace:Global	typeref:typename:bool
ShowOutputs	src/actions.h	/^	ShowOutputs(): BaseAction(Type::ShowOutputs, "show_outputs") { }$/;"	f	struct:Actions::ShowOutputs
ShowOutputs	src/actions.h	/^	ShowOutputs,$/;"	e	enum:Actions::Type
ShowOutputs	src/actions.h	/^struct ShowOutputs: BaseAction$/;"	s	namespace:Actions
ShowPlaylist	src/actions.h	/^	ShowPlaylist(): BaseAction(Type::ShowPlaylist, "show_playlist") { }$/;"	f	struct:Actions::ShowPlaylist
ShowPlaylist	src/actions.h	/^	ShowPlaylist,$/;"	e	enum:Actions::Type
ShowPlaylist	src/actions.h	/^struct ShowPlaylist: BaseAction$/;"	s	namespace:Actions
ShowPlaylistEditor	src/actions.h	/^	ShowPlaylistEditor(): BaseAction(Type::ShowPlaylistEditor, "show_playlist_editor") { }$/;"	f	struct:Actions::ShowPlaylistEditor
ShowPlaylistEditor	src/actions.h	/^	ShowPlaylistEditor,$/;"	e	enum:Actions::Type
ShowPlaylistEditor	src/actions.h	/^struct ShowPlaylistEditor: BaseAction$/;"	s	namespace:Actions
ShowSearchEngine	src/actions.h	/^	ShowSearchEngine(): BaseAction(Type::ShowSearchEngine, "show_search_engine") { }$/;"	f	struct:Actions::ShowSearchEngine
ShowSearchEngine	src/actions.h	/^	ShowSearchEngine,$/;"	e	enum:Actions::Type
ShowSearchEngine	src/actions.h	/^struct ShowSearchEngine: BaseAction$/;"	s	namespace:Actions
ShowServerInfo	src/actions.h	/^	ShowServerInfo(): BaseAction(Type::ShowServerInfo, "show_server_info") { }$/;"	f	struct:Actions::ShowServerInfo
ShowServerInfo	src/actions.h	/^	ShowServerInfo,$/;"	e	enum:Actions::Type
ShowServerInfo	src/actions.h	/^struct ShowServerInfo: BaseAction$/;"	s	namespace:Actions
ShowSongInfo	src/actions.h	/^	ShowSongInfo(): BaseAction(Type::ShowSongInfo, "show_song_info") { }$/;"	f	struct:Actions::ShowSongInfo
ShowSongInfo	src/actions.h	/^	ShowSongInfo,$/;"	e	enum:Actions::Type
ShowSongInfo	src/actions.h	/^struct ShowSongInfo: BaseAction$/;"	s	namespace:Actions
ShowTag	src/helpers.h	/^inline NC::Buffer ShowTag(const std::string &tag)$/;"	f	typeref:typename:NC::Buffer
ShowTag	src/helpers.h	/^void ShowTag(BufferT &buf, const std::string &tag)$/;"	f	typeref:typename:void
ShowTagEditor	src/actions.h	/^	ShowTagEditor(): BaseAction(Type::ShowTagEditor, "show_tag_editor") { }$/;"	f	struct:Actions::ShowTagEditor
ShowTagEditor	src/actions.h	/^	ShowTagEditor,$/;"	e	enum:Actions::Type
ShowTagEditor	src/actions.h	/^struct ShowTagEditor: BaseAction$/;"	s	namespace:Actions
ShowTime	src/helpers.h	/^template <typename T> void ShowTime(T &buf, size_t length, bool short_names)$/;"	f	typeref:typename:void
ShowTime	src/song.cpp	/^std::string Song::ShowTime(unsigned length)$/;"	f	class:MPD::Song	typeref:typename:std::string
ShowVisualizer	src/actions.h	/^	ShowVisualizer(): BaseAction(Type::ShowVisualizer, "show_visualizer") { }$/;"	f	struct:Actions::ShowVisualizer
ShowVisualizer	src/actions.h	/^	ShowVisualizer,$/;"	e	enum:Actions::Type
ShowVisualizer	src/actions.h	/^struct ShowVisualizer: BaseAction$/;"	s	namespace:Actions
Shuffle	src/actions.h	/^	Shuffle(): BaseAction(Type::Shuffle, "shuffle") { }$/;"	f	struct:Actions::Shuffle
Shuffle	src/actions.h	/^	Shuffle,$/;"	e	enum:Actions::Type
Shuffle	src/actions.h	/^struct Shuffle: BaseAction$/;"	s	namespace:Actions
Shuffle	src/mpdpp.cpp	/^void Connection::Shuffle()$/;"	f	class:MPD::Connection	typeref:typename:void
ShuffleRange	src/mpdpp.cpp	/^void Connection::ShuffleRange(unsigned start, unsigned end)$/;"	f	class:MPD::Connection	typeref:typename:void
Sing365Fetcher	src/lyrics_fetcher.h	/^struct Sing365Fetcher : public GoogleLyricsFetcher$/;"	s
SlaveScreen	src/actions.h	/^	SlaveScreen(): BaseAction(Type::SlaveScreen, "slave_screen") { }$/;"	f	struct:Actions::SlaveScreen
SlaveScreen	src/actions.h	/^	SlaveScreen,$/;"	e	enum:Actions::Type
SlaveScreen	src/actions.h	/^struct SlaveScreen: BaseAction$/;"	s	namespace:Actions
SomeString	src/format_impl.h	/^		typedef std::basic_string<SomeCharT> SomeString;$/;"	m	struct:Format::Printer	typeref:struct:output_
Song	src/mpdpp.h	/^	enum class Type { Directory, Song, Playlist };$/;"	e	enum:MPD::Item::Type
Song	src/screens/lyrics.h	/^			Song()$/;"	f	struct:Lyrics::ConsumerState::Song
Song	src/screens/lyrics.h	/^			Song(const MPD::Song &s, bool notify_)$/;"	f	struct:Lyrics::ConsumerState::Song
Song	src/screens/lyrics.h	/^		struct Song$/;"	s	struct:Lyrics::ConsumerState
Song	src/song.cpp	/^Song::Song(mpd_song *s)$/;"	f	class:MPD::Song
Song	src/song.h	/^	Song() : m_hash(0) { }$/;"	f	struct:MPD::Song
Song	src/song.h	/^	Song(Song &&rhs) : m_song(std::move(rhs.m_song)), m_hash(rhs.m_hash) { }$/;"	f	struct:MPD::Song
Song	src/song.h	/^	Song(const Song &rhs) : m_song(rhs.m_song), m_hash(rhs.m_hash) { }$/;"	f	struct:MPD::Song
Song	src/song.h	/^struct Song$/;"	s	namespace:MPD
SongEntryMatcher	src/screens/media_library.cpp	/^bool SongEntryMatcher(const Regex::Regex &rx, const MPD::Song &s)$/;"	f	namespace:__anon50035b830711	typeref:typename:bool
SongEntryMatcher	src/screens/playlist_editor.cpp	/^bool SongEntryMatcher(const Regex::Regex &rx, const MPD::Song &s)$/;"	f	namespace:__anonfb05ef270511	typeref:typename:bool
SongEntryMatcher	src/screens/tag_editor.cpp	/^bool SongEntryMatcher(const Regex::Regex &rx, const MPD::MutableSong &s)$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:bool
SongInfo	src/screens/screen_type.h	/^	SongInfo,$/;"	e	enum:ScreenType
SongInfo	src/screens/song_info.cpp	/^SongInfo::SongInfo()$/;"	f	class:SongInfo
SongInfo	src/screens/song_info.h	/^struct SongInfo: Screen<NC::Scrollpad>, Tabbable$/;"	s
SongItem	src/screens/media_library.cpp	/^	typedef NC::Menu<MPD::Song>::Item SongItem;$/;"	t	struct:__anon50035b830111::SortSongs	typeref:typename:NC::Menu<MPD::Song>::Item	file:
SongIterator	src/mpdpp.h	/^typedef Iterator<Song> SongIterator;$/;"	t	namespace:MPD	typeref:typename:Iterator<Song>
SongIterator	src/song_list.h	/^typedef SongIteratorT<Const::No> SongIterator;$/;"	t	typeref:typename:SongIteratorT<Const::No>
SongIteratorT	src/song_list.h	/^using SongIteratorT = boost::range_detail::any_iterator<$/;"	t
SongList	src/song_list.h	/^struct SongList$/;"	s
SongMenu	src/song_list.h	/^	SongMenu() { }$/;"	f	struct:SongMenu
SongMenu	src/song_list.h	/^	SongMenu(NC::Menu<MPD::Song> &&base)$/;"	f	struct:SongMenu
SongMenu	src/song_list.h	/^struct SongMenu: NC::Menu<MPD::Song>, SongList$/;"	s
SongProperties	src/song_list.h	/^	SongProperties()$/;"	f	struct:SongProperties
SongProperties	src/song_list.h	/^struct SongProperties$/;"	s
SongPropertiesExtractor	src/helpers/song_iterator_maker.h	/^struct SongPropertiesExtractor$/;"	s
SongPropertiesExtractor	src/screens/browser.cpp	/^struct SongPropertiesExtractor<MPD::Item>$/;"	s	file:
SongPropertiesExtractor	src/screens/search_engine.cpp	/^struct SongPropertiesExtractor<SEItem>$/;"	s	file:
SongTag	src/format.h	/^	SongTag(MPD::Song::GetFunction function_, unsigned delimiter_ = 0)$/;"	f	struct:Format::SongTag
SongTag	src/format.h	/^struct SongTag$/;"	s	namespace:Format
SongToString	src/screens/media_library.cpp	/^std::string SongToString(const MPD::Song &s)$/;"	f	namespace:__anon50035b830711	typeref:typename:std::string
SongToString	src/screens/playlist_editor.cpp	/^std::string SongToString(const MPD::Song &s)$/;"	f	namespace:__anonfb05ef270511	typeref:typename:std::string
SongToString	src/screens/tag_editor.cpp	/^std::string SongToString(const MPD::MutableSong &s)$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:std::string
Songs	src/display.cpp	/^void Display::Songs(NC::Menu<MPD::Song> &menu, const SongList &list, const Format::AST<char> &as/;"	f	class:Display	typeref:typename:void
Songs	src/screens/media_library.h	/^	SongMenu Songs;$/;"	m	struct:MediaLibrary	typeref:typename:SongMenu
SongsInColumns	src/display.cpp	/^void Display::SongsInColumns(NC::Menu<MPD::Song> &menu, const SongList &list)$/;"	f	class:Display	typeref:typename:void
SortAlbumEntries	src/screens/media_library.cpp	/^	SortAlbumEntries() : m_cmp(std::locale(), Config.ignore_leading_the) { }$/;"	f	class:__anon50035b830111::SortAlbumEntries	file:
SortAlbumEntries	src/screens/media_library.cpp	/^class SortAlbumEntries {$/;"	c	namespace:__anon50035b830111	file:
SortMode	src/enums.h	/^enum class SortMode { Name, ModificationTime, CustomFormat, NoOp };$/;"	g
SortPlaylist	src/actions.h	/^	SortPlaylist(): BaseAction(Type::SortPlaylist, "sort_playlist") { }$/;"	f	struct:Actions::SortPlaylist
SortPlaylist	src/actions.h	/^	SortPlaylist,$/;"	e	enum:Actions::Type
SortPlaylist	src/actions.h	/^struct SortPlaylist: BaseAction$/;"	s	namespace:Actions
SortPlaylistDialog	src/screens/screen_type.h	/^	SortPlaylistDialog,$/;"	e	enum:ScreenType
SortPlaylistDialog	src/screens/sort_playlist.cpp	/^SortPlaylistDialog::SortPlaylistDialog()$/;"	f	class:SortPlaylistDialog
SortPlaylistDialog	src/screens/sort_playlist.h	/^struct SortPlaylistDialog$/;"	s
SortPrimaryTags	src/screens/media_library.cpp	/^	SortPrimaryTags() : m_cmp(std::locale(), Config.ignore_leading_the) { }$/;"	f	class:__anon50035b830111::SortPrimaryTags	file:
SortPrimaryTags	src/screens/media_library.cpp	/^class SortPrimaryTags {$/;"	c	namespace:__anon50035b830111	file:
SortSongs	src/screens/media_library.cpp	/^	SortSongs()$/;"	f	struct:__anon50035b830111::SortSongs	file:
SortSongs	src/screens/media_library.cpp	/^struct SortSongs {$/;"	s	namespace:__anon50035b830111	file:
Space	src/curses/window.h	/^const Type Space     = 32;$/;"	v	namespace:NC::Key	typeref:typename:const Type
SpaceAddMode	src/enums.h	/^enum class SpaceAddMode { AddRemove, AlwaysAdd };$/;"	g
Spectrum	src/enums.h	/^	Spectrum,$/;"	e	enum:VisualizerType
StartCommandsList	src/mpdpp.cpp	/^void Connection::StartCommandsList()$/;"	f	class:MPD::Connection	typeref:typename:void
StartFieldSearch	src/mpdpp.cpp	/^void Connection::StartFieldSearch(mpd_tag_type item)$/;"	f	class:MPD::Connection	typeref:typename:void
StartSearch	src/mpdpp.cpp	/^void Connection::StartSearch(bool exact_match)$/;"	f	class:MPD::Connection	typeref:typename:void
StartSearching	src/actions.h	/^	StartSearching(): BaseAction(Type::StartSearching, "start_searching") { }$/;"	f	struct:Actions::StartSearching
StartSearching	src/actions.h	/^	StartSearching,$/;"	e	enum:Actions::Type
StartSearching	src/actions.h	/^struct StartSearching: BaseAction$/;"	s	namespace:Actions
State	src/mpdpp.h	/^		State(mpd_connection *connection_, Fetcher fetcher)$/;"	f	struct:MPD::Iterator::State
State	src/mpdpp.h	/^	struct State$/;"	s	struct:MPD::Iterator
State	src/song_list.h	/^	enum class State { Undefined, Const, Mutable };$/;"	g	struct:SongProperties
State	src/status.h	/^namespace State {$/;"	n	namespace:Status
StaticOptions	src/screens/search_engine.cpp	/^size_t SearchEngine::StaticOptions = 20;$/;"	m	class:SearchEngine	typeref:typename:size_t
StaticOptions	src/screens/search_engine.h	/^	static size_t StaticOptions;$/;"	m	struct:SearchEngine	typeref:typename:size_t
Statistics	src/mpdpp.h	/^	Statistics(mpd_stats *stats) : m_stats(stats, mpd_stats_free) { }$/;"	f	struct:MPD::Statistics
Statistics	src/mpdpp.h	/^struct Statistics$/;"	s	namespace:MPD
Status	src/mpdpp.h	/^	Status() { }$/;"	f	struct:MPD::Status
Status	src/mpdpp.h	/^	Status(mpd_status *status) : m_status(status, mpd_status_free) { }$/;"	f	struct:MPD::Status
Status	src/mpdpp.h	/^struct Status$/;"	s	namespace:MPD
Status	src/status.h	/^namespace Status {$/;"	n
Statusbar	src/statusbar.h	/^namespace Statusbar {$/;"	n
Stop	src/actions.h	/^	Stop(): BaseAction(Type::Stop, "stop") { }$/;"	f	struct:Actions::Stop
Stop	src/actions.h	/^	Stop,$/;"	e	enum:Actions::Type
Stop	src/actions.h	/^struct Stop: BaseAction$/;"	s	namespace:Actions
Stop	src/mpdpp.cpp	/^void Connection::Stop()$/;"	f	class:MPD::Connection	typeref:typename:void
StorageKind	src/utility/storage_kind.h	/^enum class StorageKind { Reference, Value };$/;"	g
StringIterator	src/mpdpp.h	/^typedef Iterator<std::string> StringIterator;$/;"	t	namespace:MPD	typeref:typename:Iterator<std::string>
StringT	src/format_impl.h	/^	typedef std::basic_string<CharT> StringT;$/;"	t	struct:Format::Printer	typeref:typename:std::basic_string<CharT>
StringType	src/curses/strbuffer.h	/^	typedef std::basic_string<CharT> StringType;$/;"	t	class:NC::BasicBuffer	typeref:typename:std::basic_string<CharT>
StripDiacritics	src/regex_filter.h	/^struct StripDiacritics$/;"	s	namespace:__anon4539d7d20111
Swap	src/mpdpp.cpp	/^void Connection::Swap(unsigned from, unsigned to)$/;"	f	class:MPD::Connection	typeref:typename:void
SwitchTo	src/screens/screen_switcher.h	/^class SwitchTo$/;"	c
TAGLIB_CONFIG	src/Makefile.in	/^TAGLIB_CONFIG = @TAGLIB_CONFIG@$/;"	m
TAGS	src/Makefile.in	/^TAGS: tags$/;"	t
Tab	src/curses/window.h	/^const Type Tab    = 9;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Tabbable	src/interfaces.h	/^	Tabbable() : m_previous_screen(0) { }$/;"	f	struct:Tabbable
Tabbable	src/interfaces.h	/^struct Tabbable$/;"	s
TabbableAction_	src/screens/screen_switcher.h	/^	template <bool ToBeExecuted, typename ScreenT> struct TabbableAction_ {$/;"	s	class:SwitchTo
TabbableAction_	src/screens/screen_switcher.h	/^	template <typename ScreenT> struct TabbableAction_<true, ScreenT> {$/;"	s	class:SwitchTo
Tag	src/format.h	/^const unsigned Tag = 8;$/;"	v	namespace:Format::Flags	typeref:typename:const unsigned
Tag	src/mutable_song.h	/^		Tag(mpd_tag_type type_, unsigned idx_) : m_type(type_), m_idx(idx_) { }$/;"	f	struct:MPD::MutableSong::Tag
Tag	src/mutable_song.h	/^	struct Tag$/;"	s	struct:MPD::MutableSong
TagEditor	src/screens/screen_type.h	/^	TagEditor,$/;"	e	enum:ScreenType
TagEditor	src/screens/tag_editor.cpp	/^TagEditor::TagEditor() : FParser(0), FParserHelper(0), FParserLegend(0), FParserPreview(0), itsB/;"	f	class:TagEditor
TagEditor	src/screens/tag_editor.h	/^struct TagEditor: Screen<NC::Window *>, HasActions, HasColumns, HasSongs, Searchable, Tabbable$/;"	s
TagEntryMatcher	src/screens/media_library.cpp	/^bool TagEntryMatcher(const Regex::Regex &rx, const PrimaryTag &pt)$/;"	f	namespace:__anon50035b830711	typeref:typename:bool
TagTypes	src/screens/tag_editor.h	/^	NC::Menu<std::string> *TagTypes;$/;"	m	struct:TagEditor	typeref:typename:NC::Menu<std::string> *
TagVector	src/format.h	/^using TagVector = std::vector<$/;"	t	namespace:Format	typeref:typename:std::vector<std::pair<boost::optional<SongTag>,std::basic_string<CharT>>>
Tags	src/display.cpp	/^void Display::Tags(NC::Menu<MPD::MutableSong> &menu)$/;"	f	class:Display	typeref:typename:void
Tags	src/screens/media_library.h	/^	NC::Menu<PrimaryTag> Tags;$/;"	m	struct:MediaLibrary	typeref:typename:NC::Menu<PrimaryTag>
Tags	src/screens/song_info.cpp	/^const SongInfo::Metadata SongInfo::Tags[] =$/;"	m	class:SongInfo	typeref:typename:const SongInfo::Metadata[]
Tags	src/screens/song_info.h	/^	static const Metadata Tags[];$/;"	m	struct:SongInfo	typeref:typename:const Metadata[]
Tags	src/screens/tag_editor.h	/^	TagsWindow *Tags;$/;"	m	struct:TagEditor	typeref:typename:TagsWindow *
Tags	src/tags.cpp	/^namespace Tags {$/;"	n	file:
Tags	src/tags.h	/^namespace Tags {$/;"	n
TagsSeparator	src/song.cpp	/^std::string Song::TagsSeparator = " | ";$/;"	m	class:MPD::Song	typeref:typename:std::string
TagsSeparator	src/song.h	/^	static std::string TagsSeparator;$/;"	m	struct:MPD::Song	typeref:typename:std::string
TagsWindow	src/screens/tag_editor.h	/^	TagsWindow() { }$/;"	f	struct:TagsWindow
TagsWindow	src/screens/tag_editor.h	/^	TagsWindow(NC::Menu<MPD::MutableSong> &&base)$/;"	f	struct:TagsWindow
TagsWindow	src/screens/tag_editor.h	/^struct TagsWindow: NC::Menu<MPD::MutableSong>, SongList$/;"	s
TekstowoFetcher	src/lyrics_fetcher.h	/^struct TekstowoFetcher : public GoogleLyricsFetcher$/;"	s
TermManip	src/curses/window.h	/^enum class TermManip { ClearToEOL };$/;"	g	namespace:NC
Timer	src/global.cpp	/^boost::posix_time::ptime Timer;$/;"	v	namespace:Global	typeref:typename:boost::posix_time::ptime
Timestamp	src/helpers.cpp	/^std::string Timestamp(time_t t)$/;"	f	typeref:typename:std::string
TinyTagEditor	src/screens/screen_type.h	/^	TinyTagEditor,$/;"	e	enum:ScreenType
TinyTagEditor	src/screens/tiny_tag_editor.cpp	/^TinyTagEditor::TinyTagEditor()$/;"	f	class:TinyTagEditor
TinyTagEditor	src/screens/tiny_tag_editor.h	/^struct TinyTagEditor: Screen<NC::Menu<NC::Buffer>>, HasActions$/;"	s
ToString	src/utility/wide_string.h	/^std::string ToString(StringT &&s)$/;"	f	typeref:typename:std::string
ToWString	src/utility/wide_string.h	/^std::wstring ToWString(StringT &&s)$/;"	f	typeref:typename:std::wstring
Toggle	src/mpdpp.cpp	/^void Connection::Toggle()$/;"	f	class:MPD::Connection	typeref:typename:void
ToggleAddMode	src/actions.h	/^	ToggleAddMode(): BaseAction(Type::ToggleAddMode, "toggle_add_mode") { }$/;"	f	struct:Actions::ToggleAddMode
ToggleAddMode	src/actions.h	/^	ToggleAddMode,$/;"	e	enum:Actions::Type
ToggleAddMode	src/actions.h	/^struct ToggleAddMode: BaseAction$/;"	s	namespace:Actions
ToggleBitrateVisibility	src/actions.h	/^	ToggleBitrateVisibility(): BaseAction(Type::ToggleBitrateVisibility, "toggle_bitrate_visibility/;"	f	struct:Actions::ToggleBitrateVisibility
ToggleBitrateVisibility	src/actions.h	/^	ToggleBitrateVisibility,$/;"	e	enum:Actions::Type
ToggleBitrateVisibility	src/actions.h	/^struct ToggleBitrateVisibility: BaseAction$/;"	s	namespace:Actions
ToggleBrowserSortMode	src/actions.h	/^	ToggleBrowserSortMode(): BaseAction(Type::ToggleBrowserSortMode, "toggle_browser_sort_mode") { /;"	f	struct:Actions::ToggleBrowserSortMode
ToggleBrowserSortMode	src/actions.h	/^	ToggleBrowserSortMode,$/;"	e	enum:Actions::Type
ToggleBrowserSortMode	src/actions.h	/^struct ToggleBrowserSortMode: BaseAction$/;"	s	namespace:Actions
ToggleConsume	src/actions.h	/^	ToggleConsume(): BaseAction(Type::ToggleConsume, "toggle_consume") { }$/;"	f	struct:Actions::ToggleConsume
ToggleConsume	src/actions.h	/^	ToggleConsume,$/;"	e	enum:Actions::Type
ToggleConsume	src/actions.h	/^struct ToggleConsume: BaseAction$/;"	s	namespace:Actions
ToggleCrossfade	src/actions.h	/^	ToggleCrossfade(): BaseAction(Type::ToggleCrossfade, "toggle_crossfade") { }$/;"	f	struct:Actions::ToggleCrossfade
ToggleCrossfade	src/actions.h	/^	ToggleCrossfade,$/;"	e	enum:Actions::Type
ToggleCrossfade	src/actions.h	/^struct ToggleCrossfade: BaseAction$/;"	s	namespace:Actions
ToggleDisplayMode	src/actions.h	/^	ToggleDisplayMode(): BaseAction(Type::ToggleDisplayMode, "toggle_display_mode") { }$/;"	f	struct:Actions::ToggleDisplayMode
ToggleDisplayMode	src/actions.h	/^	ToggleDisplayMode,$/;"	e	enum:Actions::Type
ToggleDisplayMode	src/actions.h	/^struct ToggleDisplayMode: BaseAction$/;"	s	namespace:Actions
ToggleFetchingLyricsInBackground	src/actions.h	/^	ToggleFetchingLyricsInBackground()$/;"	f	struct:Actions::ToggleFetchingLyricsInBackground
ToggleFetchingLyricsInBackground	src/actions.h	/^	ToggleFetchingLyricsInBackground,$/;"	e	enum:Actions::Type
ToggleFetchingLyricsInBackground	src/actions.h	/^struct ToggleFetchingLyricsInBackground: BaseAction$/;"	s	namespace:Actions
ToggleFindMode	src/actions.h	/^	ToggleFindMode(): BaseAction(Type::ToggleFindMode, "toggle_find_mode") { }$/;"	f	struct:Actions::ToggleFindMode
ToggleFindMode	src/actions.h	/^	ToggleFindMode,$/;"	e	enum:Actions::Type
ToggleFindMode	src/actions.h	/^struct ToggleFindMode: BaseAction$/;"	s	namespace:Actions
ToggleInterface	src/actions.h	/^	ToggleInterface(): BaseAction(Type::ToggleInterface, "toggle_interface") { }$/;"	f	struct:Actions::ToggleInterface
ToggleInterface	src/actions.h	/^	ToggleInterface,$/;"	e	enum:Actions::Type
ToggleInterface	src/actions.h	/^struct ToggleInterface: BaseAction$/;"	s	namespace:Actions
ToggleLibraryTagType	src/actions.h	/^	ToggleLibraryTagType(): BaseAction(Type::ToggleLibraryTagType, "toggle_library_tag_type") { }$/;"	f	struct:Actions::ToggleLibraryTagType
ToggleLibraryTagType	src/actions.h	/^	ToggleLibraryTagType,$/;"	e	enum:Actions::Type
ToggleLibraryTagType	src/actions.h	/^struct ToggleLibraryTagType: BaseAction$/;"	s	namespace:Actions
ToggleLyricsFetcher	src/actions.h	/^	ToggleLyricsFetcher(): BaseAction(Type::ToggleLyricsFetcher, "toggle_lyrics_fetcher") { }$/;"	f	struct:Actions::ToggleLyricsFetcher
ToggleLyricsFetcher	src/actions.h	/^	ToggleLyricsFetcher,$/;"	e	enum:Actions::Type
ToggleLyricsFetcher	src/actions.h	/^struct ToggleLyricsFetcher: BaseAction$/;"	s	namespace:Actions
ToggleLyricsUpdateOnSongChange	src/actions.h	/^	ToggleLyricsUpdateOnSongChange()$/;"	f	struct:Actions::ToggleLyricsUpdateOnSongChange
ToggleLyricsUpdateOnSongChange	src/actions.h	/^	ToggleLyricsUpdateOnSongChange,$/;"	e	enum:Actions::Type
ToggleLyricsUpdateOnSongChange	src/actions.h	/^struct ToggleLyricsUpdateOnSongChange: BaseAction$/;"	s	namespace:Actions
ToggleMediaLibraryColumnsMode	src/actions.h	/^	ToggleMediaLibraryColumnsMode()$/;"	f	struct:Actions::ToggleMediaLibraryColumnsMode
ToggleMediaLibraryColumnsMode	src/actions.h	/^	ToggleMediaLibraryColumnsMode,$/;"	e	enum:Actions::Type
ToggleMediaLibraryColumnsMode	src/actions.h	/^struct ToggleMediaLibraryColumnsMode: BaseAction$/;"	s	namespace:Actions
ToggleMediaLibrarySortMode	src/actions.h	/^	ToggleMediaLibrarySortMode()$/;"	f	struct:Actions::ToggleMediaLibrarySortMode
ToggleMediaLibrarySortMode	src/actions.h	/^	ToggleMediaLibrarySortMode,$/;"	e	enum:Actions::Type
ToggleMediaLibrarySortMode	src/actions.h	/^struct ToggleMediaLibrarySortMode: BaseAction$/;"	s	namespace:Actions
ToggleMouse	src/actions.h	/^	ToggleMouse(): BaseAction(Type::ToggleMouse, "toggle_mouse") { }$/;"	f	struct:Actions::ToggleMouse
ToggleMouse	src/actions.h	/^	ToggleMouse,$/;"	e	enum:Actions::Type
ToggleMouse	src/actions.h	/^struct ToggleMouse: BaseAction$/;"	s	namespace:Actions
ToggleOutput	src/actions.h	/^	ToggleOutput(): BaseAction(Type::ToggleOutput, "toggle_output") { }$/;"	f	struct:Actions::ToggleOutput
ToggleOutput	src/actions.h	/^	ToggleOutput,$/;"	e	enum:Actions::Type
ToggleOutput	src/actions.h	/^struct ToggleOutput: BaseAction$/;"	s	namespace:Actions
TogglePlayingSongCentering	src/actions.h	/^	TogglePlayingSongCentering()$/;"	f	struct:Actions::TogglePlayingSongCentering
TogglePlayingSongCentering	src/actions.h	/^	TogglePlayingSongCentering,$/;"	e	enum:Actions::Type
TogglePlayingSongCentering	src/actions.h	/^struct TogglePlayingSongCentering: BaseAction$/;"	s	namespace:Actions
ToggleRandom	src/actions.h	/^	ToggleRandom(): BaseAction(Type::ToggleRandom, "toggle_random") { }$/;"	f	struct:Actions::ToggleRandom
ToggleRandom	src/actions.h	/^	ToggleRandom,$/;"	e	enum:Actions::Type
ToggleRandom	src/actions.h	/^struct ToggleRandom: BaseAction$/;"	s	namespace:Actions
ToggleRepeat	src/actions.h	/^	ToggleRepeat(): BaseAction(Type::ToggleRepeat, "toggle_repeat") { }$/;"	f	struct:Actions::ToggleRepeat
ToggleRepeat	src/actions.h	/^	ToggleRepeat,$/;"	e	enum:Actions::Type
ToggleRepeat	src/actions.h	/^struct ToggleRepeat: BaseAction$/;"	s	namespace:Actions
ToggleReplayGainMode	src/actions.h	/^	ToggleReplayGainMode(): BaseAction(Type::ToggleReplayGainMode, "toggle_replay_gain_mode") { }$/;"	f	struct:Actions::ToggleReplayGainMode
ToggleReplayGainMode	src/actions.h	/^	ToggleReplayGainMode,$/;"	e	enum:Actions::Type
ToggleReplayGainMode	src/actions.h	/^struct ToggleReplayGainMode: BaseAction$/;"	s	namespace:Actions
ToggleScreenLock	src/actions.h	/^	ToggleScreenLock(): BaseAction(Type::ToggleScreenLock, "toggle_screen_lock") { }$/;"	f	struct:Actions::ToggleScreenLock
ToggleScreenLock	src/actions.h	/^	ToggleScreenLock,$/;"	e	enum:Actions::Type
ToggleScreenLock	src/actions.h	/^struct ToggleScreenLock: BaseAction$/;"	s	namespace:Actions
ToggleSeparatorsBetweenAlbums	src/actions.h	/^	ToggleSeparatorsBetweenAlbums()$/;"	f	struct:Actions::ToggleSeparatorsBetweenAlbums
ToggleSeparatorsBetweenAlbums	src/actions.h	/^	ToggleSeparatorsBetweenAlbums,$/;"	e	enum:Actions::Type
ToggleSeparatorsBetweenAlbums	src/actions.h	/^struct ToggleSeparatorsBetweenAlbums: BaseAction$/;"	s	namespace:Actions
ToggleSingle	src/actions.h	/^	ToggleSingle(): BaseAction(Type::ToggleSingle, "toggle_single") { }$/;"	f	struct:Actions::ToggleSingle
ToggleSingle	src/actions.h	/^	ToggleSingle,$/;"	e	enum:Actions::Type
ToggleSingle	src/actions.h	/^struct ToggleSingle: BaseAction$/;"	s	namespace:Actions
ToggleVisualizationType	src/actions.h	/^	ToggleVisualizationType()$/;"	f	struct:Actions::ToggleVisualizationType
ToggleVisualizationType	src/actions.h	/^	ToggleVisualizationType,$/;"	e	enum:Actions::Type
ToggleVisualizationType	src/actions.h	/^struct ToggleVisualizationType: BaseAction$/;"	s	namespace:Actions
ToggleVisualizationType	src/screens/visualizer.cpp	/^void Visualizer::ToggleVisualizationType()$/;"	f	class:Visualizer	typeref:typename:void
TryExecuteImmediateCommand	src/statusbar.h	/^struct TryExecuteImmediateCommand$/;"	s	namespace:Statusbar::Helpers
Type	src/actions.h	/^enum class Type$/;"	g	namespace:Actions
Type	src/curses/menu.h	/^		enum Type {$/;"	g	struct:NC::List::Properties
Type	src/curses/menu.h	/^		typedef ItemT Type;$/;"	t	struct:NC::Menu::Item	typeref:typename:ItemT
Type	src/curses/window.h	/^typedef uint64_t Type;$/;"	t	namespace:NC::Key	typeref:typename:uint64_t
Type	src/mpdpp.h	/^	enum class Type { Directory, Song, Playlist };$/;"	g	struct:MPD::Item
URL	src/lyrics_fetcher.h	/^	const char *URL;$/;"	m	struct:GoogleLyricsFetcher	typeref:typename:const char *
URL	src/lyrics_fetcher.h	/^	std::string URL;$/;"	m	struct:InternetLyricsFetcher	typeref:typename:std::string
Undefined	src/song_list.h	/^	enum class State { Undefined, Const, Mutable };$/;"	e	enum:SongProperties::State
Underline	src/curses/window.h	/^	Underline, NoUnderline,$/;"	e	enum:NC::Format
Unknown	src/screens/screen_type.h	/^	Unknown,$/;"	e	enum:ScreenType
Up	src/curses/window.h	/^const Type Up       = Special | 262;$/;"	v	namespace:NC::Key	typeref:typename:const Type
Up	src/curses/window.h	/^enum class Scroll { Up, Down, PageUp, PageDown, Home, End };$/;"	e	enum:NC::Scroll
UpdateDatabase	src/actions.h	/^	UpdateDatabase(): BaseAction(Type::UpdateDatabase, "update_database") { }$/;"	f	struct:Actions::UpdateDatabase
UpdateDatabase	src/actions.h	/^	UpdateDatabase,$/;"	e	enum:Actions::Type
UpdateDatabase	src/actions.h	/^struct UpdateDatabase: BaseAction$/;"	s	namespace:Actions
UpdateDirectory	src/mpdpp.cpp	/^void Connection::UpdateDirectory(const std::string &path)$/;"	f	class:MPD::Connection	typeref:typename:void
UpdateEnvironment	src/actions.cpp	/^UpdateEnvironment::UpdateEnvironment()$/;"	f	class:Actions::UpdateEnvironment
UpdateEnvironment	src/actions.h	/^	UpdateEnvironment,$/;"	e	enum:Actions::Type
UpdateEnvironment	src/actions.h	/^struct UpdateEnvironment: BaseAction$/;"	s	namespace:Actions
VERSION	src/Makefile.in	/^VERSION = @VERSION@$/;"	m
VPATH	src/Makefile.in	/^VPATH = @srcdir@$/;"	m
Value	src/utility/storage_kind.h	/^enum class StorageKind { Reference, Value };$/;"	e	enum:StorageKind
ValueIterator	src/curses/menu.h	/^		Iterator> ValueIterator;$/;"	t	struct:NC::Menu	typeref:typename:boost::transform_iterator<typename Item::template ExtractValue<Const::No>,Iterator>
Value_	src/curses/menu.h	/^				ItemT>::type Value_;$/;"	t	struct:NC::Menu::Item::ExtractValue	typeref:typename:std::conditional<const_==Const::Yes,const ItemT,ItemT>::type
Version	src/mpdpp.cpp	/^unsigned Connection::Version() const$/;"	f	class:MPD::Connection	typeref:typename:unsigned
Visualizer	src/screens/screen_type.h	/^	Visualizer,$/;"	e	enum:ScreenType
Visualizer	src/screens/visualizer.cpp	/^Visualizer::Visualizer()$/;"	f	class:Visualizer
Visualizer	src/screens/visualizer.h	/^struct Visualizer: Screen<NC::Window>, Tabbable$/;"	s
VisualizerType	src/enums.h	/^enum class VisualizerType {$/;"	g
VolumeDown	src/actions.h	/^	VolumeDown(): BaseAction(Type::VolumeDown, "volume_down") { }$/;"	f	struct:Actions::VolumeDown
VolumeDown	src/actions.h	/^	VolumeDown,$/;"	e	enum:Actions::Type
VolumeDown	src/actions.h	/^struct VolumeDown: BaseAction$/;"	s	namespace:Actions
VolumeState	src/global.cpp	/^std::string VolumeState;$/;"	v	namespace:Global	typeref:typename:std::string
VolumeUp	src/actions.h	/^	VolumeUp(): BaseAction(Type::VolumeUp, "volume_up") { }$/;"	f	struct:Actions::VolumeUp
VolumeUp	src/actions.h	/^	VolumeUp,$/;"	e	enum:Actions::Type
VolumeUp	src/actions.h	/^struct VolumeUp: BaseAction$/;"	s	namespace:Actions
WBuffer	src/curses/strbuffer.h	/^typedef BasicBuffer<wchar_t> WBuffer;$/;"	t	namespace:NC	typeref:typename:BasicBuffer<wchar_t>
Wave	src/enums.h	/^	Wave,$/;"	e	enum:VisualizerType
WaveFilled	src/enums.h	/^	WaveFilled,$/;"	e	enum:VisualizerType
White	src/curses/window.h	/^	static Color White;$/;"	m	struct:NC::Color	typeref:typename:Color
Width	src/screens/clock.cpp	/^size_t Clock::Width;$/;"	m	class:Clock	typeref:typename:size_t
Width	src/screens/clock.h	/^	static size_t Width;$/;"	m	struct:Clock	typeref:typename:size_t
Window	src/curses/window.cpp	/^Window::Window(Window &&rhs)$/;"	f	class:NC::Window
Window	src/curses/window.cpp	/^Window::Window(const Window &rhs)$/;"	f	class:NC::Window
Window	src/curses/window.cpp	/^Window::Window(size_t startx, size_t starty, size_t width, size_t height,$/;"	f	class:NC::Window
Window	src/curses/window.h	/^	Window() : m_window(nullptr) { }$/;"	f	struct:NC::Window
Window	src/curses/window.h	/^struct Window$/;"	s	namespace:NC
WindowReference	src/screens/screen.h	/^	>::type WindowReference;$/;"	t	struct:Screen	typeref:typename:std::add_lvalue_reference<WindowType>::type
WindowType	src/screens/screen.h	/^	typedef WindowT WindowType;$/;"	t	struct:Screen	typeref:typename:WindowT
XY	src/curses/window.h	/^	XY(int xx, int yy) : x(xx), y(yy) { }$/;"	f	struct:NC::XY
XY	src/curses/window.h	/^struct XY$/;"	s	namespace:NC
Yellow	src/curses/window.h	/^	static Color Yellow;$/;"	m	struct:NC::Color	typeref:typename:Color
Yes	src/helpers.h	/^enum ReapplyFilter { Yes, No };$/;"	e	enum:ReapplyFilter
Yes	src/utility/const.h	/^enum class Const { Yes, No };$/;"	e	enum:Const
ZeneszovegFetcher	src/lyrics_fetcher.h	/^struct ZeneszovegFetcher : public GoogleLyricsFetcher$/;"	s
__anon024c12b30111	src/screens/sel_items_adder.cpp	/^namespace {$/;"	n	file:
__anon0c1fb5bb0111	src/bindings.cpp	/^namespace {$/;"	n	file:
__anon0c1fb5bb0202	src/bindings.cpp	/^	auto error = [&]() -> std::ostream & {$/;"	f	function:BindingsConfiguration::read	typeref:typename:std::ostream &	file:
__anon0c1fb5bb0302	src/bindings.cpp	/^	auto bind_in_progress = [&]() -> bool {$/;"	f	function:BindingsConfiguration::read	typeref:typename:bool	file:
__anon0c1fb5bb0402	src/bindings.cpp	/^		[&](const std::string &binding_path) {$/;"	f	function:BindingsConfiguration::read	file:
__anon1a0bc75a0111	src/screens/search_engine.cpp	/^namespace {$/;"	n	file:
__anon1a0bc75a0211	src/screens/search_engine.cpp	/^namespace {$/;"	n	file:
__anon202a71910102	src/screens/song_info.cpp	/^	auto print_key_value = [this](const char *key, const auto &value) {$/;"	f	function:SongInfo::PrepareSong	file:
__anon2f1c93050102	src/utility/html.cpp	/^	s.erase(std::remove_if(s.begin(), s.end(), [](char c) {$/;"	f	function:stripHtmlTags	file:
__anon343209de0111	src/actions.cpp	/^namespace {$/;"	n	file:
__anon343209de0202	src/actions.cpp	/^	auto check_if_deletion_allowed = []() {$/;"	f	function:Actions::DeleteBrowserItems::canBeRun	file:
__anon343209de0302	src/actions.cpp	/^	auto get_name = [](const MPD::Item &item) -> std::string {$/;"	f	function:Actions::DeleteBrowserItems::run	typeref:typename:std::string	file:
__anon343209de0411	src/actions.cpp	/^namespace {$/;"	n	file:
__anon343209de0502	src/actions.cpp	/^	auto insert_action = [](Actions::BaseAction *a) {$/;"	f	function:__anon343209de0411::populateActions	file:
__anon343209de0602	src/actions.cpp	/^	                            Actions::Type type) {$/;"	f	function:__anon343209de0411::seek	file:
__anon363a84440111	src/song.cpp	/^namespace {$/;"	n	file:
__anon3c6283040111	src/lastfm_service.cpp	/^namespace {$/;"	n	file:
__anon3c6283040202	src/lastfm_service.cpp	/^	auto add_similars = [&result](boost::sregex_iterator &it, const boost::sregex_iterator &last) {$/;"	f	function:LastFm::ArtistInfo::processData	file:
__anon4048290d0102	src/mutable_song.cpp	/^	return getTag(MPD_TAG_ARTIST, [this, idx](){ return Song::getArtist(idx); }, idx);$/;"	f	function:MPD::MutableSong::getArtist	file:
__anon4048290d0202	src/mutable_song.cpp	/^	return getTag(MPD_TAG_TITLE, [this, idx](){ return Song::getTitle(idx); }, idx);$/;"	f	function:MPD::MutableSong::getTitle	file:
__anon4048290d0302	src/mutable_song.cpp	/^	return getTag(MPD_TAG_ALBUM, [this, idx](){ return Song::getAlbum(idx); }, idx);$/;"	f	function:MPD::MutableSong::getAlbum	file:
__anon4048290d0402	src/mutable_song.cpp	/^	return getTag(MPD_TAG_ALBUM_ARTIST, [this, idx](){ return Song::getAlbumArtist(idx); }, idx);$/;"	f	function:MPD::MutableSong::getAlbumArtist	file:
__anon4048290d0502	src/mutable_song.cpp	/^	std::string track = getTag(MPD_TAG_TRACK, [this, idx](){ return Song::getTrack(idx); }, idx);$/;"	f	function:MPD::MutableSong::getTrack	file:
__anon4048290d0602	src/mutable_song.cpp	/^	return getTag(MPD_TAG_DATE, [this, idx](){ return Song::getDate(idx); }, idx);$/;"	f	function:MPD::MutableSong::getDate	file:
__anon4048290d0702	src/mutable_song.cpp	/^	return getTag(MPD_TAG_GENRE, [this, idx](){ return Song::getGenre(idx); }, idx);$/;"	f	function:MPD::MutableSong::getGenre	file:
__anon4048290d0802	src/mutable_song.cpp	/^	return getTag(MPD_TAG_COMPOSER, [this, idx](){ return Song::getComposer(idx); }, idx);$/;"	f	function:MPD::MutableSong::getComposer	file:
__anon4048290d0902	src/mutable_song.cpp	/^	return getTag(MPD_TAG_PERFORMER, [this, idx](){ return Song::getPerformer(idx); }, idx);$/;"	f	function:MPD::MutableSong::getPerformer	file:
__anon4048290d0a02	src/mutable_song.cpp	/^	return getTag(MPD_TAG_DISC, [this, idx](){ return Song::getDisc(idx); }, idx);$/;"	f	function:MPD::MutableSong::getDisc	file:
__anon4048290d0b02	src/mutable_song.cpp	/^	return getTag(MPD_TAG_COMMENT, [this, idx](){ return Song::getComment(idx); }, idx);$/;"	f	function:MPD::MutableSong::getComment	file:
__anon409557250102	src/helpers.h	/^	auto addSongNoError = [&](Iterator it) -> int {$/;"	f	function:addSongsToPlaylist	typeref:typename:int	file:
__anon4539d7d20111	src/regex_filter.h	/^namespace {$/;"	n
__anon46a7540e0111	src/mpdpp.cpp	/^namespace {$/;"	n	file:
__anon46a7540e0202	src/mpdpp.cpp	/^	return [fetcher](typename MPD::Iterator<ObjectT>::State &state) {$/;"	f	function:__anon46a7540e0111::defaultFetcher	file:
__anon46a7540e0302	src/mpdpp.cpp	/^	return StringIterator(m_connection.get(), [](StringIterator::State &state) {$/;"	f	function:MPD::Connection::GetSupportedExtensions	file:
__anon46a7540e0402	src/mpdpp.cpp	/^	return StringIterator(m_connection.get(), [type](StringIterator::State &state) {$/;"	f	function:MPD::Connection::GetList	file:
__anon46a7540e0502	src/mpdpp.cpp	/^	return StringIterator(m_connection.get(), [](StringIterator::State &state) {$/;"	f	function:MPD::Connection::GetURLHandlers	file:
__anon46a7540e0602	src/mpdpp.cpp	/^	return StringIterator(m_connection.get(), [](StringIterator::State &state) {$/;"	f	function:MPD::Connection::GetTagTypes	file:
__anon50035b830111	src/screens/media_library.cpp	/^namespace {$/;"	n	file:
__anon50035b830202	src/screens/media_library.cpp	/^	Tags.setItemDisplayer([](NC::Menu<PrimaryTag> &menu) {$/;"	f	function:MediaLibrary::MediaLibrary	file:
__anon50035b830302	src/screens/media_library.cpp	/^	Albums.setItemDisplayer([](NC::Menu<AlbumEntry> &menu) {$/;"	f	function:MediaLibrary::MediaLibrary	file:
__anon50035b830402	src/screens/media_library.cpp	/^	auto tryNextColumn = [this]() -> bool {$/;"	f	function:MediaLibrary::mouseButtonPressed	typeref:typename:bool	file:
__anon50035b830502	src/screens/media_library.cpp	/^	auto tryPreviousColumn = [this]() -> bool {$/;"	f	function:MediaLibrary::mouseButtonPressed	typeref:typename:bool	file:
__anon50035b830602	src/screens/media_library.cpp	/^		auto tag_handler = [&result](const std::string &tag) {$/;"	f	function:MediaLibrary::getSelectedSongs	file:
__anon50035b830711	src/screens/media_library.cpp	/^namespace {$/;"	n	file:
__anon50035b830802	src/screens/media_library.cpp	/^	auto equals_fun_argument = [&](PrimaryTag &e) {$/;"	f	function:__anon50035b830711::MoveToTag	file:
__anon50035b830902	src/screens/media_library.cpp	/^	auto equals_fun_argument = [&](AlbumEntry &e) {$/;"	f	function:__anon50035b830711::MoveToAlbum	file:
__anon5b8d48730102	src/screens/outputs.cpp	/^	w.setItemDisplayer([](NC::Menu<MPD::Output> &menu) {$/;"	f	function:Outputs::Outputs	file:
__anon5cea49c4010a	src/song_list.h	/^	union {$/;"	u	struct:SongProperties
__anon5cea49c4020a	src/song_list.h	/^	union {$/;"	u	struct:SongProperties
__anon5d75aa650111	src/screens/lyrics.cpp	/^namespace {$/;"	n	file:
__anon5d75aa650202	src/screens/lyrics.cpp	/^	auto fetch_lyrics = [&](auto &fetcher_) {$/;"	f	function:__anon5d75aa650111::downloadLyrics	file:
__anon5d75aa650302	src/screens/lyrics.cpp	/^		                            [this](auto &f) { return f.get() == m_fetcher; });$/;"	f	function:Lyrics::toggleFetcher	file:
__anon5d75aa650402	src/screens/lyrics.cpp	/^	auto consumer_impl = [this] {$/;"	f	function:Lyrics::fetchInBackground	file:
__anon6dfe96230102	src/lyrics_fetcher.cpp	/^	std::unique(lines.begin(), lines.end(), [](std::string &a, std::string &b) {$/;"	f	function:LyricsFetcher::postProcess	file:
__anon6dfe96230202	src/lyrics_fetcher.cpp	/^		bool license_restriction = std::any_of(lyrics.begin(), lyrics.end(), [](const std::string &s) /;"	f	function:LyricwikiFetcher::fetch	file:
__anon714e65d60111	src/format.cpp	/^namespace {$/;"	n	file:
__anon714e65d60202	src/format.cpp	/^	auto push_token = [&] {$/;"	f	function:__anon714e65d60111::parseBracket	file:
__anon7444cf050111	src/configuration.cpp	/^namespace {$/;"	n	file:
__anon8142dca10111	src/screens/playlist.cpp	/^namespace {$/;"	n	file:
__anon8142dca10202	src/screens/playlist.cpp	/^		auto cmp = [](const MPD::Song &a, const MPD::Song &b) {$/;"	f	function:Playlist::locateSong	file:
__anon8142dca10311	src/screens/playlist.cpp	/^namespace {$/;"	n	file:
__anon84e18c690102	src/curses/strbuffer.h	/^			boost::apply_visitor([&os](const auto &v) { os << v; }, p.m_impl);$/;"	f	function:NC::BasicBuffer::Property::operator <<	file:
__anon855393f10111	src/status.cpp	/^namespace {$/;"	n	file:
__anon855393f10202	src/status.cpp	/^		applyToVisibleWindows([&nc_wtimeout](BaseScreen *s) {$/;"	f	function:Status::trace	file:
__anon855393f10302	src/status.cpp	/^		auto stateToEnv = [](MPD::PlayerState st) -> const char * {$/;"	f	function:Status::Changes::playerState	typeref:typename:const char *	file:
__anon855393f10402	src/status.cpp	/^		auto it = std::find_if(pl.beginV(), pl.endV(), [song_id](const MPD::Song &s) {$/;"	f	function:Status::Changes::songID	file:
__anon8bc53c1b0111	src/utility/comparators.cpp	/^namespace {$/;"	n	file:
__anon8c54cf550111	src/curses/formatted_color.cpp	/^namespace {$/;"	n	file:
__anon8d62f2280102	src/screens/sort_playlist.cpp	/^	w.setItemDisplayer([](Self::WindowType &menu) {$/;"	f	function:SortPlaylistDialog::SortPlaylistDialog	file:
__anon8d62f2280202	src/screens/sort_playlist.cpp	/^	auto song_cmp = [this, &cmp](const MPD::Song &a, const MPD::Song &b) -> bool {$/;"	f	function:SortPlaylistDialog::sort	typeref:typename:bool	file:
__anon8d62f2280302	src/screens/sort_playlist.cpp	/^	iter_swap = [&playlist, &start_pos](Iterator a, Iterator b) {$/;"	f	function:SortPlaylistDialog::sort	file:
__anon8d62f2280402	src/screens/sort_playlist.cpp	/^	quick_sort = [this, &song_cmp, &quick_sort, &iter_swap](Iterator first, Iterator last) {$/;"	f	function:SortPlaylistDialog::sort	file:
__anon91c40e690111	src/curses/window.cpp	/^namespace {$/;"	n	file:
__anon91c40e690202	src/curses/window.cpp	/^	auto print_char = [](wchar_t wc) {$/;"	f	function:__anon91c40e690111::rl::display_string	file:
__anon91c40e690302	src/curses/window.cpp	/^	auto print_string = [](wchar_t *ws, size_t len) {$/;"	f	function:__anon91c40e690111::rl::display_string	file:
__anon91c40e690402	src/curses/window.cpp	/^	auto narrow_to_wide = [](wchar_t *dest, const char *src, size_t n) {$/;"	f	function:__anon91c40e690111::rl::display_string	file:
__anon91c40e690502	src/curses/window.cpp	/^	auto get_single_color = [](const std::string &s, bool background) {$/;"	f	function:NC::operator >>	file:
__anon91c40e690602	src/curses/window.cpp	/^	auto get_color = [](std::istream &is_) {$/;"	f	function:NC::operator >>	file:
__anon91c40e690711	src/curses/window.cpp	/^namespace {$/;"	n	namespace:NC::Mouse	file:
__anon91c40e690802	src/curses/window.cpp	/^	rl_attempted_completion_function = [](const char *, int, int) -> char ** {$/;"	f	function:NC::initScreen	typeref:typename:char **	file:
__anon91c40e690902	src/curses/window.cpp	/^	auto abort_prompt = [](int, int) -> int {$/;"	f	function:NC::initScreen	typeref:typename:int	file:
__anon91c40e690a02	src/curses/window.cpp	/^	auto define_mouse_event = [this](int type) {$/;"	f	function:NC::Window::getInputChar	file:
__anon91c40e690b02	src/curses/window.cpp	/^	auto get_xterm_modifier_key = [](int ch) {$/;"	f	function:NC::Window::getInputChar	file:
__anon91c40e690c02	src/curses/window.cpp	/^	auto parse_number = [this](int &result) {$/;"	f	function:NC::Window::getInputChar	file:
__anon91c40e690d02	src/curses/window.cpp	/^	auto increase_flag = [](Window &w, int &flag, auto set) {$/;"	f	function:NC::Window::operator <<	file:
__anon91c40e690e02	src/curses/window.cpp	/^	auto decrease_flag = [](Window &w, int &flag, auto set) {$/;"	f	function:NC::Window::operator <<	file:
__anon96dc8afe0111	src/settings.cpp	/^namespace {$/;"	n	file:
__anon96dc8afe0202	src/settings.cpp	/^	p.add<void>("visualizer_sample_multiplier", nullptr, "", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0302	src/settings.cpp	/^	p.add<void>("progressbar_boldness", nullptr, "", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0402	src/settings.cpp	/^	p.add<void>("main_window_highlight_color", nullptr, "", [this](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0502	src/settings.cpp	/^	p.add<void>("active_column_color", nullptr, "", [this](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0602	src/settings.cpp	/^	p.add<void>("mpd_host", nullptr, "localhost", [](std::string host) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0702	src/settings.cpp	/^	p.add<void>("mpd_port", nullptr, "6600", [](std::string port) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0802	src/settings.cpp	/^	      [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0902	src/settings.cpp	/^	p.add("visualizer_look", &visualizer_chars, "●▮", [](std::string s) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0a02	src/settings.cpp	/^	p.add("system_encoding", &system_encoding, "", [](std::string encoding) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0b02	src/settings.cpp	/^	      "5", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0c02	src/settings.cpp	/^	      "{%a - }{%t}|{$8%f$9}$R{$3(%l)$9}", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0d02	src/settings.cpp	/^	      "{{%a{ \\"%b\\"{ (%y)}} - }{%t}}|{%f}", [this](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0e02	src/settings.cpp	/^	      "{%n - }{%t}|{%f}", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe0f02	src/settings.cpp	/^	      "$b$1$aqqu$\/a$9 {%t}|{%f} $1$atqq$\/a$9$\/b", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1002	src/settings.cpp	/^	      "{{$4$b%a$\/b$9}{ - $7%b$9}{ ($4%y$9)}}|{%D}", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1102	src/settings.cpp	/^	      "{%a - }{%t}|{%f}", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1202	src/settings.cpp	/^	      "{%a - }{%t}|{%f} {(%l)}", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1302	src/settings.cpp	/^	      [this](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1402	src/settings.cpp	/^	p.add("progressbar_look", &progressbar, "=>", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1502	src/settings.cpp	/^	p.add("default_place_to_search_in", &search_in_db, "database", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1602	src/settings.cpp	/^	p.add("media_library_primary_tag", &media_lib_primary_tag, "artist", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1702	src/settings.cpp	/^	p.add("default_find_mode", &wrapped_search, "wrapped", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1802	src/settings.cpp	/^		[this](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1902	src/settings.cpp	/^				screen_sequence = list_of<ScreenType>(v, [](std::string s) {$/;"	f	function:Configuration::read::__anon96dc8afe1802	file:
__anon96dc8afe1a02	src/settings.cpp	/^	p.add("startup_screen", &startup_screen_type, "playlist", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1b02	src/settings.cpp	/^	p.add("startup_slave_screen", &startup_slave_screen_type, "", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1c02	src/settings.cpp	/^	      "50", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1d02	src/settings.cpp	/^	p.add("regular_expressions", &regex_type, "perl", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1e02	src/settings.cpp	/^	p.add("enable_window_title", &set_window_title, "yes", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe1f02	src/settings.cpp	/^	      "1", [](std::string v) {$/;"	f	function:Configuration::read	file:
__anon96dc8afe2002	src/settings.cpp	/^		[&](const std::string &config_path) {$/;"	f	function:Configuration::read	file:
__anon9815bb0c0202	src/format_impl.h	/^		auto visit = [this, &group] {$/;"	f	function:Format::Printer::operator ()	file:
__anon995519f40102	src/screens/tiny_tag_editor.cpp	/^	w.setItemDisplayer([](NC::Menu<NC::Buffer> &menu) {$/;"	f	function:TinyTagEditor::TinyTagEditor	file:
__anon995519f40202	src/screens/tiny_tag_editor.cpp	/^	auto print_key_value = [this](NC::Buffer &buf, const char *key, const auto &value) {$/;"	f	function:TinyTagEditor::getTags	file:
__anona075d9b50111	src/curses/scrollpad.cpp	/^namespace {$/;"	n	file:
__anona075d9b50202	src/curses/scrollpad.cpp	/^	auto load_properties = [&]() {$/;"	f	function:NC::Scrollpad::flush	file:
__anona075d9b50302	src/curses/scrollpad.cpp	/^	auto write_whitespace = [&]() {$/;"	f	function:NC::Scrollpad::flush	file:
__anona075d9b50402	src/curses/scrollpad.cpp	/^	auto write_word = [&](bool load_properties_) {$/;"	f	function:NC::Scrollpad::flush	file:
__anona075d9b50502	src/curses/scrollpad.cpp	/^	auto write_buffer = [&](bool generate_height_only) -> size_t {$/;"	f	function:NC::Scrollpad::flush	typeref:typename:size_t	file:
__anona7ad4fd80111	src/screens/help.cpp	/^namespace {$/;"	n	file:
__anona90627fe0111	src/ncmpcpp.cpp	/^namespace {$/;"	n	file:
__anonbb47ae000102	src/helpers.cpp	/^			auto it = find_map_first(begin, end, s, [](const MPD::Song &found) {$/;"	f	function:addSongToPlaylist	file:
__anonbb47ae000202	src/helpers.cpp	/^		auto write_buffer = [&](size_t start) {$/;"	f	function:writeCyclicBuffer	file:
__anonc992bc4e0111	src/curl_handle.cpp	/^{$/;"	n	file:
__anond7be94460111	src/statusbar.cpp	/^namespace {$/;"	n	file:
__anond902be230111	src/display.cpp	/^namespace {$/;"	n	file:
__anondd52103c0111	src/tags.cpp	/^namespace {$/;"	n	file:
__anondd52103c0202	src/tags.cpp	/^	auto readFrame = [s](const TagLib::ID3v2::FrameList &fields, const char *name) {$/;"	f	function:__anondd52103c0111::readID3v2Tags	file:
__anondd52103c0302	src/tags.cpp	/^	auto readField = [s](const TagLib::StringList &fields, const char *name) {$/;"	f	function:__anondd52103c0111::readXiphComments	file:
__anondd52103c0402	src/tags.cpp	/^	auto writeID3v2 = [&](const TagLib::ByteVector &type, const TagLib::StringList &list) {$/;"	f	function:__anondd52103c0111::writeID3v2Tags	file:
__anondd52103c0502	src/tags.cpp	/^	auto writeXiph = [&](const TagLib::String &type, const TagLib::StringList &list) {$/;"	f	function:__anondd52103c0111::writeXiphComments	file:
__anondd52103c0602	src/tags.cpp	/^	auto first_or_empty = [](const TagLib::StringList &list) {$/;"	f	function:__anondd52103c0111::getReplayGain	file:
__anonf3fd84fd0111	src/screens/visualizer.cpp	/^namespace {$/;"	n	file:
__anonf3fd84fd0202	src/screens/visualizer.cpp	/^	auto draw_point = [&](size_t x, int32_t y) {$/;"	f	function:Visualizer::DrawSoundWave	file:
__anonf6e1b7d10111	src/screens/tag_editor.cpp	/^namespace {$/;"	n	file:
__anonf6e1b7d10202	src/screens/tag_editor.cpp	/^	Dirs->setItemDisplayer([](NC::Menu<std::pair<std::string, std::string>> &menu) {$/;"	f	function:TagEditor::TagEditor	file:
__anonf6e1b7d10302	src/screens/tag_editor.cpp	/^	TagTypes->setItemDisplayer([](NC::Menu<std::string> &menu) {$/;"	f	function:TagEditor::TagEditor	file:
__anonf6e1b7d10402	src/screens/tag_editor.cpp	/^	auto parser_display = [](NC::Menu<std::string> &menu) {$/;"	f	function:TagEditor::TagEditor	file:
__anonf6e1b7d10502	src/screens/tag_editor.cpp	/^	auto tryPreviousColumn = [this]() -> bool {$/;"	f	function:TagEditor::mouseButtonPressed	typeref:typename:bool	file:
__anonf6e1b7d10602	src/screens/tag_editor.cpp	/^	auto tryNextColumn = [this]() -> bool {$/;"	f	function:TagEditor::mouseButtonPressed	typeref:typename:bool	file:
__anonf6e1b7d10711	src/screens/tag_editor.cpp	/^namespace {$/;"	n	file:
__anonfb05ef270111	src/screens/playlist_editor.cpp	/^namespace {$/;"	n	file:
__anonfb05ef270202	src/screens/playlist_editor.cpp	/^	Playlists.setItemDisplayer([](NC::Menu<MPD::Playlist> &menu) {$/;"	f	function:PlaylistEditor::PlaylistEditor	file:
__anonfb05ef270302	src/screens/playlist_editor.cpp	/^	auto locate_song_in_current_playlist = [this, &s](auto front, auto back) {$/;"	f	function:PlaylistEditor::locateSong	file:
__anonfb05ef270402	src/screens/playlist_editor.cpp	/^	auto locate_song_in_playlists = [this, &s](auto front, auto back) {$/;"	f	function:PlaylistEditor::locateSong	file:
__anonfb05ef270511	src/screens/playlist_editor.cpp	/^namespace {$/;"	n	file:
__anonfc130a730111	src/screens/browser.cpp	/^namespace {$/;"	n	file:
__anonfc130a730202	src/screens/browser.cpp	/^	auto tryToPlay = [] {$/;"	f	function:Browser::addItemToPlaylist	file:
__anonfc130a730302	src/screens/browser.cpp	/^	auto item_handler = [this, &songs](const MPD::Item &item) {$/;"	f	function:Browser::getSelectedSongs	file:
__anonfc130a730411	src/screens/browser.cpp	/^namespace {$/;"	n	file:
_numberOfActions	src/actions.h	/^	_numberOfActions \/\/ needed to dynamically calculate size of action array$/;"	e	enum:Actions::Type
aborted	src/curses/window.cpp	/^bool aborted;$/;"	v	namespace:__anon91c40e690111::rl	typeref:typename:bool
abs_builddir	src/Makefile.in	/^abs_builddir = @abs_builddir@$/;"	m
abs_srcdir	src/Makefile.in	/^abs_srcdir = @abs_srcdir@$/;"	m
abs_top_builddir	src/Makefile.in	/^abs_top_builddir = @abs_top_builddir@$/;"	m
abs_top_srcdir	src/Makefile.in	/^abs_top_srcdir = @abs_top_srcdir@$/;"	m
ac_ct_AR	src/Makefile.in	/^ac_ct_AR = @ac_ct_AR@$/;"	m
ac_ct_CC	src/Makefile.in	/^ac_ct_CC = @ac_ct_CC@$/;"	m
ac_ct_CXX	src/Makefile.in	/^ac_ct_CXX = @ac_ct_CXX@$/;"	m
ac_ct_DUMPBIN	src/Makefile.in	/^ac_ct_DUMPBIN = @ac_ct_DUMPBIN@$/;"	m
acquire	src/utility/shared_resource.h	/^	Resource acquire() { return Resource(m_mutex, m_resource); }$/;"	f	struct:Shared	typeref:typename:Resource
action	src/bindings.h	/^	Actions::BaseAction &action() const {$/;"	f	struct:Binding	typeref:typename:Actions::BaseAction &
actionFailed	src/lastfm_service.cpp	/^bool Service::actionFailed(const std::string &data)$/;"	f	class:LastFm::Service	typeref:typename:bool
actionRunnable	src/screens/search_engine.cpp	/^bool SearchEngine::actionRunnable()$/;"	f	class:SearchEngine	typeref:typename:bool
actionRunnable	src/screens/sel_items_adder.cpp	/^bool SelectedItemsAdder::actionRunnable()$/;"	f	class:SelectedItemsAdder	typeref:typename:bool
actionRunnable	src/screens/sort_playlist.cpp	/^bool SortPlaylistDialog::actionRunnable()$/;"	f	class:SortPlaylistDialog	typeref:typename:bool
actionRunnable	src/screens/tag_editor.cpp	/^bool TagEditor::actionRunnable()$/;"	f	class:TagEditor	typeref:typename:bool
actionRunnable	src/screens/tiny_tag_editor.cpp	/^bool TinyTagEditor::actionRunnable()$/;"	f	class:TinyTagEditor	typeref:typename:bool
actions	src/bindings.h	/^	const ActionChain &actions() const {$/;"	f	struct:Binding	typeref:typename:const ActionChain &
activeWindow	src/screens/screen.h	/^	virtual NC::Window *activeWindow() override {$/;"	f	struct:Screen	typeref:typename:NC::Window *
activeWindow	src/screens/screen.h	/^	virtual const NC::Window *activeWindow() const override {$/;"	f	struct:Screen	typeref:typename:const NC::Window *
active_window_border	src/settings.h	/^	NC::Border active_window_border;$/;"	m	struct:Configuration	typeref:typename:NC::Border
add	src/utility/option_parser.h	/^	void add(std::string option, DestT *dest, std::string default_)$/;"	f	class:option_parser	typeref:typename:void
add	src/utility/option_parser.h	/^	void add(std::string option, DestT *dest, std::string default_, MapT &&map)$/;"	f	class:option_parser	typeref:typename:void
addAfterCurrentAlbum	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::addAfterCurrentAlbum() const$/;"	f	class:SelectedItemsAdder	typeref:typename:void
addAfterCurrentSong	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::addAfterCurrentSong() const$/;"	f	class:SelectedItemsAdder	typeref:typename:void
addAfterHighlightedSong	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::addAfterHighlightedSong() const$/;"	f	class:SelectedItemsAdder	typeref:typename:void
addAtTheBeginningOfPlaylist	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::addAtTheBeginningOfPlaylist() const$/;"	f	class:SelectedItemsAdder	typeref:typename:void
addAtTheEndOfPlaylist	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::addAtTheEndOfPlaylist() const$/;"	f	class:SelectedItemsAdder	typeref:typename:void
addFDCallback	src/curses/window.cpp	/^void Window::addFDCallback(int fd, void (*callback)())$/;"	f	class:NC::Window	typeref:typename:void
addItem	src/curses/menu_impl.h	/^void Menu<ItemT>::addItem(ItemT item, Properties::Type properties)$/;"	f	class:NC::Menu	typeref:typename:void
addItemToPlaylist	src/screens/browser.cpp	/^bool Browser::addItemToPlaylist(bool play)$/;"	f	class:Browser	typeref:typename:bool
addItemToPlaylist	src/screens/media_library.cpp	/^bool MediaLibrary::addItemToPlaylist(bool play)$/;"	f	class:MediaLibrary	typeref:typename:bool
addItemToPlaylist	src/screens/playlist.cpp	/^bool Playlist::addItemToPlaylist(bool play)$/;"	f	class:Playlist	typeref:typename:bool
addItemToPlaylist	src/screens/playlist_editor.cpp	/^bool PlaylistEditor::addItemToPlaylist(bool play)$/;"	f	class:PlaylistEditor	typeref:typename:bool
addItemToPlaylist	src/screens/search_engine.cpp	/^bool SearchEngine::addItemToPlaylist(bool play)$/;"	f	class:SearchEngine	typeref:typename:bool
addItemToPlaylist	src/screens/tag_editor.cpp	/^bool TagEditor::addItemToPlaylist(bool play)$/;"	f	class:TagEditor	typeref:typename:bool
addProperty	src/curses/strbuffer.h	/^	void addProperty(size_t position, PropertyT &&property, size_t id = -1)$/;"	f	class:NC::BasicBuffer	typeref:typename:void
addSeparator	src/curses/menu_impl.h	/^void Menu<ItemT>::addSeparator()$/;"	f	class:NC::Menu	typeref:typename:void
addSongToPlaylist	src/helpers.cpp	/^bool addSongToPlaylist(const MPD::Song &s, bool play, int position)$/;"	f	typeref:typename:bool
addSongsToPlaylist	src/helpers.h	/^bool addSongsToPlaylist(Iterator first, Iterator last, bool play, int position)$/;"	f	typeref:typename:bool
addToCurrentPlaylist	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::addToCurrentPlaylist()$/;"	f	class:SelectedItemsAdder	typeref:typename:void
addToExistingPlaylist	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::addToExistingPlaylist(const std::string &playlist) const$/;"	f	class:SelectedItemsAdder	typeref:typename:void
addToNewPlaylist	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::addToNewPlaylist() const$/;"	f	class:SelectedItemsAdder	typeref:typename:void
add_base	src/curses/window.cpp	/^int add_base()$/;"	f	namespace:__anon91c40e690111::rl	typeref:typename:int
add_slash_at_the_end	src/settings.cpp	/^void add_slash_at_the_end(std::string &s)$/;"	f	namespace:__anon96dc8afe0111	typeref:typename:void
adjustDimensions	src/curses/window.cpp	/^void Window::adjustDimensions(size_t width, size_t height)$/;"	f	class:NC::Window	typeref:typename:void
adjust_directory	src/settings.cpp	/^std::string adjust_directory(std::string s)$/;"	f	namespace:__anon96dc8afe0111	typeref:typename:std::string
adjust_path	src/settings.cpp	/^std::string adjust_path(std::string s)$/;"	f	namespace:__anon96dc8afe0111	typeref:typename:std::string
album	src/screens/media_library.h	/^		const std::string &album() const { return m_album; }$/;"	f	struct:MediaLibrary::Album	typeref:typename:const std::string &
albumGain	src/tags.h	/^	const std::string &albumGain() const { return m_album_gain; }$/;"	f	struct:Tags::ReplayGainInfo	typeref:typename:const std::string &
albumPeak	src/tags.h	/^	const std::string &albumPeak() const { return m_album_peak; }$/;"	f	struct:Tags::ReplayGainInfo	typeref:typename:const std::string &
albums	src/mpdpp.h	/^	unsigned albums() const { return mpd_stats_get_number_of_albums(m_stats.get()); }$/;"	f	struct:MPD::Statistics	typeref:typename:unsigned
align_key_rep	src/screens/help.cpp	/^std::string align_key_rep(std::wstring keys)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:std::string
all	src/Makefile.in	/^all: all-am$/;"	t
all-am	src/Makefile.in	/^all-am: Makefile $(PROGRAMS) $(HEADERS)$/;"	t
allow_for_physical_item_deletion	src/settings.h	/^	bool allow_for_physical_item_deletion;$/;"	m	struct:Configuration	typeref:typename:bool
allowsFiltering	src/screens/browser.cpp	/^bool Browser::allowsFiltering()$/;"	f	class:Browser	typeref:typename:bool
allowsFiltering	src/screens/media_library.cpp	/^bool MediaLibrary::allowsFiltering()$/;"	f	class:MediaLibrary	typeref:typename:bool
allowsFiltering	src/screens/playlist.cpp	/^bool Playlist::allowsFiltering()$/;"	f	class:Playlist	typeref:typename:bool
allowsFiltering	src/screens/playlist_editor.cpp	/^bool PlaylistEditor::allowsFiltering()$/;"	f	class:PlaylistEditor	typeref:typename:bool
allowsFiltering	src/screens/search_engine.cpp	/^bool SearchEngine::allowsFiltering()$/;"	f	class:SearchEngine	typeref:typename:bool
allowsSearching	src/screens/browser.cpp	/^bool Browser::allowsSearching()$/;"	f	class:Browser	typeref:typename:bool
allowsSearching	src/screens/media_library.cpp	/^bool MediaLibrary::allowsSearching()$/;"	f	class:MediaLibrary	typeref:typename:bool
allowsSearching	src/screens/playlist.cpp	/^bool Playlist::allowsSearching()$/;"	f	class:Playlist	typeref:typename:bool
allowsSearching	src/screens/playlist_editor.cpp	/^bool PlaylistEditor::allowsSearching()$/;"	f	class:PlaylistEditor	typeref:typename:bool
allowsSearching	src/screens/search_engine.cpp	/^bool SearchEngine::allowsSearching()$/;"	f	class:SearchEngine	typeref:typename:bool
allowsSearching	src/screens/sel_items_adder.cpp	/^bool SelectedItemsAdder::allowsSearching()$/;"	f	class:SelectedItemsAdder	typeref:typename:bool
allowsSearching	src/screens/tag_editor.cpp	/^bool TagEditor::allowsSearching()$/;"	f	class:TagEditor	typeref:typename:bool
altCharset	src/curses/window.cpp	/^void Window::altCharset(bool altcharset_state) const$/;"	f	class:NC::Window	typeref:typename:void
alternative_ui_separator_color	src/settings.h	/^	NC::FormattedColor alternative_ui_separator_color;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
am--depfiles	src/Makefile.in	/^am--depfiles: $(am__depfiles_remade)$/;"	t
am__DIST_COMMON	src/Makefile.in	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(top_srcdir)\/depcomp$/;"	m
am__aclocal_m4_deps	src/Makefile.in	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/ax_lib_readline.m4 \\$/;"	m
am__can_run_installinfo	src/Makefile.in	/^am__can_run_installinfo = \\$/;"	m
am__cd	src/Makefile.in	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	src/Makefile.in	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	src/Makefile.in	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_remade	src/Makefile.in	/^am__depfiles_remade = .\/$(DEPDIR)\/actions.Po .\/$(DEPDIR)\/bindings.Po \\$/;"	m
am__dirstamp	src/Makefile.in	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__include	src/Makefile.in	/^am__include = @am__include@$/;"	m
am__installdirs	src/Makefile.in	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__is_gnu_make	src/Makefile.in	/^am__is_gnu_make = { \\$/;"	m
am__leading_dot	src/Makefile.in	/^am__leading_dot = @am__leading_dot@$/;"	m
am__make_dryrun	src/Makefile.in	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	src/Makefile.in	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	src/Makefile.in	/^am__make_running_with_option = \\$/;"	m
am__maybe_remake_depfiles	src/Makefile.in	/^am__maybe_remake_depfiles = depfiles$/;"	m
am__mv	src/Makefile.in	/^am__mv = mv -f$/;"	m
am__quote	src/Makefile.in	/^am__quote = @am__quote@$/;"	m
am__tagged_files	src/Makefile.in	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	src/Makefile.in	/^am__tar = @am__tar@$/;"	m
am__uniquify_input	src/Makefile.in	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	src/Makefile.in	/^am__untar = @am__untar@$/;"	m
am__v_CXXLD_	src/Makefile.in	/^am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)$/;"	m
am__v_CXXLD_0	src/Makefile.in	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	src/Makefile.in	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	src/Makefile.in	/^am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)$/;"	m
am__v_CXX_0	src/Makefile.in	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	src/Makefile.in	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	src/Makefile.in	/^am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)$/;"	m
am__v_GEN_0	src/Makefile.in	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	src/Makefile.in	/^am__v_GEN_1 = $/;"	m
am__v_P_	src/Makefile.in	/^am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)$/;"	m
am__v_P_0	src/Makefile.in	/^am__v_P_0 = false$/;"	m
am__v_P_1	src/Makefile.in	/^am__v_P_1 = :$/;"	m
am__v_at_	src/Makefile.in	/^am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)$/;"	m
am__v_at_0	src/Makefile.in	/^am__v_at_0 = @$/;"	m
am__v_at_1	src/Makefile.in	/^am__v_at_1 = $/;"	m
am__v_lt_	src/Makefile.in	/^am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)$/;"	m
am__v_lt_0	src/Makefile.in	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	src/Makefile.in	/^am__v_lt_1 = $/;"	m
am_ncmpcpp_OBJECTS	src/Makefile.in	/^am_ncmpcpp_OBJECTS = curses\/formatted_color.$(OBJEXT) \\$/;"	m
apiUrl	src/lastfm_service.cpp	/^const char *apiUrl = "http:\/\/ws.audioscrobbler.com\/2.0\/?api_key=d94e5b6e26469a2d1ffae8ef2013/;"	v	namespace:__anon3c6283040111	typeref:typename:const char *
apply	src/screens/screen.h	/^		static Result &apply(WindowReference w) { return w; }$/;"	f	struct:Screen::getObject	typeref:typename:Result &
apply	src/screens/screen.h	/^		static Result &apply(WindowType w) { return *w; }$/;"	f	struct:Screen::getObject	typeref:typename:Result &
apply	src/utility/conversion.h	/^	static void apply(const std::string &) { }$/;"	f	struct:unsigned_checker	typeref:typename:void
apply	src/utility/conversion.h	/^	static void apply(const std::string &s)$/;"	f	struct:unsigned_checker	typeref:typename:void
apply	src/utility/functional.h	/^	static const std::basic_string<TargetT> &apply(const std::basic_string<TargetT> &s)$/;"	f	struct:convertString	typeref:typename:const std::basic_string<TargetT> &
apply	src/utility/functional.h	/^	static std::basic_string<TargetT> apply(const std::basic_string<SourceT> &s)$/;"	f	struct:convertString	typeref:typename:std::basic_string<TargetT>
apply	src/utility/option_parser.h	/^			static void apply(ValueT *dest,$/;"	f	struct:option_parser::worker::assign	typeref:typename:void
apply	src/utility/option_parser.h	/^			static void apply(void *,$/;"	f	struct:option_parser::worker::assign	typeref:typename:void
applyFilter	src/curses/menu_impl.h	/^void Menu<ItemT>::applyFilter(PredicateT &&pred)$/;"	f	class:NC::Menu	typeref:typename:void
applyFilter	src/screens/browser.cpp	/^void Browser::applyFilter(const std::string &constraint)$/;"	f	class:Browser	typeref:typename:void
applyFilter	src/screens/media_library.cpp	/^void MediaLibrary::applyFilter(const std::string &constraint)$/;"	f	class:MediaLibrary	typeref:typename:void
applyFilter	src/screens/playlist.cpp	/^void Playlist::applyFilter(const std::string &constraint)$/;"	f	class:Playlist	typeref:typename:void
applyFilter	src/screens/playlist_editor.cpp	/^void PlaylistEditor::applyFilter(const std::string &constraint)$/;"	f	class:PlaylistEditor	typeref:typename:void
applyFilter	src/screens/search_engine.cpp	/^void SearchEngine::applyFilter(const std::string &constraint)$/;"	f	class:SearchEngine	typeref:typename:void
applyToVisibleWindows	src/screens/screen.cpp	/^void applyToVisibleWindows(std::function<void(BaseScreen *)> f)$/;"	f	typeref:typename:void
argumentsOk	src/lastfm_service.cpp	/^bool ArtistInfo::argumentsOk()$/;"	f	class:LastFm::ArtistInfo	typeref:typename:bool
artists	src/mpdpp.h	/^	unsigned artists() const { return mpd_stats_get_number_of_artists(m_stats.get()); }$/;"	f	struct:MPD::Statistics	typeref:typename:unsigned
ask_before_clearing_playlists	src/settings.h	/^	bool ask_before_clearing_playlists;$/;"	m	struct:Configuration	typeref:typename:bool
ask_before_shuffling_playlists	src/settings.h	/^	bool ask_before_shuffling_playlists;$/;"	m	struct:Configuration	typeref:typename:bool
ask_for_locked_screen_width_part	src/settings.h	/^	bool ask_for_locked_screen_width_part;$/;"	m	struct:Configuration	typeref:typename:bool
assign	src/song_list.h	/^	SongProperties &assign(NC::List::Properties *properties_, MPD::Song *song_)$/;"	f	struct:SongProperties	typeref:typename:SongProperties &
assign	src/song_list.h	/^	SongProperties &assign(const NC::List::Properties *properties_, const MPD::Song *song_)$/;"	f	struct:SongProperties	typeref:typename:SongProperties &
assign	src/utility/option_parser.h	/^		struct assign {$/;"	s	struct:option_parser::worker
assign	src/utility/option_parser.h	/^		struct assign<void, VoidT> {$/;"	s	struct:option_parser::worker
at	src/curses/menu.h	/^	Menu<ItemT>::Item &at(size_t pos) { return m_items->at(pos); }$/;"	f	struct:NC::Menu	typeref:typename:Menu<ItemT>::Item &
at	src/curses/menu.h	/^	const Menu<ItemT>::Item &at(size_t pos) const { return m_items->at(pos); }$/;"	f	struct:NC::Menu	typeref:typename:const Menu<ItemT>::Item &
autocenter_mode	src/settings.h	/^	bool autocenter_mode;$/;"	m	struct:Configuration	typeref:typename:bool
background	src/curses/window.h	/^	short background() const { return std::get<1>(m_impl); }$/;"	f	struct:NC::Color	typeref:typename:short
base	src/curses/formatted_color.h	/^		const FormattedColor &base() const { return m_fc; }$/;"	f	struct:NC::FormattedColor::End	typeref:typename:const FormattedColor &
base	src/curses/window.cpp	/^const char *base;$/;"	v	namespace:__anon91c40e690111::rl	typeref:typename:const char *
base	src/format.h	/^	Base &base() { return m_base; }$/;"	f	struct:Format::List	typeref:typename:Base &
base	src/format.h	/^	const Base &base() const { return m_base; }$/;"	f	struct:Format::List	typeref:typename:const Base &
beautifyOutput	src/lastfm_service.cpp	/^void ArtistInfo::beautifyOutput(NC::Scrollpad &w)$/;"	f	class:LastFm::ArtistInfo	typeref:typename:void
begin	src/bindings.h	/^	BindingsMap::const_iterator begin() const { return m_bindings.begin(); }$/;"	f	class:BindingsConfiguration	typeref:typename:BindingsMap::const_iterator
begin	src/curses/menu.h	/^	ConstIterator begin() const { return ConstIterator(m_items->begin()); }$/;"	f	struct:NC::Menu	typeref:typename:ConstIterator
begin	src/curses/menu.h	/^	Iterator begin() { return Iterator(m_items->begin()); }$/;"	f	struct:NC::Menu	typeref:typename:Iterator
begin	src/curses/menu.h	/^inline List::ConstIterator begin(const List &list) { return list.beginP(); }$/;"	f	namespace:NC	typeref:typename:List::ConstIterator
begin	src/curses/menu.h	/^inline List::Iterator begin(List &list) { return list.beginP(); }$/;"	f	namespace:NC	typeref:typename:List::Iterator
begin	src/song_list.h	/^inline ConstSongIterator begin(const SongList &list) { return list.beginS(); }$/;"	f	typeref:typename:ConstSongIterator
begin	src/song_list.h	/^inline SongIterator begin(SongList &list) { return list.beginS(); }$/;"	f	typeref:typename:SongIterator
beginP	src/curses/menu.h	/^	virtual List::ConstIterator beginP() const override {$/;"	f	struct:NC::Menu	typeref:typename:List::ConstIterator
beginP	src/curses/menu.h	/^	virtual List::Iterator beginP() override {$/;"	f	struct:NC::Menu	typeref:typename:List::Iterator
beginS	src/screens/browser.cpp	/^ConstSongIterator BrowserWindow::beginS() const$/;"	f	class:BrowserWindow	typeref:typename:ConstSongIterator
beginS	src/screens/browser.cpp	/^SongIterator BrowserWindow::beginS()$/;"	f	class:BrowserWindow	typeref:typename:SongIterator
beginS	src/screens/search_engine.cpp	/^ConstSongIterator SearchEngineWindow::beginS() const$/;"	f	class:SearchEngineWindow	typeref:typename:ConstSongIterator
beginS	src/screens/search_engine.cpp	/^SongIterator SearchEngineWindow::beginS()$/;"	f	class:SearchEngineWindow	typeref:typename:SongIterator
beginS	src/screens/tag_editor.cpp	/^ConstSongIterator TagsWindow::beginS() const$/;"	f	class:TagsWindow	typeref:typename:ConstSongIterator
beginS	src/screens/tag_editor.cpp	/^SongIterator TagsWindow::beginS()$/;"	f	class:TagsWindow	typeref:typename:SongIterator
beginS	src/song_list.cpp	/^ConstSongIterator SongMenu::beginS() const$/;"	f	class:SongMenu	typeref:typename:ConstSongIterator
beginS	src/song_list.cpp	/^SongIterator SongMenu::beginS()$/;"	f	class:SongMenu	typeref:typename:SongIterator
beginV	src/curses/menu.h	/^	ConstValueIterator beginV() const { return ConstValueIterator(begin()); }$/;"	f	struct:NC::Menu	typeref:typename:ConstValueIterator
beginV	src/curses/menu.h	/^	ValueIterator beginV() { return ValueIterator(begin()); }$/;"	f	struct:NC::Menu	typeref:typename:ValueIterator
bin_PROGRAMS	src/Makefile.am	/^bin_PROGRAMS = ncmpcpp$/;"	m
bin_PROGRAMS	src/Makefile.in	/^bin_PROGRAMS = ncmpcpp$(EXEEXT)$/;"	m
bind	src/bindings.h	/^	void bind(NC::Key::Type k, ArgT &&t) {$/;"	f	class:BindingsConfiguration	typeref:typename:void
binding	src/bindings.h	/^	const Binding &binding() const { return std::get<0>(m_impl); }$/;"	f	struct:Command	typeref:typename:const Binding &
bindir	src/Makefile.in	/^bindir = @bindir@$/;"	m
block_search_constraints_change	src/settings.h	/^	bool block_search_constraints_change;$/;"	m	struct:Configuration	typeref:typename:bool
bold	src/curses/window.cpp	/^void Window::bold(bool bold_state) const$/;"	f	class:NC::Window	typeref:typename:void
boundsCheck	src/utility/conversion.h	/^void boundsCheck(const Type &value, const Type &lbound, const Type &ubound)$/;"	f	typeref:typename:void
browserEntryMatcher	src/screens/browser.cpp	/^bool browserEntryMatcher(const Regex::Regex &rx, const MPD::Item &item, bool filter)$/;"	f	namespace:__anonfc130a730411	typeref:typename:bool
browser_display_mode	src/settings.h	/^	DisplayMode browser_display_mode;$/;"	m	struct:Configuration	typeref:typename:DisplayMode
browser_playlist_prefix	src/settings.h	/^	NC::Buffer browser_playlist_prefix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
browser_sort_format	src/settings.h	/^	Format::AST<char> browser_sort_format;$/;"	m	struct:Configuration	typeref:typename:Format::AST<char>
browser_sort_mode	src/settings.h	/^	SortMode browser_sort_mode;$/;"	m	struct:Configuration	typeref:typename:SortMode
buffer	src/curses/scrollpad.cpp	/^const std::string &Scrollpad::buffer()$/;"	f	class:NC::Scrollpad	typeref:typename:const std::string &
buffer	src/screens/search_engine.h	/^	NC::Buffer &buffer() { assert(!m_is_song && m_buffer); return *m_buffer; }$/;"	f	struct:SEItem	typeref:typename:NC::Buffer &
buffer	src/screens/search_engine.h	/^	const NC::Buffer &buffer() const { assert(!m_is_song && m_buffer); return *m_buffer; }$/;"	f	struct:SEItem	typeref:typename:const NC::Buffer &
buffer	src/settings.cpp	/^NC::Buffer buffer(const std::string &v)$/;"	f	namespace:__anon96dc8afe0111	typeref:typename:NC::Buffer
buffer_wlength	src/settings.cpp	/^NC::Buffer buffer_wlength(const NC::Buffer *target,$/;"	f	namespace:__anon96dc8afe0111	typeref:typename:NC::Buffer
build	src/Makefile.in	/^build = @build@$/;"	m
build_alias	src/Makefile.in	/^build_alias = @build_alias@$/;"	m
build_cpu	src/Makefile.in	/^build_cpu = @build_cpu@$/;"	m
build_os	src/Makefile.in	/^build_os = @build_os@$/;"	m
build_triplet	src/Makefile.in	/^build_triplet = @build@$/;"	m
build_vendor	src/Makefile.in	/^build_vendor = @build_vendor@$/;"	m
builddir	src/Makefile.in	/^builddir = @builddir@$/;"	m
c_uri	src/song.h	/^	const char *c_uri() const { return m_song ? mpd_song_get_uri(m_song.get()) : ""; }$/;"	f	struct:MPD::Song	typeref:typename:const char *
calc_hash	src/song.cpp	/^size_t calc_hash(const char *s, size_t seed = 0)$/;"	f	namespace:__anon363a84440111	typeref:typename:size_t
canBeRun	src/actions.cpp	/^bool Add::canBeRun()$/;"	f	class:Actions::Add	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool AddItemToPlaylist::canBeRun()$/;"	f	class:Actions::AddItemToPlaylist	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool AddSelectedItems::canBeRun()$/;"	f	class:Actions::AddSelectedItems	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ApplyFilter::canBeRun()$/;"	f	class:Actions::ApplyFilter	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ChangeBrowseMode::canBeRun()$/;"	f	class:Actions::ChangeBrowseMode	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ClearPlaylist::canBeRun()$/;"	f	class:Actions::ClearPlaylist	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool CropPlaylist::canBeRun()$/;"	f	class:Actions::CropPlaylist	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool DeleteBrowserItems::canBeRun()$/;"	f	class:Actions::DeleteBrowserItems	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool DeletePlaylistItems::canBeRun()$/;"	f	class:Actions::DeletePlaylistItems	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool DeleteStoredPlaylist::canBeRun()$/;"	f	class:Actions::DeleteStoredPlaylist	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool EditDirectoryName::canBeRun()$/;"	f	class:Actions::EditDirectoryName	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool EditLibraryAlbum::canBeRun()$/;"	f	class:Actions::EditLibraryAlbum	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool EditLibraryTag::canBeRun()$/;"	f	class:Actions::EditLibraryTag	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool EditLyrics::canBeRun()$/;"	f	class:Actions::EditLyrics	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool EditPlaylistName::canBeRun()$/;"	f	class:Actions::EditPlaylistName	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool EditSong::canBeRun()$/;"	f	class:Actions::EditSong	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool EnterDirectory::canBeRun()$/;"	f	class:Actions::EnterDirectory	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool FetchLyricsInBackground::canBeRun()$/;"	f	class:Actions::FetchLyricsInBackground	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool Find::canBeRun()$/;"	f	class:Actions::Find	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool FindItemBackward::canBeRun()$/;"	f	class:Actions::FindItemBackward	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool FindItemForward::canBeRun()$/;"	f	class:Actions::FindItemForward	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool JumpToBrowser::canBeRun()$/;"	f	class:Actions::JumpToBrowser	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool JumpToMediaLibrary::canBeRun()$/;"	f	class:Actions::JumpToMediaLibrary	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool JumpToParentDirectory::canBeRun()$/;"	f	class:Actions::JumpToParentDirectory	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool JumpToPlayingSong::canBeRun()$/;"	f	class:Actions::JumpToPlayingSong	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool JumpToPlaylistEditor::canBeRun()$/;"	f	class:Actions::JumpToPlaylistEditor	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool JumpToPositionInSong::canBeRun()$/;"	f	class:Actions::JumpToPositionInSong	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool JumpToTagEditor::canBeRun()$/;"	f	class:Actions::JumpToTagEditor	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool MasterScreen::canBeRun()$/;"	f	class:Actions::MasterScreen	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool MouseEvent::canBeRun()$/;"	f	class:Actions::MouseEvent	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool MoveSelectedItemsDown::canBeRun()$/;"	f	class:Actions::MoveSelectedItemsDown	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool MoveSelectedItemsTo::canBeRun()$/;"	f	class:Actions::MoveSelectedItemsTo	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool MoveSelectedItemsUp::canBeRun()$/;"	f	class:Actions::MoveSelectedItemsUp	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool MoveSortOrderDown::canBeRun()$/;"	f	class:Actions::MoveSortOrderDown	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool MoveSortOrderUp::canBeRun()$/;"	f	class:Actions::MoveSortOrderUp	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool NextColumn::canBeRun()$/;"	f	class:Actions::NextColumn	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool NextFoundItem::canBeRun()$/;"	f	class:Actions::NextFoundItem	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool Pause::canBeRun()$/;"	f	class:Actions::Pause	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool PlayItem::canBeRun()$/;"	f	class:Actions::PlayItem	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool PreviousColumn::canBeRun()$/;"	f	class:Actions::PreviousColumn	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool PreviousFoundItem::canBeRun()$/;"	f	class:Actions::PreviousFoundItem	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool RefetchLyrics::canBeRun()$/;"	f	class:Actions::RefetchLyrics	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool RemoveSelection::canBeRun()$/;"	f	class:Actions::RemoveSelection	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ResetSearchEngine::canBeRun()$/;"	f	class:Actions::ResetSearchEngine	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ReversePlaylist::canBeRun()$/;"	f	class:Actions::ReversePlaylist	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ReverseSelection::canBeRun()$/;"	f	class:Actions::ReverseSelection	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool RunAction::canBeRun()$/;"	f	class:Actions::RunAction	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SaveTagChanges::canBeRun()$/;"	f	class:Actions::SaveTagChanges	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ScrollDownAlbum::canBeRun()$/;"	f	class:Actions::ScrollDownAlbum	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ScrollDownArtist::canBeRun()$/;"	f	class:Actions::ScrollDownArtist	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ScrollUpAlbum::canBeRun()$/;"	f	class:Actions::ScrollUpAlbum	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ScrollUpArtist::canBeRun()$/;"	f	class:Actions::ScrollUpArtist	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SeekBackward::canBeRun()$/;"	f	class:Actions::SeekBackward	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SeekForward::canBeRun()$/;"	f	class:Actions::SeekForward	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SelectAlbum::canBeRun()$/;"	f	class:Actions::SelectAlbum	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SelectFoundItems::canBeRun()$/;"	f	class:Actions::SelectFoundItems	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SelectItem::canBeRun()$/;"	f	class:Actions::SelectItem	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SelectRange::canBeRun()$/;"	f	class:Actions::SelectRange	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SetSelectedItemsPriority::canBeRun()$/;"	f	class:Actions::SetSelectedItemsPriority	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowArtistInfo::canBeRun()$/;"	f	class:Actions::ShowArtistInfo	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowBrowser::canBeRun()$/;"	f	class:Actions::ShowBrowser	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowClock::canBeRun()$/;"	f	class:Actions::ShowClock	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowHelp::canBeRun()$/;"	f	class:Actions::ShowHelp	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowLyrics::canBeRun()$/;"	f	class:Actions::ShowLyrics	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowMediaLibrary::canBeRun()$/;"	f	class:Actions::ShowMediaLibrary	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowOutputs::canBeRun()$/;"	f	class:Actions::ShowOutputs	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowPlaylist::canBeRun()$/;"	f	class:Actions::ShowPlaylist	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowPlaylistEditor::canBeRun()$/;"	f	class:Actions::ShowPlaylistEditor	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowSearchEngine::canBeRun()$/;"	f	class:Actions::ShowSearchEngine	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowServerInfo::canBeRun()$/;"	f	class:Actions::ShowServerInfo	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowTagEditor::canBeRun()$/;"	f	class:Actions::ShowTagEditor	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ShowVisualizer::canBeRun()$/;"	f	class:Actions::ShowVisualizer	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool Shuffle::canBeRun()$/;"	f	class:Actions::Shuffle	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SlaveScreen::canBeRun()$/;"	f	class:Actions::SlaveScreen	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool SortPlaylist::canBeRun()$/;"	f	class:Actions::SortPlaylist	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool StartSearching::canBeRun()$/;"	f	class:Actions::StartSearching	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ToggleBrowserSortMode::canBeRun()$/;"	f	class:Actions::ToggleBrowserSortMode	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ToggleDisplayMode::canBeRun()$/;"	f	class:Actions::ToggleDisplayMode	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ToggleLibraryTagType::canBeRun()$/;"	f	class:Actions::ToggleLibraryTagType	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ToggleLyricsUpdateOnSongChange::canBeRun()$/;"	f	class:Actions::ToggleLyricsUpdateOnSongChange	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ToggleMediaLibraryColumnsMode::canBeRun()$/;"	f	class:Actions::ToggleMediaLibraryColumnsMode	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ToggleMediaLibrarySortMode::canBeRun()$/;"	f	class:Actions::ToggleMediaLibrarySortMode	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ToggleOutput::canBeRun()$/;"	f	class:Actions::ToggleOutput	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ToggleSeparatorsBetweenAlbums::canBeRun()$/;"	f	class:Actions::ToggleSeparatorsBetweenAlbums	typeref:typename:bool
canBeRun	src/actions.cpp	/^bool ToggleVisualizationType::canBeRun()$/;"	f	class:Actions::ToggleVisualizationType	typeref:typename:bool
canBeRun	src/actions.h	/^	virtual bool canBeRun() { return true; }$/;"	f	struct:Actions::BaseAction	typeref:typename:bool
canBeRun	src/macro_utilities.cpp	/^bool RequireRunnable::canBeRun()$/;"	f	class:Actions::RequireRunnable	typeref:typename:bool
canBeRun	src/macro_utilities.cpp	/^bool RequireScreen::canBeRun()$/;"	f	class:Actions::RequireScreen	typeref:typename:bool
cancel	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::cancel()$/;"	f	class:SelectedItemsAdder	typeref:typename:void
cancel	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::cancel() const$/;"	f	class:SortPlaylistDialog	typeref:typename:void
centeredCursor	src/curses/menu.h	/^	void centeredCursor(bool state) { m_autocenter_cursor = state; }$/;"	f	struct:NC::Menu	typeref:typename:void
centered_cursor	src/settings.h	/^	bool centered_cursor;$/;"	m	struct:Configuration	typeref:typename:bool
cerr_buffer	src/ncmpcpp.cpp	/^std::streambuf *cerr_buffer;$/;"	v	namespace:__anona90627fe0111	typeref:typename:std::streambuf *
changeBrowseMode	src/screens/browser.cpp	/^void Browser::changeBrowseMode()$/;"	f	class:Browser	typeref:typename:void
channelsToString	src/utility/type_conversions.cpp	/^std::string channelsToString(int channels)$/;"	f	typeref:typename:std::string
charToColor	src/utility/type_conversions.cpp	/^NC::Color charToColor(char c)$/;"	f	typeref:typename:NC::Color
charToGetFunction	src/utility/type_conversions.cpp	/^MPD::Song::GetFunction charToGetFunction(char c)$/;"	f	typeref:typename:MPD::Song::GetFunction
charToTagType	src/utility/type_conversions.cpp	/^mpd_tag_type charToTagType(char c)$/;"	f	typeref:typename:mpd_tag_type
check	src/Makefile.in	/^check: check-am$/;"	t
check-am	src/Makefile.in	/^check-am: all-am$/;"	t
checkConnection	src/mpdpp.cpp	/^void Connection::checkConnection() const$/;"	f	class:MPD::Connection	typeref:typename:void
checkConnectionErrors	src/mpdpp.cpp	/^void checkConnectionErrors(mpd_connection *conn)$/;"	f	namespace:MPD	typeref:typename:void
checkErrors	src/mpdpp.cpp	/^void Connection::checkErrors() const$/;"	f	class:MPD::Connection	typeref:typename:void
checkForSong	src/screens/playlist.cpp	/^bool Playlist::checkForSong(const MPD::Song &s)$/;"	f	class:Playlist	typeref:typename:bool
choice	src/curses/menu_impl.h	/^size_t Menu<ItemT>::choice() const$/;"	f	class:NC::Menu	typeref:typename:size_t
clean	src/Makefile.in	/^clean: clean-am$/;"	t
clean-am	src/Makefile.in	/^clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am$/;"	t
clean-binPROGRAMS	src/Makefile.in	/^clean-binPROGRAMS:$/;"	t
clean-generic	src/Makefile.in	/^clean-generic:$/;"	t
clean-libtool	src/Makefile.in	/^clean-libtool:$/;"	t
clear	src/curses/menu_impl.h	/^void Menu<ItemT>::clear()$/;"	f	class:NC::Menu	typeref:typename:void
clear	src/curses/scrollpad.cpp	/^void Scrollpad::clear()$/;"	f	class:NC::Scrollpad	typeref:typename:void
clear	src/curses/strbuffer.h	/^	void clear()$/;"	f	class:NC::BasicBuffer	typeref:typename:void
clear	src/curses/window.cpp	/^void Window::clear()$/;"	f	class:NC::Window	typeref:typename:void
clear	src/mpdpp.h	/^	void clear() { m_status.reset(); }$/;"	f	struct:MPD::Status	typeref:typename:void
clear	src/regex_filter.h	/^	void clear()$/;"	f	struct:Regex::Filter	typeref:typename:void
clear	src/regex_filter.h	/^	void clear()$/;"	f	struct:Regex::ItemFilter	typeref:typename:void
clear	src/status.cpp	/^void Status::clear()$/;"	f	class:Status	typeref:typename:void
clearDirectory	src/screens/browser.cpp	/^void clearDirectory(const std::string &directory)$/;"	f	namespace:__anonfc130a730411	typeref:typename:void
clearFDCallbacksList	src/curses/window.cpp	/^void Window::clearFDCallbacksList()$/;"	f	class:NC::Window	typeref:typename:void
clearFilter	src/curses/menu_impl.h	/^void Menu<ItemT>::clearFilter()$/;"	f	class:NC::Menu	typeref:typename:void
clearModifications	src/mutable_song.cpp	/^void MutableSong::clearModifications()$/;"	f	class:MPD::MutableSong	typeref:typename:void
clearSearchConstraint	src/screens/browser.cpp	/^void Browser::clearSearchConstraint()$/;"	f	class:Browser	typeref:typename:void
clearSearchConstraint	src/screens/media_library.cpp	/^void MediaLibrary::clearSearchConstraint()$/;"	f	class:MediaLibrary	typeref:typename:void
clearSearchConstraint	src/screens/playlist.cpp	/^void Playlist::clearSearchConstraint()$/;"	f	class:Playlist	typeref:typename:void
clearSearchConstraint	src/screens/playlist_editor.cpp	/^void PlaylistEditor::clearSearchConstraint()$/;"	f	class:PlaylistEditor	typeref:typename:void
clearSearchConstraint	src/screens/search_engine.cpp	/^void SearchEngine::clearSearchConstraint()$/;"	f	class:SearchEngine	typeref:typename:void
clearSearchConstraint	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::clearSearchConstraint()$/;"	f	class:SelectedItemsAdder	typeref:typename:void
clearSearchConstraint	src/screens/tag_editor.cpp	/^void TagEditor::clearSearchConstraint()$/;"	f	class:TagEditor	typeref:typename:void
clearWorker	src/screens/lyrics.cpp	/^void Lyrics::clearWorker()$/;"	f	class:Lyrics	typeref:typename:void
clearable	src/mpdpp.h	/^	bool clearable() const { return m_clearable; }$/;"	f	struct:MPD::ClientError	typeref:typename:bool
clearable	src/mpdpp.h	/^	bool clearable() const { return m_clearable; }$/;"	f	struct:MPD::ServerError	typeref:typename:bool
clock_display_seconds	src/settings.h	/^	bool clock_display_seconds;$/;"	m	struct:Configuration	typeref:typename:bool
clog_buffer	src/ncmpcpp.cpp	/^std::streambuf *clog_buffer;$/;"	v	namespace:__anona90627fe0111	typeref:typename:std::streambuf *
code	src/mpdpp.h	/^	mpd_error code() const { return m_code; }$/;"	f	struct:MPD::ClientError	typeref:typename:mpd_error
code	src/mpdpp.h	/^	mpd_server_error code() const { return m_code; }$/;"	f	struct:MPD::ServerError	typeref:typename:mpd_server_error
color	src/curses/formatted_color.h	/^	const Color &color() const { return m_color; }$/;"	f	struct:NC::FormattedColor	typeref:typename:const Color &
color	src/settings.h	/^	NC::Color color;$/;"	m	struct:Column	typeref:typename:NC::Color
color1	src/settings.h	/^	NC::FormattedColor color1;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
color2	src/settings.h	/^	NC::FormattedColor color2;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
colorCount	src/curses/window.cpp	/^int colorCount()$/;"	f	namespace:NC	typeref:typename:int
color_pair_counter	src/curses/window.cpp	/^int color_pair_counter;$/;"	v	namespace:__anon91c40e690111	typeref:typename:int
color_pair_map	src/curses/window.cpp	/^std::vector<int> color_pair_map;$/;"	v	namespace:__anon91c40e690111	typeref:typename:std::vector<int>
colors_enabled	src/settings.h	/^	bool colors_enabled;$/;"	m	struct:Configuration	typeref:typename:bool
columns	src/screens/media_library.cpp	/^int MediaLibrary::columns()$/;"	f	class:MediaLibrary	typeref:typename:int
columns	src/settings.h	/^	std::vector<Column> columns;$/;"	m	struct:Configuration	typeref:typename:std::vector<Column>
columns_to_format	src/settings.cpp	/^Format::AST<char> columns_to_format(const std::vector<Column> &columns)$/;"	f	namespace:__anon96dc8afe0111	typeref:typename:Format::AST<char>
compare	src/utility/comparators.cpp	/^int LocaleStringComparison::compare(const char *a, size_t a_len, const char *b, size_t b_len) co/;"	f	class:LocaleStringComparison	typeref:typename:int
configure	src/configuration.cpp	/^bool configure(int argc, char **argv)$/;"	f	typeref:typename:bool
confirmAction	src/actions.cpp	/^void confirmAction(const boost::format &description)$/;"	f	namespace:Actions	typeref:typename:void
confirmAction	src/actions.h	/^inline void confirmAction(const std::string &description)$/;"	f	namespace:Actions	typeref:typename:void
connected_message_on_startup	src/settings.h	/^	bool connected_message_on_startup;$/;"	m	struct:Configuration	typeref:typename:bool
connection	src/mpdpp.h	/^		mpd_connection *connection() const$/;"	f	struct:MPD::Iterator::State	typeref:typename:mpd_connection *
constApply	src/screens/screen.h	/^		static ConstResult &constApply(ConstWindowReference w) { return w; }$/;"	f	struct:Screen::getObject	typeref:typename:ConstResult &
constApply	src/screens/screen.h	/^		static ConstResult &constApply(const WindowType w) { return *w; }$/;"	f	struct:Screen::getObject	typeref:typename:ConstResult &
const_iterator	src/curses/menu.h	/^	typedef ConstIterator const_iterator;$/;"	t	struct:NC::Menu	typeref:typename:ConstIterator
const_strlen	src/utility/string.h	/^template <size_t N> size_t const_strlen(const char (&)[N]) {$/;"	f	typeref:typename:size_t
constraint	src/regex_filter.h	/^	const std::string &constraint() const {$/;"	f	struct:Regex::Filter	typeref:typename:const std::string &
constraint	src/regex_filter.h	/^	const std::string &constraint() const {$/;"	f	struct:Regex::ItemFilter	typeref:typename:const std::string &
construct	src/curses/strbuffer.h	/^	void construct() { }$/;"	f	class:NC::BasicBuffer	typeref:typename:void
construct	src/curses/strbuffer.h	/^	void construct(ArgT &&arg, Args&&... args)$/;"	f	class:NC::BasicBuffer	typeref:typename:void
consume	src/mpdpp.h	/^	bool consume() const { return mpd_status_get_consume(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:bool
consume	src/status.cpp	/^bool Status::State::consume()$/;"	f	class:Status::State	typeref:typename:bool
convert	src/regex_filter.h	/^	static void convert(icu::UnicodeString &s)$/;"	f	struct:__anon4539d7d20111::StripDiacritics	typeref:typename:void
convertString	src/utility/functional.h	/^struct convertString$/;"	s
convertString	src/utility/functional.h	/^struct convertString<TargetT, TargetT>$/;"	s
copy	src/curses/menu.h	/^		Item copy() const {$/;"	f	struct:NC::Menu::Item	typeref:typename:Item
cropPlaylist	src/helpers.h	/^void cropPlaylist(NC::Menu<MPD::Song> &m, F delete_fun)$/;"	f	typeref:typename:void
crossfade	src/mpdpp.h	/^	unsigned crossfade() const { return mpd_status_get_crossfade(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:unsigned
crossfade	src/status.cpp	/^bool Status::State::crossfade()$/;"	f	class:Status::State	typeref:typename:bool
crossfade_time	src/settings.h	/^	unsigned crossfade_time;$/;"	m	struct:Configuration	typeref:typename:unsigned
cscopelist	src/Makefile.in	/^cscopelist: cscopelist-am$/;"	t
cscopelist-am	src/Makefile.in	/^cscopelist-am: $(am__tagged_files)$/;"	t
ctags	src/Makefile.in	/^ctags: ctags-am$/;"	t
ctags-am	src/Makefile.in	/^ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)$/;"	t
current	src/curses/menu.h	/^	ConstIterator current() const { return ConstIterator(m_items->begin() + m_highlight); }$/;"	f	struct:NC::Menu	typeref:typename:ConstIterator
current	src/curses/menu.h	/^	Iterator current() { return Iterator(m_items->begin() + m_highlight); }$/;"	f	struct:NC::Menu	typeref:typename:Iterator
current	src/curses/window.cpp	/^const short Color::current = -2;$/;"	m	class:NC::Color	typeref:typename:const short
current	src/curses/window.h	/^	static const short current;$/;"	m	struct:NC::Color	typeref:typename:const short
currentBackground	src/curses/window.h	/^	bool currentBackground() const { return background() == current; }$/;"	f	struct:NC::Color	typeref:typename:bool
currentDirectory	src/screens/browser.cpp	/^const std::string& Browser::currentDirectory()$/;"	f	class:Browser	typeref:typename:const std::string &
currentFilter	src/screens/browser.cpp	/^std::string Browser::currentFilter()$/;"	f	class:Browser	typeref:typename:std::string
currentFilter	src/screens/media_library.cpp	/^std::string MediaLibrary::currentFilter()$/;"	f	class:MediaLibrary	typeref:typename:std::string
currentFilter	src/screens/playlist.cpp	/^std::string Playlist::currentFilter()$/;"	f	class:Playlist	typeref:typename:std::string
currentFilter	src/screens/playlist_editor.cpp	/^std::string PlaylistEditor::currentFilter()$/;"	f	class:PlaylistEditor	typeref:typename:std::string
currentFilter	src/screens/search_engine.cpp	/^std::string SearchEngine::currentFilter()$/;"	f	class:SearchEngine	typeref:typename:std::string
currentP	src/curses/menu.h	/^	virtual List::ConstIterator currentP() const override {$/;"	f	struct:NC::Menu	typeref:typename:List::ConstIterator
currentP	src/curses/menu.h	/^	virtual List::Iterator currentP() override {$/;"	f	struct:NC::Menu	typeref:typename:List::Iterator
currentS	src/screens/browser.cpp	/^ConstSongIterator BrowserWindow::currentS() const$/;"	f	class:BrowserWindow	typeref:typename:ConstSongIterator
currentS	src/screens/browser.cpp	/^SongIterator BrowserWindow::currentS()$/;"	f	class:BrowserWindow	typeref:typename:SongIterator
currentS	src/screens/search_engine.cpp	/^ConstSongIterator SearchEngineWindow::currentS() const$/;"	f	class:SearchEngineWindow	typeref:typename:ConstSongIterator
currentS	src/screens/search_engine.cpp	/^SongIterator SearchEngineWindow::currentS()$/;"	f	class:SearchEngineWindow	typeref:typename:SongIterator
currentS	src/screens/tag_editor.cpp	/^ConstSongIterator TagsWindow::currentS() const$/;"	f	class:TagsWindow	typeref:typename:ConstSongIterator
currentS	src/screens/tag_editor.cpp	/^SongIterator TagsWindow::currentS()$/;"	f	class:TagsWindow	typeref:typename:SongIterator
currentS	src/song_list.cpp	/^ConstSongIterator SongMenu::currentS() const$/;"	f	class:SongMenu	typeref:typename:ConstSongIterator
currentS	src/song_list.cpp	/^SongIterator SongMenu::currentS()$/;"	f	class:SongMenu	typeref:typename:SongIterator
currentSong	src/helpers.cpp	/^const MPD::Song *currentSong(const BaseScreen *screen)$/;"	f	typeref:typename:const MPD::Song *
currentSongID	src/mpdpp.h	/^	int currentSongID() const { return mpd_status_get_song_id(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:int
currentSongID	src/status.cpp	/^int Status::State::currentSongID()$/;"	f	class:Status::State	typeref:typename:int
currentSongPosition	src/mpdpp.h	/^	int currentSongPosition() const { return mpd_status_get_song_pos(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:int
currentSongPosition	src/status.cpp	/^int Status::State::currentSongPosition()$/;"	f	class:Status::State	typeref:typename:int
currentV	src/curses/menu.h	/^	ConstValueIterator currentV() const { return ConstValueIterator(m_items->begin() + m_highlight)/;"	f	struct:NC::Menu	typeref:typename:ConstValueIterator
currentV	src/curses/menu.h	/^	ValueIterator currentV() { return ValueIterator(m_items->begin() + m_highlight); }$/;"	f	struct:NC::Menu	typeref:typename:ValueIterator
current_item_inactive_column_prefix	src/settings.h	/^	NC::Buffer current_item_inactive_column_prefix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
current_item_inactive_column_prefix_length	src/settings.h	/^	size_t current_item_inactive_column_prefix_length;$/;"	m	struct:Configuration	typeref:typename:size_t
current_item_inactive_column_suffix	src/settings.h	/^	NC::Buffer current_item_inactive_column_suffix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
current_item_inactive_column_suffix_length	src/settings.h	/^	size_t current_item_inactive_column_suffix_length;$/;"	m	struct:Configuration	typeref:typename:size_t
current_item_prefix	src/settings.h	/^	NC::Buffer current_item_prefix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
current_item_prefix_length	src/settings.h	/^	size_t current_item_prefix_length;$/;"	m	struct:Configuration	typeref:typename:size_t
current_item_suffix	src/settings.h	/^	NC::Buffer current_item_suffix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
current_item_suffix_length	src/settings.h	/^	size_t current_item_suffix_length;$/;"	m	struct:Configuration	typeref:typename:size_t
curses/$(DEPDIR)/$(am__dirstamp)	src/Makefile.in	/^curses\/$(DEPDIR)\/$(am__dirstamp):$/;"	t
curses/$(am__dirstamp)	src/Makefile.in	/^curses\/$(am__dirstamp):$/;"	t
curses/formatted_color.$(OBJEXT)	src/Makefile.in	/^curses\/formatted_color.$(OBJEXT): curses\/$(am__dirstamp) \\$/;"	t
curses/scrollpad.$(OBJEXT)	src/Makefile.in	/^curses\/scrollpad.$(OBJEXT): curses\/$(am__dirstamp) \\$/;"	t
curses/window.$(OBJEXT)	src/Makefile.in	/^curses\/window.$(OBJEXT): curses\/$(am__dirstamp) \\$/;"	t
cyclicScrolling	src/curses/menu.h	/^	void cyclicScrolling(bool state) { m_cyclic_scroll_enabled = state; }$/;"	f	struct:NC::Menu	typeref:typename:void
data_fetching_delay	src/settings.h	/^	bool data_fetching_delay;$/;"	m	struct:Configuration	typeref:typename:bool
database	src/status.cpp	/^void Status::Changes::database()$/;"	f	class:Status::Changes	typeref:typename:void
datadir	src/Makefile.in	/^datadir = @datadir@$/;"	m
datarootdir	src/Makefile.in	/^datarootdir = @datarootdir@$/;"	m
date	src/screens/media_library.h	/^		const std::string &date() const { return m_date; }$/;"	f	struct:MediaLibrary::Album	typeref:typename:const std::string &
dbPlayTime	src/mpdpp.h	/^	unsigned long dbPlayTime() const { return mpd_stats_get_db_play_time(m_stats.get()); }$/;"	f	struct:MPD::Statistics	typeref:typename:unsigned long
dbUpdateTime	src/mpdpp.h	/^	unsigned long dbUpdateTime() const { return mpd_stats_get_db_update_time(m_stats.get()); }$/;"	f	struct:MPD::Statistics	typeref:typename:unsigned long
defaultFetcher	src/mpdpp.cpp	/^defaultFetcher(SourceT *(fetcher)(mpd_connection *))$/;"	f	namespace:__anon46a7540e0111	typeref:typename:std::function<bool (typename MPD::Iterator<ObjectT>::State &)>
defaultWindowTimeout	src/screens/screen.h	/^	const static int defaultWindowTimeout = 500;$/;"	m	struct:BaseScreen	typeref:typename:const int
defined	src/regex_filter.h	/^	bool defined() const$/;"	f	struct:Regex::Filter	typeref:typename:bool
defined	src/regex_filter.h	/^	bool defined() const$/;"	f	struct:Regex::ItemFilter	typeref:typename:bool
deleteSelectedSongs	src/helpers.h	/^void deleteSelectedSongs(NC::Menu<MPD::Song> &menu, F &&delete_fun)$/;"	f	typeref:typename:void
delimiter	src/format.h	/^	unsigned delimiter() const { return m_delimiter; }$/;"	f	struct:Format::SongTag	typeref:typename:unsigned
depcomp	src/Makefile.in	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
deprecated	src/settings.cpp	/^void deprecated(const char *option, double version_removal, const std::string &advice)$/;"	f	namespace:__anon96dc8afe0111	typeref:typename:void
design	src/settings.h	/^	Design design;$/;"	m	struct:Configuration	typeref:typename:Design
destroyScreen	src/curses/window.cpp	/^void destroyScreen()$/;"	f	namespace:NC	typeref:typename:void
directory	src/mpdpp.h	/^	Directory &directory()$/;"	f	struct:MPD::Item	typeref:typename:Directory &
directory	src/mpdpp.h	/^	const Directory &directory() const$/;"	f	struct:MPD::Item	typeref:typename:const Directory &
disable	src/curses/window.cpp	/^void disable()$/;"	f	namespace:NC::Mouse	typeref:typename:void
discard_colors_if_item_is_selected	src/settings.h	/^	bool discard_colors_if_item_is_selected;$/;"	m	struct:Configuration	typeref:typename:bool
disp	src/screens/clock.cpp	/^short Clock::disp[11] =$/;"	m	class:Clock	typeref:typename:short[11]
disp	src/screens/clock.h	/^	static short disp[11];$/;"	m	struct:Clock	typeref:typename:short[11]
display	src/curses/window.cpp	/^void Window::display()$/;"	f	class:NC::Window	typeref:typename:void
display_bitrate	src/settings.h	/^	bool display_bitrate;$/;"	m	struct:Configuration	typeref:typename:bool
display_empty_tag	src/settings.h	/^	bool display_empty_tag;$/;"	m	struct:Column	typeref:typename:bool
display_keys	src/screens/help.cpp	/^std::string display_keys(const Actions::Type at)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:std::string
display_remaining_time	src/settings.h	/^	bool display_remaining_time;$/;"	m	struct:Configuration	typeref:typename:bool
display_string	src/curses/window.cpp	/^void display_string()$/;"	f	namespace:__anon91c40e690111::rl	typeref:typename:void
display_volume_level	src/settings.h	/^	bool display_volume_level;$/;"	m	struct:Configuration	typeref:typename:bool
distclean	src/Makefile.in	/^distclean: distclean-am$/;"	t
distclean-am	src/Makefile.in	/^distclean-am: clean-am distclean-compile distclean-generic \\$/;"	t
distclean-compile	src/Makefile.in	/^distclean-compile:$/;"	t
distclean-generic	src/Makefile.in	/^distclean-generic:$/;"	t
distclean-tags	src/Makefile.in	/^distclean-tags:$/;"	t
distdir	src/Makefile.in	/^distdir: $(BUILT_SOURCES)$/;"	t
distdir-am	src/Makefile.in	/^distdir-am: $(DISTFILES)$/;"	t
do_at_exit	src/ncmpcpp.cpp	/^void do_at_exit()$/;"	f	namespace:__anona90627fe0111	typeref:typename:void
docdir	src/Makefile.in	/^docdir = @docdir@$/;"	m
downloadLyrics	src/screens/lyrics.cpp	/^boost::optional<std::string> downloadLyrics($/;"	f	namespace:__anon5d75aa650111	typeref:typename:boost::optional<std::string>
draw	src/statusbar.cpp	/^void Progressbar::draw(unsigned int elapsed, unsigned int time)$/;"	f	class:Progressbar	typeref:typename:void
drawHeader	src/title.cpp	/^void drawHeader()$/;"	f	typeref:typename:void
drawSeparator	src/screens/screen.cpp	/^void drawSeparator(int x)$/;"	f	typeref:typename:void
drawTitle	src/status.cpp	/^void drawTitle(const MPD::Song &np)$/;"	f	namespace:__anon855393f10111	typeref:typename:void
drawn	src/curses/menu.h	/^	ConstIterator drawn() const { return begin() + m_drawn_position; }$/;"	f	struct:NC::Menu	typeref:typename:ConstIterator
dvi	src/Makefile.in	/^dvi: dvi-am$/;"	t
dvi-am	src/Makefile.in	/^dvi-am:$/;"	t
dvidir	src/Makefile.in	/^dvidir = @dvidir@$/;"	m
edit	src/screens/lyrics.cpp	/^void Lyrics::edit()$/;"	f	class:Lyrics	typeref:typename:void
elapsedTime	src/mpdpp.h	/^	unsigned elapsedTime() const { return mpd_status_get_elapsed_time(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:unsigned
elapsedTime	src/status.cpp	/^unsigned Status::State::elapsedTime()$/;"	f	class:Status::State	typeref:typename:unsigned
elapsedTime	src/status.cpp	/^void Status::Changes::elapsedTime(bool update_elapsed)$/;"	f	class:Status::Changes	typeref:typename:void
empty	src/curses/menu.h	/^	virtual bool empty() const override { return m_items->empty(); }$/;"	f	struct:NC::Menu	typeref:typename:bool
empty	src/curses/strbuffer.h	/^	bool empty() const$/;"	f	class:NC::BasicBuffer	typeref:typename:bool
empty	src/mpdpp.h	/^	bool empty() const { return m_output.get() == nullptr; }$/;"	f	struct:MPD::Output	typeref:typename:bool
empty	src/mpdpp.h	/^	bool empty() const { return m_stats.get() == nullptr; }$/;"	f	struct:MPD::Statistics	typeref:typename:bool
empty	src/mpdpp.h	/^	bool empty() const { return m_status.get() == nullptr; }$/;"	f	struct:MPD::Status	typeref:typename:bool
empty	src/song.cpp	/^bool Song::empty() const$/;"	f	class:MPD::Song	typeref:typename:bool
empty	src/tags.h	/^	bool empty() const$/;"	f	struct:Tags::ReplayGainInfo	typeref:typename:bool
empty_tag	src/settings.h	/^	std::string empty_tag;$/;"	m	struct:Configuration	typeref:typename:std::string
empty_tags_color	src/settings.h	/^	NC::FormattedColor empty_tags_color;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
enable	src/curses/window.cpp	/^void enable()$/;"	f	namespace:NC::Mouse	typeref:typename:void
enableHighlighting	src/screens/playlist.cpp	/^void Playlist::enableHighlighting()$/;"	f	class:Playlist	typeref:typename:void
enabled	src/mpdpp.h	/^	bool enabled() const$/;"	f	struct:MPD::Output	typeref:typename:bool
encrypted	src/curses/window.cpp	/^bool encrypted;$/;"	v	namespace:__anon91c40e690111::rl	typeref:typename:bool
end	src/bindings.h	/^	BindingsMap::const_iterator end() const { return m_bindings.end(); }$/;"	f	class:BindingsConfiguration	typeref:typename:BindingsMap::const_iterator
end	src/curses/menu.h	/^	ConstIterator end() const { return ConstIterator(m_items->end()); }$/;"	f	struct:NC::Menu	typeref:typename:ConstIterator
end	src/curses/menu.h	/^	Iterator end() { return Iterator(m_items->end()); }$/;"	f	struct:NC::Menu	typeref:typename:Iterator
end	src/curses/menu.h	/^inline List::ConstIterator end(const List &list) { return list.endP(); }$/;"	f	namespace:NC	typeref:typename:List::ConstIterator
end	src/curses/menu.h	/^inline List::Iterator end(List &list) { return list.endP(); }$/;"	f	namespace:NC	typeref:typename:List::Iterator
end	src/song_list.h	/^inline ConstSongIterator end(const SongList &list) { return list.endS(); }$/;"	f	typeref:typename:ConstSongIterator
end	src/song_list.h	/^inline SongIterator end(SongList &list) { return list.endS(); }$/;"	f	typeref:typename:SongIterator
endP	src/curses/menu.h	/^	virtual List::ConstIterator endP() const override {$/;"	f	struct:NC::Menu	typeref:typename:List::ConstIterator
endP	src/curses/menu.h	/^	virtual List::Iterator endP() override {$/;"	f	struct:NC::Menu	typeref:typename:List::Iterator
endS	src/screens/browser.cpp	/^ConstSongIterator BrowserWindow::endS() const$/;"	f	class:BrowserWindow	typeref:typename:ConstSongIterator
endS	src/screens/browser.cpp	/^SongIterator BrowserWindow::endS()$/;"	f	class:BrowserWindow	typeref:typename:SongIterator
endS	src/screens/search_engine.cpp	/^ConstSongIterator SearchEngineWindow::endS() const$/;"	f	class:SearchEngineWindow	typeref:typename:ConstSongIterator
endS	src/screens/search_engine.cpp	/^SongIterator SearchEngineWindow::endS()$/;"	f	class:SearchEngineWindow	typeref:typename:SongIterator
endS	src/screens/tag_editor.cpp	/^ConstSongIterator TagsWindow::endS() const$/;"	f	class:TagsWindow	typeref:typename:ConstSongIterator
endS	src/screens/tag_editor.cpp	/^SongIterator TagsWindow::endS()$/;"	f	class:TagsWindow	typeref:typename:SongIterator
endS	src/song_list.cpp	/^ConstSongIterator SongMenu::endS() const$/;"	f	class:SongMenu	typeref:typename:ConstSongIterator
endS	src/song_list.cpp	/^SongIterator SongMenu::endS()$/;"	f	class:SongMenu	typeref:typename:SongIterator
endV	src/curses/menu.h	/^	ConstValueIterator endV() const { return ConstValueIterator(end()); }$/;"	f	struct:NC::Menu	typeref:typename:ConstValueIterator
endV	src/curses/menu.h	/^	ValueIterator endV() { return ValueIterator(end()); }$/;"	f	struct:NC::Menu	typeref:typename:ValueIterator
enterDirectory	src/screens/browser.cpp	/^bool Browser::enterDirectory()$/;"	f	class:Browser	typeref:typename:bool
enterDirectory	src/screens/tag_editor.cpp	/^bool TagEditor::enterDirectory()$/;"	f	class:TagEditor	typeref:typename:bool
entry	src/screens/media_library.h	/^		const Album &entry() const { return m_album; }$/;"	f	struct:MediaLibrary::AlbumEntry	typeref:typename:const Album &
env_home	src/configuration.cpp	/^const char *env_home;$/;"	v	namespace:__anon7444cf050111	typeref:typename:const char *
error	src/mpdpp.h	/^	const char *error() const { return mpd_status_get_error(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:const char *
errorMessage	src/utility/conversion.h	/^	const std::string &errorMessage() { return m_error_message; }$/;"	f	struct:OutOfBounds	typeref:typename:const std::string &
errorlog	src/ncmpcpp.cpp	/^std::ofstream errorlog;$/;"	v	namespace:__anona90627fe0111	typeref:typename:std::ofstream
escape	src/curl_handle.cpp	/^std::string Curl::escape(const std::string &s)$/;"	f	class:Curl	typeref:typename:std::string
escapeSingleQuotes	src/utility/string.cpp	/^void escapeSingleQuotes(std::string &filename)$/;"	f	typeref:typename:void
exec	src/format_impl.h	/^		>::type exec(SomeString &result, const OtherString &s, const SongTag *) {$/;"	f	struct:Format::Printer	typeref:typename:std::enable_if<std::is_same<SomeString,OtherString>::value,void>::type
exec	src/format_impl.h	/^		static void exec(OutputStreamT &os, const ValueT &value, const SongTag *) {$/;"	f	struct:Format::Printer::output_	typeref:typename:void
exec_prefix	src/Makefile.in	/^exec_prefix = @exec_prefix@$/;"	m
execute	src/actions.h	/^	bool execute()$/;"	f	struct:Actions::BaseAction	typeref:typename:bool
execute	src/bindings.h	/^	bool execute() const {$/;"	f	struct:Binding	typeref:typename:bool
execute	src/screens/screen_switcher.h	/^		static void execute(ScreenT *) { }$/;"	f	struct:SwitchTo::TabbableAction_	typeref:typename:void
execute	src/screens/screen_switcher.h	/^		static void execute(ScreenT *screen) {$/;"	f	struct:SwitchTo::TabbableAction_	typeref:typename:void
execute	src/screens/screen_switcher.h	/^	static void execute(ScreenT *screen)$/;"	f	class:SwitchTo	typeref:typename:void
execute_on_player_state_change	src/settings.h	/^	std::string execute_on_player_state_change;$/;"	m	struct:Configuration	typeref:typename:std::string
execute_on_song_change	src/settings.h	/^	std::string execute_on_song_change;$/;"	m	struct:Configuration	typeref:typename:std::string
exitSuccessfully	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::exitSuccessfully(bool success) const$/;"	f	class:SelectedItemsAdder	typeref:typename:void
expand_home	src/configuration.cpp	/^void expand_home(std::string &path)$/;"	f	typeref:typename:void
expressions	src/format.cpp	/^template <typename CharT> using expressions = std::vector<Format::Expression<CharT>>;$/;"	t	namespace:__anon714e65d60111	typeref:typename:std::vector<Format::Expression<CharT>>	file:
extendedSetSupported	src/tags.cpp	/^bool extendedSetSupported(const TagLib::File *f)$/;"	f	namespace:Tags	typeref:typename:bool
external_editor	src/settings.h	/^	std::string external_editor;$/;"	m	struct:Configuration	typeref:typename:std::string
fetch	src/lastfm_service.cpp	/^Service::Result Service::fetch()$/;"	f	class:LastFm::Service	typeref:typename:Service::Result
fetch	src/lyrics_fetcher.cpp	/^LyricsFetcher::Result GoogleLyricsFetcher::fetch(const std::string &artist,$/;"	f	class:GoogleLyricsFetcher	typeref:typename:LyricsFetcher::Result
fetch	src/lyrics_fetcher.cpp	/^LyricsFetcher::Result InternetLyricsFetcher::fetch(const std::string &artist,$/;"	f	class:InternetLyricsFetcher	typeref:typename:LyricsFetcher::Result
fetch	src/lyrics_fetcher.cpp	/^LyricsFetcher::Result LyricsFetcher::fetch(const std::string &artist,$/;"	f	class:LyricsFetcher	typeref:typename:LyricsFetcher::Result
fetch	src/lyrics_fetcher.cpp	/^LyricsFetcher::Result LyricwikiFetcher::fetch(const std::string &artist,$/;"	f	class:LyricwikiFetcher	typeref:typename:LyricsFetcher::Result
fetch	src/mpdpp.h	/^		bool fetch()$/;"	f	struct:MPD::Iterator::State	typeref:typename:bool
fetch	src/screens/lyrics.cpp	/^void Lyrics::fetch(const MPD::Song &s)$/;"	f	class:Lyrics	typeref:typename:void
fetchInBackground	src/screens/lyrics.cpp	/^void Lyrics::fetchInBackground(const MPD::Song &s, bool notify_)$/;"	f	class:Lyrics	typeref:typename:void
fetchItemSong	src/mpdpp.cpp	/^bool fetchItemSong(MPD::SongIterator::State &state)$/;"	f	namespace:__anon46a7540e0111	typeref:typename:bool
fetchList	src/screens/outputs.cpp	/^void Outputs::fetchList()$/;"	f	class:Outputs	typeref:typename:void
fetchSupportedExtensions	src/screens/browser.cpp	/^void Browser::fetchSupportedExtensions()$/;"	f	class:Browser	typeref:typename:void
fetch_lyrics_in_background	src/settings.h	/^	bool fetch_lyrics_in_background;$/;"	m	struct:Configuration	typeref:typename:bool
fftw3_CFLAGS	src/Makefile.in	/^fftw3_CFLAGS = @fftw3_CFLAGS@$/;"	m
fftw3_LIBS	src/Makefile.in	/^fftw3_LIBS = @fftw3_LIBS@$/;"	m
filterPredicate	src/curses/menu_impl.h	/^const TargetT *Menu<ItemT>::filterPredicate() const$/;"	f	class:NC::Menu	typeref:typename:const TargetT *
findCommand	src/bindings.cpp	/^const Command *BindingsConfiguration::findCommand(const std::string &name)$/;"	f	class:BindingsConfiguration	typeref:typename:const Command *
findItem	src/actions.cpp	/^void findItem(const SearchDirection direction)$/;"	f	namespace:__anon343209de0411	typeref:typename:void
findRange	src/helpers.h	/^bool findRange(Iterator &first, Iterator &last)$/;"	f	typeref:typename:bool
findSelectedRange	src/helpers.h	/^bool findSelectedRange(Iterator &first, Iterator &last)$/;"	f	typeref:typename:bool
findSelectedRangeAndPrintInfoIfNot	src/actions.cpp	/^bool findSelectedRangeAndPrintInfoIfNot(Iterator &first, Iterator &last)$/;"	f	namespace:__anon343209de0111	typeref:typename:bool
find_map_all	src/utility/functional.h	/^void find_map_all(InputIterator first, InputIterator last, PredicateT &&p, MapT &&f)$/;"	f	typeref:typename:void
find_map_first	src/utility/functional.h	/^InputIterator find_map_first(InputIterator first, InputIterator last, PredicateT &&p, MapT &&f)$/;"	f	typeref:typename:InputIterator
finish	src/mpdpp.h	/^	void finish()$/;"	f	struct:MPD::Iterator	typeref:typename:void
first_line_scroll_begin	src/status.cpp	/^size_t first_line_scroll_begin = 0;$/;"	v	namespace:__anon855393f10111	typeref:typename:size_t
fixed	src/settings.h	/^	bool fixed;$/;"	m	struct:Column	typeref:typename:bool
flags	src/status.cpp	/^void Status::Changes::flags()$/;"	f	class:Status::Changes	typeref:typename:void
flush	src/curses/scrollpad.cpp	/^void Scrollpad::flush()$/;"	f	class:NC::Scrollpad	typeref:typename:void
foreground	src/curses/window.h	/^	short foreground() const { return std::get<0>(m_impl); }$/;"	f	struct:NC::Color	typeref:typename:short
format_numeric_tag	src/song.cpp	/^void format_numeric_tag(std::string &s)$/;"	f	namespace:__anon363a84440111	typeref:typename:void
formats	src/curses/formatted_color.h	/^	const Formats &formats() const { return m_formats; }$/;"	f	struct:NC::FormattedColor	typeref:typename:const Formats &
fps	src/screens/visualizer.cpp	/^const int fps = 25;$/;"	v	namespace:__anonf3fd84fd0111	typeref:typename:const int
fromString	src/utility/conversion.h	/^TargetT fromString(const std::string &source)$/;"	f	typeref:typename:TargetT
fromUtf8To	src/charset.cpp	/^std::string fromUtf8To(const std::string &s, const char *charset)$/;"	f	namespace:Charset	typeref:typename:std::string
function	src/format.h	/^	MPD::Song::GetFunction function() const { return m_function; }$/;"	f	struct:Format::SongTag	typeref:typename:MPD::Song::GetFunction
generateDefaults	src/bindings.cpp	/^void BindingsConfiguration::generateDefaults()$/;"	f	class:BindingsConfiguration	typeref:typename:void
generate_columns	src/settings.cpp	/^std::vector<Column> generate_columns(const std::string &format)$/;"	f	namespace:__anon96dc8afe0111	typeref:typename:std::vector<Column>
generate_win32_compatible_filenames	src/settings.h	/^	bool generate_win32_compatible_filenames;$/;"	m	struct:Configuration	typeref:typename:bool
genericMouseButtonPressed	src/screens/screen.cpp	/^void genericMouseButtonPressed(NC::Window &w, MEVENT me)$/;"	f	typeref:typename:void
get	src/actions.cpp	/^BaseAction &get(Actions::Type at)$/;"	f	namespace:Actions	typeref:typename:BaseAction &
get	src/bindings.cpp	/^BindingsConfiguration::BindingIteratorPair BindingsConfiguration::get(const NC::Key::Type &k)$/;"	f	class:BindingsConfiguration	typeref:typename:BindingsConfiguration::BindingIteratorPair
get	src/song.cpp	/^std::string Song::get(mpd_tag_type type, unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getAlbum	src/mutable_song.cpp	/^std::string MutableSong::getAlbum(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getAlbum	src/song.cpp	/^std::string Song::getAlbum(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getAlbumArtist	src/mutable_song.cpp	/^std::string MutableSong::getAlbumArtist(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getAlbumArtist	src/song.cpp	/^std::string Song::getAlbumArtist(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getArtist	src/mutable_song.cpp	/^std::string MutableSong::getArtist(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getArtist	src/song.cpp	/^std::string Song::getArtist(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getBasename	src/utility/string.cpp	/^std::string getBasename(const std::string &path)$/;"	f	typeref:typename:std::string
getBorder	src/curses/window.cpp	/^const Border &Window::getBorder() const$/;"	f	class:NC::Window	typeref:typename:const Border &
getColor	src/curses/window.cpp	/^const Color &Window::getColor() const$/;"	f	class:NC::Window	typeref:typename:const Color &
getComment	src/mutable_song.cpp	/^std::string MutableSong::getComment(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getComment	src/song.cpp	/^std::string Song::getComment(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getComposer	src/mutable_song.cpp	/^std::string MutableSong::getComposer(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getComposer	src/song.cpp	/^std::string Song::getComposer(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getContent	src/lyrics_fetcher.cpp	/^std::vector<std::string> LyricsFetcher::getContent(const char *regex_,$/;"	f	class:LyricsFetcher	typeref:typename:std::vector<std::string>
getDatabaseIterator	src/helpers.cpp	/^MPD::SongIterator getDatabaseIterator(MPD::Connection &mpd)$/;"	f	typeref:typename:MPD::SongIterator
getDate	src/mutable_song.cpp	/^std::string MutableSong::getDate(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getDate	src/song.cpp	/^std::string Song::getDate(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getDirectory	src/screens/browser.cpp	/^void Browser::getDirectory(std::string directory)$/;"	f	class:Browser	typeref:typename:void
getDirectory	src/song.cpp	/^std::string Song::getDirectory(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getDisc	src/mutable_song.cpp	/^std::string MutableSong::getDisc(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getDisc	src/song.cpp	/^std::string Song::getDisc(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getDuration	src/mutable_song.cpp	/^unsigned MutableSong::getDuration() const$/;"	f	class:MPD::MutableSong	typeref:typename:unsigned
getDuration	src/song.cpp	/^unsigned Song::getDuration() const$/;"	f	class:MPD::Song	typeref:typename:unsigned
getEnclosedString	src/utility/string.cpp	/^std::string getEnclosedString(const std::string &s, char a, char b, size_t *pos)$/;"	f	typeref:typename:std::string
getFunctionToTagType	src/utility/type_conversions.cpp	/^boost::optional<mpd_tag_type> getFunctionToTagType(MPD::Song::GetFunction f)$/;"	f	typeref:typename:boost::optional<mpd_tag_type>
getGenre	src/mutable_song.cpp	/^std::string MutableSong::getGenre(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getGenre	src/song.cpp	/^std::string Song::getGenre(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getHeight	src/curses/window.cpp	/^size_t Window::getHeight() const$/;"	f	class:NC::Window	typeref:typename:size_t
getID	src/song.cpp	/^unsigned Song::getID() const$/;"	f	class:MPD::Song	typeref:typename:unsigned
getInputChar	src/curses/window.cpp	/^Key::Type Window::getInputChar(int key)$/;"	f	class:NC::Window	typeref:typename:Key::Type
getLength	src/song.cpp	/^std::string Song::getLength(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getLocalDirectory	src/screens/browser.cpp	/^void getLocalDirectory(NC::Menu<MPD::Item> &menu, const std::string &directory)$/;"	f	namespace:__anonfc130a730411	typeref:typename:void
getLocalDirectoryRecursively	src/screens/browser.cpp	/^void getLocalDirectoryRecursively(std::vector<MPD::Song> &songs, const std::string &directory)$/;"	f	namespace:__anonfc130a730411	typeref:typename:void
getLocalSong	src/screens/browser.cpp	/^MPD::Song getLocalSong(const fs::directory_entry &entry, bool read_tags)$/;"	f	namespace:__anonfc130a730411	typeref:typename:MPD::Song
getMTime	src/mutable_song.cpp	/^time_t MutableSong::getMTime() const$/;"	f	class:MPD::MutableSong	typeref:typename:time_t
getMTime	src/song.cpp	/^time_t Song::getMTime() const$/;"	f	class:MPD::Song	typeref:typename:time_t
getMouseEvent	src/curses/window.cpp	/^const MEVENT &Window::getMouseEvent()$/;"	f	class:NC::Window	typeref:typename:const MEVENT &
getName	src/song.cpp	/^std::string Song::getName(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getNewName	src/mutable_song.cpp	/^const std::string &MutableSong::getNewName() const$/;"	f	class:MPD::MutableSong	typeref:typename:const std::string &
getObject	src/mpdpp.h	/^		ObjectT &getObject() const$/;"	f	struct:MPD::Iterator::State	typeref:typename:ObjectT &
getObject	src/screens/screen.h	/^	struct getObject {$/;"	s	struct:Screen
getObject	src/screens/screen.h	/^	struct getObject<true, Result, ConstResult> {$/;"	s	struct:Screen
getParentDirectory	src/utility/string.cpp	/^std::string getParentDirectory(std::string path)$/;"	f	typeref:typename:std::string
getPerformer	src/mutable_song.cpp	/^std::string MutableSong::getPerformer(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getPerformer	src/song.cpp	/^std::string Song::getPerformer(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getPosition	src/song.cpp	/^unsigned Song::getPosition() const$/;"	f	class:MPD::Song	typeref:typename:unsigned
getPrio	src/song.cpp	/^unsigned Song::getPrio() const$/;"	f	class:MPD::Song	typeref:typename:unsigned
getPriority	src/song.cpp	/^std::string Song::getPriority(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getReplayGain	src/tags.cpp	/^Tags::ReplayGainInfo getReplayGain(TagLib::Ogg::XiphComment *tag)$/;"	f	namespace:__anondd52103c0111	typeref:typename:Tags::ReplayGainInfo
getSelected	src/helpers.h	/^std::vector<Iterator> getSelected(Iterator first, Iterator last)$/;"	f	typeref:typename:std::vector<Iterator>
getSelectedOrCurrent	src/helpers.h	/^std::vector<Iterator> getSelectedOrCurrent(Iterator first, Iterator last, Iterator current)$/;"	f	typeref:typename:std::vector<Iterator>
getSelectedSongs	src/screens/browser.cpp	/^std::vector<MPD::Song> Browser::getSelectedSongs()$/;"	f	class:Browser	typeref:typename:std::vector<MPD::Song>
getSelectedSongs	src/screens/browser.cpp	/^std::vector<MPD::Song> BrowserWindow::getSelectedSongs()$/;"	f	class:BrowserWindow	typeref:typename:std::vector<MPD::Song>
getSelectedSongs	src/screens/media_library.cpp	/^std::vector<MPD::Song> MediaLibrary::getSelectedSongs()$/;"	f	class:MediaLibrary	typeref:typename:std::vector<MPD::Song>
getSelectedSongs	src/screens/playlist.cpp	/^std::vector<MPD::Song> Playlist::getSelectedSongs()$/;"	f	class:Playlist	typeref:typename:std::vector<MPD::Song>
getSelectedSongs	src/screens/playlist_editor.cpp	/^std::vector<MPD::Song> PlaylistEditor::getSelectedSongs()$/;"	f	class:PlaylistEditor	typeref:typename:std::vector<MPD::Song>
getSelectedSongs	src/screens/search_engine.cpp	/^std::vector<MPD::Song> SearchEngine::getSelectedSongs()$/;"	f	class:SearchEngine	typeref:typename:std::vector<MPD::Song>
getSelectedSongs	src/screens/search_engine.cpp	/^std::vector<MPD::Song> SearchEngineWindow::getSelectedSongs()$/;"	f	class:SearchEngineWindow	typeref:typename:std::vector<MPD::Song>
getSelectedSongs	src/screens/tag_editor.cpp	/^std::vector<MPD::Song> TagEditor::getSelectedSongs()$/;"	f	class:TagEditor	typeref:typename:std::vector<MPD::Song>
getSelectedSongs	src/screens/tag_editor.cpp	/^std::vector<MPD::Song> TagsWindow::getSelectedSongs()$/;"	f	class:TagsWindow	typeref:typename:std::vector<MPD::Song>
getSelectedSongs	src/song_list.cpp	/^std::vector<MPD::Song> SongMenu::getSelectedSongs()$/;"	f	class:SongMenu	typeref:typename:std::vector<MPD::Song>
getSharedDirectory	src/helpers.h	/^std::string getSharedDirectory(Iterator first, Iterator last)$/;"	f	typeref:typename:std::string
getSharedDirectory	src/utility/string.cpp	/^std::string getSharedDirectory(const std::string &dir1, const std::string &dir2)$/;"	f	typeref:typename:std::string
getSongsFromAlbum	src/screens/media_library.cpp	/^MPD::SongIterator getSongsFromAlbum(const AlbumEntry &album)$/;"	f	namespace:__anon50035b830111	typeref:typename:MPD::SongIterator
getStartX	src/curses/window.cpp	/^size_t Window::getStartX() const$/;"	f	class:NC::Window	typeref:typename:size_t
getStarty	src/curses/window.cpp	/^size_t Window::getStarty() const$/;"	f	class:NC::Window	typeref:typename:size_t
getStatistics	src/mpdpp.cpp	/^Statistics Connection::getStatistics()$/;"	f	class:MPD::Connection	typeref:typename:Statistics
getStatus	src/mpdpp.cpp	/^Status Connection::getStatus()$/;"	f	class:MPD::Connection	typeref:typename:Status
getTag	src/mutable_song.h	/^	std::string getTag(mpd_tag_type tag_type, F orig_value, unsigned idx) const {$/;"	f	struct:MPD::MutableSong	typeref:typename:std::string
getTags	src/screens/tiny_tag_editor.cpp	/^bool TinyTagEditor::getTags()$/;"	f	class:TinyTagEditor	typeref:typename:bool
getTags	src/song.cpp	/^std::string MPD::Song::getTags(GetFunction f) const$/;"	f	class:MPD::MPD::Song	typeref:typename:std::string
getTimeout	src/curses/window.cpp	/^int Window::getTimeout() const$/;"	f	class:NC::Window	typeref:typename:int
getTitle	src/curses/window.cpp	/^const std::string &Window::getTitle() const$/;"	f	class:NC::Window	typeref:typename:const std::string &
getTitle	src/mutable_song.cpp	/^std::string MutableSong::getTitle(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getTitle	src/song.cpp	/^std::string Song::getTitle(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getTotalLength	src/screens/playlist.cpp	/^std::string Playlist::getTotalLength()$/;"	f	class:Playlist	typeref:typename:std::string
getTrack	src/mutable_song.cpp	/^std::string MutableSong::getTrack(unsigned idx) const$/;"	f	class:MPD::MutableSong	typeref:typename:std::string
getTrack	src/song.cpp	/^std::string Song::getTrack(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getTrackNumber	src/song.cpp	/^std::string Song::getTrackNumber(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getURI	src/song.cpp	/^std::string Song::getURI(unsigned idx) const$/;"	f	class:MPD::Song	typeref:typename:std::string
getWidth	src/curses/window.cpp	/^size_t Window::getWidth() const$/;"	f	class:NC::Window	typeref:typename:size_t
getWindowResizeParams	src/screens/screen.cpp	/^void BaseScreen::getWindowResizeParams(size_t &x_offset, size_t &width, bool adjust_locked_scree/;"	f	class:BaseScreen	typeref:typename:void
getX	src/curses/window.cpp	/^int Window::getX()$/;"	f	class:NC::Window	typeref:typename:int
getY	src/curses/window.cpp	/^int Window::getY()$/;"	f	class:NC::Window	typeref:typename:int
get_	src/actions.cpp	/^std::shared_ptr<BaseAction> get_(Actions::Type at)$/;"	f	namespace:Actions	typeref:typename:std::shared_ptr<BaseAction>
get_	src/actions.cpp	/^std::shared_ptr<BaseAction> get_(const std::string &name)$/;"	f	namespace:Actions	typeref:typename:std::shared_ptr<BaseAction>
goToXY	src/curses/window.cpp	/^void Window::goToXY(int x, int y)$/;"	f	class:NC::Window	typeref:typename:void
handleClientError	src/status.cpp	/^void Status::handleClientError(MPD::ClientError &e)$/;"	f	class:Status	typeref:typename:void
handleServerError	src/status.cpp	/^void Status::handleServerError(MPD::ServerError &e)$/;"	f	class:Status	typeref:typename:void
hasCoords	src/curses/window.cpp	/^bool Window::hasCoords(int &x, int &y)$/;"	f	class:NC::Window	typeref:typename:bool
hasObject	src/mpdpp.h	/^		bool hasObject() const$/;"	f	struct:MPD::Iterator::State	typeref:typename:bool
hasSelected	src/helpers.h	/^bool hasSelected(Iterator first, Iterator last)$/;"	f	typeref:typename:bool
hasSupportedExtension	src/screens/browser.cpp	/^bool hasSupportedExtension(const fs::directory_entry &entry)$/;"	f	namespace:__anonfc130a730411	typeref:typename:bool
hasTheWord	src/utility/comparators.cpp	/^bool hasTheWord(const std::string &s)$/;"	f	namespace:__anon8bc53c1b0111	typeref:typename:bool
hasToBeResized	src/screens/screen.h	/^	bool hasToBeResized;$/;"	m	struct:BaseScreen	typeref:typename:bool
hasTwoColumns	src/screens/media_library.cpp	/^bool hasTwoColumns;$/;"	v	namespace:__anon50035b830111	typeref:typename:bool
header_color	src/settings.h	/^	NC::Color header_color;$/;"	m	struct:Configuration	typeref:typename:NC::Color
header_text_scrolling	src/settings.h	/^	bool header_text_scrolling;$/;"	m	struct:Configuration	typeref:typename:bool
header_visibility	src/settings.h	/^	bool header_visibility;$/;"	m	struct:Configuration	typeref:typename:bool
highlight	src/curses/menu_impl.h	/^void Menu<ItemT>::highlight(size_t pos)$/;"	f	class:NC::Menu	typeref:typename:void
highlightPrefix	src/curses/menu.h	/^	const Buffer &highlightPrefix() const { return m_highlight_prefix; }$/;"	f	struct:NC::Menu	typeref:typename:const Buffer &
highlightSuffix	src/curses/menu.h	/^	const Buffer &highlightSuffix() const { return m_highlight_suffix; }$/;"	f	struct:NC::Menu	typeref:typename:const Buffer &
host	src/Makefile.in	/^host = @host@$/;"	m
host_alias	src/Makefile.in	/^host_alias = @host_alias@$/;"	m
host_cpu	src/Makefile.in	/^host_cpu = @host_cpu@$/;"	m
host_os	src/Makefile.in	/^host_os = @host_os@$/;"	m
host_triplet	src/Makefile.in	/^host_triplet = @host@$/;"	m
host_vendor	src/Makefile.in	/^host_vendor = @host_vendor@$/;"	m
html	src/Makefile.in	/^html: html-am$/;"	t
html-am	src/Makefile.in	/^html-am:$/;"	t
htmldir	src/Makefile.in	/^htmldir = @htmldir@$/;"	m
id	src/curses/strbuffer.h	/^		size_t id() const { return m_id; }$/;"	f	struct:NC::BasicBuffer::Property	typeref:typename:size_t
id	src/mpdpp.h	/^	unsigned id() const$/;"	f	struct:MPD::Output	typeref:typename:unsigned
idle	src/mpdpp.cpp	/^void Connection::idle()$/;"	f	class:MPD::Connection	typeref:typename:void
idx	src/mutable_song.h	/^		unsigned idx() const { return m_idx; }$/;"	f	struct:MPD::MutableSong::Tag	typeref:typename:unsigned
ignore_diacritics	src/settings.h	/^	bool ignore_diacritics;$/;"	m	struct:Configuration	typeref:typename:bool
ignore_leading_the	src/settings.h	/^	bool ignore_leading_the;$/;"	m	struct:Configuration	typeref:typename:bool
immediate	src/bindings.h	/^	bool immediate() const { return std::get<1>(m_impl); }$/;"	f	struct:Command	typeref:typename:bool
inRootDirectory	src/screens/browser.cpp	/^bool Browser::inRootDirectory()$/;"	f	class:Browser	typeref:typename:bool
includedir	src/Makefile.in	/^includedir = @includedir@$/;"	m
incremental_seeking	src/settings.h	/^	bool incremental_seeking;$/;"	m	struct:Configuration	typeref:typename:bool
info	src/Makefile.in	/^info: info-am$/;"	t
info-am	src/Makefile.in	/^info-am:$/;"	t
infodir	src/Makefile.in	/^infodir = @infodir@$/;"	m
init	src/curses/strbuffer.h	/^	static BasicBuffer init(Args&&... args)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer
initScreen	src/curses/window.cpp	/^void initScreen(bool enable_colors, bool enable_mouse)$/;"	f	namespace:NC	typeref:typename:void
initializeScreens	src/actions.cpp	/^void initializeScreens()$/;"	f	namespace:Actions	typeref:typename:void
initialize_status	src/status.cpp	/^void initialize_status()$/;"	f	namespace:__anon855393f10111	typeref:typename:void
initialize_undefined	src/utility/option_parser.cpp	/^bool option_parser::initialize_undefined(bool ignore_errors)$/;"	f	class:option_parser	typeref:typename:bool
inputQueue	src/curses/window.h	/^	const std::queue<NC::Key::Type> &inputQueue() { return m_input_queue; }$/;"	f	struct:NC::Window	typeref:typename:const std::queue<NC::Key::Type> &
input_song_iterator	src/screens/search_engine.cpp	/^	> input_song_iterator;$/;"	t	function:SearchEngine::Search	typeref:typename:boost::range_detail::any_iterator<const MPD::Song,boost::single_pass_traversal_tag,const MPD::Song &,std::ptrdiff_t>	file:
insertItem	src/curses/menu_impl.h	/^void Menu<ItemT>::insertItem(size_t pos, ItemT item, Properties::Type properties)$/;"	f	class:NC::Menu	typeref:typename:void
insertSeparator	src/curses/menu_impl.h	/^void Menu<ItemT>::insertSeparator(size_t pos)$/;"	f	class:NC::Menu	typeref:typename:void
install	src/Makefile.in	/^install: install-am$/;"	t
install-am	src/Makefile.in	/^install-am: all-am$/;"	t
install-binPROGRAMS	src/Makefile.in	/^install-binPROGRAMS: $(bin_PROGRAMS)$/;"	t
install-data	src/Makefile.in	/^install-data: install-data-am$/;"	t
install-data-am	src/Makefile.in	/^install-data-am:$/;"	t
install-dvi	src/Makefile.in	/^install-dvi: install-dvi-am$/;"	t
install-dvi-am	src/Makefile.in	/^install-dvi-am:$/;"	t
install-exec	src/Makefile.in	/^install-exec: install-exec-am$/;"	t
install-exec-am	src/Makefile.in	/^install-exec-am: install-binPROGRAMS$/;"	t
install-html	src/Makefile.in	/^install-html: install-html-am$/;"	t
install-html-am	src/Makefile.in	/^install-html-am:$/;"	t
install-info	src/Makefile.in	/^install-info: install-info-am$/;"	t
install-info-am	src/Makefile.in	/^install-info-am:$/;"	t
install-man	src/Makefile.in	/^install-man:$/;"	t
install-pdf	src/Makefile.in	/^install-pdf: install-pdf-am$/;"	t
install-pdf-am	src/Makefile.in	/^install-pdf-am:$/;"	t
install-ps	src/Makefile.in	/^install-ps: install-ps-am$/;"	t
install-ps-am	src/Makefile.in	/^install-ps-am:$/;"	t
install-strip	src/Makefile.in	/^install-strip:$/;"	t
install_sh	src/Makefile.in	/^install_sh = @install_sh@$/;"	m
install_sh_DATA	src/Makefile.in	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	src/Makefile.in	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	src/Makefile.in	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
installcheck	src/Makefile.in	/^installcheck: installcheck-am$/;"	t
installcheck-am	src/Makefile.in	/^installcheck-am:$/;"	t
installdirs	src/Makefile.in	/^installdirs:$/;"	t
internalLocale	src/charset.cpp	/^std::locale internalLocale()$/;"	f	namespace:Charset	typeref:typename:std::locale
invalidCharacter	src/format.cpp	/^std::string invalidCharacter(CharT c)$/;"	f	namespace:__anon714e65d60111	typeref:typename:std::string
invalid_value	src/utility/option_parser.h	/^[[noreturn]] inline void invalid_value(const std::string &v)$/;"	f	typeref:typename:void
isActiveWindow	src/screens/screen.h	/^	virtual bool isActiveWindow(const NC::Window &w_) const override {$/;"	f	struct:Screen	typeref:typename:bool
isAlbumOnly	src/screens/media_library.cpp	/^bool isAlbumOnly;$/;"	v	namespace:__anon50035b830111	typeref:typename:bool
isAllTracksEntry	src/screens/media_library.h	/^		bool isAllTracksEntry() const { return m_all_tracks_entry; }$/;"	f	struct:MediaLibrary::AlbumEntry	typeref:typename:bool
isAnyModified	src/screens/tag_editor.cpp	/^bool isAnyModified(const NC::Menu<MPD::MutableSong> &m)$/;"	f	namespace:__anonf6e1b7d10711	typeref:typename:bool
isDefault	src/curses/window.h	/^	bool isDefault() const { return std::get<2>(m_impl); }$/;"	f	struct:NC::Color	typeref:typename:bool
isEnd	src/curses/window.h	/^	bool isEnd() const { return std::get<3>(m_impl); }$/;"	f	struct:NC::Color	typeref:typename:bool
isFiltered	src/curses/menu.h	/^	bool isFiltered() const { return m_items == &m_filtered_items; }$/;"	f	struct:NC::Menu	typeref:typename:bool
isFromDatabase	src/song.cpp	/^bool Song::isFromDatabase() const$/;"	f	class:MPD::Song	typeref:typename:bool
isHidden	src/screens/browser.cpp	/^bool isHidden(const fs::directory_iterator &entry)$/;"	f	namespace:__anonfc130a730411	typeref:typename:bool
isHighlightable	src/curses/menu.h	/^	bool isHighlightable(size_t pos)$/;"	f	struct:NC::Menu	typeref:typename:bool
isHighlighted	src/curses/menu.h	/^	bool isHighlighted() { return m_highlight_enabled; }$/;"	f	struct:NC::Menu	typeref:typename:bool
isInactive	src/curses/menu.h	/^		bool isInactive() const { return m_properties & Inactive; }$/;"	f	struct:NC::List::Properties	typeref:typename:bool
isInactive	src/curses/menu.h	/^		bool isInactive() const { return properties().isInactive(); }$/;"	f	struct:NC::Menu::Item	typeref:typename:bool
isItemParentDirectory	src/screens/browser.cpp	/^bool isItemParentDirectory(const MPD::Item &item)$/;"	f	namespace:__anonfc130a730411	typeref:typename:bool
isLocal	src/screens/browser.h	/^	bool isLocal() { return m_local_browser; }$/;"	f	struct:Browser	typeref:typename:bool
isLockable	src/screens/browser.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:Browser	typeref:typename:bool
isLockable	src/screens/clock.h	/^	virtual bool isLockable() override { return false; }$/;"	f	struct:Clock	typeref:typename:bool
isLockable	src/screens/help.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:Help	typeref:typename:bool
isLockable	src/screens/lastfm.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:Lastfm	typeref:typename:bool
isLockable	src/screens/lyrics.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:Lyrics	typeref:typename:bool
isLockable	src/screens/media_library.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:MediaLibrary	typeref:typename:bool
isLockable	src/screens/outputs.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:Outputs	typeref:typename:bool
isLockable	src/screens/playlist.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:Playlist	typeref:typename:bool
isLockable	src/screens/playlist_editor.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:PlaylistEditor	typeref:typename:bool
isLockable	src/screens/search_engine.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:SearchEngine	typeref:typename:bool
isLockable	src/screens/sel_items_adder.h	/^	virtual bool isLockable() override { return false; }$/;"	f	struct:SelectedItemsAdder	typeref:typename:bool
isLockable	src/screens/server_info.h	/^	virtual bool isLockable() override { return false; }$/;"	f	struct:ServerInfo	typeref:typename:bool
isLockable	src/screens/song_info.h	/^	virtual bool isLockable() override { return false; }$/;"	f	struct:SongInfo	typeref:typename:bool
isLockable	src/screens/sort_playlist.h	/^	virtual bool isLockable() override { return false; }$/;"	f	struct:SortPlaylistDialog	typeref:typename:bool
isLockable	src/screens/tag_editor.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:TagEditor	typeref:typename:bool
isLockable	src/screens/tiny_tag_editor.h	/^	virtual bool isLockable() override { return false; }$/;"	f	struct:TinyTagEditor	typeref:typename:bool
isLockable	src/screens/visualizer.h	/^	virtual bool isLockable() override { return true; }$/;"	f	struct:Visualizer	typeref:typename:bool
isMPDMusicDirSet	src/actions.cpp	/^bool isMPDMusicDirSet()$/;"	f	namespace:Actions	typeref:typename:bool
isMergable	src/screens/browser.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:Browser	typeref:typename:bool
isMergable	src/screens/clock.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:Clock	typeref:typename:bool
isMergable	src/screens/help.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:Help	typeref:typename:bool
isMergable	src/screens/lastfm.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:Lastfm	typeref:typename:bool
isMergable	src/screens/lyrics.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:Lyrics	typeref:typename:bool
isMergable	src/screens/media_library.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:MediaLibrary	typeref:typename:bool
isMergable	src/screens/outputs.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:Outputs	typeref:typename:bool
isMergable	src/screens/playlist.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:Playlist	typeref:typename:bool
isMergable	src/screens/playlist_editor.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:PlaylistEditor	typeref:typename:bool
isMergable	src/screens/search_engine.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:SearchEngine	typeref:typename:bool
isMergable	src/screens/sel_items_adder.h	/^	virtual bool isMergable() override { return false; }$/;"	f	struct:SelectedItemsAdder	typeref:typename:bool
isMergable	src/screens/server_info.h	/^	virtual bool isMergable() override { return false; }$/;"	f	struct:ServerInfo	typeref:typename:bool
isMergable	src/screens/song_info.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:SongInfo	typeref:typename:bool
isMergable	src/screens/sort_playlist.h	/^	virtual bool isMergable() override { return false; }$/;"	f	struct:SortPlaylistDialog	typeref:typename:bool
isMergable	src/screens/tag_editor.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:TagEditor	typeref:typename:bool
isMergable	src/screens/tiny_tag_editor.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:TinyTagEditor	typeref:typename:bool
isMergable	src/screens/visualizer.h	/^	virtual bool isMergable() override { return true; }$/;"	f	struct:Visualizer	typeref:typename:bool
isModified	src/mutable_song.cpp	/^bool MutableSong::isModified() const$/;"	f	class:MPD::MutableSong	typeref:typename:bool
isOneOf	src/statusbar.h	/^	bool isOneOf(StringT &&s) const {$/;"	f	struct:Statusbar::Helpers::ImmediatelyReturnOneOf	typeref:typename:bool
isParentDirectory	src/screens/browser.cpp	/^bool Browser::isParentDirectory(const MPD::Item &item)$/;"	f	class:Browser	typeref:typename:bool
isRootDirectory	src/screens/browser.cpp	/^bool isRootDirectory(const std::string &directory)$/;"	f	namespace:__anonfc130a730411	typeref:typename:bool
isSelectable	src/curses/menu.h	/^		bool isSelectable() const { return m_properties & Selectable; }$/;"	f	struct:NC::List::Properties	typeref:typename:bool
isSelectable	src/curses/menu.h	/^		bool isSelectable() const { return properties().isSelectable(); }$/;"	f	struct:NC::Menu::Item	typeref:typename:bool
isSelected	src/curses/menu.h	/^		bool isSelected() const { return m_properties & Selected; }$/;"	f	struct:NC::List::Properties	typeref:typename:bool
isSelected	src/curses/menu.h	/^		bool isSelected() const { return properties().isSelected(); }$/;"	f	struct:NC::Menu::Item	typeref:typename:bool
isSeparator	src/curses/menu.h	/^		bool isSeparator() const { return m_properties & Separator; }$/;"	f	struct:NC::List::Properties	typeref:typename:bool
isSeparator	src/curses/menu.h	/^		bool isSeparator() const { return properties().isSeparator(); }$/;"	f	struct:NC::Menu::Item	typeref:typename:bool
isSingle	src/bindings.h	/^	bool isSingle() const {$/;"	f	struct:Binding	typeref:typename:bool
isSong	src/screens/search_engine.h	/^	bool isSong() const { return m_is_song; }$/;"	f	struct:SEItem	typeref:typename:bool
isStream	src/song.cpp	/^bool Song::isStream() const$/;"	f	class:MPD::Song	typeref:typename:bool
isStringParentDirectory	src/screens/browser.cpp	/^bool isStringParentDirectory(const std::string &directory)$/;"	f	namespace:__anonfc130a730411	typeref:typename:bool
isURLOk	src/lyrics_fetcher.cpp	/^bool GoogleLyricsFetcher::isURLOk(const std::string &url)$/;"	f	class:GoogleLyricsFetcher	typeref:typename:bool
isURLOk	src/lyrics_fetcher.cpp	/^bool InternetLyricsFetcher::isURLOk(const std::string &url)$/;"	f	class:InternetLyricsFetcher	typeref:typename:bool
isURLOk	src/lyrics_fetcher.cpp	/^bool MetrolyricsFetcher::isURLOk(const std::string &url)$/;"	f	class:MetrolyricsFetcher	typeref:typename:bool
isUnlocked	src/statusbar.cpp	/^bool Progressbar::isUnlocked()$/;"	f	class:Progressbar	typeref:typename:bool
isUnlocked	src/statusbar.cpp	/^bool Statusbar::isUnlocked()$/;"	f	class:Statusbar	typeref:typename:bool
isVisible	src/screens/screen.cpp	/^bool isVisible(BaseScreen *screen)$/;"	f	typeref:typename:bool
item	src/runnable_item.h	/^	Item &item() { return m_item; }$/;"	f	struct:RunnableItem	typeref:typename:Item &
item	src/runnable_item.h	/^	const Item &item() const { return m_item; }$/;"	f	struct:RunnableItem	typeref:typename:const Item &
itemAvailable	src/screens/browser.cpp	/^bool Browser::itemAvailable()$/;"	f	class:Browser	typeref:typename:bool
itemAvailable	src/screens/media_library.cpp	/^bool MediaLibrary::itemAvailable()$/;"	f	class:MediaLibrary	typeref:typename:bool
itemAvailable	src/screens/playlist.cpp	/^bool Playlist::itemAvailable()$/;"	f	class:Playlist	typeref:typename:bool
itemAvailable	src/screens/playlist_editor.cpp	/^bool PlaylistEditor::itemAvailable()$/;"	f	class:PlaylistEditor	typeref:typename:bool
itemAvailable	src/screens/search_engine.cpp	/^bool SearchEngine::itemAvailable()$/;"	f	class:SearchEngine	typeref:typename:bool
itemAvailable	src/screens/tag_editor.cpp	/^bool TagEditor::itemAvailable()$/;"	f	class:TagEditor	typeref:typename:bool
itemToString	src/screens/browser.cpp	/^std::string itemToString(const MPD::Item &item)$/;"	f	namespace:__anonfc130a730411	typeref:typename:std::string
itemTypeToString	src/utility/type_conversions.cpp	/^std::string itemTypeToString(MPD::Item::Type type)$/;"	f	typeref:typename:std::string
iterator	src/curses/menu.h	/^	typedef Iterator iterator;$/;"	t	struct:NC::Menu	typeref:typename:Iterator
iterator	src/format.cpp	/^template <typename CharT> using iterator = typename std::basic_string<CharT>::const_iterator;$/;"	t	namespace:__anon714e65d60111	typeref:typename:std::basic_string<CharT>::const_iterator	file:
itsBrowsedDir	src/screens/tag_editor.h	/^	std::string itsBrowsedDir;$/;"	m	struct:TagEditor	typeref:typename:std::string
itsConstraints	src/screens/search_engine.h	/^	std::string itsConstraints[ConstraintsNumber];$/;"	m	struct:SearchEngine	typeref:typename:std::string[]
itsEdited	src/screens/tiny_tag_editor.h	/^	MPD::MutableSong itsEdited;$/;"	m	struct:TinyTagEditor	typeref:typename:MPD::MutableSong
itsHighlightedDir	src/screens/tag_editor.h	/^	std::string itsHighlightedDir;$/;"	m	struct:TagEditor	typeref:typename:std::string
itsLeftColStartX	src/screens/media_library.cpp	/^size_t itsLeftColStartX;$/;"	v	namespace:__anon50035b830111	typeref:typename:size_t
itsLeftColWidth	src/screens/media_library.cpp	/^size_t itsLeftColWidth;$/;"	v	namespace:__anon50035b830111	typeref:typename:size_t
itsMiddleColStartX	src/screens/media_library.cpp	/^size_t itsMiddleColStartX;$/;"	v	namespace:__anon50035b830111	typeref:typename:size_t
itsMiddleColWidth	src/screens/media_library.cpp	/^size_t itsMiddleColWidth;$/;"	v	namespace:__anon50035b830111	typeref:typename:size_t
itsRightColStartX	src/screens/media_library.cpp	/^size_t itsRightColStartX;$/;"	v	namespace:__anon50035b830111	typeref:typename:size_t
itsRightColWidth	src/screens/media_library.cpp	/^size_t itsRightColWidth;$/;"	v	namespace:__anon50035b830111	typeref:typename:size_t
join	src/utility/string.h	/^StringT join(const CollectionT &collection, const StringT &separator)$/;"	f	typeref:typename:StringT
jump_to_now_playing_song_at_start	src/settings.h	/^	bool jump_to_now_playing_song_at_start;$/;"	m	struct:Configuration	typeref:typename:bool
kbps	src/mpdpp.h	/^	unsigned kbps() const { return mpd_status_get_kbit_rate(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:unsigned
key	src/screens/help.cpp	/^void key(NC::Scrollpad &w, NC::Key::Type k, const std::string &desc)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:void
key	src/screens/help.cpp	/^void key(NC::Scrollpad &w, const Actions::Type at, const boost::format &desc)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:void
key	src/screens/help.cpp	/^void key(NC::Scrollpad &w, const Actions::Type at, const char *desc)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:void
keyToWString	src/bindings.cpp	/^std::wstring keyToWString(const NC::Key::Type key)$/;"	f	typeref:typename:std::wstring
key_section	src/screens/help.cpp	/^void key_section(NC::Scrollpad &w, const char *title_)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:void
lastModified	src/mpdpp.h	/^	time_t lastModified() const$/;"	f	struct:MPD::Directory	typeref:typename:time_t
lastModified	src/mpdpp.h	/^	time_t lastModified() const$/;"	f	struct:MPD::Playlist	typeref:typename:time_t
lastfm_preferred_language	src/settings.h	/^	std::string lastfm_preferred_language;$/;"	m	struct:Configuration	typeref:typename:std::string
libcurl_CFLAGS	src/Makefile.in	/^libcurl_CFLAGS = @libcurl_CFLAGS@$/;"	m
libcurl_LIBS	src/Makefile.in	/^libcurl_LIBS = @libcurl_LIBS@$/;"	m
libdir	src/Makefile.in	/^libdir = @libdir@$/;"	m
libexecdir	src/Makefile.in	/^libexecdir = @libexecdir@$/;"	m
libmpdclient_CFLAGS	src/Makefile.in	/^libmpdclient_CFLAGS = @libmpdclient_CFLAGS@$/;"	m
libmpdclient_LIBS	src/Makefile.in	/^libmpdclient_LIBS = @libmpdclient_LIBS@$/;"	m
lines_scrolled	src/settings.h	/^	unsigned lines_scrolled;$/;"	m	struct:Configuration	typeref:typename:unsigned
list_of	src/utility/option_parser.h	/^std::vector<ValueT> list_of(const std::string &v)$/;"	f	typeref:typename:std::vector<ValueT>
list_of	src/utility/option_parser.h	/^std::vector<ValueT> list_of(const std::string &v, ConvertT convert)$/;"	f	typeref:typename:std::vector<ValueT>
listsChangeFinisher	src/actions.cpp	/^void listsChangeFinisher()$/;"	f	namespace:__anon343209de0411	typeref:typename:void
lm_supported_extensions	src/screens/browser.cpp	/^std::set<std::string> lm_supported_extensions;$/;"	v	namespace:__anonfc130a730111	typeref:typename:std::set<std::string>
loadLyrics	src/screens/lyrics.cpp	/^bool loadLyrics(NC::Scrollpad &w, const std::string &filename)$/;"	f	namespace:__anon5d75aa650111	typeref:typename:bool
local_browser_show_hidden_files	src/settings.h	/^	bool local_browser_show_hidden_files;$/;"	m	struct:Configuration	typeref:typename:bool
localeToUtf8	src/charset.cpp	/^std::string localeToUtf8(const std::string &s)$/;"	f	namespace:Charset	typeref:typename:std::string
localeToUtf8	src/charset.cpp	/^std::string localeToUtf8(std::string &&s)$/;"	f	namespace:Charset	typeref:typename:std::string
localedir	src/Makefile.in	/^localedir = @localedir@$/;"	m
localstatedir	src/Makefile.in	/^localstatedir = @localstatedir@$/;"	m
locatePlaylist	src/screens/playlist_editor.cpp	/^void PlaylistEditor::locatePlaylist(const MPD::Playlist &playlist)$/;"	f	class:PlaylistEditor	typeref:typename:void
locateSong	src/screens/browser.cpp	/^void Browser::locateSong(const MPD::Song &s)$/;"	f	class:Browser	typeref:typename:void
locateSong	src/screens/media_library.cpp	/^void MediaLibrary::locateSong(const MPD::Song &s)$/;"	f	class:MediaLibrary	typeref:typename:void
locateSong	src/screens/playlist.cpp	/^void Playlist::locateSong(const MPD::Song &s)$/;"	f	class:Playlist	typeref:typename:void
locateSong	src/screens/playlist_editor.cpp	/^void PlaylistEditor::locateSong(const MPD::Song &s)$/;"	f	class:PlaylistEditor	typeref:typename:void
lock	src/screens/screen.cpp	/^bool BaseScreen::lock()$/;"	f	class:BaseScreen	typeref:typename:bool
locked_screen_width_part	src/settings.h	/^	double locked_screen_width_part;$/;"	m	struct:Configuration	typeref:typename:double
lowerBoundCheck	src/utility/conversion.h	/^void lowerBoundCheck(const Type &value, const Type &lbound)$/;"	f	typeref:typename:void
lyricsFilename	src/screens/lyrics.cpp	/^std::string lyricsFilename(const MPD::Song &s)$/;"	f	namespace:__anon5d75aa650111	typeref:typename:std::string
lyrics_db	src/settings.h	/^	unsigned lyrics_db;$/;"	m	struct:Configuration	typeref:typename:unsigned
lyrics_directory	src/settings.h	/^	std::string lyrics_directory;$/;"	m	struct:Configuration	typeref:typename:std::string
lyrics_fetchers	src/settings.h	/^	LyricsFetchers lyrics_fetchers;$/;"	m	struct:Configuration	typeref:typename:LyricsFetchers
m_action	src/macro_utilities.h	/^	std::shared_ptr<BaseAction> m_action;$/;"	m	struct:Actions::RequireRunnable	typeref:typename:std::shared_ptr<BaseAction>
m_actions	src/bindings.h	/^	ActionChain m_actions;$/;"	m	struct:Binding	typeref:typename:ActionChain
m_album	src/screens/media_library.h	/^		Album m_album;$/;"	m	struct:MediaLibrary::AlbumEntry	typeref:typename:Album
m_album	src/screens/media_library.h	/^		std::string m_album;$/;"	m	struct:MediaLibrary::Album	typeref:typename:std::string
m_album_gain	src/tags.h	/^	std::string m_album_gain;$/;"	m	struct:Tags::ReplayGainInfo	typeref:typename:std::string
m_album_peak	src/tags.h	/^	std::string m_album_peak;$/;"	m	struct:Tags::ReplayGainInfo	typeref:typename:std::string
m_albums_search_predicate	src/screens/media_library.h	/^	Regex::ItemFilter<AlbumEntry> m_albums_search_predicate;$/;"	m	struct:MediaLibrary	typeref:typename:Regex::ItemFilter<AlbumEntry>
m_albums_update_request	src/screens/media_library.h	/^	bool m_albums_update_request;$/;"	m	struct:MediaLibrary	typeref:typename:bool
m_all_items	src/curses/menu.h	/^	std::vector<Item> m_all_items;$/;"	m	struct:NC::Menu	typeref:typename:std::vector<Item>
m_all_tracks_entry	src/screens/media_library.h	/^		bool m_all_tracks_entry;$/;"	m	struct:MediaLibrary::AlbumEntry	typeref:typename:bool
m_alt_charset_counter	src/curses/window.h	/^	int m_alt_charset_counter;$/;"	m	struct:NC::Window	typeref:typename:int
m_arguments	src/lastfm_service.h	/^	Arguments m_arguments;$/;"	m	struct:LastFm::Service	typeref:typename:Arguments
m_auto_scale_multiplier	src/screens/visualizer.h	/^	double m_auto_scale_multiplier;$/;"	m	struct:Visualizer	typeref:typename:double
m_autocenter_cursor	src/curses/menu.h	/^	bool m_autocenter_cursor;$/;"	m	struct:NC::Menu	typeref:typename:bool
m_base	src/format.h	/^	Base m_base;$/;"	m	struct:Format::List	typeref:typename:Base
m_base_color	src/curses/window.h	/^	Color m_base_color;$/;"	m	struct:NC::Window	typeref:typename:Color
m_begin	src/actions.h	/^	NC::List::Iterator m_begin;$/;"	m	struct:Actions::SelectRange	typeref:typename:NC::List::Iterator
m_begin	src/actions.h	/^	NC::Menu<MPD::Song>::ConstIterator m_begin;$/;"	m	struct:Actions::ReversePlaylist	typeref:typename:NC::Menu<MPD::Song>::ConstIterator
m_begin	src/actions.h	/^	NC::Menu<MPD::Song>::ConstIterator m_begin;$/;"	m	struct:Actions::Shuffle	typeref:typename:NC::Menu<MPD::Song>::ConstIterator
m_beginning	src/curses/menu.h	/^	size_t m_beginning;$/;"	m	struct:NC::Menu	typeref:typename:size_t
m_beginning	src/curses/scrollpad.h	/^	size_t m_beginning;$/;"	m	struct:NC::Scrollpad	typeref:typename:size_t
m_bindings	src/bindings.h	/^	BindingsMap m_bindings;$/;"	m	class:BindingsConfiguration	typeref:typename:BindingsMap
m_bold_counter	src/curses/window.h	/^	int m_bold_counter;$/;"	m	struct:NC::Window	typeref:typename:int
m_border	src/curses/window.h	/^	Border m_border;$/;"	m	struct:NC::Window	typeref:typename:Border
m_buffer	src/curses/scrollpad.h	/^	Buffer m_buffer;$/;"	m	struct:NC::Scrollpad	typeref:typename:Buffer
m_buffer	src/screens/search_engine.h	/^	NC::Buffer *m_buffer;$/;"	m	struct:SEItem	typeref:typename:NC::Buffer *
m_cache	src/helpers/song_iterator_maker.h	/^	mutable SongProperties m_cache;$/;"	m	struct:SongPropertiesExtractor	typeref:typename:SongProperties
m_cache	src/screens/browser.cpp	/^	mutable SongProperties m_cache;$/;"	m	struct:SongPropertiesExtractor	typeref:typename:SongProperties	file:
m_cache	src/screens/search_engine.cpp	/^	mutable SongProperties m_cache;$/;"	m	struct:SongPropertiesExtractor	typeref:typename:SongProperties	file:
m_clearable	src/mpdpp.h	/^	bool m_clearable;$/;"	m	struct:MPD::ClientError	typeref:typename:bool
m_clearable	src/mpdpp.h	/^	bool m_clearable;$/;"	m	struct:MPD::ServerError	typeref:typename:bool
m_cmp	src/screens/media_library.cpp	/^	LocaleStringComparison m_cmp;$/;"	m	class:__anon50035b830111::SortAlbumEntries	typeref:typename:LocaleStringComparison	file:
m_cmp	src/screens/media_library.cpp	/^	LocaleStringComparison m_cmp;$/;"	m	class:__anon50035b830111::SortPrimaryTags	typeref:typename:LocaleStringComparison	file:
m_cmp	src/screens/media_library.cpp	/^	LocaleStringComparison m_cmp;$/;"	m	struct:__anon50035b830111::SortSongs	typeref:typename:LocaleStringComparison	file:
m_cmp	src/utility/comparators.h	/^	LocaleBasedSorting m_cmp;$/;"	m	class:LocaleBasedItemSorting	typeref:typename:LocaleBasedSorting
m_cmp	src/utility/comparators.h	/^	LocaleStringComparison m_cmp;$/;"	m	class:LocaleBasedSorting	typeref:typename:LocaleStringComparison
m_code	src/mpdpp.h	/^	mpd_error m_code;$/;"	m	struct:MPD::ClientError	typeref:typename:mpd_error
m_code	src/mpdpp.h	/^	mpd_server_error m_code;$/;"	m	struct:MPD::ServerError	typeref:typename:mpd_server_error
m_color	src/curses/formatted_color.h	/^	Color m_color;$/;"	m	struct:NC::FormattedColor	typeref:typename:Color
m_color	src/curses/window.h	/^	Color m_color;$/;"	m	struct:NC::Window	typeref:typename:Color
m_color_stack	src/curses/window.h	/^	std::stack<Color> m_color_stack;$/;"	m	struct:NC::Window	typeref:typename:std::stack<Color>
m_command	src/macro_utilities.h	/^	std::string m_command;$/;"	m	struct:Actions::RunExternalCommand	typeref:typename:std::string
m_command_list_active	src/mpdpp.h	/^	bool m_command_list_active;$/;"	m	struct:MPD::Connection	typeref:typename:bool
m_commands	src/bindings.h	/^	CommandsSet m_commands;$/;"	m	class:BindingsConfiguration	typeref:typename:CommandsSet
m_connection	src/mpdpp.h	/^		mpd_connection *m_connection;$/;"	m	struct:MPD::Iterator::State	typeref:typename:mpd_connection *
m_connection	src/mpdpp.h	/^	std::unique_ptr<mpd_connection, ConnectionDeleter> m_connection;$/;"	m	struct:MPD::Connection	typeref:typename:std::unique_ptr<mpd_connection,ConnectionDeleter>
m_const_properties	src/song_list.h	/^		const NC::List::Properties *m_const_properties;$/;"	m	union:SongProperties::__anon5cea49c4010a	typeref:typename:const NC::List::Properties *
m_const_song	src/song_list.h	/^		const MPD::Song *m_const_song;$/;"	m	union:SongProperties::__anon5cea49c4020a	typeref:typename:const MPD::Song *
m_constraint	src/regex_filter.h	/^	std::string m_constraint;$/;"	m	struct:Regex::Filter	typeref:typename:std::string
m_constraint	src/regex_filter.h	/^	std::string m_constraint;$/;"	m	struct:Regex::ItemFilter	typeref:typename:std::string
m_consume	src/status.cpp	/^char m_consume;$/;"	v	namespace:__anon855393f10111	typeref:typename:char
m_consumer_state	src/screens/lyrics.h	/^	Shared<ConsumerState> m_consumer_state;$/;"	m	struct:Lyrics	typeref:typename:Shared<ConsumerState>
m_content_search_predicate	src/screens/playlist_editor.h	/^	Regex::Filter<MPD::Song> m_content_search_predicate;$/;"	m	struct:PlaylistEditor	typeref:typename:Regex::Filter<MPD::Song>
m_content_update_requested	src/screens/playlist_editor.h	/^	bool m_content_update_requested;$/;"	m	struct:PlaylistEditor	typeref:typename:bool
m_converter	src/regex_filter.h	/^	static icu::Transliterator *m_converter;$/;"	m	struct:__anon4539d7d20111::StripDiacritics	typeref:typename:icu::Transliterator *
m_converter	src/regex_filter.h	/^icu::Transliterator *StripDiacritics::m_converter;$/;"	m	class:__anon4539d7d20111::StripDiacritics	typeref:typename:icu::Transliterator *
m_crossfade	src/status.cpp	/^char m_crossfade;$/;"	v	namespace:__anon855393f10111	typeref:typename:char
m_current_directory	src/screens/browser.h	/^	std::string m_current_directory;$/;"	m	struct:Browser	typeref:typename:std::string
m_current_song_id	src/status.cpp	/^int m_current_song_id;$/;"	v	namespace:__anon855393f10111	typeref:typename:int
m_current_song_pos	src/status.cpp	/^int m_current_song_pos;$/;"	v	namespace:__anon855393f10111	typeref:typename:int
m_cyclic_scroll_enabled	src/curses/menu.h	/^	bool m_cyclic_scroll_enabled;$/;"	m	struct:NC::Menu	typeref:typename:bool
m_date	src/screens/media_library.h	/^		std::string m_date;$/;"	m	struct:MediaLibrary::Album	typeref:typename:std::string
m_db_updating	src/status.cpp	/^char m_db_updating;$/;"	v	namespace:__anon855393f10111	typeref:typename:char
m_default_value	src/utility/option_parser.h	/^		std::string m_default_value;$/;"	m	struct:option_parser::parser	typeref:typename:std::string
m_delimiter	src/format.h	/^	unsigned m_delimiter;$/;"	m	struct:Format::SongTag	typeref:typename:unsigned
m_dest	src/utility/option_parser.h	/^		DestT *m_dest;$/;"	m	struct:option_parser::worker	typeref:typename:DestT *
m_dest_set	src/utility/option_parser.h	/^		bool m_dest_set;$/;"	m	struct:option_parser::worker	typeref:typename:bool
m_direction	src/statusbar.h	/^	const SearchDirection m_direction;$/;"	m	struct:Statusbar::Helpers::FindImmediately	typeref:typename:const SearchDirection
m_directories_search_predicate	src/screens/tag_editor.h	/^	Regex::Filter<std::pair<std::string, std::string>> m_directories_search_predicate;$/;"	m	struct:TagEditor	typeref:typename:Regex::Filter<std::pair<std::string,std::string>>
m_directory	src/mpdpp.h	/^	Directory m_directory;$/;"	m	struct:MPD::Item	typeref:typename:Directory
m_download_stopper	src/screens/lyrics.h	/^	std::shared_ptr<std::atomic<bool>> m_download_stopper;$/;"	m	struct:Lyrics	typeref:typename:std::shared_ptr<std::atomic<bool>>
m_drawn_position	src/curses/menu.h	/^	size_t m_drawn_position;$/;"	m	struct:NC::Menu	typeref:typename:size_t
m_duration	src/mutable_song.h	/^	unsigned m_duration;$/;"	m	struct:MPD::MutableSong	typeref:typename:unsigned
m_elapsed_time	src/status.cpp	/^unsigned m_elapsed_time;$/;"	v	namespace:__anon855393f10111	typeref:typename:unsigned
m_end	src/actions.h	/^	NC::List::Iterator m_end;$/;"	m	struct:Actions::SelectRange	typeref:typename:NC::List::Iterator
m_end	src/actions.h	/^	NC::Menu<MPD::Song>::ConstIterator m_end;$/;"	m	struct:Actions::ReversePlaylist	typeref:typename:NC::Menu<MPD::Song>::ConstIterator
m_end	src/actions.h	/^	NC::Menu<MPD::Song>::ConstIterator m_end;$/;"	m	struct:Actions::Shuffle	typeref:typename:NC::Menu<MPD::Song>::ConstIterator
m_error_message	src/utility/conversion.h	/^	std::string m_error_message;$/;"	m	struct:OutOfBounds	typeref:typename:std::string
m_escape_terminal_sequences	src/curses/window.h	/^	bool m_escape_terminal_sequences;$/;"	m	struct:NC::Window	typeref:typename:bool
m_f	src/runnable_item.h	/^	Function m_f;$/;"	m	struct:RunnableItem	typeref:typename:Function
m_fc	src/curses/formatted_color.h	/^		                          FormattedColor>::type m_fc;$/;"	m	struct:NC::FormattedColor::End	typeref:typename:std::conditional<storage==StorageKind::Reference,const FormattedColor &,FormattedColor>::type
m_fd	src/mpdpp.h	/^	int m_fd;$/;"	m	struct:MPD::Connection	typeref:typename:int
m_fds	src/curses/window.h	/^	FDCallbacks m_fds;$/;"	m	struct:NC::Window	typeref:typename:FDCallbacks
m_fetcher	src/mpdpp.h	/^		Fetcher m_fetcher;$/;"	m	struct:MPD::Iterator::State	typeref:typename:Fetcher
m_fetcher	src/screens/lyrics.h	/^	LyricsFetcher *m_fetcher;$/;"	m	struct:Lyrics	typeref:typename:LyricsFetcher *
m_fetching_delay	src/screens/media_library.h	/^	const boost::posix_time::time_duration m_fetching_delay;$/;"	m	struct:MediaLibrary	typeref:typename:const boost::posix_time::time_duration
m_fetching_delay	src/screens/playlist_editor.h	/^	const boost::posix_time::time_duration m_fetching_delay;$/;"	m	struct:PlaylistEditor	typeref:typename:const boost::posix_time::time_duration
m_fftw_input	src/screens/visualizer.h	/^	double *m_fftw_input;$/;"	m	struct:Visualizer	typeref:typename:double *
m_fftw_output	src/screens/visualizer.h	/^	fftw_complex *m_fftw_output;$/;"	m	struct:Visualizer	typeref:typename:fftw_complex *
m_fftw_plan	src/screens/visualizer.h	/^	fftw_plan m_fftw_plan;$/;"	m	struct:Visualizer	typeref:typename:fftw_plan
m_fftw_results	src/screens/visualizer.h	/^	size_t m_fftw_results;$/;"	m	struct:Visualizer	typeref:typename:size_t
m_fifo	src/screens/visualizer.h	/^	int m_fifo;$/;"	m	struct:Visualizer	typeref:typename:int
m_filter	src/regex_filter.h	/^	FilterFunction m_filter;$/;"	m	struct:Regex::Filter	typeref:typename:FilterFunction
m_filter	src/regex_filter.h	/^	FilterFunction m_filter;$/;"	m	struct:Regex::ItemFilter	typeref:typename:FilterFunction
m_filter_predicate	src/curses/menu.h	/^	FilterPredicate m_filter_predicate;$/;"	m	struct:NC::Menu	typeref:typename:FilterPredicate
m_filterable	src/actions.h	/^	Filterable *m_filterable;$/;"	m	struct:Actions::ApplyFilter	typeref:typename:Filterable *
m_filtered_items	src/curses/menu.h	/^	std::vector<Item> m_filtered_items;$/;"	m	struct:NC::Menu	typeref:typename:std::vector<Item>
m_formats	src/curses/formatted_color.h	/^	Formats m_formats;$/;"	m	struct:NC::FormattedColor	typeref:typename:Formats
m_freq_magnitudes	src/screens/visualizer.h	/^	std::vector<double> m_freq_magnitudes;$/;"	m	struct:Visualizer	typeref:typename:std::vector<double>
m_function	src/format.h	/^	MPD::Song::GetFunction m_function;$/;"	m	struct:Format::SongTag	typeref:typename:MPD::Song::GetFunction
m_ha	src/actions.h	/^	HasActions *m_ha;$/;"	m	struct:Actions::RunAction	typeref:typename:HasActions *
m_hash	src/song.h	/^	size_t m_hash;$/;"	m	struct:MPD::Song	typeref:typename:size_t
m_hc	src/actions.h	/^	HasColumns *m_hc;$/;"	m	struct:Actions::NextColumn	typeref:typename:HasColumns *
m_hc	src/actions.h	/^	HasColumns *m_hc;$/;"	m	struct:Actions::PreviousColumn	typeref:typename:HasColumns *
m_height	src/curses/window.h	/^	size_t m_height;$/;"	m	struct:NC::Window	typeref:typename:size_t
m_height	src/screens/server_info.h	/^	size_t m_height;$/;"	m	struct:ServerInfo	typeref:typename:size_t
m_height	src/screens/sort_playlist.h	/^	size_t m_height;$/;"	m	struct:SortPlaylistDialog	typeref:typename:size_t
m_highlight	src/curses/menu.h	/^	size_t m_highlight;$/;"	m	struct:NC::Menu	typeref:typename:size_t
m_highlight_enabled	src/curses/menu.h	/^	bool m_highlight_enabled;$/;"	m	struct:NC::Menu	typeref:typename:bool
m_highlight_prefix	src/curses/menu.h	/^	Buffer m_highlight_prefix;$/;"	m	struct:NC::Menu	typeref:typename:Buffer
m_highlight_suffix	src/curses/menu.h	/^	Buffer m_highlight_suffix;$/;"	m	struct:NC::Menu	typeref:typename:Buffer
m_hook	src/curses/window.h	/^		PromptHook m_hook;$/;"	m	struct:NC::Window::ScopedPromptHook	typeref:typename:PromptHook
m_host	src/mpdpp.h	/^	std::string m_host;$/;"	m	struct:MPD::Connection	typeref:typename:std::string
m_hs	src/actions.h	/^	HasSongs *m_hs;$/;"	m	struct:Actions::AddItemToPlaylist	typeref:typename:HasSongs *
m_hs	src/actions.h	/^	HasSongs *m_hs;$/;"	m	struct:Actions::FetchLyricsInBackground	typeref:typename:HasSongs *
m_hs	src/actions.h	/^	HasSongs *m_hs;$/;"	m	struct:Actions::PlayItem	typeref:typename:HasSongs *
m_id	src/curses/strbuffer.h	/^		size_t m_id;$/;"	m	struct:NC::BasicBuffer::Property	typeref:typename:size_t
m_idle	src/mpdpp.h	/^	bool m_idle;$/;"	m	struct:MPD::Connection	typeref:typename:bool
m_idx	src/mutable_song.h	/^		unsigned m_idx;$/;"	m	struct:MPD::MutableSong::Tag	typeref:typename:unsigned
m_ignore_the	src/utility/comparators.h	/^	bool m_ignore_the;$/;"	m	class:LocaleStringComparison	typeref:typename:bool
m_impl	src/bindings.h	/^	std::tuple<Binding, bool> m_impl;$/;"	m	struct:Command	typeref:typename:std::tuple<Binding,bool>
m_impl	src/curses/menu.h	/^		std::shared_ptr<std::tuple<ItemT, Properties>> m_impl;$/;"	m	struct:NC::Menu::Item	typeref:typename:std::shared_ptr<std::tuple<ItemT,Properties>>
m_impl	src/curses/strbuffer.h	/^		               > m_impl;$/;"	m	struct:NC::BasicBuffer::Property	typeref:typename:boost::variant<Color,Format,FormattedColor,FormattedColor::End<StorageKind::Value>>
m_impl	src/curses/window.h	/^	std::tuple<short, short, bool, bool> m_impl;$/;"	m	struct:NC::Color	typeref:typename:std::tuple<short,short,bool,bool>
m_input_queue	src/curses/window.h	/^	std::queue<Key::Type> m_input_queue;$/;"	m	struct:NC::Window	typeref:typename:std::queue<Key::Type>
m_is_filtered	src/helpers.h	/^	bool m_is_filtered;$/;"	m	struct:ScopedUnfilteredMenu	typeref:typename:bool
m_is_song	src/screens/search_engine.h	/^	bool m_is_song;$/;"	m	struct:SEItem	typeref:typename:bool
m_item	src/runnable_item.h	/^	Item m_item;$/;"	m	struct:RunnableItem	typeref:typename:Item
m_item_displayer	src/curses/menu.h	/^	ItemDisplayer m_item_displayer;$/;"	m	struct:NC::Menu	typeref:typename:ItemDisplayer
m_items	src/curses/menu.h	/^	std::vector<Item> *m_items;$/;"	m	struct:NC::Menu	typeref:typename:std::vector<Item> *
m_kbps	src/status.cpp	/^unsigned m_kbps;$/;"	v	namespace:__anon855393f10111	typeref:typename:unsigned
m_last_modified	src/mpdpp.h	/^	time_t m_last_modified;$/;"	m	struct:MPD::Directory	typeref:typename:time_t
m_last_modified	src/mpdpp.h	/^	time_t m_last_modified;$/;"	m	struct:MPD::Playlist	typeref:typename:time_t
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::RemoveSelection	typeref:typename:NC::List *
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::ReverseSelection	typeref:typename:NC::List *
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::ScrollDownAlbum	typeref:typename:NC::List *
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::ScrollDownArtist	typeref:typename:NC::List *
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::ScrollUpAlbum	typeref:typename:NC::List *
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::ScrollUpArtist	typeref:typename:NC::List *
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::SelectAlbum	typeref:typename:NC::List *
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::SelectFoundItems	typeref:typename:NC::List *
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::SelectItem	typeref:typename:NC::List *
m_list	src/actions.h	/^	NC::List *m_list;$/;"	m	struct:Actions::SelectRange	typeref:typename:NC::List *
m_local_browser	src/screens/browser.h	/^	bool m_local_browser;$/;"	m	struct:Browser	typeref:typename:bool
m_locale	src/utility/comparators.h	/^	std::locale m_locale;$/;"	m	class:LocaleStringComparison	typeref:typename:std::locale
m_lock	src/utility/shared_resource.h	/^		std::unique_lock<std::mutex> m_lock;$/;"	m	struct:Shared::Resource	typeref:typename:std::unique_lock<std::mutex>
m_map	src/utility/option_parser.h	/^		std::function<DestT(std::string)> m_map;$/;"	m	struct:option_parser::worker	typeref:typename:std::function<DestT (std::string)>
m_menu	src/helpers.h	/^	NC::Menu<ItemT> &m_menu;$/;"	m	struct:ScopedUnfilteredMenu	typeref:typename:NC::Menu<ItemT> &
m_mouse_event	src/actions.h	/^	MEVENT m_mouse_event;$/;"	m	struct:Actions::MouseEvent	typeref:typename:MEVENT
m_mouse_event	src/curses/window.h	/^	MEVENT m_mouse_event;$/;"	m	struct:NC::Window	typeref:typename:MEVENT
m_msg	src/mpdpp.h	/^	std::string m_msg;$/;"	m	struct:MPD::ClientError	typeref:typename:std::string
m_msg	src/mpdpp.h	/^	std::string m_msg;$/;"	m	struct:MPD::ServerError	typeref:typename:std::string
m_mtime	src/mutable_song.h	/^	time_t m_mtime;$/;"	m	struct:MPD::MutableSong	typeref:typename:time_t
m_mtime	src/screens/media_library.h	/^		time_t m_mtime;$/;"	m	struct:MediaLibrary::Album	typeref:typename:time_t
m_mtime	src/screens/media_library.h	/^		time_t m_mtime;$/;"	m	struct:MediaLibrary::PrimaryTag	typeref:typename:time_t
m_mutex	src/utility/shared_resource.h	/^	std::mutex m_mutex;$/;"	m	struct:Shared	typeref:typename:std::mutex
m_name	src/actions.h	/^	std::string m_name;$/;"	m	struct:Actions::BaseAction	typeref:typename:std::string
m_name	src/mutable_song.h	/^	std::string m_name;$/;"	m	struct:MPD::MutableSong	typeref:typename:std::string
m_noidle_callback	src/mpdpp.h	/^	NoidleCallback m_noidle_callback;$/;"	m	struct:MPD::Connection	typeref:typename:NoidleCallback
m_notify	src/screens/lyrics.h	/^			bool m_notify;$/;"	m	struct:Lyrics::ConsumerState::Song	typeref:typename:bool
m_object	src/mpdpp.h	/^		std::unique_ptr<ObjectT> m_object;$/;"	m	struct:MPD::Iterator::State	typeref:typename:std::unique_ptr<ObjectT>
m_old_mouse_event	src/actions.h	/^	MEVENT m_old_mouse_event;$/;"	m	struct:Actions::MouseEvent	typeref:typename:MEVENT
m_output	src/mpdpp.h	/^	std::shared_ptr<mpd_output> m_output;$/;"	m	struct:MPD::Output	typeref:typename:std::shared_ptr<mpd_output>
m_output_id	src/screens/visualizer.h	/^	int m_output_id;$/;"	m	struct:Visualizer	typeref:typename:int
m_pane	src/screens/clock.h	/^	NC::Window m_pane;$/;"	m	struct:Clock	typeref:typename:NC::Window
m_parsers	src/utility/option_parser.h	/^	std::unordered_map<std::string, parser> m_parsers;$/;"	m	class:option_parser	typeref:typename:std::unordered_map<std::string,parser>
m_password	src/mpdpp.h	/^	std::string m_password;$/;"	m	struct:MPD::Connection	typeref:typename:std::string
m_past	src/actions.h	/^	boost::posix_time::ptime m_past;$/;"	m	struct:Actions::UpdateEnvironment	typeref:typename:boost::posix_time::ptime
m_path	src/mpdpp.h	/^	std::string m_path;$/;"	m	struct:MPD::Directory	typeref:typename:std::string
m_path	src/mpdpp.h	/^	std::string m_path;$/;"	m	struct:MPD::Playlist	typeref:typename:std::string
m_player_state	src/status.cpp	/^MPD::PlayerState m_player_state;$/;"	v	namespace:__anon855393f10111	typeref:typename:MPD::PlayerState
m_playlist	src/mpdpp.h	/^	Playlist m_playlist;$/;"	m	struct:MPD::Item	typeref:typename:Playlist
m_playlist_length	src/status.cpp	/^unsigned m_playlist_length;$/;"	v	namespace:__anon855393f10111	typeref:typename:unsigned
m_playlist_selector	src/screens/sel_items_adder.h	/^	Component m_playlist_selector;$/;"	m	struct:SelectedItemsAdder	typeref:typename:Component
m_playlist_selector_height	src/screens/sel_items_adder.h	/^	size_t m_playlist_selector_height;$/;"	m	struct:SelectedItemsAdder	typeref:typename:size_t
m_playlist_selector_width	src/screens/sel_items_adder.h	/^	size_t m_playlist_selector_width;$/;"	m	struct:SelectedItemsAdder	typeref:typename:size_t
m_playlist_version	src/status.cpp	/^unsigned m_playlist_version;$/;"	v	namespace:__anon855393f10111	typeref:typename:unsigned
m_playlists_search_predicate	src/screens/playlist_editor.h	/^	Regex::Filter<MPD::Playlist> m_playlists_search_predicate;$/;"	m	struct:PlaylistEditor	typeref:typename:Regex::Filter<MPD::Playlist>
m_playlists_update_requested	src/screens/playlist_editor.h	/^	bool m_playlists_update_requested;$/;"	m	struct:PlaylistEditor	typeref:typename:bool
m_port	src/mpdpp.h	/^	int m_port;$/;"	m	struct:MPD::Connection	typeref:typename:int
m_position_selector	src/screens/sel_items_adder.h	/^	Component m_position_selector;$/;"	m	struct:SelectedItemsAdder	typeref:typename:Component
m_position_selector_height	src/screens/sel_items_adder.h	/^	size_t m_position_selector_height;$/;"	m	struct:SelectedItemsAdder	typeref:typename:size_t
m_position_selector_width	src/screens/sel_items_adder.h	/^	size_t m_position_selector_width;$/;"	m	struct:SelectedItemsAdder	typeref:typename:size_t
m_previous_screen	src/interfaces.h	/^	BaseScreen *m_previous_screen;$/;"	m	struct:Tabbable	typeref:typename:BaseScreen *
m_previous_screen	src/screens/tiny_tag_editor.h	/^	BaseScreen *m_previous_screen;$/;"	m	struct:TinyTagEditor	typeref:typename:BaseScreen *
m_prompt	src/curses/window.h	/^	std::string m_prompt;$/;"	m	struct:NC::PromptAborted	typeref:typename:std::string
m_prompt_hook	src/curses/window.h	/^	PromptHook m_prompt_hook;$/;"	m	struct:NC::Window	typeref:typename:PromptHook
m_properties	src/curses/menu.h	/^		unsigned m_properties;$/;"	m	struct:NC::List::Properties	typeref:typename:unsigned
m_properties	src/curses/strbuffer.h	/^	Properties m_properties;$/;"	m	class:NC::BasicBuffer	typeref:typename:Properties
m_properties	src/song_list.h	/^		NC::List::Properties *m_properties;$/;"	m	union:SongProperties::__anon5cea49c4010a	typeref:typename:NC::List::Properties *
m_queue	src/macro_utilities.h	/^	std::vector<NC::Key::Type> m_queue;$/;"	m	struct:Actions::PushCharacters	typeref:typename:std::vector<NC::Key::Type>
m_random	src/status.cpp	/^char m_random;$/;"	v	namespace:__anon855393f10111	typeref:typename:char
m_real_height	src/curses/scrollpad.h	/^	size_t m_real_height;$/;"	m	struct:NC::Scrollpad	typeref:typename:size_t
m_reapply_filter	src/helpers.h	/^	ReapplyFilter m_reapply_filter;$/;"	m	struct:ScopedUnfilteredMenu	typeref:typename:ReapplyFilter
m_ref	src/utility/scoped_value.h	/^	ValueT &m_ref;$/;"	m	struct:ScopedValue	typeref:typename:ValueT &
m_reference_loudness	src/tags.h	/^	std::string m_reference_loudness;$/;"	m	struct:Tags::ReplayGainInfo	typeref:typename:std::string
m_refresh	src/helpers.h	/^	bool m_refresh;$/;"	m	struct:ScopedUnfilteredMenu	typeref:typename:bool
m_refresh_window	src/screens/lastfm.h	/^	bool m_refresh_window;$/;"	m	struct:Lastfm	typeref:typename:bool
m_refresh_window	src/screens/lyrics.h	/^	bool m_refresh_window;$/;"	m	struct:Lyrics	typeref:typename:bool
m_reload_remaining	src/screens/playlist.h	/^	bool m_reload_remaining;$/;"	m	struct:Playlist	typeref:typename:bool
m_reload_total_length	src/screens/playlist.h	/^	bool m_reload_total_length;$/;"	m	struct:Playlist	typeref:typename:bool
m_remaining_time	src/screens/playlist.h	/^	size_t m_remaining_time;$/;"	m	struct:Playlist	typeref:typename:size_t
m_repeat	src/status.cpp	/^char m_repeat;$/;"	v	namespace:__anon855393f10111	typeref:typename:char
m_resource	src/utility/shared_resource.h	/^		ResourceT &m_resource;$/;"	m	struct:Shared::Resource	typeref:typename:ResourceT &
m_resource	src/utility/shared_resource.h	/^	ResourceT m_resource;$/;"	m	struct:Shared	typeref:typename:ResourceT
m_reverse_counter	src/curses/window.h	/^	int m_reverse_counter;$/;"	m	struct:NC::Window	typeref:typename:int
m_rx	src/regex_filter.h	/^	Regex m_rx;$/;"	m	struct:Regex::Filter	typeref:typename:Regex
m_rx	src/regex_filter.h	/^	Regex m_rx;$/;"	m	struct:Regex::ItemFilter	typeref:typename:Regex
m_s	src/statusbar.h	/^	std::string m_s;$/;"	m	struct:Statusbar::Helpers::TryExecuteImmediateCommand	typeref:typename:std::string
m_samples	src/screens/visualizer.h	/^	size_t m_samples;$/;"	m	struct:Visualizer	typeref:typename:size_t
m_screen_type	src/macro_utilities.h	/^	ScreenType m_screen_type;$/;"	m	struct:Actions::RequireScreen	typeref:typename:ScreenType
m_scroll_begin	src/screens/lyrics.h	/^	size_t m_scroll_begin;$/;"	m	struct:Lyrics	typeref:typename:size_t
m_scroll_begin	src/screens/playlist.h	/^	size_t m_scroll_begin;$/;"	m	struct:Playlist	typeref:typename:size_t
m_scroll_beginning	src/screens/browser.h	/^	size_t m_scroll_beginning;$/;"	m	struct:Browser	typeref:typename:size_t
m_search_predicate	src/screens/browser.h	/^	Regex::Filter<MPD::Item> m_search_predicate;$/;"	m	struct:Browser	typeref:typename:Regex::Filter<MPD::Item>
m_search_predicate	src/screens/playlist.h	/^	Regex::Filter<MPD::Song> m_search_predicate;$/;"	m	struct:Playlist	typeref:typename:Regex::Filter<MPD::Song>
m_search_predicate	src/screens/search_engine.h	/^	Regex::ItemFilter<SEItem> m_search_predicate;$/;"	m	struct:SearchEngine	typeref:typename:Regex::ItemFilter<SEItem>
m_search_predicate	src/screens/sel_items_adder.h	/^	Regex::ItemFilter<Entry> m_search_predicate;$/;"	m	struct:SelectedItemsAdder	typeref:typename:Regex::ItemFilter<Entry>
m_searchable	src/actions.h	/^	Searchable *m_searchable;$/;"	m	struct:Actions::SelectFoundItems	typeref:typename:Searchable *
m_selected_items	src/screens/sel_items_adder.h	/^	std::vector<MPD::Song> m_selected_items;$/;"	m	struct:SelectedItemsAdder	typeref:typename:std::vector<MPD::Song>
m_selected_prefix	src/curses/menu.h	/^	Buffer m_selected_prefix;$/;"	m	struct:NC::Menu	typeref:typename:Buffer
m_selected_suffix	src/curses/menu.h	/^	Buffer m_selected_suffix;$/;"	m	struct:NC::Menu	typeref:typename:Buffer
m_service	src/screens/lastfm.h	/^	std::shared_ptr<LastFm::Service> m_service;$/;"	m	struct:Lastfm	typeref:typename:std::shared_ptr<LastFm::Service>
m_shared_buffer	src/screens/lyrics.h	/^	std::shared_ptr<Shared<NC::Buffer>> m_shared_buffer;$/;"	m	struct:Lyrics	typeref:typename:std::shared_ptr<Shared<NC::Buffer>>
m_single	src/status.cpp	/^char m_single;$/;"	v	namespace:__anon855393f10111	typeref:typename:char
m_song	src/actions.h	/^	MPD::Song m_song;$/;"	m	struct:Actions::JumpToPlayingSong	typeref:typename:MPD::Song
m_song	src/actions.h	/^	const MPD::Song *m_song;$/;"	m	struct:Actions::EditSong	typeref:typename:const MPD::Song *
m_song	src/actions.h	/^	const MPD::Song *m_song;$/;"	m	struct:Actions::JumpToBrowser	typeref:typename:const MPD::Song *
m_song	src/actions.h	/^	const MPD::Song *m_song;$/;"	m	struct:Actions::JumpToMediaLibrary	typeref:typename:const MPD::Song *
m_song	src/actions.h	/^	const MPD::Song *m_song;$/;"	m	struct:Actions::JumpToTagEditor	typeref:typename:const MPD::Song *
m_song	src/actions.h	/^	const MPD::Song *m_song;$/;"	m	struct:Actions::ShowLyrics	typeref:typename:const MPD::Song *
m_song	src/mpdpp.h	/^	Song m_song;$/;"	m	struct:MPD::Item	typeref:typename:Song
m_song	src/screens/lyrics.h	/^			MPD::Song m_song;$/;"	m	struct:Lyrics::ConsumerState::Song	typeref:typename:MPD::Song
m_song	src/screens/lyrics.h	/^	MPD::Song m_song;$/;"	m	struct:Lyrics	typeref:typename:MPD::Song
m_song	src/screens/search_engine.h	/^	MPD::Song m_song;$/;"	m	struct:SEItem	typeref:typename:MPD::Song
m_song	src/song.h	/^	std::shared_ptr<mpd_song> m_song;$/;"	m	struct:MPD::Song	typeref:typename:std::shared_ptr<mpd_song>
m_song	src/song_list.h	/^		MPD::Song *m_song;$/;"	m	union:SongProperties::__anon5cea49c4020a	typeref:typename:MPD::Song *
m_song_refs	src/screens/playlist.h	/^	std::unordered_map<MPD::Song, int, MPD::Song::Hash> m_song_refs;$/;"	m	struct:Playlist	typeref:typename:std::unordered_map<MPD::Song,int,MPD::Song::Hash>
m_songs	src/actions.h	/^	SongList *m_songs;$/;"	m	struct:Actions::SelectAlbum	typeref:typename:SongList *
m_songs	src/actions.h	/^	const SongList *m_songs;$/;"	m	struct:Actions::ScrollDownAlbum	typeref:typename:const SongList *
m_songs	src/actions.h	/^	const SongList *m_songs;$/;"	m	struct:Actions::ScrollDownArtist	typeref:typename:const SongList *
m_songs	src/actions.h	/^	const SongList *m_songs;$/;"	m	struct:Actions::ScrollUpAlbum	typeref:typename:const SongList *
m_songs	src/actions.h	/^	const SongList *m_songs;$/;"	m	struct:Actions::ScrollUpArtist	typeref:typename:const SongList *
m_songs_search_predicate	src/screens/media_library.h	/^	Regex::Filter<MPD::Song> m_songs_search_predicate;$/;"	m	struct:MediaLibrary	typeref:typename:Regex::Filter<MPD::Song>
m_songs_search_predicate	src/screens/tag_editor.h	/^	Regex::Filter<MPD::MutableSong> m_songs_search_predicate;$/;"	m	struct:TagEditor	typeref:typename:Regex::Filter<MPD::MutableSong>
m_songs_update_request	src/screens/media_library.h	/^	bool m_songs_update_request;$/;"	m	struct:MediaLibrary	typeref:typename:bool
m_sort_mode	src/utility/comparators.h	/^	SortMode m_sort_mode;$/;"	m	class:LocaleBasedItemSorting	typeref:typename:SortMode
m_source_value	src/utility/conversion.h	/^	std::string m_source_value;$/;"	m	struct:ConversionError	typeref:typename:std::string
m_start_x	src/curses/window.h	/^	size_t m_start_x;$/;"	m	struct:NC::Window	typeref:typename:size_t
m_start_y	src/curses/window.h	/^	size_t m_start_y;$/;"	m	struct:NC::Window	typeref:typename:size_t
m_state	src/mpdpp.h	/^	std::shared_ptr<State> m_state;$/;"	m	struct:MPD::Iterator	typeref:typename:std::shared_ptr<State>
m_state	src/song_list.h	/^	State m_state;$/;"	m	struct:SongProperties	typeref:typename:State
m_stats	src/mpdpp.h	/^	std::shared_ptr<mpd_stats> m_stats;$/;"	m	struct:MPD::Statistics	typeref:typename:std::shared_ptr<mpd_stats>
m_stats	src/screens/playlist.h	/^	std::string m_stats;$/;"	m	struct:Playlist	typeref:typename:std::string
m_status	src/mpdpp.h	/^	std::shared_ptr<mpd_status> m_status;$/;"	m	struct:MPD::Status	typeref:typename:std::shared_ptr<mpd_status>
m_status_initialized	src/status.cpp	/^bool m_status_initialized;$/;"	v	namespace:__anon855393f10111	typeref:typename:bool
m_string	src/curses/strbuffer.h	/^	StringType m_string;$/;"	m	class:NC::BasicBuffer	typeref:typename:StringType
m_tag	src/screens/media_library.h	/^		std::string m_tag;$/;"	m	struct:MediaLibrary::Album	typeref:typename:std::string
m_tag	src/screens/media_library.h	/^		std::string m_tag;$/;"	m	struct:MediaLibrary::PrimaryTag	typeref:typename:std::string
m_tag_types	src/screens/server_info.h	/^	std::vector<std::string> m_tag_types;$/;"	m	struct:ServerInfo	typeref:typename:std::vector<std::string>
m_tags	src/mutable_song.h	/^	std::map<Tag, std::string> m_tags;$/;"	m	struct:MPD::MutableSong	typeref:typename:std::map<Tag,std::string>
m_tags_search_predicate	src/screens/media_library.h	/^	Regex::Filter<PrimaryTag> m_tags_search_predicate;$/;"	m	struct:MediaLibrary	typeref:typename:Regex::Filter<PrimaryTag>
m_tags_update_request	src/screens/media_library.h	/^	bool m_tags_update_request;$/;"	m	struct:MediaLibrary	typeref:typename:bool
m_target_type	src/utility/conversion.h	/^	std::string m_target_type;$/;"	m	struct:ConversionError	typeref:typename:std::string
m_timeout	src/curses/window.h	/^		int m_timeout;$/;"	m	struct:NC::Window::ScopedTimeout	typeref:typename:int
m_timeout	src/mpdpp.h	/^	int m_timeout;$/;"	m	struct:MPD::Connection	typeref:typename:int
m_timer	src/screens/media_library.h	/^	boost::posix_time::ptime m_timer;$/;"	m	struct:MediaLibrary	typeref:typename:boost::posix_time::ptime
m_timer	src/screens/playlist.h	/^	boost::posix_time::ptime m_timer;$/;"	m	struct:Playlist	typeref:typename:boost::posix_time::ptime
m_timer	src/screens/playlist_editor.h	/^	boost::posix_time::ptime m_timer;$/;"	m	struct:PlaylistEditor	typeref:typename:boost::posix_time::ptime
m_timer	src/screens/server_info.h	/^	boost::posix_time::ptime m_timer;$/;"	m	struct:ServerInfo	typeref:typename:boost::posix_time::ptime
m_timer	src/screens/visualizer.h	/^	boost::posix_time::ptime m_timer;$/;"	m	struct:Visualizer	typeref:typename:boost::posix_time::ptime
m_title	src/curses/window.h	/^	std::string m_title;$/;"	m	struct:NC::Window	typeref:typename:std::string
m_title	src/screens/lastfm.h	/^	std::wstring m_title;$/;"	m	struct:Lastfm	typeref:typename:std::wstring
m_total_length	src/screens/playlist.h	/^	size_t m_total_length;;$/;"	m	struct:Playlist	typeref:typename:size_t
m_total_time	src/status.cpp	/^unsigned m_total_time;$/;"	v	namespace:__anon855393f10111	typeref:typename:unsigned
m_track_gain	src/tags.h	/^	std::string m_track_gain;$/;"	m	struct:Tags::ReplayGainInfo	typeref:typename:std::string
m_track_peak	src/tags.h	/^	std::string m_track_peak;$/;"	m	struct:Tags::ReplayGainInfo	typeref:typename:std::string
m_type	src/actions.h	/^	Type m_type;$/;"	m	struct:Actions::BaseAction	typeref:typename:Type
m_type	src/mpdpp.h	/^	Type m_type;$/;"	m	struct:MPD::Item	typeref:typename:Type
m_type	src/mutable_song.h	/^		mpd_tag_type m_type;$/;"	m	struct:MPD::MutableSong::Tag	typeref:typename:mpd_tag_type
m_underline_counter	src/curses/window.h	/^	int m_underline_counter;$/;"	m	struct:NC::Window	typeref:typename:int
m_update_request	src/screens/browser.h	/^	bool m_update_request;$/;"	m	struct:Browser	typeref:typename:bool
m_url_handlers	src/screens/server_info.h	/^	std::vector<std::string> m_url_handlers;$/;"	m	struct:ServerInfo	typeref:typename:std::vector<std::string>
m_used	src/utility/option_parser.h	/^		bool m_used;$/;"	m	struct:option_parser::parser	typeref:typename:bool
m_value	src/utility/scoped_value.h	/^	ValueT m_value;$/;"	m	struct:ScopedValue	typeref:typename:ValueT
m_values	src/statusbar.h	/^	std::vector<std::string> m_values;$/;"	m	struct:Statusbar::Helpers::ImmediatelyReturnOneOf	typeref:typename:std::vector<std::string>
m_volume	src/status.cpp	/^int m_volume;$/;"	v	namespace:__anon855393f10111	typeref:typename:int
m_w	src/curses/window.h	/^		Window &m_w;$/;"	m	struct:NC::Window::ScopedPromptHook	typeref:typename:Window &
m_w	src/curses/window.h	/^		Window &m_w;$/;"	m	struct:NC::Window::ScopedTimeout	typeref:typename:Window &
m_w	src/statusbar.h	/^	Filterable *m_w;$/;"	m	struct:Statusbar::Helpers::ApplyFilterImmediately	typeref:typename:Filterable *
m_w	src/statusbar.h	/^	Searchable *m_w;$/;"	m	struct:Statusbar::Helpers::FindImmediately	typeref:typename:Searchable *
m_width	src/curses/window.h	/^	size_t m_width;$/;"	m	struct:NC::Window	typeref:typename:size_t
m_width	src/screens/server_info.h	/^	size_t m_width;$/;"	m	struct:ServerInfo	typeref:typename:size_t
m_width	src/screens/sort_playlist.h	/^	size_t m_width;$/;"	m	struct:SortPlaylistDialog	typeref:typename:size_t
m_window	src/curses/window.h	/^	WINDOW *m_window;$/;"	m	struct:NC::Window	typeref:typename:WINDOW *
m_window	src/macro_utilities.h	/^	NC::Window **m_window;$/;"	m	struct:Actions::PushCharacters	typeref:typename:NC::Window **
m_window_timeout	src/curses/window.h	/^	int m_window_timeout;$/;"	m	struct:NC::Window	typeref:typename:int
m_window_timeout	src/screens/media_library.h	/^	const int m_window_timeout;$/;"	m	struct:MediaLibrary	typeref:typename:const int
m_window_timeout	src/screens/playlist_editor.h	/^	const int m_window_timeout;$/;"	m	struct:PlaylistEditor	typeref:typename:const int
m_worker	src/screens/lastfm.h	/^	boost::BOOST_THREAD_FUTURE<LastFm::Service::Result> m_worker;$/;"	m	struct:Lastfm	typeref:typename:boost::BOOST_THREAD_FUTURE<LastFm::Service::Result>
m_worker	src/screens/lyrics.h	/^	boost::BOOST_THREAD_FUTURE<boost::optional<std::string>> m_worker;$/;"	m	struct:Lyrics	typeref:typename:boost::BOOST_THREAD_FUTURE<boost::optional<std::string>>
m_worker	src/utility/option_parser.h	/^		std::function<void(std::string)> m_worker;$/;"	m	struct:option_parser::parser	typeref:typename:std::function<void (std::string)>
main	src/ncmpcpp.cpp	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	src/screens/screen.h	/^	ConstWindowReference main() const {$/;"	f	struct:Screen	typeref:typename:ConstWindowReference
main	src/screens/screen.h	/^	WindowReference main() {$/;"	f	struct:Screen	typeref:typename:WindowReference
mainHook	src/statusbar.cpp	/^bool Statusbar::Helpers::mainHook(const char *)$/;"	f	class:Statusbar::Helpers	typeref:typename:bool
main_color	src/settings.h	/^	NC::Color main_color;$/;"	m	struct:Configuration	typeref:typename:NC::Color
maintainer-clean	src/Makefile.in	/^maintainer-clean: maintainer-clean-am$/;"	t
maintainer-clean-am	src/Makefile.in	/^maintainer-clean-am: distclean-am maintainer-clean-generic$/;"	t
maintainer-clean-generic	src/Makefile.in	/^maintainer-clean-generic:$/;"	t
make	src/regex_filter.h	/^inline Regex make(StringT &&s,$/;"	f	namespace:Regex	typeref:typename:Regex
makeConstSongIterator	src/helpers/song_iterator_maker.h	/^ConstSongIterator makeConstSongIterator(ConstIteratorT it)$/;"	f	typeref:typename:ConstSongIterator
makeSongIterator	src/helpers/song_iterator_maker.h	/^SongIterator makeSongIterator(IteratorT it)$/;"	f	typeref:typename:SongIterator
mandir	src/Makefile.in	/^mandir = @mandir@$/;"	m
mask	src/screens/clock.cpp	/^long Clock::older[6], Clock::next[6], Clock::newer[6], Clock::mask;$/;"	m	class:Clock	typeref:typename:long[6][6][6]
mask	src/screens/clock.h	/^	static long older[6], next[6], newer[6], mask;$/;"	m	struct:Clock	typeref:typename:long[6][6][6]
maxColor	src/curses/window.cpp	/^int maxColor;$/;"	v	namespace:__anon91c40e690111	typeref:typename:int
media_lib_primary_tag	src/settings.h	/^	mpd_tag_type media_lib_primary_tag;$/;"	m	struct:Configuration	typeref:typename:mpd_tag_type
media_library_albums_split_by_date	src/settings.h	/^	bool media_library_albums_split_by_date;$/;"	m	struct:Configuration	typeref:typename:bool
media_library_sort_by_mtime	src/settings.h	/^	bool media_library_sort_by_mtime;$/;"	m	struct:Configuration	typeref:typename:bool
message	src/screens/lyrics.h	/^		boost::optional<std::string> message;$/;"	m	struct:Lyrics::ConsumerState	typeref:typename:boost::optional<std::string>
message_delay_time	src/settings.h	/^	unsigned message_delay_time;$/;"	m	struct:Configuration	typeref:typename:unsigned
methodName	src/lastfm_service.h	/^	virtual const char *methodName() { return "artist.getinfo"; }$/;"	f	struct:LastFm::ArtistInfo	typeref:typename:const char *
mixer	src/status.cpp	/^void Status::Changes::mixer()$/;"	f	class:Status::Changes	typeref:typename:void
mkAllTracksEntry	src/screens/media_library.h	/^		static AlbumEntry mkAllTracksEntry(std::string tag) {$/;"	f	struct:MediaLibrary::AlbumEntry	typeref:typename:AlbumEntry
mkBuffer	src/screens/search_engine.h	/^	NC::Buffer &mkBuffer() {$/;"	f	struct:SEItem	typeref:typename:NC::Buffer &
mkSeparator	src/curses/menu.h	/^		static Item mkSeparator()$/;"	f	struct:NC::Menu::Item	typeref:typename:Item
mkdir_p	src/Makefile.in	/^mkdir_p = @mkdir_p@$/;"	m
mkinstalldirs	src/Makefile.in	/^mkinstalldirs = $(install_sh) -d$/;"	m
modified_item_prefix	src/settings.h	/^	NC::Buffer modified_item_prefix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
mostlyclean	src/Makefile.in	/^mostlyclean: mostlyclean-am$/;"	t
mostlyclean-am	src/Makefile.in	/^mostlyclean-am: mostlyclean-compile mostlyclean-generic \\$/;"	t
mostlyclean-compile	src/Makefile.in	/^mostlyclean-compile:$/;"	t
mostlyclean-generic	src/Makefile.in	/^mostlyclean-generic:$/;"	t
mostlyclean-libtool	src/Makefile.in	/^mostlyclean-libtool:$/;"	t
mouse	src/screens/help.cpp	/^void mouse(NC::Scrollpad &w, std::string action, const char *desc, bool indent = false)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:void
mouseButtonPressed	src/screens/browser.cpp	/^void Browser::mouseButtonPressed(MEVENT me)$/;"	f	class:Browser	typeref:typename:void
mouseButtonPressed	src/screens/clock.h	/^	virtual void mouseButtonPressed(MEVENT) override { }$/;"	f	struct:Clock	typeref:typename:void
mouseButtonPressed	src/screens/media_library.cpp	/^void MediaLibrary::mouseButtonPressed(MEVENT me)$/;"	f	class:MediaLibrary	typeref:typename:void
mouseButtonPressed	src/screens/outputs.cpp	/^void Outputs::mouseButtonPressed(MEVENT me)$/;"	f	class:Outputs	typeref:typename:void
mouseButtonPressed	src/screens/playlist.cpp	/^void Playlist::mouseButtonPressed(MEVENT me)$/;"	f	class:Playlist	typeref:typename:void
mouseButtonPressed	src/screens/playlist_editor.cpp	/^void PlaylistEditor::mouseButtonPressed(MEVENT me)$/;"	f	class:PlaylistEditor	typeref:typename:void
mouseButtonPressed	src/screens/screen.h	/^	virtual void mouseButtonPressed(MEVENT me) override {$/;"	f	struct:Screen	typeref:typename:void
mouseButtonPressed	src/screens/screen.h	/^template <> inline void Screen<NC::Scrollpad>::mouseButtonPressed(MEVENT me) {$/;"	f	class:Screen::Scrollpad	typeref:typename:void
mouseButtonPressed	src/screens/search_engine.cpp	/^void SearchEngine::mouseButtonPressed(MEVENT me)$/;"	f	class:SearchEngine	typeref:typename:void
mouseButtonPressed	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::mouseButtonPressed(MEVENT me)$/;"	f	class:SelectedItemsAdder	typeref:typename:void
mouseButtonPressed	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::mouseButtonPressed(MEVENT me)$/;"	f	class:SortPlaylistDialog	typeref:typename:void
mouseButtonPressed	src/screens/tag_editor.cpp	/^void TagEditor::mouseButtonPressed(MEVENT me)$/;"	f	class:TagEditor	typeref:typename:void
mouseButtonPressed	src/screens/tiny_tag_editor.cpp	/^void TinyTagEditor::mouseButtonPressed(MEVENT me)$/;"	f	class:TinyTagEditor	typeref:typename:void
mouseButtonPressed	src/screens/visualizer.h	/^	virtual void mouseButtonPressed(MEVENT) override { }$/;"	f	struct:Visualizer	typeref:typename:void
mouse_column	src/screens/help.cpp	/^void mouse_column(NC::Scrollpad &w, const char *column)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:void
mouse_list_scroll_whole_page	src/settings.h	/^	bool mouse_list_scroll_whole_page;$/;"	m	struct:Configuration	typeref:typename:bool
mouse_section	src/screens/help.cpp	/^void mouse_section(NC::Scrollpad &w, const char *title_)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:void
mouse_support	src/settings.h	/^	bool mouse_support;$/;"	m	struct:Configuration	typeref:typename:bool
moveSelectedItemsDown	src/helpers.h	/^void moveSelectedItemsDown(NC::Menu<MPD::Song> &m, F swap_fun)$/;"	f	typeref:typename:void
moveSelectedItemsTo	src/helpers.h	/^void moveSelectedItemsTo(NC::Menu<MPD::Song> &menu, F &&move_fun)$/;"	f	typeref:typename:void
moveSelectedItemsUp	src/helpers.h	/^void moveSelectedItemsUp(NC::Menu<MPD::Song> &m, F swap_fun)$/;"	f	typeref:typename:void
moveSortOrderDown	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::moveSortOrderDown()$/;"	f	class:SortPlaylistDialog	typeref:typename:void
moveSortOrderHint	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::moveSortOrderHint() const$/;"	f	class:SortPlaylistDialog	typeref:typename:void
moveSortOrderUp	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::moveSortOrderUp()$/;"	f	class:SortPlaylistDialog	typeref:typename:void
moveTo	src/curses/window.cpp	/^void Window::moveTo(size_t new_x, size_t new_y)$/;"	f	class:NC::Window	typeref:typename:void
mpd	src/statusbar.cpp	/^void Statusbar::Helpers::mpd()$/;"	f	class:Statusbar::Helpers	typeref:typename:void
mpdDirectory	src/mpdpp.cpp	/^const char *mpdDirectory(const std::string &directory)$/;"	f	namespace:__anon46a7540e0111	typeref:typename:const char *
mpd_connection_timeout	src/settings.h	/^	unsigned mpd_connection_timeout;$/;"	m	struct:Configuration	typeref:typename:unsigned
mpd_music_dir	src/settings.h	/^	std::string mpd_music_dir;$/;"	m	struct:Configuration	typeref:typename:std::string
msgInvalidResponse	src/lastfm_service.cpp	/^const char *msgInvalidResponse = "Invalid response";$/;"	v	namespace:__anon3c6283040111	typeref:typename:const char *
msgNotFound	src/lyrics_fetcher.cpp	/^const char LyricsFetcher::msgNotFound[] = "Not found";$/;"	m	class:LyricsFetcher	typeref:typename:const char[]
msgNotFound	src/lyrics_fetcher.h	/^	static const char msgNotFound[];$/;"	m	struct:LyricsFetcher	typeref:typename:const char[]
mtime	src/screens/media_library.h	/^		time_t mtime() const { return m_mtime; }$/;"	f	struct:MediaLibrary::Album	typeref:typename:time_t
mtime	src/screens/media_library.h	/^		time_t mtime() const { return m_mtime; }$/;"	f	struct:MediaLibrary::PrimaryTag	typeref:typename:time_t
myBrowser	src/screens/browser.cpp	/^Browser *myBrowser;$/;"	v	typeref:typename:Browser *
myClock	src/screens/clock.cpp	/^Clock *myClock;$/;"	v	typeref:typename:Clock *
myHelp	src/screens/help.cpp	/^Help *myHelp;$/;"	v	typeref:typename:Help *
myInactiveScreen	src/global.cpp	/^BaseScreen *myInactiveScreen;$/;"	v	namespace:Global	typeref:typename:BaseScreen *
myLastfm	src/screens/lastfm.cpp	/^Lastfm *myLastfm;$/;"	v	typeref:typename:Lastfm *
myLibrary	src/screens/media_library.cpp	/^MediaLibrary *myLibrary;$/;"	v	typeref:typename:MediaLibrary *
myLockedScreen	src/global.cpp	/^BaseScreen *myLockedScreen;$/;"	v	namespace:Global	typeref:typename:BaseScreen *
myLyrics	src/screens/lyrics.cpp	/^Lyrics *myLyrics;$/;"	v	typeref:typename:Lyrics *
myOutputs	src/screens/outputs.cpp	/^Outputs *myOutputs;$/;"	v	typeref:typename:Outputs *
myPlaylist	src/screens/playlist.cpp	/^Playlist *myPlaylist;$/;"	v	typeref:typename:Playlist *
myPlaylistEditor	src/screens/playlist_editor.cpp	/^PlaylistEditor *myPlaylistEditor;$/;"	v	typeref:typename:PlaylistEditor *
myScreen	src/global.cpp	/^BaseScreen *myScreen;$/;"	v	namespace:Global	typeref:typename:BaseScreen *
mySearcher	src/screens/search_engine.cpp	/^SearchEngine *mySearcher;$/;"	v	typeref:typename:SearchEngine *
mySelectedItemsAdder	src/screens/sel_items_adder.cpp	/^SelectedItemsAdder *mySelectedItemsAdder;$/;"	v	typeref:typename:SelectedItemsAdder *
myServerInfo	src/screens/server_info.cpp	/^ServerInfo *myServerInfo;$/;"	v	typeref:typename:ServerInfo *
mySongInfo	src/screens/song_info.cpp	/^SongInfo *mySongInfo;$/;"	v	typeref:typename:SongInfo *
mySortPlaylistDialog	src/screens/sort_playlist.cpp	/^SortPlaylistDialog *mySortPlaylistDialog;$/;"	v	typeref:typename:SortPlaylistDialog *
myTagEditor	src/screens/tag_editor.cpp	/^TagEditor *myTagEditor;$/;"	v	typeref:typename:TagEditor *
myTinyTagEditor	src/screens/tiny_tag_editor.cpp	/^TinyTagEditor *myTinyTagEditor;$/;"	v	typeref:typename:TinyTagEditor *
myVisualizer	src/screens/visualizer.cpp	/^Visualizer *myVisualizer;$/;"	v	typeref:typename:Visualizer *
name	src/actions.h	/^	const std::string &name() const { return m_name; }$/;"	f	struct:Actions::BaseAction	typeref:typename:const std::string &
name	src/lastfm_service.h	/^	virtual const char *name() { return "Artist info"; }$/;"	f	struct:LastFm::ArtistInfo	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "azlyrics.com"; }$/;"	f	struct:AzLyricsFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "genius.com"; }$/;"	f	struct:GeniusFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "jah-lyrics.com"; }$/;"	f	struct:JahLyricsFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "justsomelyrics.com"; }$/;"	f	struct:JustSomeLyricsFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "lyrics007.com"; }$/;"	f	struct:Sing365Fetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "lyricsmania.com"; }$/;"	f	struct:LyricsmaniaFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "lyricwiki.com"; }$/;"	f	struct:LyricwikiFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "metrolyrics.com"; }$/;"	f	struct:MetrolyricsFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "plyrics.com"; }$/;"	f	struct:PLyricsFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "tekstowo.pl"; }$/;"	f	struct:TekstowoFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "the Internet"; }$/;"	f	struct:InternetLyricsFetcher	typeref:typename:const char *
name	src/lyrics_fetcher.h	/^	virtual const char *name() const override { return "zeneszoveg.hu"; }$/;"	f	struct:ZeneszovegFetcher	typeref:typename:const char *
name	src/mpdpp.h	/^	const char *name() const$/;"	f	struct:MPD::Output	typeref:typename:const char *
name	src/settings.h	/^	std::wstring name;$/;"	m	struct:Column	typeref:typename:std::wstring
ncmpcpp	src/Makefile.am	/^bin_PROGRAMS = ncmpcpp$/;"	P	directory:bin
ncmpcpp$(EXEEXT)	src/Makefile.in	/^ncmpcpp$(EXEEXT): $(ncmpcpp_OBJECTS) $(ncmpcpp_DEPENDENCIES) $(EXTRA_ncmpcpp_DEPENDENCIES) $/;"	t
ncmpcpp_LDADD	src/Makefile.in	/^ncmpcpp_LDADD = $(LDADD)$/;"	m
ncmpcpp_LDFLAGS	src/Makefile.am	/^ncmpcpp_LDFLAGS = $(all_libraries)$/;"	m
ncmpcpp_LDFLAGS	src/Makefile.in	/^ncmpcpp_LDFLAGS = $(all_libraries)$/;"	m
ncmpcpp_LINK	src/Makefile.in	/^ncmpcpp_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
ncmpcpp_OBJECTS	src/Makefile.in	/^ncmpcpp_OBJECTS = $(am_ncmpcpp_OBJECTS)$/;"	m
ncmpcpp_SOURCES	src/Makefile.am	/^ncmpcpp_SOURCES = \\$/;"	m
ncmpcpp_SOURCES	src/Makefile.in	/^ncmpcpp_SOURCES = \\$/;"	m
ncmpcpp_directory	src/settings.h	/^	std::string ncmpcpp_directory;$/;"	m	struct:Configuration	typeref:typename:std::string
ncursesw_CFLAGS	src/Makefile.in	/^ncursesw_CFLAGS = @ncursesw_CFLAGS@$/;"	m
ncursesw_LIBS	src/Makefile.in	/^ncursesw_LIBS = @ncursesw_LIBS@$/;"	m
new_header_first_line	src/settings.h	/^	Format::AST<wchar_t> new_header_first_line;$/;"	m	struct:Configuration	typeref:typename:Format::AST<wchar_t>
new_header_second_line	src/settings.h	/^	Format::AST<wchar_t> new_header_second_line;$/;"	m	struct:Configuration	typeref:typename:Format::AST<wchar_t>
newer	src/screens/clock.cpp	/^long Clock::older[6], Clock::next[6], Clock::newer[6], Clock::mask;$/;"	m	class:Clock	typeref:typename:long[6][6][6]
newer	src/screens/clock.h	/^	static long older[6], next[6], newer[6], mask;$/;"	m	struct:Clock	typeref:typename:long[6][6][6]
next	src/screens/clock.cpp	/^long Clock::older[6], Clock::next[6], Clock::newer[6], Clock::mask;$/;"	m	class:Clock	typeref:typename:long[6][6]
next	src/screens/clock.h	/^	static long older[6], next[6], newer[6], mask;$/;"	m	struct:Clock	typeref:typename:long[6][6]
nextColumn	src/screens/media_library.cpp	/^void MediaLibrary::nextColumn()$/;"	f	class:MediaLibrary	typeref:typename:void
nextColumn	src/screens/playlist_editor.cpp	/^void PlaylistEditor::nextColumn()$/;"	f	class:PlaylistEditor	typeref:typename:void
nextColumn	src/screens/tag_editor.cpp	/^void TagEditor::nextColumn()$/;"	f	class:TagEditor	typeref:typename:void
nextColumnAvailable	src/screens/media_library.cpp	/^bool MediaLibrary::nextColumnAvailable()$/;"	f	class:MediaLibrary	typeref:typename:bool
nextColumnAvailable	src/screens/playlist_editor.cpp	/^bool PlaylistEditor::nextColumnAvailable()$/;"	f	class:PlaylistEditor	typeref:typename:bool
nextColumnAvailable	src/screens/tag_editor.cpp	/^bool TagEditor::nextColumnAvailable()$/;"	f	class:TagEditor	typeref:typename:bool
nextScreenTypeInSequence	src/actions.cpp	/^Iterator nextScreenTypeInSequence(Iterator first, Iterator last, ScreenType type)$/;"	f	namespace:__anon343209de0111	typeref:typename:Iterator
nextSongID	src/mpdpp.h	/^	int nextSongID() const { return mpd_status_get_next_song_id(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:int
nextSongPosition	src/mpdpp.h	/^	int nextSongPosition() const { return mpd_status_get_next_song_pos(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:int
noidle	src/mpdpp.cpp	/^int Connection::noidle()$/;"	f	class:MPD::Connection	typeref:typename:int
noinst_HEADERS	src/Makefile.am	/^noinst_HEADERS = \\$/;"	m
noinst_HEADERS	src/Makefile.in	/^noinst_HEADERS = \\$/;"	m
notBound	src/bindings.h	/^	bool notBound(const NC::Key::Type &k) const {$/;"	f	class:BindingsConfiguration	typeref:typename:bool
notLyrics	src/lyrics_fetcher.cpp	/^bool LyricwikiFetcher::notLyrics(const std::string &data) const$/;"	f	class:LyricwikiFetcher	typeref:typename:bool
notLyrics	src/lyrics_fetcher.h	/^	virtual bool notLyrics(const std::string &) const { return false; }$/;"	f	struct:LyricsFetcher	typeref:typename:bool
notify	src/screens/lyrics.h	/^			bool notify() const { return m_notify; }$/;"	f	struct:Lyrics::ConsumerState::Song	typeref:typename:bool
nowPlayingSong	src/screens/playlist.cpp	/^MPD::Song Playlist::nowPlayingSong()$/;"	f	class:Playlist	typeref:typename:MPD::Song
now_playing_lyrics	src/settings.h	/^	bool now_playing_lyrics;$/;"	m	struct:Configuration	typeref:typename:bool
now_playing_prefix	src/settings.h	/^	NC::Buffer now_playing_prefix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
now_playing_prefix_length	src/settings.h	/^	size_t now_playing_prefix_length;$/;"	m	struct:Configuration	typeref:typename:size_t
now_playing_suffix	src/settings.h	/^	NC::Buffer now_playing_suffix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
now_playing_suffix_length	src/settings.h	/^	size_t now_playing_suffix_length;$/;"	m	struct:Configuration	typeref:typename:size_t
older	src/screens/clock.cpp	/^long Clock::older[6], Clock::next[6], Clock::newer[6], Clock::mask;$/;"	m	class:Clock	typeref:typename:long[6]
older	src/screens/clock.h	/^	static long older[6], next[6], newer[6], mask;$/;"	m	struct:Clock	typeref:typename:long[6]
oldincludedir	src/Makefile.in	/^oldincludedir = @oldincludedir@$/;"	m
operator !=	src/curses/window.h	/^	bool operator!=(const Color &rhs) const { return m_impl != rhs.m_impl; }$/;"	f	struct:NC::Color	typeref:typename:bool
operator !=	src/format.h	/^inline bool operator!=(const SongTag &lhs, const SongTag &rhs) {$/;"	f	namespace:Format	typeref:typename:bool
operator !=	src/mpdpp.h	/^		bool operator!=(const State &rhs) const$/;"	f	struct:MPD::Iterator::State	typeref:typename:bool
operator !=	src/mpdpp.h	/^	bool operator!=(const Directory &rhs) const$/;"	f	struct:MPD::Directory	typeref:typename:bool
operator !=	src/mpdpp.h	/^	bool operator!=(const Item &rhs) const$/;"	f	struct:MPD::Item	typeref:typename:bool
operator !=	src/mpdpp.h	/^	bool operator!=(const Iterator &rhs) const$/;"	f	struct:MPD::Iterator	typeref:typename:bool
operator !=	src/mpdpp.h	/^	bool operator!=(const Output &rhs) const$/;"	f	struct:MPD::Output	typeref:typename:bool
operator !=	src/mpdpp.h	/^	bool operator!=(const Playlist &rhs) const$/;"	f	struct:MPD::Playlist	typeref:typename:bool
operator !=	src/song.h	/^	bool operator!=(const Song &rhs) const$/;"	f	struct:MPD::Song	typeref:typename:bool
operator &	src/curses/menu.h	/^inline List::Properties::Type operator&(List::Properties::Type lhs, List::Properties::Type rhs)$/;"	f	namespace:NC	typeref:typename:List::Properties::Type
operator &=	src/curses/menu.h	/^inline List::Properties::Type &operator&=(List::Properties::Type &lhs, List::Properties::Type rh/;"	f	namespace:NC	typeref:typename:List::Properties::Type &
operator ()	src/curses/menu.h	/^			Properties_ &operator()(Item_ &i) const {$/;"	f	struct:NC::Menu::Item::ExtractProperties	typeref:typename:Properties_ &
operator ()	src/curses/menu.h	/^			Value_ &operator()(Item_ &i) const {$/;"	f	struct:NC::Menu::Item::ExtractValue	typeref:typename:Value_ &
operator ()	src/format_impl.h	/^	Result operator()(NC::Format fmt)$/;"	f	struct:Format::Printer	typeref:typename:Result
operator ()	src/format_impl.h	/^	Result operator()(OutputSwitch)$/;"	f	struct:Format::Printer	typeref:typename:Result
operator ()	src/format_impl.h	/^	Result operator()(const FirstOf<CharT> &first_of)$/;"	f	struct:Format::Printer	typeref:typename:Result
operator ()	src/format_impl.h	/^	Result operator()(const Group<CharT> &group)$/;"	f	struct:Format::Printer	typeref:typename:Result
operator ()	src/format_impl.h	/^	Result operator()(const NC::Color &c)$/;"	f	struct:Format::Printer	typeref:typename:Result
operator ()	src/format_impl.h	/^	Result operator()(const SongTag &st)$/;"	f	struct:Format::Printer	typeref:typename:Result
operator ()	src/format_impl.h	/^	Result operator()(const StringT &s)$/;"	f	struct:Format::Printer	typeref:typename:Result
operator ()	src/helpers/song_iterator_maker.h	/^	auto &operator()(ItemT &item) const$/;"	f	struct:SongPropertiesExtractor	typeref:typename:auto &
operator ()	src/mpdpp.h	/^		void operator()(mpd_connection *connection) {$/;"	f	struct:MPD::Connection::ConnectionDeleter	typeref:typename:void
operator ()	src/regex_filter.h	/^	bool operator()(const Item &item) const {$/;"	f	struct:Regex::Filter	typeref:typename:bool
operator ()	src/regex_filter.h	/^	bool operator()(const Item &item) {$/;"	f	struct:Regex::ItemFilter	typeref:typename:bool
operator ()	src/screens/browser.cpp	/^	auto &operator()(ItemT &item) const$/;"	f	struct:SongPropertiesExtractor	typeref:typename:auto &	file:
operator ()	src/screens/media_library.cpp	/^	bool operator()(const Album &a, const Album &b) const {$/;"	f	class:__anon50035b830111::SortAlbumEntries	typeref:typename:bool	file:
operator ()	src/screens/media_library.cpp	/^	bool operator()(const AlbumEntry &a, const AlbumEntry &b) const {$/;"	f	class:__anon50035b830111::SortAlbumEntries	typeref:typename:bool	file:
operator ()	src/screens/media_library.cpp	/^	bool operator()(const MPD::Song &a, const MPD::Song &b) {$/;"	f	struct:__anon50035b830111::SortSongs	typeref:typename:bool	file:
operator ()	src/screens/media_library.cpp	/^	bool operator()(const PrimaryTag &a, const PrimaryTag &b) const {$/;"	f	class:__anon50035b830111::SortPrimaryTags	typeref:typename:bool	file:
operator ()	src/screens/media_library.cpp	/^	bool operator()(const SongItem &a, const SongItem &b) {$/;"	f	struct:__anon50035b830111::SortSongs	typeref:typename:bool	file:
operator ()	src/screens/search_engine.cpp	/^	auto &operator()(ItemT &item) const$/;"	f	struct:SongPropertiesExtractor	typeref:typename:auto &	file:
operator ()	src/song.h	/^		size_t operator()(const Song &s) const { return s.m_hash; }$/;"	f	struct:MPD::Song::Hash	typeref:typename:size_t
operator ()	src/statusbar.cpp	/^bool Statusbar::Helpers::ApplyFilterImmediately::operator()(const char *s)$/;"	f	class:Statusbar::Helpers::ApplyFilterImmediately	typeref:typename:bool
operator ()	src/statusbar.cpp	/^bool Statusbar::Helpers::FindImmediately::operator()(const char *s)$/;"	f	class:Statusbar::Helpers::FindImmediately	typeref:typename:bool
operator ()	src/statusbar.cpp	/^bool Statusbar::Helpers::ImmediatelyReturnOneOf::operator()(const char *s) const$/;"	f	class:Statusbar::Helpers::ImmediatelyReturnOneOf	typeref:typename:bool
operator ()	src/statusbar.cpp	/^bool Statusbar::Helpers::TryExecuteImmediateCommand::operator()(const char *s)$/;"	f	class:Statusbar::Helpers::TryExecuteImmediateCommand	typeref:typename:bool
operator ()	src/utility/comparators.cpp	/^bool LocaleBasedItemSorting::operator()(const MPD::Item &a, const MPD::Item &b) const$/;"	f	class:LocaleBasedItemSorting	typeref:typename:bool
operator ()	src/utility/comparators.h	/^	bool operator()(const MPD::Playlist &a, const MPD::Playlist &b) const {$/;"	f	class:LocaleBasedSorting	typeref:typename:bool
operator ()	src/utility/comparators.h	/^	bool operator()(const MPD::Song &a, const MPD::Song &b) const {$/;"	f	class:LocaleBasedSorting	typeref:typename:bool
operator ()	src/utility/comparators.h	/^	bool operator()(const NC::Menu<MPD::Item>::Item &a,$/;"	f	class:LocaleBasedItemSorting	typeref:typename:bool
operator ()	src/utility/comparators.h	/^	bool operator()(const RunnableItem<ItemT, FunT> &a, const RunnableItem<ItemT, FunT> &b) const {$/;"	f	class:LocaleBasedSorting	typeref:typename:bool
operator ()	src/utility/comparators.h	/^	bool operator()(const std::pair<A, B> &a, const std::pair<A, B> &b) const {$/;"	f	class:LocaleBasedSorting	typeref:typename:bool
operator ()	src/utility/comparators.h	/^	bool operator()(const std::string &a, const std::string &b) const {$/;"	f	class:LocaleBasedSorting	typeref:typename:bool
operator ()	src/utility/comparators.h	/^	int operator()(const char *a, const char *b) const {$/;"	f	class:LocaleStringComparison	typeref:typename:int
operator ()	src/utility/comparators.h	/^	int operator()(const std::string &a, const std::string &b) const {$/;"	f	class:LocaleStringComparison	typeref:typename:int
operator ()	src/utility/option_parser.h	/^		void operator()(std::string value)$/;"	f	struct:option_parser::worker	typeref:typename:void
operator *	src/mpdpp.h	/^	ObjectT &operator*() const$/;"	f	struct:MPD::Iterator	typeref:typename:ObjectT &
operator *	src/utility/shared_resource.h	/^		ResourceT &operator*() { return m_resource; }$/;"	f	struct:Shared::Resource	typeref:typename:ResourceT &
operator *	src/utility/shared_resource.h	/^		const ResourceT &operator*() const { return m_resource; }$/;"	f	struct:Shared::Resource	typeref:typename:const ResourceT &
operator ++	src/mpdpp.h	/^	Iterator &operator++()$/;"	f	struct:MPD::Iterator	typeref:typename:Iterator &
operator ++	src/mpdpp.h	/^	Iterator operator++(int)$/;"	f	struct:MPD::Iterator	typeref:typename:Iterator
operator +=	src/format_impl.h	/^inline Result &operator+=(Result &base, Result result)$/;"	f	namespace:Format	typeref:typename:Result &
operator ->	src/mpdpp.h	/^	ObjectT *operator->() const$/;"	f	struct:MPD::Iterator	typeref:typename:ObjectT *
operator ->	src/utility/shared_resource.h	/^		ResourceT *operator->() { return &m_resource; }$/;"	f	struct:Shared::Resource	typeref:typename:ResourceT *
operator ->	src/utility/shared_resource.h	/^		const ResourceT *operator->() const { return &m_resource; }$/;"	f	struct:Shared::Resource	typeref:typename:const ResourceT *
operator <	src/curses/window.h	/^	bool operator<(const Color &rhs) const { return m_impl < rhs.m_impl; }$/;"	f	struct:NC::Color	typeref:typename:bool
operator <	src/mutable_song.h	/^		bool operator<(const Tag &t) const$/;"	f	struct:MPD::MutableSong::Tag	typeref:typename:bool
operator <<	src/curses/formatted_color.h	/^OutputStreamT &operator<<(OutputStreamT &os, const FormattedColor &fc)$/;"	f	namespace:NC	typeref:typename:OutputStreamT &
operator <<	src/curses/formatted_color.h	/^OutputStreamT &operator<<(OutputStreamT &os,$/;"	f	namespace:NC	typeref:typename:OutputStreamT &
operator <<	src/curses/scrollpad.h	/^	Scrollpad &operator<<(Color color) { return write(color); }$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
operator <<	src/curses/scrollpad.h	/^	Scrollpad &operator<<(Format format) { return write(format); }$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
operator <<	src/curses/scrollpad.h	/^	Scrollpad &operator<<(char c) { return write(c); }$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
operator <<	src/curses/scrollpad.h	/^	Scrollpad &operator<<(const char *s) { return write(s); }$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
operator <<	src/curses/scrollpad.h	/^	Scrollpad &operator<<(const std::string &s) { return write(s); }$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
operator <<	src/curses/scrollpad.h	/^	Scrollpad &operator<<(int n) { return write(n); }$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
operator <<	src/curses/scrollpad.h	/^	Scrollpad &operator<<(long int n) { return write(n); }$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
operator <<	src/curses/scrollpad.h	/^	Scrollpad &operator<<(unsigned int n) { return write(n); }$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
operator <<	src/curses/scrollpad.h	/^	Scrollpad &operator<<(unsigned long int n) { return write(n); }$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
operator <<	src/curses/strbuffer.h	/^		friend OutputStreamT &operator<<(OutputStreamT &os, const Property &p)$/;"	f	class:NC::BasicBuffer	typeref:typename:OutputStreamT &
operator <<	src/curses/strbuffer.h	/^	BasicBuffer<CharT> &operator<<(CharT c)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer<CharT> &
operator <<	src/curses/strbuffer.h	/^	BasicBuffer<CharT> &operator<<(const CharT *s)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer<CharT> &
operator <<	src/curses/strbuffer.h	/^	BasicBuffer<CharT> &operator<<(const Color &color)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer<CharT> &
operator <<	src/curses/strbuffer.h	/^	BasicBuffer<CharT> &operator<<(const Format &format)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer<CharT> &
operator <<	src/curses/strbuffer.h	/^	BasicBuffer<CharT> &operator<<(const StringType &s)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer<CharT> &
operator <<	src/curses/strbuffer.h	/^	BasicBuffer<CharT> &operator<<(int n)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer<CharT> &
operator <<	src/curses/strbuffer.h	/^	BasicBuffer<CharT> &operator<<(long int n)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer<CharT> &
operator <<	src/curses/strbuffer.h	/^	BasicBuffer<CharT> &operator<<(unsigned int n)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer<CharT> &
operator <<	src/curses/strbuffer.h	/^	BasicBuffer<CharT> &operator<<(unsigned long int n)$/;"	f	class:NC::BasicBuffer	typeref:typename:BasicBuffer<CharT> &
operator <<	src/curses/strbuffer.h	/^OutputStreamT &operator<<(OutputStreamT &os, const BasicBuffer<CharT> &buffer)$/;"	f	namespace:NC	typeref:typename:OutputStreamT &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(Format format)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(TermManip tm)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(char c)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(const Color &c)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(const XY &coords)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(const char *s)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(const std::string &s)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(const std::wstring &ws)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(const wchar_t *ws)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(double d)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(int i)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(size_t s)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/curses/window.cpp	/^Window &Window::operator<<(wchar_t wc)$/;"	f	class:NC::Window	typeref:typename:Window &
operator <<	src/enums.cpp	/^std::ostream &operator<<(std::ostream &os, Design ui)$/;"	f	typeref:typename:std::ostream &
operator <<	src/enums.cpp	/^std::ostream &operator<<(std::ostream &os, DisplayMode dm)$/;"	f	typeref:typename:std::ostream &
operator <<	src/enums.cpp	/^std::ostream &operator<<(std::ostream &os, SearchDirection sd)$/;"	f	typeref:typename:std::ostream &
operator <<	src/enums.cpp	/^std::ostream &operator<<(std::ostream &os, SortMode sm)$/;"	f	typeref:typename:std::ostream &
operator <<	src/enums.cpp	/^std::ostream &operator<<(std::ostream &os, SpaceAddMode sam)$/;"	f	typeref:typename:std::ostream &
operator <<	src/enums.cpp	/^std::ostream &operator<<(std::ostream& os, VisualizerType vt)$/;"	f	typeref:typename:std::ostream &
operator =	src/curses/menu_impl.h	/^Menu<ItemT> &Menu<ItemT>::operator=(Menu rhs)$/;"	f	class:NC::Menu	typeref:typename:Menu<ItemT> &
operator =	src/curses/window.cpp	/^Window &Window::operator=(Window rhs)$/;"	f	class:NC::Window	typeref:typename:Window &
operator =	src/screens/search_engine.h	/^	SEItem &operator=(const SEItem &se) {$/;"	f	struct:SEItem	typeref:typename:SEItem &
operator =	src/song.h	/^	Song &operator=(Song rhs)$/;"	f	struct:MPD::Song	typeref:typename:Song &
operator ==	src/curses/formatted_color.h	/^		bool operator==(const End<otherStorage> &rhs) const$/;"	f	struct:NC::FormattedColor::End	typeref:typename:bool
operator ==	src/curses/formatted_color.h	/^inline bool operator==(const FormattedColor &lhs, const FormattedColor &rhs)$/;"	f	namespace:NC	typeref:typename:bool
operator ==	src/curses/strbuffer.h	/^		bool operator==(const Property &rhs) const$/;"	f	struct:NC::BasicBuffer::Property	typeref:typename:bool
operator ==	src/curses/strbuffer.h	/^bool operator==(const BasicBuffer<CharT> &lhs, const BasicBuffer<CharT> &rhs)$/;"	f	namespace:NC	typeref:typename:bool
operator ==	src/curses/window.h	/^	bool operator==(const Color &rhs) const { return m_impl == rhs.m_impl; }$/;"	f	struct:NC::Color	typeref:typename:bool
operator ==	src/format.h	/^inline bool operator==(const SongTag &lhs, const SongTag &rhs) {$/;"	f	namespace:Format	typeref:typename:bool
operator ==	src/lastfm_service.h	/^	bool operator==(const ArtistInfo &ai) const { return m_arguments == ai.m_arguments; }$/;"	f	struct:LastFm::ArtistInfo	typeref:typename:bool
operator ==	src/mpdpp.h	/^		bool operator==(const State &rhs) const$/;"	f	struct:MPD::Iterator::State	typeref:typename:bool
operator ==	src/mpdpp.h	/^	bool operator==(const Directory &rhs) const$/;"	f	struct:MPD::Directory	typeref:typename:bool
operator ==	src/mpdpp.h	/^	bool operator==(const Item &rhs) const$/;"	f	struct:MPD::Item	typeref:typename:bool
operator ==	src/mpdpp.h	/^	bool operator==(const Iterator &rhs) const$/;"	f	struct:MPD::Iterator	typeref:typename:bool
operator ==	src/mpdpp.h	/^	bool operator==(const Output &rhs) const$/;"	f	struct:MPD::Output	typeref:typename:bool
operator ==	src/mpdpp.h	/^	bool operator==(const Playlist &rhs) const$/;"	f	struct:MPD::Playlist	typeref:typename:bool
operator ==	src/song.h	/^	bool operator==(const Song &rhs) const$/;"	f	struct:MPD::Song	typeref:typename:bool
operator >>	src/curses/formatted_color.cpp	/^std::istream &NC::operator>>(std::istream &is, NC::FormattedColor &fc)$/;"	f	class:NC	typeref:typename:std::istream &
operator >>	src/curses/window.cpp	/^std::istream &operator>>(std::istream &is, Color &c)$/;"	f	namespace:NC	typeref:typename:std::istream &
operator >>	src/enums.cpp	/^std::istream &operator>>(std::istream &is, Design &ui)$/;"	f	typeref:typename:std::istream &
operator >>	src/enums.cpp	/^std::istream &operator>>(std::istream &is, DisplayMode &dm)$/;"	f	typeref:typename:std::istream &
operator >>	src/enums.cpp	/^std::istream &operator>>(std::istream &is, SearchDirection &sd)$/;"	f	typeref:typename:std::istream &
operator >>	src/enums.cpp	/^std::istream &operator>>(std::istream &is, SortMode &sm)$/;"	f	typeref:typename:std::istream &
operator >>	src/enums.cpp	/^std::istream &operator>>(std::istream &is, SpaceAddMode &sam)$/;"	f	typeref:typename:std::istream &
operator >>	src/enums.cpp	/^std::istream &operator>>(std::istream& is, VisualizerType &vt)$/;"	f	typeref:typename:std::istream &
operator >>	src/lyrics_fetcher.cpp	/^std::istream &operator>>(std::istream &is, LyricsFetcher_ &fetcher)$/;"	f	typeref:typename:std::istream &
operator End<StorageKind::Value>	src/curses/formatted_color.h	/^		explicit operator End<StorageKind::Value>() const$/;"	f	struct:NC::FormattedColor::End
operator []	src/curses/menu.h	/^	Menu<ItemT>::Item &operator[](size_t pos) { return (*m_items)[pos]; }$/;"	f	struct:NC::Menu	typeref:typename:Menu<ItemT>::Item &
operator []	src/curses/menu.h	/^	const Menu<ItemT>::Item &operator[](size_t pos) const { return (*m_items)[pos]; }$/;"	f	struct:NC::Menu	typeref:typename:const Menu<ItemT>::Item &
operator |	src/curses/menu.h	/^inline List::Properties::Type operator|(List::Properties::Type lhs, List::Properties::Type rhs)$/;"	f	namespace:NC	typeref:typename:List::Properties::Type
operator |=	src/curses/menu.h	/^inline List::Properties::Type &operator|=(List::Properties::Type &lhs, List::Properties::Type rh/;"	f	namespace:NC	typeref:typename:List::Properties::Type &
option_parser	src/utility/option_parser.h	/^class option_parser$/;"	c
output_	src/format_impl.h	/^	struct output_ {$/;"	s	struct:Format::Printer
outputs	src/status.cpp	/^void Status::Changes::outputs()$/;"	f	class:Status::Changes	typeref:typename:void
pairNumber	src/curses/window.cpp	/^int Color::pairNumber() const$/;"	f	class:NC::Color	typeref:typename:int
parse	src/format.cpp	/^AST<char> parse(const std::string &s, const unsigned flags)$/;"	f	namespace:Format	typeref:typename:AST<char>
parse	src/format.cpp	/^AST<wchar_t> parse(const std::wstring &s, const unsigned flags)$/;"	f	namespace:Format	typeref:typename:AST<wchar_t>
parse	src/utility/option_parser.h	/^		void parse(std::string v)$/;"	f	struct:option_parser::parser	typeref:typename:void
parseActionLine	src/bindings.cpp	/^std::shared_ptr<Actions::BaseAction> parseActionLine(const std::string &line, F error)$/;"	f	namespace:__anon0c1fb5bb0111	typeref:typename:std::shared_ptr<Actions::BaseAction>
parseBracket	src/format.cpp	/^expressions<CharT> parseBracket(const string<CharT> &s,$/;"	f	namespace:__anon714e65d60111	typeref:typename:expressions<CharT>
parse_default	src/utility/option_parser.h	/^		void parse_default() const$/;"	f	struct:option_parser::parser	typeref:typename:void
parser	src/utility/option_parser.h	/^		parser(StringT &&default_, SetterT &&setter_)$/;"	f	struct:option_parser::parser
parser	src/utility/option_parser.h	/^	struct parser {$/;"	s	class:option_parser
past	src/status.cpp	/^boost::posix_time::ptime past = boost::posix_time::from_time_t(0);$/;"	v	namespace:__anon855393f10111	typeref:typename:boost::posix_time::ptime
path	src/mpdpp.h	/^	const std::string &path() const$/;"	f	struct:MPD::Directory	typeref:typename:const std::string &
path	src/mpdpp.h	/^	const std::string &path() const$/;"	f	struct:MPD::Playlist	typeref:typename:const std::string &
pattern	src/settings.h	/^	std::string pattern;$/;"	m	struct:Configuration	typeref:typename:std::string
pauseScreen	src/curses/window.cpp	/^void pauseScreen()$/;"	f	namespace:NC	typeref:typename:void
pdf	src/Makefile.in	/^pdf: pdf-am$/;"	t
pdf-am	src/Makefile.in	/^pdf-am:$/;"	t
pdfdir	src/Makefile.in	/^pdfdir = @pdfdir@$/;"	m
perform	src/curl_handle.cpp	/^CURLcode Curl::perform(std::string &data, const std::string &URL, const std::string &referer, bo/;"	f	class:Curl	typeref:typename:CURLcode
pkgdatadir	src/Makefile.in	/^pkgdatadir = $(datadir)\/@PACKAGE@$/;"	m
pkgincludedir	src/Makefile.in	/^pkgincludedir = $(includedir)\/@PACKAGE@$/;"	m
pkglibdir	src/Makefile.in	/^pkglibdir = $(libdir)\/@PACKAGE@$/;"	m
pkglibexecdir	src/Makefile.in	/^pkglibexecdir = $(libexecdir)\/@PACKAGE@$/;"	m
playTime	src/mpdpp.h	/^	unsigned long playTime() const { return mpd_stats_get_play_time(m_stats.get()); }$/;"	f	struct:MPD::Statistics	typeref:typename:unsigned long
player	src/status.cpp	/^MPD::PlayerState Status::State::player()$/;"	f	class:Status::State	typeref:typename:MPD::PlayerState
playerState	src/mpdpp.h	/^	PlayerState playerState() const { return PlayerState(mpd_status_get_state(m_status.get())); }$/;"	f	struct:MPD::Status	typeref:typename:PlayerState
playerState	src/status.cpp	/^void Status::Changes::playerState()$/;"	f	class:Status::Changes	typeref:typename:void
playerStateToString	src/status.cpp	/^std::string playerStateToString(MPD::PlayerState ps)$/;"	f	namespace:__anon855393f10111	typeref:typename:std::string
player_state_color	src/settings.h	/^	NC::FormattedColor player_state_color;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
playing_song_scroll_begin	src/status.cpp	/^size_t playing_song_scroll_begin = 0;$/;"	v	namespace:__anon855393f10111	typeref:typename:size_t
playlist	src/mpdpp.h	/^	Playlist &playlist()$/;"	f	struct:MPD::Item	typeref:typename:Playlist &
playlist	src/mpdpp.h	/^	const Playlist &playlist() const$/;"	f	struct:MPD::Item	typeref:typename:const Playlist &
playlist	src/status.cpp	/^void Status::Changes::playlist(unsigned previous_version)$/;"	f	class:Status::Changes	typeref:typename:void
playlistEntryMatcher	src/screens/playlist.cpp	/^bool playlistEntryMatcher(const Regex::Regex &rx, const MPD::Song &s)$/;"	f	namespace:__anon8142dca10311	typeref:typename:bool
playlistLength	src/mpdpp.h	/^	unsigned playlistLength() const { return mpd_status_get_queue_length(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:unsigned
playlistLength	src/status.cpp	/^unsigned Status::State::playlistLength()$/;"	f	class:Status::State	typeref:typename:unsigned
playlistVersion	src/mpdpp.h	/^	unsigned playlistVersion() const { return mpd_status_get_queue_version(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:unsigned
playlist_disable_highlight_delay	src/settings.h	/^	boost::posix_time::seconds playlist_disable_highlight_delay;$/;"	m	struct:Configuration	typeref:typename:boost::posix_time::seconds
playlist_display_mode	src/settings.h	/^	DisplayMode playlist_display_mode;$/;"	m	struct:Configuration	typeref:typename:DisplayMode
playlist_editor_display_mode	src/settings.h	/^	DisplayMode playlist_editor_display_mode;$/;"	m	struct:Configuration	typeref:typename:DisplayMode
playlist_separate_albums	src/settings.h	/^	bool playlist_separate_albums;$/;"	m	struct:Configuration	typeref:typename:bool
playlist_shorten_total_times	src/settings.h	/^	bool playlist_shorten_total_times;$/;"	m	struct:Configuration	typeref:typename:bool
playlist_show_mpd_host	src/settings.h	/^	bool playlist_show_mpd_host;$/;"	m	struct:Configuration	typeref:typename:bool
playlist_show_remaining_time	src/settings.h	/^	bool playlist_show_remaining_time;$/;"	m	struct:Configuration	typeref:typename:bool
populateActions	src/actions.cpp	/^void populateActions()$/;"	f	namespace:__anon343209de0411	typeref:typename:void
populatePlaylistSelector	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::populatePlaylistSelector(BaseScreen *old_screen)$/;"	f	class:SelectedItemsAdder	typeref:typename:void
postProcess	src/lyrics_fetcher.cpp	/^void LyricsFetcher::postProcess(std::string &data) const$/;"	f	class:LyricsFetcher	typeref:typename:void
prechecks	src/mpdpp.cpp	/^void Connection::prechecks()$/;"	f	class:MPD::Connection	typeref:typename:void
prechecksNoCommandsList	src/mpdpp.cpp	/^void Connection::prechecksNoCommandsList()$/;"	f	class:MPD::Connection	typeref:typename:void
prefix	src/Makefile.in	/^prefix = @prefix@$/;"	m
previousColumn	src/screens/media_library.cpp	/^void MediaLibrary::previousColumn()$/;"	f	class:MediaLibrary	typeref:typename:void
previousColumn	src/screens/playlist_editor.cpp	/^void PlaylistEditor::previousColumn()$/;"	f	class:PlaylistEditor	typeref:typename:void
previousColumn	src/screens/tag_editor.cpp	/^void TagEditor::previousColumn()$/;"	f	class:TagEditor	typeref:typename:void
previousColumnAvailable	src/screens/media_library.cpp	/^bool MediaLibrary::previousColumnAvailable()$/;"	f	class:MediaLibrary	typeref:typename:bool
previousColumnAvailable	src/screens/playlist_editor.cpp	/^bool PlaylistEditor::previousColumnAvailable()$/;"	f	class:PlaylistEditor	typeref:typename:bool
previousColumnAvailable	src/screens/tag_editor.cpp	/^bool TagEditor::previousColumnAvailable()$/;"	f	class:TagEditor	typeref:typename:bool
previousScreen	src/interfaces.h	/^	BaseScreen *previousScreen() const {$/;"	f	struct:Tabbable	typeref:typename:BaseScreen *
print	src/statusbar.cpp	/^void Statusbar::print(int delay, const std::string &message)$/;"	f	class:Statusbar	typeref:typename:void
print	src/statusbar.h	/^inline void print(const std::string &message)$/;"	f	namespace:Statusbar	typeref:typename:void
printf	src/statusbar.h	/^void printf(FormatT &&fmt)$/;"	f	namespace:Statusbar	typeref:typename:void
printf	src/statusbar.h	/^void printf(FormatT &&fmt, ArgT &&arg, Args&&... args)$/;"	f	namespace:Statusbar	typeref:typename:void
printf	src/statusbar.h	/^void printf(int delay, FormatT &&fmt)$/;"	f	namespace:Statusbar	typeref:typename:void
printf	src/statusbar.h	/^void printf(int delay, FormatT &&fmt, ArgT &&arg, Args&&... args)$/;"	f	namespace:Statusbar	typeref:typename:void
processData	src/lastfm_service.cpp	/^Service::Result ArtistInfo::processData(const std::string &data)$/;"	f	class:LastFm::ArtistInfo	typeref:typename:Service::Result
program_transform_name	src/Makefile.in	/^program_transform_name = @program_transform_name@$/;"	m
progressbar	src/settings.h	/^	std::wstring progressbar;$/;"	m	struct:Configuration	typeref:typename:std::wstring
progressbar_block_update	src/statusbar.cpp	/^bool progressbar_block_update = false;$/;"	v	namespace:__anond7be94460111	typeref:typename:bool
progressbar_color	src/settings.h	/^	NC::FormattedColor progressbar_color;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
progressbar_elapsed_color	src/settings.h	/^	NC::FormattedColor progressbar_elapsed_color;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
prompt	src/curses/window.cpp	/^std::string Window::prompt(const std::string &base, size_t width, bool encrypted)$/;"	f	class:NC::Window	typeref:typename:std::string
promptReturnOneOf	src/statusbar.cpp	/^char Statusbar::Helpers::promptReturnOneOf(const std::vector<char> &values)$/;"	f	class:Statusbar::Helpers	typeref:typename:char
properties	src/curses/menu.h	/^		Properties &properties() { return std::get<1>(*m_impl); }$/;"	f	struct:NC::Menu::Item	typeref:typename:Properties &
properties	src/curses/menu.h	/^		const Properties &properties() const { return std::get<1>(*m_impl); }$/;"	f	struct:NC::Menu::Item	typeref:typename:const Properties &
properties	src/curses/strbuffer.h	/^	const Properties &properties() const { return m_properties; }$/;"	f	class:NC::BasicBuffer	typeref:typename:const Properties &
properties	src/format.cpp	/^const unsigned properties = Format::Flags::Color$/;"	v	namespace:__anon714e65d60111	typeref:typename:const unsigned
properties	src/song_list.h	/^	NC::List::Properties &properties()$/;"	f	struct:SongProperties	typeref:typename:NC::List::Properties &
properties	src/song_list.h	/^	const NC::List::Properties &properties() const$/;"	f	struct:SongProperties	typeref:typename:const NC::List::Properties &
ps	src/Makefile.in	/^ps: ps-am$/;"	t
ps-am	src/Makefile.in	/^ps-am:$/;"	t
psPause	src/mpdpp.h	/^enum PlayerState { psUnknown, psStop, psPlay, psPause };$/;"	e	enum:MPD::PlayerState
psPlay	src/mpdpp.h	/^enum PlayerState { psUnknown, psStop, psPlay, psPause };$/;"	e	enum:MPD::PlayerState
psStop	src/mpdpp.h	/^enum PlayerState { psUnknown, psStop, psPlay, psPause };$/;"	e	enum:MPD::PlayerState
psUnknown	src/mpdpp.h	/^enum PlayerState { psUnknown, psStop, psPlay, psPause };$/;"	e	enum:MPD::PlayerState
psdir	src/Makefile.in	/^psdir = @psdir@$/;"	m
pushChar	src/curses/window.cpp	/^void Window::pushChar(const Key::Type ch)$/;"	f	class:NC::Window	typeref:typename:void
put	src/statusbar.cpp	/^NC::Window &Statusbar::put()$/;"	f	class:Statusbar	typeref:typename:NC::Window &
queueJob	src/screens/lastfm.h	/^	void queueJob(ServiceT *service)$/;"	f	struct:Lastfm	typeref:typename:void
raise	src/utility/conversion.h	/^	GNUC_NORETURN static void raise(const Type &value, const Type &lbound, const Type &ubound)$/;"	f	struct:OutOfBounds	typeref:typename:GNUC_NORETURN void
raiseLower	src/utility/conversion.h	/^	GNUC_NORETURN static void raiseLower(const Type &value, const Type &lbound)$/;"	f	struct:OutOfBounds	typeref:typename:GNUC_NORETURN void
raiseUpper	src/utility/conversion.h	/^	GNUC_NORETURN static void raiseUpper(const Type &value, const Type &ubound)$/;"	f	struct:OutOfBounds	typeref:typename:GNUC_NORETURN void
random	src/mpdpp.h	/^	bool random() const { return mpd_status_get_random(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:bool
random	src/status.cpp	/^bool Status::State::random()$/;"	f	class:Status::State	typeref:typename:bool
random_exclude_pattern	src/settings.h	/^	std::string random_exclude_pattern;$/;"	m	struct:Configuration	typeref:typename:std::string
rangeCheck	src/format.cpp	/^void rangeCheck(const string<CharT> &s, iterator<CharT> current, iterator<CharT> end)$/;"	f	namespace:__anon714e65d60111	typeref:typename:void
raw	src/curses/window.h	/^	WINDOW *raw() const { return m_window; }$/;"	f	struct:NC::Window	typeref:typename:WINDOW *
rbegin	src/curses/menu.h	/^	ConstReverseIterator rbegin() const { return ConstReverseIterator(end()); }$/;"	f	struct:NC::Menu	typeref:typename:ConstReverseIterator
rbegin	src/curses/menu.h	/^	ReverseIterator rbegin() { return ReverseIterator(end()); }$/;"	f	struct:NC::Menu	typeref:typename:ReverseIterator
rbeginV	src/curses/menu.h	/^	ConstReverseIterator rbeginV() const { return ConstReverseValueIterator(endV()); }$/;"	f	struct:NC::Menu	typeref:typename:ConstReverseIterator
rbeginV	src/curses/menu.h	/^	ReverseValueIterator rbeginV() { return ReverseValueIterator(endV()); }$/;"	f	struct:NC::Menu	typeref:typename:ReverseValueIterator
rcurrent	src/curses/menu.h	/^	ConstReverseIterator rcurrent() const {$/;"	f	struct:NC::Menu	typeref:typename:ConstReverseIterator
rcurrent	src/curses/menu.h	/^	ReverseIterator rcurrent() {$/;"	f	struct:NC::Menu	typeref:typename:ReverseIterator
rcurrentV	src/curses/menu.h	/^	ConstReverseValueIterator rcurrentV() const {$/;"	f	struct:NC::Menu	typeref:typename:ConstReverseValueIterator
rcurrentV	src/curses/menu.h	/^	ReverseValueIterator rcurrentV() {$/;"	f	struct:NC::Menu	typeref:typename:ReverseValueIterator
read	src/bindings.cpp	/^bool BindingsConfiguration::read(const std::string &file)$/;"	f	class:BindingsConfiguration	typeref:typename:bool
read	src/bindings.cpp	/^bool BindingsConfiguration::read(const std::vector<std::string> &binding_paths)$/;"	f	class:BindingsConfiguration	typeref:typename:bool
read	src/settings.cpp	/^bool Configuration::read(const std::vector<std::string> &config_paths, bool ignore_errors)$/;"	f	class:Configuration	typeref:typename:bool
read	src/tags.cpp	/^void read(mpd_song *s)$/;"	f	namespace:Tags	typeref:typename:void
readCommonTags	src/tags.cpp	/^void readCommonTags(mpd_song *s, TagLib::Tag *tag)$/;"	f	namespace:__anondd52103c0111	typeref:typename:void
readID3v1Tags	src/tags.cpp	/^void readID3v1Tags(mpd_song *s, TagLib::ID3v1::Tag *tag)$/;"	f	namespace:__anondd52103c0111	typeref:typename:void
readID3v2Tags	src/tags.cpp	/^void readID3v2Tags(mpd_song *s, TagLib::ID3v2::Tag *tag)$/;"	f	namespace:__anondd52103c0111	typeref:typename:void
readKey	src/bindings.cpp	/^NC::Key::Type readKey(NC::Window &w)$/;"	f	typeref:typename:NC::Key::Type
readKey	src/curses/window.cpp	/^Key::Type Window::readKey()$/;"	f	class:NC::Window	typeref:typename:Key::Type
readReplayGain	src/tags.cpp	/^ReplayGainInfo readReplayGain(TagLib::File *f)$/;"	f	namespace:Tags	typeref:typename:ReplayGainInfo
readXiphComments	src/tags.cpp	/^void readXiphComments(mpd_song *s, TagLib::Ogg::XiphComment *tag)$/;"	f	namespace:__anondd52103c0111	typeref:typename:void
read_key	src/curses/window.cpp	/^int read_key(FILE *)$/;"	f	namespace:__anon91c40e690111::rl	typeref:typename:int
realPath	src/screens/browser.cpp	/^std::string realPath(bool local_browser, std::string path)$/;"	f	namespace:__anonfc130a730411	typeref:typename:std::string
reapplyFilter	src/curses/menu_impl.h	/^void Menu<ItemT>::reapplyFilter()$/;"	f	class:NC::Menu	typeref:typename:void
recreate	src/curses/window.cpp	/^void Window::recreate(size_t width, size_t height)$/;"	f	class:NC::Window	typeref:typename:void
referenceLoudness	src/tags.h	/^	const std::string &referenceLoudness() const { return m_reference_loudness; }$/;"	f	struct:Tags::ReplayGainInfo	typeref:typename:const std::string &
refetchCurrent	src/screens/lyrics.cpp	/^void Lyrics::refetchCurrent()$/;"	f	class:Lyrics	typeref:typename:void
refresh	src/curses/menu_impl.h	/^void Menu<ItemT>::refresh()$/;"	f	class:NC::Menu	typeref:typename:void
refresh	src/curses/scrollpad.cpp	/^void Scrollpad::refresh()$/;"	f	class:NC::Scrollpad	typeref:typename:void
refresh	src/curses/window.cpp	/^void Window::refresh()$/;"	f	class:NC::Window	typeref:typename:void
refresh	src/screens/media_library.cpp	/^void MediaLibrary::refresh()$/;"	f	class:MediaLibrary	typeref:typename:void
refresh	src/screens/playlist_editor.cpp	/^void PlaylistEditor::refresh()$/;"	f	class:PlaylistEditor	typeref:typename:void
refresh	src/screens/screen.h	/^	virtual void refresh() override {$/;"	f	struct:Screen	typeref:typename:void
refresh	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::refresh()$/;"	f	class:SelectedItemsAdder	typeref:typename:void
refresh	src/screens/tag_editor.cpp	/^void TagEditor::refresh()$/;"	f	class:TagEditor	typeref:typename:void
refreshBorder	src/curses/window.cpp	/^void Window::refreshBorder() const$/;"	f	class:NC::Window	typeref:typename:void
refreshWindow	src/screens/screen.h	/^	virtual void refreshWindow() override {$/;"	f	struct:Screen	typeref:typename:void
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return ""; }$/;"	f	struct:InternetLyricsFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<!-- start of lyrics -->(.*?)<!-- end of l/;"	f	struct:PLyricsFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<div class=\\"content.*?<\/div>(.*?)See al/;"	f	struct:JustSomeLyricsFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<div class=\\"lyrics-body\\".*?<\/div>(.*?/;"	f	struct:LyricsmaniaFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<div class=\\"lyrics-body\\">(.*?)<!--WIDG/;"	f	struct:MetrolyricsFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<div class=\\"lyrics-plain-text.*?\\">(.*?/;"	f	struct:ZeneszovegFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<div class=\\"lyrics\\">(.*?)<\/div>"; }$/;"	f	struct:GeniusFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<div class=\\"lyrics\\">(.*?)<\/div>"; }$/;"	f	struct:Sing365Fetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<div class=\\"lyricsh\\">.*?<\/h2>.*<div>(/;"	f	struct:AzLyricsFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<div class=\\"song-header\\">.*?<\/div>(.*/;"	f	struct:JahLyricsFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<div class=\\"song-text\\">.*?<\/h2>(.*?)</;"	f	struct:TekstowoFetcher	typeref:typename:const char *
regex	src/lyrics_fetcher.h	/^	virtual const char *regex() const override { return "<url>(.*?)<\/url>"; }$/;"	f	struct:LyricwikiFetcher	typeref:typename:const char *
regexSearch	src/curses/scrollpad.cpp	/^bool regexSearch(NC::Buffer &buf, const BeginT &begin, const std::string &ws,$/;"	f	namespace:__anona075d9b50111	typeref:typename:bool
regex_type	src/settings.h	/^	boost::regex::flag_type regex_type;$/;"	m	struct:Configuration	typeref:typename:boost::regex::flag_type
registerSong	src/screens/playlist.cpp	/^void Playlist::registerSong(const MPD::Song &s)$/;"	f	class:Playlist	typeref:typename:void
reloadRemaining	src/screens/playlist.h	/^	void reloadRemaining() { m_reload_remaining = true; }$/;"	f	struct:Playlist	typeref:typename:void
reloadTotalLength	src/screens/playlist.h	/^	void reloadTotalLength() { m_reload_total_length = true; }$/;"	f	struct:Playlist	typeref:typename:void
remove	src/screens/browser.cpp	/^void Browser::remove(const MPD::Item &item)$/;"	f	class:Browser	typeref:typename:void
removeExtension	src/screens/lyrics.cpp	/^std::string removeExtension(std::string filename)$/;"	f	namespace:__anon5d75aa650111	typeref:typename:std::string
removeInvalidCharsFromFilename	src/utility/string.cpp	/^void removeInvalidCharsFromFilename(std::string &filename, bool win32_compatible)$/;"	f	typeref:typename:void
removeProperties	src/curses/scrollpad.cpp	/^void Scrollpad::removeProperties(size_t id)$/;"	f	class:NC::Scrollpad	typeref:typename:void
removeProperties	src/curses/strbuffer.h	/^	void removeProperties(size_t id = -1)$/;"	f	class:NC::BasicBuffer	typeref:typename:void
removeSongFromPlaylist	src/helpers.cpp	/^void removeSongFromPlaylist(const SongMenu &playlist, const MPD::Song &s)$/;"	f	typeref:typename:void
rend	src/curses/menu.h	/^	ConstReverseIterator rend() const { return ConstReverseIterator(begin()); }$/;"	f	struct:NC::Menu	typeref:typename:ConstReverseIterator
rend	src/curses/menu.h	/^	ReverseIterator rend() { return ReverseIterator(begin()); }$/;"	f	struct:NC::Menu	typeref:typename:ReverseIterator
rendV	src/curses/menu.h	/^	ConstReverseValueIterator rendV() const { return ConstReverseValueIterator(beginV()); }$/;"	f	struct:NC::Menu	typeref:typename:ConstReverseValueIterator
rendV	src/curses/menu.h	/^	ReverseValueIterator rendV() { return ReverseValueIterator(beginV()); }$/;"	f	struct:NC::Menu	typeref:typename:ReverseValueIterator
repeat	src/mpdpp.h	/^	bool repeat() const { return mpd_status_get_repeat(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:bool
repeat	src/status.cpp	/^bool Status::State::repeat()$/;"	f	class:Status::State	typeref:typename:bool
replaceTag	src/mutable_song.cpp	/^void MutableSong::replaceTag(mpd_tag_type tag_type, std::string orig_value, const std::string &v/;"	f	class:MPD::MutableSong	typeref:typename:void
requestAlbumsUpdate	src/screens/media_library.h	/^	void requestAlbumsUpdate() { m_albums_update_request = true; }$/;"	f	struct:MediaLibrary	typeref:typename:void
requestContentUpdate	src/screens/playlist_editor.h	/^	void requestContentUpdate() { m_content_update_requested = true; }$/;"	f	struct:PlaylistEditor	typeref:typename:void
requestPlaylistsUpdate	src/screens/playlist_editor.h	/^	void requestPlaylistsUpdate() { m_playlists_update_requested = true; }$/;"	f	struct:PlaylistEditor	typeref:typename:void
requestSongsUpdate	src/screens/media_library.h	/^	void requestSongsUpdate() { m_songs_update_request = true; }$/;"	f	struct:MediaLibrary	typeref:typename:void
requestTagsUpdate	src/screens/media_library.h	/^	void requestTagsUpdate() { m_tags_update_request = true; }$/;"	f	struct:MediaLibrary	typeref:typename:void
requestUpdate	src/screens/browser.h	/^	void requestUpdate() { m_update_request = true; }$/;"	f	struct:Browser	typeref:typename:void
reset	src/curses/menu_impl.h	/^void Menu<ItemT>::reset()$/;"	f	class:NC::Menu	typeref:typename:void
reset	src/curses/scrollpad.cpp	/^void Scrollpad::reset()$/;"	f	class:NC::Scrollpad	typeref:typename:void
reset	src/screens/search_engine.cpp	/^void SearchEngine::reset()$/;"	f	class:SearchEngine	typeref:typename:void
resize	src/curses/scrollpad.cpp	/^void Scrollpad::resize(size_t new_width, size_t new_height)$/;"	f	class:NC::Scrollpad	typeref:typename:void
resize	src/curses/window.cpp	/^void Window::resize(size_t new_width, size_t new_height)$/;"	f	class:NC::Window	typeref:typename:void
resize	src/screens/browser.cpp	/^void Browser::resize()$/;"	f	class:Browser	typeref:typename:void
resize	src/screens/clock.cpp	/^void Clock::resize()$/;"	f	class:Clock	typeref:typename:void
resize	src/screens/help.cpp	/^void Help::resize()$/;"	f	class:Help	typeref:typename:void
resize	src/screens/lastfm.cpp	/^void Lastfm::resize()$/;"	f	class:Lastfm	typeref:typename:void
resize	src/screens/lyrics.cpp	/^void Lyrics::resize()$/;"	f	class:Lyrics	typeref:typename:void
resize	src/screens/media_library.cpp	/^void MediaLibrary::resize()$/;"	f	class:MediaLibrary	typeref:typename:void
resize	src/screens/outputs.cpp	/^void Outputs::resize()$/;"	f	class:Outputs	typeref:typename:void
resize	src/screens/playlist.cpp	/^void Playlist::resize()$/;"	f	class:Playlist	typeref:typename:void
resize	src/screens/playlist_editor.cpp	/^void PlaylistEditor::resize()$/;"	f	class:PlaylistEditor	typeref:typename:void
resize	src/screens/search_engine.cpp	/^void SearchEngine::resize()$/;"	f	class:SearchEngine	typeref:typename:void
resize	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::resize()$/;"	f	class:SelectedItemsAdder	typeref:typename:void
resize	src/screens/server_info.cpp	/^void ServerInfo::resize()$/;"	f	class:ServerInfo	typeref:typename:void
resize	src/screens/song_info.cpp	/^void SongInfo::resize()$/;"	f	class:SongInfo	typeref:typename:void
resize	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::resize()$/;"	f	class:SortPlaylistDialog	typeref:typename:void
resize	src/screens/tag_editor.cpp	/^void TagEditor::resize()$/;"	f	class:TagEditor	typeref:typename:void
resize	src/screens/tiny_tag_editor.cpp	/^void TinyTagEditor::resize()$/;"	f	class:TinyTagEditor	typeref:typename:void
resize	src/screens/visualizer.cpp	/^void Visualizer::resize()$/;"	f	class:Visualizer	typeref:typename:void
resizeList	src/curses/menu_impl.h	/^void Menu<ItemT>::resizeList(size_t new_size)$/;"	f	class:NC::Menu	typeref:typename:void
resizeScreen	src/actions.cpp	/^void resizeScreen(bool reload_main_window)$/;"	f	namespace:Actions	typeref:typename:void
reverse	src/curses/window.cpp	/^void Window::reverse(bool reverse_state) const$/;"	f	class:NC::Window	typeref:typename:void
reverseFormat	src/curses/window.cpp	/^NC::Format reverseFormat(NC::Format fmt)$/;"	f	namespace:NC	typeref:typename:NC::Format
reverseSelectionHelper	src/helpers.h	/^void reverseSelectionHelper(Iterator first, Iterator last)$/;"	f	typeref:typename:void
rgmAlbum	src/mpdpp.h	/^enum ReplayGainMode { rgmOff, rgmTrack, rgmAlbum };$/;"	e	enum:MPD::ReplayGainMode
rgmOff	src/mpdpp.h	/^enum ReplayGainMode { rgmOff, rgmTrack, rgmAlbum };$/;"	e	enum:MPD::ReplayGainMode
rgmTrack	src/mpdpp.h	/^enum ReplayGainMode { rgmOff, rgmTrack, rgmAlbum };$/;"	e	enum:MPD::ReplayGainMode
right_alignment	src/settings.h	/^	bool right_alignment;$/;"	m	struct:Column	typeref:typename:bool
rl	src/curses/window.cpp	/^namespace rl {$/;"	n	namespace:__anon91c40e690111	file:
run	src/actions.cpp	/^void Add::run()$/;"	f	class:Actions::Add	typeref:typename:void
run	src/actions.cpp	/^void AddItemToPlaylist::run()$/;"	f	class:Actions::AddItemToPlaylist	typeref:typename:void
run	src/actions.cpp	/^void AddRandomItems::run()$/;"	f	class:Actions::AddRandomItems	typeref:typename:void
run	src/actions.cpp	/^void AddSelectedItems::run()$/;"	f	class:Actions::AddSelectedItems	typeref:typename:void
run	src/actions.cpp	/^void ApplyFilter::run()$/;"	f	class:Actions::ApplyFilter	typeref:typename:void
run	src/actions.cpp	/^void ChangeBrowseMode::run()$/;"	f	class:Actions::ChangeBrowseMode	typeref:typename:void
run	src/actions.cpp	/^void ClearMainPlaylist::run()$/;"	f	class:Actions::ClearMainPlaylist	typeref:typename:void
run	src/actions.cpp	/^void ClearPlaylist::run()$/;"	f	class:Actions::ClearPlaylist	typeref:typename:void
run	src/actions.cpp	/^void CropMainPlaylist::run()$/;"	f	class:Actions::CropMainPlaylist	typeref:typename:void
run	src/actions.cpp	/^void CropPlaylist::run()$/;"	f	class:Actions::CropPlaylist	typeref:typename:void
run	src/actions.cpp	/^void DeleteBrowserItems::run()$/;"	f	class:Actions::DeleteBrowserItems	typeref:typename:void
run	src/actions.cpp	/^void DeletePlaylistItems::run()$/;"	f	class:Actions::DeletePlaylistItems	typeref:typename:void
run	src/actions.cpp	/^void DeleteStoredPlaylist::run()$/;"	f	class:Actions::DeleteStoredPlaylist	typeref:typename:void
run	src/actions.cpp	/^void EditDirectoryName::run()$/;"	f	class:Actions::EditDirectoryName	typeref:typename:void
run	src/actions.cpp	/^void EditLibraryAlbum::run()$/;"	f	class:Actions::EditLibraryAlbum	typeref:typename:void
run	src/actions.cpp	/^void EditLibraryTag::run()$/;"	f	class:Actions::EditLibraryTag	typeref:typename:void
run	src/actions.cpp	/^void EditLyrics::run()$/;"	f	class:Actions::EditLyrics	typeref:typename:void
run	src/actions.cpp	/^void EditPlaylistName::run()$/;"	f	class:Actions::EditPlaylistName	typeref:typename:void
run	src/actions.cpp	/^void EditSong::run()$/;"	f	class:Actions::EditSong	typeref:typename:void
run	src/actions.cpp	/^void EnterDirectory::run()$/;"	f	class:Actions::EnterDirectory	typeref:typename:void
run	src/actions.cpp	/^void ExecuteCommand::run()$/;"	f	class:Actions::ExecuteCommand	typeref:typename:void
run	src/actions.cpp	/^void FetchLyricsInBackground::run()$/;"	f	class:Actions::FetchLyricsInBackground	typeref:typename:void
run	src/actions.cpp	/^void Find::run()$/;"	f	class:Actions::Find	typeref:typename:void
run	src/actions.cpp	/^void FindItemBackward::run()$/;"	f	class:Actions::FindItemBackward	typeref:typename:void
run	src/actions.cpp	/^void FindItemForward::run()$/;"	f	class:Actions::FindItemForward	typeref:typename:void
run	src/actions.cpp	/^void JumpToBrowser::run()$/;"	f	class:Actions::JumpToBrowser	typeref:typename:void
run	src/actions.cpp	/^void JumpToMediaLibrary::run()$/;"	f	class:Actions::JumpToMediaLibrary	typeref:typename:void
run	src/actions.cpp	/^void JumpToParentDirectory::run()$/;"	f	class:Actions::JumpToParentDirectory	typeref:typename:void
run	src/actions.cpp	/^void JumpToPlayingSong::run()$/;"	f	class:Actions::JumpToPlayingSong	typeref:typename:void
run	src/actions.cpp	/^void JumpToPlaylistEditor::run()$/;"	f	class:Actions::JumpToPlaylistEditor	typeref:typename:void
run	src/actions.cpp	/^void JumpToPositionInSong::run()$/;"	f	class:Actions::JumpToPositionInSong	typeref:typename:void
run	src/actions.cpp	/^void JumpToTagEditor::run()$/;"	f	class:Actions::JumpToTagEditor	typeref:typename:void
run	src/actions.cpp	/^void MasterScreen::run()$/;"	f	class:Actions::MasterScreen	typeref:typename:void
run	src/actions.cpp	/^void MouseEvent::run()$/;"	f	class:Actions::MouseEvent	typeref:typename:void
run	src/actions.cpp	/^void MoveEnd::run()$/;"	f	class:Actions::MoveEnd	typeref:typename:void
run	src/actions.cpp	/^void MoveHome::run()$/;"	f	class:Actions::MoveHome	typeref:typename:void
run	src/actions.cpp	/^void MoveSelectedItemsDown::run()$/;"	f	class:Actions::MoveSelectedItemsDown	typeref:typename:void
run	src/actions.cpp	/^void MoveSelectedItemsTo::run()$/;"	f	class:Actions::MoveSelectedItemsTo	typeref:typename:void
run	src/actions.cpp	/^void MoveSelectedItemsUp::run()$/;"	f	class:Actions::MoveSelectedItemsUp	typeref:typename:void
run	src/actions.cpp	/^void MoveSortOrderDown::run()$/;"	f	class:Actions::MoveSortOrderDown	typeref:typename:void
run	src/actions.cpp	/^void MoveSortOrderUp::run()$/;"	f	class:Actions::MoveSortOrderUp	typeref:typename:void
run	src/actions.cpp	/^void NextColumn::run()$/;"	f	class:Actions::NextColumn	typeref:typename:void
run	src/actions.cpp	/^void NextFoundItem::run()$/;"	f	class:Actions::NextFoundItem	typeref:typename:void
run	src/actions.cpp	/^void NextScreen::run()$/;"	f	class:Actions::NextScreen	typeref:typename:void
run	src/actions.cpp	/^void NextSong::run()$/;"	f	class:Actions::NextSong	typeref:typename:void
run	src/actions.cpp	/^void PageDown::run()$/;"	f	class:Actions::PageDown	typeref:typename:void
run	src/actions.cpp	/^void PageUp::run()$/;"	f	class:Actions::PageUp	typeref:typename:void
run	src/actions.cpp	/^void Pause::run()$/;"	f	class:Actions::Pause	typeref:typename:void
run	src/actions.cpp	/^void Play::run()$/;"	f	class:Actions::Play	typeref:typename:void
run	src/actions.cpp	/^void PlayItem::run()$/;"	f	class:Actions::PlayItem	typeref:typename:void
run	src/actions.cpp	/^void PreviousColumn::run()$/;"	f	class:Actions::PreviousColumn	typeref:typename:void
run	src/actions.cpp	/^void PreviousFoundItem::run()$/;"	f	class:Actions::PreviousFoundItem	typeref:typename:void
run	src/actions.cpp	/^void PreviousScreen::run()$/;"	f	class:Actions::PreviousScreen	typeref:typename:void
run	src/actions.cpp	/^void PreviousSong::run()$/;"	f	class:Actions::PreviousSong	typeref:typename:void
run	src/actions.cpp	/^void Quit::run()$/;"	f	class:Actions::Quit	typeref:typename:void
run	src/actions.cpp	/^void RefetchLyrics::run()$/;"	f	class:Actions::RefetchLyrics	typeref:typename:void
run	src/actions.cpp	/^void RemoveSelection::run()$/;"	f	class:Actions::RemoveSelection	typeref:typename:void
run	src/actions.cpp	/^void ReplaySong::run()$/;"	f	class:Actions::ReplaySong	typeref:typename:void
run	src/actions.cpp	/^void ResetSearchEngine::run()$/;"	f	class:Actions::ResetSearchEngine	typeref:typename:void
run	src/actions.cpp	/^void ReversePlaylist::run()$/;"	f	class:Actions::ReversePlaylist	typeref:typename:void
run	src/actions.cpp	/^void ReverseSelection::run()$/;"	f	class:Actions::ReverseSelection	typeref:typename:void
run	src/actions.cpp	/^void RunAction::run()$/;"	f	class:Actions::RunAction	typeref:typename:void
run	src/actions.cpp	/^void SavePlaylist::run()$/;"	f	class:Actions::SavePlaylist	typeref:typename:void
run	src/actions.cpp	/^void SaveTagChanges::run()$/;"	f	class:Actions::SaveTagChanges	typeref:typename:void
run	src/actions.cpp	/^void ScrollDown::run()$/;"	f	class:Actions::ScrollDown	typeref:typename:void
run	src/actions.cpp	/^void ScrollDownAlbum::run()$/;"	f	class:Actions::ScrollDownAlbum	typeref:typename:void
run	src/actions.cpp	/^void ScrollDownArtist::run()$/;"	f	class:Actions::ScrollDownArtist	typeref:typename:void
run	src/actions.cpp	/^void ScrollUp::run()$/;"	f	class:Actions::ScrollUp	typeref:typename:void
run	src/actions.cpp	/^void ScrollUpAlbum::run()$/;"	f	class:Actions::ScrollUpAlbum	typeref:typename:void
run	src/actions.cpp	/^void ScrollUpArtist::run()$/;"	f	class:Actions::ScrollUpArtist	typeref:typename:void
run	src/actions.cpp	/^void SeekBackward::run()$/;"	f	class:Actions::SeekBackward	typeref:typename:void
run	src/actions.cpp	/^void SeekForward::run()$/;"	f	class:Actions::SeekForward	typeref:typename:void
run	src/actions.cpp	/^void SelectAlbum::run()$/;"	f	class:Actions::SelectAlbum	typeref:typename:void
run	src/actions.cpp	/^void SelectFoundItems::run()$/;"	f	class:Actions::SelectFoundItems	typeref:typename:void
run	src/actions.cpp	/^void SelectItem::run()$/;"	f	class:Actions::SelectItem	typeref:typename:void
run	src/actions.cpp	/^void SelectRange::run()$/;"	f	class:Actions::SelectRange	typeref:typename:void
run	src/actions.cpp	/^void SetCrossfade::run()$/;"	f	class:Actions::SetCrossfade	typeref:typename:void
run	src/actions.cpp	/^void SetSelectedItemsPriority::run()$/;"	f	class:Actions::SetSelectedItemsPriority	typeref:typename:void
run	src/actions.cpp	/^void SetVolume::run()$/;"	f	class:Actions::SetVolume	typeref:typename:void
run	src/actions.cpp	/^void ShowArtistInfo::run()$/;"	f	class:Actions::ShowArtistInfo	typeref:typename:void
run	src/actions.cpp	/^void ShowBrowser::run()$/;"	f	class:Actions::ShowBrowser	typeref:typename:void
run	src/actions.cpp	/^void ShowClock::run()$/;"	f	class:Actions::ShowClock	typeref:typename:void
run	src/actions.cpp	/^void ShowHelp::run()$/;"	f	class:Actions::ShowHelp	typeref:typename:void
run	src/actions.cpp	/^void ShowLyrics::run()$/;"	f	class:Actions::ShowLyrics	typeref:typename:void
run	src/actions.cpp	/^void ShowMediaLibrary::run()$/;"	f	class:Actions::ShowMediaLibrary	typeref:typename:void
run	src/actions.cpp	/^void ShowOutputs::run()$/;"	f	class:Actions::ShowOutputs	typeref:typename:void
run	src/actions.cpp	/^void ShowPlaylist::run()$/;"	f	class:Actions::ShowPlaylist	typeref:typename:void
run	src/actions.cpp	/^void ShowPlaylistEditor::run()$/;"	f	class:Actions::ShowPlaylistEditor	typeref:typename:void
run	src/actions.cpp	/^void ShowSearchEngine::run()$/;"	f	class:Actions::ShowSearchEngine	typeref:typename:void
run	src/actions.cpp	/^void ShowServerInfo::run()$/;"	f	class:Actions::ShowServerInfo	typeref:typename:void
run	src/actions.cpp	/^void ShowSongInfo::run()$/;"	f	class:Actions::ShowSongInfo	typeref:typename:void
run	src/actions.cpp	/^void ShowTagEditor::run()$/;"	f	class:Actions::ShowTagEditor	typeref:typename:void
run	src/actions.cpp	/^void ShowVisualizer::run()$/;"	f	class:Actions::ShowVisualizer	typeref:typename:void
run	src/actions.cpp	/^void Shuffle::run()$/;"	f	class:Actions::Shuffle	typeref:typename:void
run	src/actions.cpp	/^void SlaveScreen::run()$/;"	f	class:Actions::SlaveScreen	typeref:typename:void
run	src/actions.cpp	/^void SortPlaylist::run()$/;"	f	class:Actions::SortPlaylist	typeref:typename:void
run	src/actions.cpp	/^void StartSearching::run()$/;"	f	class:Actions::StartSearching	typeref:typename:void
run	src/actions.cpp	/^void Stop::run()$/;"	f	class:Actions::Stop	typeref:typename:void
run	src/actions.cpp	/^void ToggleAddMode::run()$/;"	f	class:Actions::ToggleAddMode	typeref:typename:void
run	src/actions.cpp	/^void ToggleBitrateVisibility::run()$/;"	f	class:Actions::ToggleBitrateVisibility	typeref:typename:void
run	src/actions.cpp	/^void ToggleBrowserSortMode::run()$/;"	f	class:Actions::ToggleBrowserSortMode	typeref:typename:void
run	src/actions.cpp	/^void ToggleConsume::run()$/;"	f	class:Actions::ToggleConsume	typeref:typename:void
run	src/actions.cpp	/^void ToggleCrossfade::run()$/;"	f	class:Actions::ToggleCrossfade	typeref:typename:void
run	src/actions.cpp	/^void ToggleDisplayMode::run()$/;"	f	class:Actions::ToggleDisplayMode	typeref:typename:void
run	src/actions.cpp	/^void ToggleFetchingLyricsInBackground::run()$/;"	f	class:Actions::ToggleFetchingLyricsInBackground	typeref:typename:void
run	src/actions.cpp	/^void ToggleFindMode::run()$/;"	f	class:Actions::ToggleFindMode	typeref:typename:void
run	src/actions.cpp	/^void ToggleInterface::run()$/;"	f	class:Actions::ToggleInterface	typeref:typename:void
run	src/actions.cpp	/^void ToggleLibraryTagType::run()$/;"	f	class:Actions::ToggleLibraryTagType	typeref:typename:void
run	src/actions.cpp	/^void ToggleLyricsFetcher::run()$/;"	f	class:Actions::ToggleLyricsFetcher	typeref:typename:void
run	src/actions.cpp	/^void ToggleLyricsUpdateOnSongChange::run()$/;"	f	class:Actions::ToggleLyricsUpdateOnSongChange	typeref:typename:void
run	src/actions.cpp	/^void ToggleMediaLibraryColumnsMode::run()$/;"	f	class:Actions::ToggleMediaLibraryColumnsMode	typeref:typename:void
run	src/actions.cpp	/^void ToggleMediaLibrarySortMode::run()$/;"	f	class:Actions::ToggleMediaLibrarySortMode	typeref:typename:void
run	src/actions.cpp	/^void ToggleMouse::run()$/;"	f	class:Actions::ToggleMouse	typeref:typename:void
run	src/actions.cpp	/^void ToggleOutput::run()$/;"	f	class:Actions::ToggleOutput	typeref:typename:void
run	src/actions.cpp	/^void TogglePlayingSongCentering::run()$/;"	f	class:Actions::TogglePlayingSongCentering	typeref:typename:void
run	src/actions.cpp	/^void ToggleRandom::run()$/;"	f	class:Actions::ToggleRandom	typeref:typename:void
run	src/actions.cpp	/^void ToggleRepeat::run()$/;"	f	class:Actions::ToggleRepeat	typeref:typename:void
run	src/actions.cpp	/^void ToggleReplayGainMode::run()$/;"	f	class:Actions::ToggleReplayGainMode	typeref:typename:void
run	src/actions.cpp	/^void ToggleScreenLock::run()$/;"	f	class:Actions::ToggleScreenLock	typeref:typename:void
run	src/actions.cpp	/^void ToggleSeparatorsBetweenAlbums::run()$/;"	f	class:Actions::ToggleSeparatorsBetweenAlbums	typeref:typename:void
run	src/actions.cpp	/^void ToggleSingle::run()$/;"	f	class:Actions::ToggleSingle	typeref:typename:void
run	src/actions.cpp	/^void ToggleVisualizationType::run()$/;"	f	class:Actions::ToggleVisualizationType	typeref:typename:void
run	src/actions.cpp	/^void UpdateDatabase::run()$/;"	f	class:Actions::UpdateDatabase	typeref:typename:void
run	src/actions.cpp	/^void UpdateEnvironment::run()$/;"	f	class:Actions::UpdateEnvironment	typeref:typename:void
run	src/actions.cpp	/^void UpdateEnvironment::run(bool update_timer, bool refresh_window, bool mpd_sync)$/;"	f	class:Actions::UpdateEnvironment	typeref:typename:void
run	src/actions.cpp	/^void VolumeDown::run()$/;"	f	class:Actions::VolumeDown	typeref:typename:void
run	src/actions.cpp	/^void VolumeUp::run()$/;"	f	class:Actions::VolumeUp	typeref:typename:void
run	src/actions.h	/^	virtual void run() override { }$/;"	f	struct:Actions::Dummy	typeref:typename:void
run	src/macro_utilities.cpp	/^void PushCharacters::run()$/;"	f	class:Actions::PushCharacters	typeref:typename:void
run	src/macro_utilities.cpp	/^void RunExternalCommand::run()$/;"	f	class:Actions::RunExternalCommand	typeref:typename:void
run	src/macro_utilities.h	/^	virtual void run() override { }$/;"	f	struct:Actions::RequireRunnable	typeref:typename:void
run	src/macro_utilities.h	/^	virtual void run() override { }$/;"	f	struct:Actions::RequireScreen	typeref:typename:void
run	src/runnable_item.h	/^	typename Function::result_type run(Args&&... args) const$/;"	f	struct:RunnableItem	typeref:typename:Function::result_type
run	src/utility/option_parser.cpp	/^bool option_parser::run(std::istream &is, bool ignore_errors)$/;"	f	class:option_parser	typeref:typename:bool
runAction	src/screens/search_engine.cpp	/^void SearchEngine::runAction()$/;"	f	class:SearchEngine	typeref:typename:void
runAction	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::runAction()$/;"	f	class:SelectedItemsAdder	typeref:typename:void
runAction	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::runAction()$/;"	f	class:SortPlaylistDialog	typeref:typename:void
runAction	src/screens/tag_editor.cpp	/^void TagEditor::runAction()$/;"	f	class:TagEditor	typeref:typename:void
runAction	src/screens/tiny_tag_editor.cpp	/^void TinyTagEditor::runAction()$/;"	f	class:TinyTagEditor	typeref:typename:void
runPromptHook	src/curses/window.cpp	/^bool Window::runPromptHook(const char *arg, bool *done) const$/;"	f	class:NC::Window	typeref:typename:bool
run_resize_screen	src/ncmpcpp.cpp	/^volatile bool run_resize_screen = false;$/;"	v	namespace:__anona90627fe0111	typeref:typename:volatile bool
running	src/screens/lyrics.h	/^		bool running;$/;"	m	struct:Lyrics::ConsumerState	typeref:typename:bool
saveLyrics	src/screens/lyrics.cpp	/^bool saveLyrics(const std::string &filename, const std::string &lyrics)$/;"	f	namespace:__anon5d75aa650111	typeref:typename:bool
sbindir	src/Makefile.in	/^sbindir = @sbindir@$/;"	m
screenTypeToString	src/screens/screen_type.cpp	/^std::string screenTypeToString(ScreenType st)$/;"	f	typeref:typename:std::string
screen_sequence	src/settings.h	/^	std::vector<ScreenType> screen_sequence;$/;"	m	struct:Configuration	typeref:typename:std::vector<ScreenType>
screen_switcher_previous	src/settings.h	/^	bool screen_switcher_previous;$/;"	m	struct:Configuration	typeref:typename:bool
screens/$(DEPDIR)/$(am__dirstamp)	src/Makefile.in	/^screens\/$(DEPDIR)\/$(am__dirstamp):$/;"	t
screens/$(am__dirstamp)	src/Makefile.in	/^screens\/$(am__dirstamp):$/;"	t
screens/browser.$(OBJEXT)	src/Makefile.in	/^screens\/browser.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/clock.$(OBJEXT)	src/Makefile.in	/^screens\/clock.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/help.$(OBJEXT)	src/Makefile.in	/^screens\/help.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/lastfm.$(OBJEXT)	src/Makefile.in	/^screens\/lastfm.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/lyrics.$(OBJEXT)	src/Makefile.in	/^screens\/lyrics.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/media_library.$(OBJEXT)	src/Makefile.in	/^screens\/media_library.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/outputs.$(OBJEXT)	src/Makefile.in	/^screens\/outputs.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/playlist.$(OBJEXT)	src/Makefile.in	/^screens\/playlist.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/playlist_editor.$(OBJEXT)	src/Makefile.in	/^screens\/playlist_editor.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/screen.$(OBJEXT)	src/Makefile.in	/^screens\/screen.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/screen_type.$(OBJEXT)	src/Makefile.in	/^screens\/screen_type.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/search_engine.$(OBJEXT)	src/Makefile.in	/^screens\/search_engine.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/sel_items_adder.$(OBJEXT)	src/Makefile.in	/^screens\/sel_items_adder.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/server_info.$(OBJEXT)	src/Makefile.in	/^screens\/server_info.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/song_info.$(OBJEXT)	src/Makefile.in	/^screens\/song_info.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/sort_playlist.$(OBJEXT)	src/Makefile.in	/^screens\/sort_playlist.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/tag_editor.$(OBJEXT)	src/Makefile.in	/^screens\/tag_editor.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/tiny_tag_editor.$(OBJEXT)	src/Makefile.in	/^screens\/tiny_tag_editor.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
screens/visualizer.$(OBJEXT)	src/Makefile.in	/^screens\/visualizer.$(OBJEXT): screens\/$(am__dirstamp) \\$/;"	t
scroll	src/curses/menu_impl.h	/^void Menu<ItemT>::scroll(Scroll where)$/;"	f	class:NC::Menu	typeref:typename:void
scroll	src/curses/scrollpad.cpp	/^void Scrollpad::scroll(Scroll where)$/;"	f	class:NC::Scrollpad	typeref:typename:void
scroll	src/curses/window.cpp	/^void Window::scroll(Scroll where)$/;"	f	class:NC::Window	typeref:typename:void
scroll	src/screens/clock.h	/^	virtual void scroll(NC::Scroll) override { }$/;"	f	struct:Clock	typeref:typename:void
scroll	src/screens/screen.h	/^	virtual void scroll(NC::Scroll where) override {$/;"	f	struct:Screen	typeref:typename:void
scroll	src/screens/visualizer.h	/^	virtual void scroll(NC::Scroll) override { }$/;"	f	struct:Visualizer	typeref:typename:void
scrollTagCanBeRun	src/actions.cpp	/^bool scrollTagCanBeRun(NC::List *&list, const SongList *&songs)$/;"	f	namespace:__anon343209de0411	typeref:typename:bool
scrollTagDownRun	src/actions.cpp	/^void scrollTagDownRun(NC::List *list, const SongList *songs, MPD::Song::GetFunction get)$/;"	f	namespace:__anon343209de0411	typeref:typename:void
scrollTagUpRun	src/actions.cpp	/^void scrollTagUpRun(NC::List *list, const SongList *songs, MPD::Song::GetFunction get)$/;"	f	namespace:__anon343209de0411	typeref:typename:void
scrollpadMouseButtonPressed	src/screens/screen.cpp	/^void scrollpadMouseButtonPressed(NC::Scrollpad &w, MEVENT me)$/;"	f	typeref:typename:void
search	src/helpers.h	/^bool search(NC::Menu<ItemT> &m, const PredicateT &pred,$/;"	f	typeref:typename:bool
search	src/regex_filter.h	/^inline bool search(const std::basic_string<CharT> &s,$/;"	f	namespace:Regex	typeref:typename:bool
search	src/screens/browser.cpp	/^bool Browser::search(SearchDirection direction, bool wrap, bool skip_current)$/;"	f	class:Browser	typeref:typename:bool
search	src/screens/media_library.cpp	/^bool MediaLibrary::search(SearchDirection direction, bool wrap, bool skip_current)$/;"	f	class:MediaLibrary	typeref:typename:bool
search	src/screens/playlist.cpp	/^bool Playlist::search(SearchDirection direction, bool wrap, bool skip_current)$/;"	f	class:Playlist	typeref:typename:bool
search	src/screens/playlist_editor.cpp	/^bool PlaylistEditor::search(SearchDirection direction, bool wrap, bool skip_current)$/;"	f	class:PlaylistEditor	typeref:typename:bool
search	src/screens/search_engine.cpp	/^bool SearchEngine::search(SearchDirection direction, bool wrap, bool skip_current)$/;"	f	class:SearchEngine	typeref:typename:bool
search	src/screens/sel_items_adder.cpp	/^bool SelectedItemsAdder::search(SearchDirection direction, bool wrap, bool skip_current)$/;"	f	class:SelectedItemsAdder	typeref:typename:bool
search	src/screens/tag_editor.cpp	/^bool TagEditor::search(SearchDirection direction, bool wrap, bool skip_current)$/;"	f	class:TagEditor	typeref:typename:bool
searchConstraint	src/screens/browser.cpp	/^const std::string &Browser::searchConstraint()$/;"	f	class:Browser	typeref:typename:const std::string &
searchConstraint	src/screens/media_library.cpp	/^const std::string &MediaLibrary::searchConstraint()$/;"	f	class:MediaLibrary	typeref:typename:const std::string &
searchConstraint	src/screens/playlist.cpp	/^const std::string &Playlist::searchConstraint()$/;"	f	class:Playlist	typeref:typename:const std::string &
searchConstraint	src/screens/playlist_editor.cpp	/^const std::string &PlaylistEditor::searchConstraint()$/;"	f	class:PlaylistEditor	typeref:typename:const std::string &
searchConstraint	src/screens/search_engine.cpp	/^const std::string &SearchEngine::searchConstraint()$/;"	f	class:SearchEngine	typeref:typename:const std::string &
searchConstraint	src/screens/sel_items_adder.cpp	/^const std::string &SelectedItemsAdder::searchConstraint()$/;"	f	class:SelectedItemsAdder	typeref:typename:const std::string &
searchConstraint	src/screens/tag_editor.cpp	/^const std::string &TagEditor::searchConstraint()$/;"	f	class:TagEditor	typeref:typename:const std::string &
search_engine_default_search_mode	src/settings.h	/^	unsigned search_engine_default_search_mode;$/;"	m	struct:Configuration	typeref:typename:unsigned
search_engine_display_mode	src/settings.h	/^	DisplayMode search_engine_display_mode;$/;"	m	struct:Configuration	typeref:typename:DisplayMode
search_in_db	src/settings.h	/^	bool search_in_db;$/;"	m	struct:Configuration	typeref:typename:bool
second_line_scroll_begin	src/status.cpp	/^size_t second_line_scroll_begin = 0;$/;"	v	namespace:__anon855393f10111	typeref:typename:size_t
section	src/screens/help.cpp	/^void section(NC::Scrollpad &w, const char *type_, const char *title_)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:void
seek	src/actions.cpp	/^void seek(SearchDirection sd)$/;"	f	namespace:__anon343209de0411	typeref:typename:void
seek_time	src/settings.h	/^	unsigned seek_time;$/;"	m	struct:Configuration	typeref:typename:unsigned
selectCurrentIfNoneSelected	src/helpers.h	/^void selectCurrentIfNoneSelected(NC::Menu<T> &m)$/;"	f	typeref:typename:void
selected_item_prefix	src/settings.h	/^	NC::Buffer selected_item_prefix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
selected_item_prefix_length	src/settings.h	/^	size_t selected_item_prefix_length;$/;"	m	struct:Configuration	typeref:typename:size_t
selected_item_suffix	src/settings.h	/^	NC::Buffer selected_item_suffix;$/;"	m	struct:Configuration	typeref:typename:NC::Buffer
selected_item_suffix_length	src/settings.h	/^	size_t selected_item_suffix_length;$/;"	m	struct:Configuration	typeref:typename:size_t
set	src/helpers.h	/^	void set(ReapplyFilter reapply_filter, bool refresh)$/;"	f	struct:ScopedUnfilteredMenu	typeref:typename:void
setAlbum	src/mutable_song.cpp	/^void MutableSong::setAlbum(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setAlbumArtist	src/mutable_song.cpp	/^void MutableSong::setAlbumArtist(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setArtist	src/mutable_song.cpp	/^void MutableSong::setArtist(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setAttribute	src/tags.cpp	/^void setAttribute(mpd_song *s, const char *name, const std::string &value)$/;"	f	namespace:Tags	typeref:typename:void
setBaseColor	src/curses/window.cpp	/^void Window::setBaseColor(const Color &color)$/;"	f	class:NC::Window	typeref:typename:void
setBorder	src/curses/window.cpp	/^void Window::setBorder(Border border)$/;"	f	class:NC::Window	typeref:typename:void
setColor	src/curses/window.cpp	/^void Window::setColor(Color c)$/;"	f	class:NC::Window	typeref:typename:void
setComment	src/mutable_song.cpp	/^void MutableSong::setComment(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setComposer	src/mutable_song.cpp	/^void MutableSong::setComposer(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setDate	src/mutable_song.cpp	/^void MutableSong::setDate(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setDimensions	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::setDimensions()$/;"	f	class:SelectedItemsAdder	typeref:typename:void
setDimensions	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::setDimensions()$/;"	f	class:SortPlaylistDialog	typeref:typename:void
setDisc	src/mutable_song.cpp	/^void MutableSong::setDisc(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setDuration	src/mutable_song.cpp	/^void MutableSong::setDuration(unsigned int duration)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setGenre	src/mutable_song.cpp	/^void MutableSong::setGenre(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setHighlightFixes	src/helpers.h	/^void setHighlightFixes(NC::Menu<T> &m)$/;"	f	typeref:typename:void
setHighlightInactiveColumnFixes	src/helpers.h	/^void setHighlightInactiveColumnFixes(NC::Menu<T> &m)$/;"	f	typeref:typename:void
setHighlightPrefix	src/curses/menu.h	/^	void setHighlightPrefix(const Buffer &b) { m_highlight_prefix = b; }$/;"	f	struct:NC::Menu	typeref:typename:void
setHighlightSuffix	src/curses/menu.h	/^	void setHighlightSuffix(const Buffer &b) { m_highlight_suffix = b; }$/;"	f	struct:NC::Menu	typeref:typename:void
setHighlighting	src/curses/menu.h	/^	void setHighlighting(bool state) { m_highlight_enabled = state; }$/;"	f	struct:NC::Menu	typeref:typename:void
setInactive	src/curses/menu.h	/^		void setInactive (bool is_inactive) { properties().setInactive(is_inactive); }$/;"	f	struct:NC::Menu::Item	typeref:typename:void
setInactive	src/curses/menu.h	/^		void setInactive(bool is_inactive)$/;"	f	struct:NC::List::Properties	typeref:typename:void
setItemDisplayer	src/curses/menu_impl.h	/^void Menu<ItemT>::setItemDisplayer(ItemDisplayerT &&displayer)$/;"	f	class:NC::Menu	typeref:typename:void
setMTime	src/mutable_song.cpp	/^void MutableSong::setMTime(time_t mtime)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setNewName	src/mutable_song.cpp	/^void MutableSong::setNewName(const std::string &value)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setNoidleCallback	src/mpdpp.cpp	/^void Connection::setNoidleCallback(NoidleCallback callback)$/;"	f	class:MPD::Connection	typeref:typename:void
setObject	src/mpdpp.h	/^		void setObject(ObjectT object)$/;"	f	struct:MPD::Iterator::State	typeref:typename:void
setPerformer	src/mutable_song.cpp	/^void MutableSong::setPerformer(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setPreviousScreen	src/interfaces.h	/^	void setPreviousScreen(BaseScreen *screen) {$/;"	f	struct:Tabbable	typeref:typename:void
setPromptHook	src/curses/window.h	/^	void setPromptHook(HookT &&hook) {$/;"	f	struct:NC::Window	typeref:typename:void
setProperties	src/curses/scrollpad.cpp	/^bool Scrollpad::setProperties(const Color &begin, const std::string &s,$/;"	f	class:NC::Scrollpad	typeref:typename:bool
setProperties	src/curses/scrollpad.cpp	/^bool Scrollpad::setProperties(const Format &begin, const std::string &s,$/;"	f	class:NC::Scrollpad	typeref:typename:bool
setProperties	src/curses/scrollpad.cpp	/^bool Scrollpad::setProperties(const FormattedColor &fc, const std::string &s,$/;"	f	class:NC::Scrollpad	typeref:typename:bool
setProperties	src/display.cpp	/^void setProperties(NC::Menu<T> &menu, const MPD::Song &s, const SongList &list,$/;"	f	namespace:__anond902be230111	typeref:typename:void
setResizeFlags	src/actions.cpp	/^void setResizeFlags()$/;"	f	namespace:Actions	typeref:typename:void
setSearchConstraint	src/screens/browser.cpp	/^void Browser::setSearchConstraint(const std::string &constraint)$/;"	f	class:Browser	typeref:typename:void
setSearchConstraint	src/screens/media_library.cpp	/^void MediaLibrary::setSearchConstraint(const std::string &constraint)$/;"	f	class:MediaLibrary	typeref:typename:void
setSearchConstraint	src/screens/playlist.cpp	/^void Playlist::setSearchConstraint(const std::string &constraint)$/;"	f	class:Playlist	typeref:typename:void
setSearchConstraint	src/screens/playlist_editor.cpp	/^void PlaylistEditor::setSearchConstraint(const std::string &constraint)$/;"	f	class:PlaylistEditor	typeref:typename:void
setSearchConstraint	src/screens/search_engine.cpp	/^void SearchEngine::setSearchConstraint(const std::string &constraint)$/;"	f	class:SearchEngine	typeref:typename:void
setSearchConstraint	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::setSearchConstraint(const std::string &constraint)$/;"	f	class:SelectedItemsAdder	typeref:typename:void
setSearchConstraint	src/screens/tag_editor.cpp	/^void TagEditor::setSearchConstraint(const std::string &constraint)$/;"	f	class:TagEditor	typeref:typename:void
setSelectable	src/curses/menu.h	/^		void setSelectable(bool is_selectable) { properties().setSelectable(is_selectable); }$/;"	f	struct:NC::Menu::Item	typeref:typename:void
setSelectable	src/curses/menu.h	/^		void setSelectable(bool is_selectable)$/;"	f	struct:NC::List::Properties	typeref:typename:void
setSelected	src/curses/menu.h	/^		void setSelected (bool is_selected) { properties().setSelected(is_selected); }$/;"	f	struct:NC::Menu::Item	typeref:typename:void
setSelected	src/curses/menu.h	/^		void setSelected(bool is_selected)$/;"	f	struct:NC::List::Properties	typeref:typename:void
setSelectedItemsPriority	src/screens/playlist.cpp	/^void Playlist::setSelectedItemsPriority(int prio)$/;"	f	class:Playlist	typeref:typename:void
setSelectedPrefix	src/curses/menu.h	/^	void setSelectedPrefix(const Buffer &b) { m_selected_prefix = b; }$/;"	f	struct:NC::Menu	typeref:typename:void
setSelectedSuffix	src/curses/menu.h	/^	void setSelectedSuffix(const Buffer &b) { m_selected_suffix = b; }$/;"	f	struct:NC::Menu	typeref:typename:void
setSeparator	src/curses/menu.h	/^		void setSeparator (bool is_separator) { properties().setSeparator(is_separator); }$/;"	f	struct:NC::Menu::Item	typeref:typename:void
setSeparator	src/curses/menu.h	/^		void setSeparator(bool is_separator)$/;"	f	struct:NC::List::Properties	typeref:typename:void
setTags	src/mutable_song.cpp	/^void MutableSong::setTags(SetFunction set, const std::string &value)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setTimeout	src/curses/window.cpp	/^void Window::setTimeout(int timeout)$/;"	f	class:NC::Window	typeref:typename:void
setTitle	src/curses/window.cpp	/^void Window::setTitle(const std::string &new_title)$/;"	f	class:NC::Window	typeref:typename:void
setTitle	src/mutable_song.cpp	/^void MutableSong::setTitle(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setTrack	src/mutable_song.cpp	/^void MutableSong::setTrack(const std::string &value, unsigned idx)$/;"	f	class:MPD::MutableSong	typeref:typename:void
setWindowsDimensions	src/actions.cpp	/^void setWindowsDimensions()$/;"	f	namespace:Actions	typeref:typename:void
set_window_title	src/settings.h	/^	bool set_window_title;$/;"	m	struct:Configuration	typeref:typename:bool
sharedstatedir	src/Makefile.in	/^sharedstatedir = @sharedstatedir@$/;"	m
showAllItems	src/curses/menu.h	/^	void showAllItems() { m_items = &m_all_items; }$/;"	f	struct:NC::Menu	typeref:typename:void
showFilteredItems	src/curses/menu.h	/^	void showFilteredItems() { m_items = &m_filtered_items; }$/;"	f	struct:NC::Menu	typeref:typename:void
showSongs	src/display.cpp	/^void showSongs(NC::Menu<T> &menu, const MPD::Song &s, const SongList &list, const Format::AST<ch/;"	f	namespace:__anond902be230111	typeref:typename:void
showSongsInColumns	src/display.cpp	/^void showSongsInColumns(NC::Menu<T> &menu, const MPD::Song &s, const SongList &list)$/;"	f	namespace:__anond902be230111	typeref:typename:void
sighandler	src/ncmpcpp.cpp	/^void sighandler(int sig)$/;"	f	namespace:__anona90627fe0111	typeref:typename:void
single	src/mpdpp.h	/^	bool single() const { return mpd_status_get_single(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:bool
single	src/status.cpp	/^bool Status::State::single()$/;"	f	class:Status::State	typeref:typename:bool
siteKeyword	src/lyrics_fetcher.h	/^	virtual const char *siteKeyword() const override { return nullptr; }$/;"	f	struct:InternetLyricsFetcher	typeref:typename:const char *
siteKeyword	src/lyrics_fetcher.h	/^	virtual const char *siteKeyword() const { return name(); }$/;"	f	struct:GoogleLyricsFetcher	typeref:typename:const char *
size	src/curses/menu.h	/^	virtual size_t size() const override { return m_items->size(); }$/;"	f	struct:NC::Menu	typeref:typename:size_t
song	src/mpdpp.h	/^	Song &song()$/;"	f	struct:MPD::Item	typeref:typename:Song &
song	src/mpdpp.h	/^	const Song &song() const$/;"	f	struct:MPD::Item	typeref:typename:const Song &
song	src/screens/lyrics.h	/^			const MPD::Song &song() const { return m_song; }$/;"	f	struct:Lyrics::ConsumerState::Song	typeref:typename:const MPD::Song &
song	src/screens/search_engine.h	/^	MPD::Song &song() { assert(m_is_song); return m_song; }$/;"	f	struct:SEItem	typeref:typename:MPD::Song &
song	src/screens/search_engine.h	/^	const MPD::Song &song() const { assert(m_is_song); return m_song; }$/;"	f	struct:SEItem	typeref:typename:const MPD::Song &
song	src/song_list.h	/^	MPD::Song *song()$/;"	f	struct:SongProperties	typeref:typename:MPD::Song *
song	src/song_list.h	/^	const MPD::Song *song() const$/;"	f	struct:SongProperties	typeref:typename:const MPD::Song *
songID	src/status.cpp	/^void Status::Changes::songID(int song_id)$/;"	f	class:Status::Changes	typeref:typename:void
songToString	src/screens/playlist.cpp	/^std::string songToString(const MPD::Song &s)$/;"	f	namespace:__anon8142dca10311	typeref:typename:std::string
song_columns_mode_format	src/settings.h	/^	Format::AST<char> song_columns_mode_format;$/;"	m	struct:Configuration	typeref:typename:Format::AST<char>
song_library_format	src/settings.h	/^	Format::AST<char> song_library_format;$/;"	m	struct:Configuration	typeref:typename:Format::AST<char>
song_list_format	src/settings.h	/^	Format::AST<char> song_list_format;$/;"	m	struct:Configuration	typeref:typename:Format::AST<char>
song_status_format	src/settings.h	/^	Format::AST<char> song_status_format;$/;"	m	struct:Configuration	typeref:typename:Format::AST<char>
song_status_wformat	src/settings.h	/^	Format::AST<wchar_t> song_status_wformat;$/;"	m	struct:Configuration	typeref:typename:Format::AST<wchar_t>
song_window_title_format	src/settings.h	/^	Format::AST<char> song_window_title_format;$/;"	m	struct:Configuration	typeref:typename:Format::AST<char>
songs	src/mpdpp.h	/^	unsigned songs() const { return mpd_stats_get_number_of_songs(m_stats.get()); }$/;"	f	struct:MPD::Statistics	typeref:typename:unsigned
songs	src/screens/lyrics.h	/^		std::queue<Song> songs;$/;"	m	struct:Lyrics::ConsumerState	typeref:typename:std::queue<Song>
sort	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::sort() const$/;"	f	class:SortPlaylistDialog	typeref:typename:void
space_add_mode	src/settings.h	/^	SpaceAddMode space_add_mode;$/;"	m	struct:Configuration	typeref:typename:SpaceAddMode
srcdir	src/Makefile.in	/^srcdir = @srcdir@$/;"	m
start_x	src/curses/window.cpp	/^size_t start_x;$/;"	v	namespace:__anon91c40e690111::rl	typeref:typename:size_t
start_y	src/curses/window.cpp	/^size_t start_y;$/;"	v	namespace:__anon91c40e690111::rl	typeref:typename:size_t
startup_screen_type	src/settings.h	/^	ScreenType startup_screen_type;$/;"	m	struct:Configuration	typeref:typename:ScreenType
startup_slave_screen_focus	src/settings.h	/^	bool startup_slave_screen_focus;$/;"	m	struct:Configuration	typeref:typename:bool
startup_slave_screen_type	src/settings.h	/^	boost::optional<ScreenType> startup_slave_screen_type;$/;"	m	struct:Configuration	typeref:typename:boost::optional<ScreenType>
state_flags_color	src/settings.h	/^	NC::FormattedColor state_flags_color;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
state_line_color	src/settings.h	/^	NC::FormattedColor state_line_color;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
statusbar_allow_unlock	src/statusbar.cpp	/^bool statusbar_allow_unlock = true;$/;"	v	namespace:__anond7be94460111	typeref:typename:bool
statusbar_block_update	src/statusbar.cpp	/^bool statusbar_block_update = false;$/;"	v	namespace:__anond7be94460111	typeref:typename:bool
statusbar_color	src/settings.h	/^	NC::Color statusbar_color;$/;"	m	struct:Configuration	typeref:typename:NC::Color
statusbar_lock_delay	src/statusbar.cpp	/^boost::posix_time::seconds statusbar_lock_delay(-1);$/;"	v	namespace:__anond7be94460111	typeref:typename:boost::posix_time::seconds
statusbar_lock_time	src/statusbar.cpp	/^boost::posix_time::ptime statusbar_lock_time;$/;"	v	namespace:__anond7be94460111	typeref:typename:boost::posix_time::ptime
statusbar_time_color	src/settings.h	/^	NC::FormattedColor statusbar_time_color;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
statusbar_visibility	src/settings.h	/^	bool statusbar_visibility;$/;"	m	struct:Configuration	typeref:typename:bool
stopDownload	src/screens/lyrics.cpp	/^void Lyrics::stopDownload()$/;"	f	class:Lyrics	typeref:typename:void
store_lyrics_in_song_dir	src/settings.h	/^	bool store_lyrics_in_song_dir;$/;"	m	struct:Configuration	typeref:typename:bool
storedPlaylists	src/status.cpp	/^void Status::Changes::storedPlaylists()$/;"	f	class:Status::Changes	typeref:typename:void
str	src/curses/strbuffer.h	/^	const StringType &str() const { return m_string; }$/;"	f	class:NC::BasicBuffer	typeref:typename:const StringType &
stretch_limit	src/settings.h	/^	int stretch_limit;$/;"	m	struct:Column	typeref:typename:int
string	src/format.cpp	/^template <typename CharT> using string = std::basic_string<CharT>;$/;"	t	namespace:__anon714e65d60111	typeref:typename:std::basic_string<CharT>	file:
stringToKey	src/bindings.cpp	/^NC::Key::Type stringToKey(const std::string &s)$/;"	f	namespace:__anon0c1fb5bb0111	typeref:typename:NC::Key::Type
stringToScreenType	src/screens/screen_type.cpp	/^ScreenType stringToScreenType(const std::string &s)$/;"	f	typeref:typename:ScreenType
stringToSpecialKey	src/bindings.cpp	/^NC::Key::Type stringToSpecialKey(const std::string &s)$/;"	f	namespace:__anon0c1fb5bb0111	typeref:typename:NC::Key::Type
stringtoStartupScreenType	src/screens/screen_type.cpp	/^ScreenType stringtoStartupScreenType(const std::string &s)$/;"	f	typeref:typename:ScreenType
stripHtmlTags	src/utility/html.cpp	/^void stripHtmlTags(std::string &s)$/;"	f	typeref:typename:void
subdir	src/Makefile.in	/^subdir = src$/;"	m
supportEnabled	src/curses/window.cpp	/^bool supportEnabled = false;$/;"	v	namespace:NC::Mouse::__anon91c40e690711	typeref:typename:bool
switchTo	src/screens/browser.cpp	/^void Browser::switchTo()$/;"	f	class:Browser	typeref:typename:void
switchTo	src/screens/clock.cpp	/^void Clock::switchTo()$/;"	f	class:Clock	typeref:typename:void
switchTo	src/screens/help.cpp	/^void Help::switchTo()$/;"	f	class:Help	typeref:typename:void
switchTo	src/screens/lastfm.cpp	/^void Lastfm::switchTo()$/;"	f	class:Lastfm	typeref:typename:void
switchTo	src/screens/lyrics.cpp	/^void Lyrics::switchTo()$/;"	f	class:Lyrics	typeref:typename:void
switchTo	src/screens/media_library.cpp	/^void MediaLibrary::switchTo()$/;"	f	class:MediaLibrary	typeref:typename:void
switchTo	src/screens/outputs.cpp	/^void Outputs::switchTo()$/;"	f	class:Outputs	typeref:typename:void
switchTo	src/screens/playlist.cpp	/^void Playlist::switchTo()$/;"	f	class:Playlist	typeref:typename:void
switchTo	src/screens/playlist_editor.cpp	/^void PlaylistEditor::switchTo()$/;"	f	class:PlaylistEditor	typeref:typename:void
switchTo	src/screens/search_engine.cpp	/^void SearchEngine::switchTo()$/;"	f	class:SearchEngine	typeref:typename:void
switchTo	src/screens/sel_items_adder.cpp	/^void SelectedItemsAdder::switchTo()$/;"	f	class:SelectedItemsAdder	typeref:typename:void
switchTo	src/screens/server_info.cpp	/^void ServerInfo::switchTo()$/;"	f	class:ServerInfo	typeref:typename:void
switchTo	src/screens/song_info.cpp	/^void SongInfo::switchTo()$/;"	f	class:SongInfo	typeref:typename:void
switchTo	src/screens/sort_playlist.cpp	/^void SortPlaylistDialog::switchTo()$/;"	f	class:SortPlaylistDialog	typeref:typename:void
switchTo	src/screens/tag_editor.cpp	/^void TagEditor::switchTo()$/;"	f	class:TagEditor	typeref:typename:void
switchTo	src/screens/tiny_tag_editor.cpp	/^void TinyTagEditor::switchTo()$/;"	f	class:TinyTagEditor	typeref:typename:void
switchTo	src/screens/visualizer.cpp	/^void Visualizer::switchTo()$/;"	f	class:Visualizer	typeref:typename:void
switchToPreviousScreen	src/interfaces.h	/^	void switchToPreviousScreen() const {$/;"	f	struct:Tabbable	typeref:typename:void
sysconfdir	src/Makefile.in	/^sysconfdir = @sysconfdir@$/;"	m
system_encoding	src/settings.h	/^	std::string system_encoding;$/;"	m	struct:Configuration	typeref:typename:std::string
tag	src/screens/media_library.h	/^		const std::string &tag() const { return m_tag; }$/;"	f	struct:MediaLibrary::Album	typeref:typename:const std::string &
tag	src/screens/media_library.h	/^		const std::string &tag() const { return m_tag; }$/;"	f	struct:MediaLibrary::PrimaryTag	typeref:typename:const std::string &
tagList	src/tags.cpp	/^TagLib::StringList tagList(const MPD::MutableSong &s, MPD::Song::GetFunction f)$/;"	f	namespace:__anondd52103c0111	typeref:typename:TagLib::StringList
tagTypeToSetFunction	src/utility/type_conversions.cpp	/^MPD::MutableSong::SetFunction tagTypeToSetFunction(mpd_tag_type tag)$/;"	f	typeref:typename:MPD::MutableSong::SetFunction
tagTypeToString	src/utility/type_conversions.cpp	/^std::string tagTypeToString(mpd_tag_type tag)$/;"	f	typeref:typename:std::string
tag_editor_extended_numeration	src/settings.h	/^	bool tag_editor_extended_numeration;$/;"	m	struct:Configuration	typeref:typename:bool
tags	src/Makefile.in	/^tags: tags-am$/;"	t
tags-am	src/Makefile.in	/^tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)$/;"	t
target_alias	src/Makefile.in	/^target_alias = @target_alias@$/;"	m
throwError	src/format.cpp	/^void throwError(const string<CharT> &s, iterator<CharT> current, std::string msg)$/;"	f	namespace:__anon714e65d60111	typeref:typename:void
timeFormat	src/helpers.cpp	/^std::string timeFormat(const char *format, time_t t)$/;"	f	typeref:typename:std::string
title	src/screens/browser.cpp	/^std::wstring Browser::title()$/;"	f	class:Browser	typeref:typename:std::wstring
title	src/screens/clock.cpp	/^std::wstring Clock::title()$/;"	f	class:Clock	typeref:typename:std::wstring
title	src/screens/help.cpp	/^std::wstring Help::title()$/;"	f	class:Help	typeref:typename:std::wstring
title	src/screens/lastfm.cpp	/^std::wstring Lastfm::title()$/;"	f	class:Lastfm	typeref:typename:std::wstring
title	src/screens/lyrics.cpp	/^std::wstring Lyrics::title()$/;"	f	class:Lyrics	typeref:typename:std::wstring
title	src/screens/media_library.cpp	/^std::wstring MediaLibrary::title()$/;"	f	class:MediaLibrary	typeref:typename:std::wstring
title	src/screens/outputs.cpp	/^std::wstring Outputs::title()$/;"	f	class:Outputs	typeref:typename:std::wstring
title	src/screens/playlist.cpp	/^std::wstring Playlist::title()$/;"	f	class:Playlist	typeref:typename:std::wstring
title	src/screens/playlist_editor.cpp	/^std::wstring PlaylistEditor::title()$/;"	f	class:PlaylistEditor	typeref:typename:std::wstring
title	src/screens/search_engine.cpp	/^std::wstring SearchEngine::title()$/;"	f	class:SearchEngine	typeref:typename:std::wstring
title	src/screens/sel_items_adder.cpp	/^std::wstring SelectedItemsAdder::title()$/;"	f	class:SelectedItemsAdder	typeref:typename:std::wstring
title	src/screens/server_info.cpp	/^std::wstring ServerInfo::title()$/;"	f	class:ServerInfo	typeref:typename:std::wstring
title	src/screens/song_info.cpp	/^std::wstring SongInfo::title()$/;"	f	class:SongInfo	typeref:typename:std::wstring
title	src/screens/sort_playlist.cpp	/^std::wstring SortPlaylistDialog::title()$/;"	f	class:SortPlaylistDialog	typeref:typename:std::wstring
title	src/screens/tag_editor.cpp	/^std::wstring TagEditor::title()$/;"	f	class:TagEditor	typeref:typename:std::wstring
title	src/screens/tiny_tag_editor.cpp	/^std::wstring TinyTagEditor::title()$/;"	f	class:TinyTagEditor	typeref:typename:std::wstring
title	src/screens/visualizer.cpp	/^std::wstring Visualizer::title()$/;"	f	class:Visualizer	typeref:typename:std::wstring
titles_visibility	src/settings.h	/^	bool titles_visibility;$/;"	m	struct:Configuration	typeref:typename:bool
toColor	src/screens/visualizer.cpp	/^const NC::FormattedColor &toColor(size_t number, size_t max, bool wrap = true)$/;"	f	namespace:__anonf3fd84fd0111	typeref:typename:const NC::FormattedColor &
toColumnName	src/display.cpp	/^const wchar_t *toColumnName(char c)$/;"	f	namespace:__anond902be230111	typeref:typename:const wchar_t *
toScreen	src/screens/screen_type.cpp	/^BaseScreen *toScreen(ScreenType st)$/;"	f	typeref:typename:BaseScreen *
toUtf8From	src/charset.cpp	/^std::string toUtf8From(const std::string &s, const char *charset)$/;"	f	namespace:Charset	typeref:typename:std::string
toggleColumnsMode	src/screens/media_library.cpp	/^void MediaLibrary::toggleColumnsMode()$/;"	f	class:MediaLibrary	typeref:typename:void
toggleFetcher	src/screens/lyrics.cpp	/^void Lyrics::toggleFetcher()$/;"	f	class:Lyrics	typeref:typename:void
toggleOutput	src/screens/outputs.cpp	/^void Outputs::toggleOutput()$/;"	f	class:Outputs	typeref:typename:void
toggleSortMode	src/screens/media_library.cpp	/^void MediaLibrary::toggleSortMode()$/;"	f	class:MediaLibrary	typeref:typename:void
top_build_prefix	src/Makefile.in	/^top_build_prefix = @top_build_prefix@$/;"	m
top_builddir	src/Makefile.in	/^top_builddir = @top_builddir@$/;"	m
top_srcdir	src/Makefile.in	/^top_srcdir = @top_srcdir@$/;"	m
totalTime	src/mpdpp.h	/^	unsigned totalTime() const { return mpd_status_get_total_time(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:unsigned
totalTime	src/status.cpp	/^unsigned Status::State::totalTime()$/;"	f	class:Status::State	typeref:typename:unsigned
trace	src/status.cpp	/^void Status::trace(bool update_timer, bool update_window_timeout)$/;"	f	class:Status	typeref:typename:void
trace	src/status.h	/^inline void trace() { trace(true, false); }$/;"	f	namespace:Status	typeref:typename:void
trackGain	src/tags.h	/^	const std::string &trackGain() const { return m_track_gain; }$/;"	f	struct:Tags::ReplayGainInfo	typeref:typename:const std::string &
trackPeak	src/tags.h	/^	const std::string &trackPeak() const { return m_track_peak; }$/;"	f	struct:Tags::ReplayGainInfo	typeref:typename:const std::string &
transform	src/Makefile.in	/^transform = $(program_transform_name)$/;"	m
transparent	src/curses/window.cpp	/^const short Color::transparent = -1;$/;"	m	class:NC::Color	typeref:typename:const short
transparent	src/curses/window.h	/^	static const short transparent;$/;"	m	struct:NC::Color	typeref:typename:const short
tryRedraw	src/statusbar.cpp	/^void Statusbar::tryRedraw()$/;"	f	class:Statusbar	typeref:typename:void
tryTakeConsumerMessage	src/screens/lyrics.cpp	/^boost::optional<std::string> Lyrics::tryTakeConsumerMessage()$/;"	f	class:Lyrics	typeref:typename:boost::optional<std::string>
type	src/actions.h	/^	Type type() const { return m_type; }$/;"	f	struct:Actions::BaseAction	typeref:typename:Type
type	src/curses/menu.h	/^			typedef ExtractProperties type;$/;"	t	struct:NC::Menu::Item::ExtractProperties	typeref:typename:ExtractProperties
type	src/curses/menu.h	/^			typedef ExtractValue type;$/;"	t	struct:NC::Menu::Item::ExtractValue	typeref:typename:ExtractValue
type	src/mpdpp.h	/^	Type type() const$/;"	f	struct:MPD::Item	typeref:typename:Type
type	src/mutable_song.h	/^		mpd_tag_type type() const { return m_type; }$/;"	f	struct:MPD::MutableSong::Tag	typeref:typename:mpd_tag_type
type	src/screens/browser.h	/^	virtual ScreenType type() override { return ScreenType::Browser; }$/;"	f	struct:Browser	typeref:typename:ScreenType
type	src/screens/clock.h	/^	virtual ScreenType type() override { return ScreenType::Clock; }$/;"	f	struct:Clock	typeref:typename:ScreenType
type	src/screens/help.h	/^	virtual ScreenType type() override { return ScreenType::Help; }$/;"	f	struct:Help	typeref:typename:ScreenType
type	src/screens/lastfm.h	/^	virtual ScreenType type() override { return ScreenType::Lastfm; }$/;"	f	struct:Lastfm	typeref:typename:ScreenType
type	src/screens/lyrics.h	/^	virtual ScreenType type() override { return ScreenType::Lyrics; }$/;"	f	struct:Lyrics	typeref:typename:ScreenType
type	src/screens/media_library.h	/^	virtual ScreenType type() override { return ScreenType::MediaLibrary; }$/;"	f	struct:MediaLibrary	typeref:typename:ScreenType
type	src/screens/outputs.h	/^	virtual ScreenType type() override { return ScreenType::Outputs; }$/;"	f	struct:Outputs	typeref:typename:ScreenType
type	src/screens/playlist.h	/^	virtual ScreenType type() override { return ScreenType::Playlist; }$/;"	f	struct:Playlist	typeref:typename:ScreenType
type	src/screens/playlist_editor.h	/^	virtual ScreenType type() override { return ScreenType::PlaylistEditor; }$/;"	f	struct:PlaylistEditor	typeref:typename:ScreenType
type	src/screens/search_engine.h	/^	virtual ScreenType type() override { return ScreenType::SearchEngine; }$/;"	f	struct:SearchEngine	typeref:typename:ScreenType
type	src/screens/sel_items_adder.h	/^	virtual ScreenType type() override { return ScreenType::SelectedItemsAdder; }$/;"	f	struct:SelectedItemsAdder	typeref:typename:ScreenType
type	src/screens/server_info.h	/^	virtual ScreenType type() override { return ScreenType::ServerInfo; }$/;"	f	struct:ServerInfo	typeref:typename:ScreenType
type	src/screens/song_info.h	/^	virtual ScreenType type() override { return ScreenType::SongInfo; }$/;"	f	struct:SongInfo	typeref:typename:ScreenType
type	src/screens/sort_playlist.h	/^	virtual ScreenType type() override { return ScreenType::SortPlaylistDialog; }$/;"	f	struct:SortPlaylistDialog	typeref:typename:ScreenType
type	src/screens/tag_editor.h	/^	virtual ScreenType type() override { return ScreenType::TagEditor; }$/;"	f	struct:TagEditor	typeref:typename:ScreenType
type	src/screens/tiny_tag_editor.h	/^	virtual ScreenType type() override { return ScreenType::TinyTagEditor; }$/;"	f	struct:TinyTagEditor	typeref:typename:ScreenType
type	src/screens/visualizer.h	/^	virtual ScreenType type() override { return ScreenType::Visualizer; }$/;"	f	struct:Visualizer	typeref:typename:ScreenType
type	src/settings.h	/^	std::string type;$/;"	m	struct:Column	typeref:typename:std::string
underline	src/curses/window.cpp	/^void Window::underline(bool underline_state) const$/;"	f	class:NC::Window	typeref:typename:void
unescapeHtmlEntities	src/utility/html.cpp	/^void unescapeHtmlEntities(std::string &s)$/;"	f	typeref:typename:void
unescapeHtmlUtf8	src/utility/html.cpp	/^std::string unescapeHtmlUtf8(const std::string &data)$/;"	f	typeref:typename:std::string
uninstall	src/Makefile.in	/^uninstall: uninstall-am$/;"	t
uninstall-am	src/Makefile.in	/^uninstall-am: uninstall-binPROGRAMS$/;"	t
uninstall-binPROGRAMS	src/Makefile.in	/^uninstall-binPROGRAMS:$/;"	t
unlock	src/screens/screen.cpp	/^void BaseScreen::unlock()$/;"	f	class:BaseScreen	typeref:typename:void
unpauseScreen	src/curses/window.cpp	/^void unpauseScreen()$/;"	f	namespace:NC	typeref:typename:void
unregisterSong	src/screens/playlist.cpp	/^void Playlist::unregisterSong(const MPD::Song &s)$/;"	f	class:Playlist	typeref:typename:void
unsetProperties	src/display.cpp	/^void unsetProperties(NC::Menu<T> &menu, bool separate_albums, bool is_now_playing,$/;"	f	namespace:__anond902be230111	typeref:typename:void
unsigned_checker	src/utility/conversion.h	/^struct unsigned_checker$/;"	s
unsigned_checker	src/utility/conversion.h	/^struct unsigned_checker<TargetT, true>$/;"	s
update	src/screens/browser.cpp	/^void Browser::update()$/;"	f	class:Browser	typeref:typename:void
update	src/screens/clock.cpp	/^void Clock::update()$/;"	f	class:Clock	typeref:typename:void
update	src/screens/help.h	/^	virtual void update() override { }$/;"	f	struct:Help	typeref:typename:void
update	src/screens/lastfm.cpp	/^void Lastfm::update()$/;"	f	class:Lastfm	typeref:typename:void
update	src/screens/lyrics.cpp	/^void Lyrics::update()$/;"	f	class:Lyrics	typeref:typename:void
update	src/screens/media_library.cpp	/^void MediaLibrary::update()$/;"	f	class:MediaLibrary	typeref:typename:void
update	src/screens/outputs.h	/^	virtual void update() override { }$/;"	f	struct:Outputs	typeref:typename:void
update	src/screens/playlist.cpp	/^void Playlist::update()$/;"	f	class:Playlist	typeref:typename:void
update	src/screens/playlist_editor.cpp	/^void PlaylistEditor::update()$/;"	f	class:PlaylistEditor	typeref:typename:void
update	src/screens/search_engine.h	/^	virtual void update() override { }$/;"	f	struct:SearchEngine	typeref:typename:void
update	src/screens/sel_items_adder.h	/^	virtual void update() override { }$/;"	f	struct:SelectedItemsAdder	typeref:typename:void
update	src/screens/server_info.cpp	/^void ServerInfo::update()$/;"	f	class:ServerInfo	typeref:typename:void
update	src/screens/song_info.h	/^	virtual void update() override { }$/;"	f	struct:SongInfo	typeref:typename:void
update	src/screens/sort_playlist.h	/^	virtual void update() override { }$/;"	f	struct:SortPlaylistDialog	typeref:typename:void
update	src/screens/tag_editor.cpp	/^void TagEditor::update()$/;"	f	class:TagEditor	typeref:typename:void
update	src/screens/tiny_tag_editor.h	/^	virtual void update() override { }$/;"	f	struct:TinyTagEditor	typeref:typename:void
update	src/screens/visualizer.cpp	/^void Visualizer::update()$/;"	f	class:Visualizer	typeref:typename:void
update	src/status.cpp	/^void Status::update(int event)$/;"	f	class:Status	typeref:typename:void
updateID	src/mpdpp.h	/^	unsigned updateID() const { return mpd_status_get_update_id(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:unsigned
updateInactiveScreen	src/screens/screen.cpp	/^void updateInactiveScreen(BaseScreen *screen_to_be_set)$/;"	f	typeref:typename:void
updateTimer	src/screens/media_library.cpp	/^void MediaLibrary::updateTimer()$/;"	f	class:MediaLibrary	typeref:typename:void
updateTimer	src/screens/playlist_editor.cpp	/^void PlaylistEditor::updateTimer()$/;"	f	class:PlaylistEditor	typeref:typename:void
upperBoundCheck	src/utility/conversion.h	/^void upperBoundCheck(const Type &value, const Type &ubound)$/;"	f	typeref:typename:void
uptime	src/mpdpp.h	/^	unsigned long uptime() const { return mpd_stats_get_uptime(m_stats.get()); }$/;"	f	struct:MPD::Statistics	typeref:typename:unsigned long
urlTemplate	src/lyrics_fetcher.h	/^	virtual const char *urlTemplate() const override { return "http:\/\/lyrics.wikia.com\/api.php?a/;"	f	struct:LyricwikiFetcher	typeref:typename:const char *
urlTemplate	src/lyrics_fetcher.h	/^	virtual const char *urlTemplate() const { return URL; }$/;"	f	struct:GoogleLyricsFetcher	typeref:typename:const char *
use_console_editor	src/settings.h	/^	bool use_console_editor;$/;"	m	struct:Configuration	typeref:typename:bool
use_cyclic_scrolling	src/settings.h	/^	bool use_cyclic_scrolling;$/;"	m	struct:Configuration	typeref:typename:bool
used	src/utility/option_parser.h	/^		bool used() const$/;"	f	struct:option_parser::parser	typeref:typename:bool
utf8ToLocale	src/charset.cpp	/^std::string utf8ToLocale(const std::string &s)$/;"	f	namespace:Charset	typeref:typename:std::string
utf8ToLocale	src/charset.cpp	/^std::string utf8ToLocale(std::string &&s)$/;"	f	namespace:Charset	typeref:typename:std::string
utility/$(DEPDIR)/$(am__dirstamp)	src/Makefile.in	/^utility\/$(DEPDIR)\/$(am__dirstamp):$/;"	t
utility/$(am__dirstamp)	src/Makefile.in	/^utility\/$(am__dirstamp):$/;"	t
utility/comparators.$(OBJEXT)	src/Makefile.in	/^utility\/comparators.$(OBJEXT): utility\/$(am__dirstamp) \\$/;"	t
utility/html.$(OBJEXT)	src/Makefile.in	/^utility\/html.$(OBJEXT): utility\/$(am__dirstamp) \\$/;"	t
utility/option_parser.$(OBJEXT)	src/Makefile.in	/^utility\/option_parser.$(OBJEXT): utility\/$(am__dirstamp) \\$/;"	t
utility/string.$(OBJEXT)	src/Makefile.in	/^utility\/string.$(OBJEXT): utility\/$(am__dirstamp) \\$/;"	t
utility/type_conversions.$(OBJEXT)	src/Makefile.in	/^utility\/type_conversions.$(OBJEXT): utility\/$(am__dirstamp) \\$/;"	t
utility/wide_string.$(OBJEXT)	src/Makefile.in	/^utility\/wide_string.$(OBJEXT): utility\/$(am__dirstamp) \\$/;"	t
validateScreenSize	src/actions.cpp	/^void validateScreenSize()$/;"	f	namespace:Actions	typeref:typename:void
value	src/curses/menu.h	/^		ItemT &value() { return std::get<0>(*m_impl); }$/;"	f	struct:NC::Menu::Item	typeref:typename:ItemT &
value	src/curses/menu.h	/^		const ItemT &value() const { return std::get<0>(*m_impl); }$/;"	f	struct:NC::Menu::Item	typeref:typename:const ItemT &
value	src/utility/conversion.h	/^	const std::string &value() { return m_source_value; }$/;"	f	struct:ConversionError	typeref:typename:const std::string &
verbose_lexical_cast	src/utility/option_parser.h	/^DestT verbose_lexical_cast(const std::string &v)$/;"	f	typeref:typename:DestT
verifyFormats	src/curses/formatted_color.cpp	/^void verifyFormats(const NC::FormattedColor::Formats &formats)$/;"	f	namespace:__anon8c54cf550111	typeref:typename:void
visualizer_chars	src/settings.h	/^	std::wstring visualizer_chars;$/;"	m	struct:Configuration	typeref:typename:std::wstring
visualizer_colors	src/settings.h	/^	std::vector<NC::FormattedColor> visualizer_colors;$/;"	m	struct:Configuration	typeref:typename:std::vector<NC::FormattedColor>
visualizer_fifo_path	src/settings.h	/^	std::string visualizer_fifo_path;$/;"	m	struct:Configuration	typeref:typename:std::string
visualizer_in_stereo	src/settings.h	/^	bool visualizer_in_stereo;$/;"	m	struct:Configuration	typeref:typename:bool
visualizer_output_name	src/settings.h	/^	std::string visualizer_output_name;$/;"	m	struct:Configuration	typeref:typename:std::string
visualizer_sync_interval	src/settings.h	/^	boost::posix_time::seconds visualizer_sync_interval;$/;"	m	struct:Configuration	typeref:typename:boost::posix_time::seconds
visualizer_type	src/settings.h	/^	VisualizerType visualizer_type;$/;"	m	struct:Configuration	typeref:typename:VisualizerType
volume	src/mpdpp.h	/^	int volume() const { return mpd_status_get_volume(m_status.get()); }$/;"	f	struct:MPD::Status	typeref:typename:int
volume	src/status.cpp	/^int Status::State::volume()$/;"	f	class:Status::State	typeref:typename:int
volume_change_step	src/settings.h	/^	unsigned volume_change_step;$/;"	m	struct:Configuration	typeref:typename:unsigned
volume_color	src/settings.h	/^	NC::FormattedColor volume_color;$/;"	m	struct:Configuration	typeref:typename:NC::FormattedColor
w	src/curses/window.cpp	/^NC::Window *w;$/;"	v	namespace:__anon91c40e690111::rl	typeref:typename:NC::Window *
w	src/screens/screen.h	/^	WindowT w;$/;"	m	struct:Screen	typeref:typename:WindowT
wFooter	src/global.cpp	/^NC::Window *wFooter;$/;"	v	namespace:Global	typeref:typename:NC::Window *
wHeader	src/global.cpp	/^NC::Window *wHeader;$/;"	v	namespace:Global	typeref:typename:NC::Window *
warning	src/bindings.cpp	/^void warning(const char *msg)$/;"	f	namespace:__anon0c1fb5bb0111	typeref:typename:void
what	src/curses/window.h	/^	virtual const char *what() const noexcept override { return m_prompt.c_str(); }$/;"	f	struct:NC::PromptAborted	typeref:typename:const char *
what	src/mpdpp.h	/^	virtual const char *what() const noexcept { return m_msg.c_str(); }$/;"	f	struct:MPD::ClientError	typeref:typename:const char *
what	src/mpdpp.h	/^	virtual const char *what() const noexcept { return m_msg.c_str(); }$/;"	f	struct:MPD::ServerError	typeref:typename:const char *
what	src/utility/conversion.h	/^	virtual const char *what() const noexcept override { return m_error_message.c_str(); }$/;"	f	struct:OutOfBounds	typeref:typename:const char *
wideCut	src/utility/wide_string.cpp	/^void wideCut(std::wstring &ws, size_t max_length)$/;"	f	typeref:typename:void
wideLength	src/utility/wide_string.cpp	/^size_t wideLength(const std::wstring &ws)$/;"	f	typeref:typename:size_t
wideShorten	src/utility/wide_string.cpp	/^std::wstring wideShorten(const std::wstring &ws, size_t max_length)$/;"	f	typeref:typename:std::wstring
wideShorten	src/utility/wide_string.h	/^inline std::string wideShorten(const std::string &s, size_t max_length)$/;"	f	typeref:typename:std::string
width	src/curses/window.cpp	/^size_t width;$/;"	v	namespace:__anon91c40e690111::rl	typeref:typename:size_t
width	src/settings.h	/^	int width;$/;"	m	struct:Column	typeref:typename:int
windowTimeout	src/screens/media_library.cpp	/^int MediaLibrary::windowTimeout()$/;"	f	class:MediaLibrary	typeref:typename:int
windowTimeout	src/screens/playlist_editor.cpp	/^int PlaylistEditor::windowTimeout()$/;"	f	class:PlaylistEditor	typeref:typename:int
windowTimeout	src/screens/screen.h	/^	virtual int windowTimeout() override {$/;"	f	struct:Screen	typeref:typename:int
windowTimeout	src/screens/visualizer.cpp	/^int Visualizer::windowTimeout()$/;"	f	class:Visualizer	typeref:typename:int
windowTitle	src/title.cpp	/^void windowTitle(const std::string &status)$/;"	f	typeref:typename:void
window_border	src/settings.h	/^	NC::Border window_border;$/;"	m	struct:Configuration	typeref:typename:NC::Border
withErrors	src/helpers.h	/^inline const char *withErrors(bool success)$/;"	f	typeref:typename:const char *
worker	src/utility/option_parser.h	/^		worker(DestT *dest, MapT &&map)$/;"	f	struct:option_parser::worker
worker	src/utility/option_parser.h	/^	struct worker$/;"	s	class:option_parser
wrappedSearch	src/helpers.h	/^Iterator wrappedSearch(Iterator begin, Iterator current, Iterator end,$/;"	f	typeref:typename:Iterator
wrapped_search	src/settings.h	/^	bool wrapped_search;$/;"	m	struct:Configuration	typeref:typename:bool
write	src/curses/scrollpad.h	/^	Scrollpad &write(ItemT &&item)$/;"	f	struct:NC::Scrollpad	typeref:typename:Scrollpad &
write	src/tags.cpp	/^bool write(MPD::MutableSong &s)$/;"	f	namespace:Tags	typeref:typename:bool
writeCommonTags	src/tags.cpp	/^void writeCommonTags(const MPD::MutableSong &s, TagLib::Tag *tag)$/;"	f	namespace:__anondd52103c0111	typeref:typename:void
writeCyclicBuffer	src/helpers.cpp	/^void writeCyclicBuffer(const NC::WBuffer &buf, NC::Window &w, size_t &start_pos,$/;"	f	typeref:typename:void
writeID3v2Tags	src/tags.cpp	/^void writeID3v2Tags(const MPD::MutableSong &s, TagLib::ID3v2::Tag *tag)$/;"	f	namespace:__anondd52103c0111	typeref:typename:void
writeXiphComments	src/tags.cpp	/^void writeXiphComments(const MPD::MutableSong &s, TagLib::Ogg::XiphComment *tag)$/;"	f	namespace:__anondd52103c0111	typeref:typename:void
write_bindings	src/screens/help.cpp	/^void write_bindings(NC::Scrollpad &w)$/;"	f	namespace:__anona7ad4fd80111	typeref:typename:void
write_data	src/curl_handle.cpp	/^	size_t write_data(char *buffer, size_t size, size_t nmemb, void *data)$/;"	f	namespace:__anonc992bc4e0111	typeref:typename:size_t
x	src/curses/window.h	/^	int x;$/;"	m	struct:NC::XY	typeref:typename:int
xdg_config_home	src/configuration.cpp	/^std::string xdg_config_home()$/;"	f	namespace:__anon7444cf050111	typeref:typename:std::string
y	src/curses/window.h	/^	int y;$/;"	m	struct:NC::XY	typeref:typename:int
yes_no	src/utility/option_parser.cpp	/^bool yes_no(const std::string &v)$/;"	f	typeref:typename:bool
~BaseAction	src/actions.h	/^	virtual ~BaseAction() { }$/;"	f	struct:Actions::BaseAction
~BaseScreen	src/screens/screen.h	/^	virtual ~BaseScreen() { }$/;"	f	struct:BaseScreen
~ClientError	src/mpdpp.h	/^	virtual ~ClientError() noexcept { }$/;"	f	struct:MPD::ClientError
~Iterator	src/mpdpp.h	/^	~Iterator()$/;"	f	struct:MPD::Iterator
~List	src/curses/menu.h	/^	virtual ~List() { }$/;"	f	struct:NC::List
~LyricsFetcher	src/lyrics_fetcher.h	/^	virtual ~LyricsFetcher() { }$/;"	f	struct:LyricsFetcher
~SEItem	src/screens/search_engine.h	/^	~SEItem() {$/;"	f	struct:SEItem
~ScopedLock	src/statusbar.cpp	/^Progressbar::ScopedLock::~ScopedLock() noexcept$/;"	f	class:Progressbar::ScopedLock
~ScopedLock	src/statusbar.cpp	/^Statusbar::ScopedLock::~ScopedLock() noexcept$/;"	f	class:Statusbar::ScopedLock
~ScopedPromptHook	src/curses/window.h	/^		~ScopedPromptHook() noexcept {$/;"	f	struct:NC::Window::ScopedPromptHook
~ScopedTimeout	src/curses/window.h	/^		~ScopedTimeout()$/;"	f	struct:NC::Window::ScopedTimeout
~ScopedUnfilteredMenu	src/helpers.h	/^	~ScopedUnfilteredMenu()$/;"	f	struct:ScopedUnfilteredMenu
~ScopedValue	src/utility/scoped_value.h	/^	~ScopedValue()$/;"	f	struct:ScopedValue
~Screen	src/screens/screen.h	/^	virtual ~Screen() { }$/;"	f	struct:Screen
~ServerError	src/mpdpp.h	/^	virtual ~ServerError() noexcept { }$/;"	f	struct:MPD::ServerError
~Song	src/song.h	/^	virtual ~Song() { }$/;"	f	struct:MPD::Song
~State	src/mpdpp.h	/^		~State()$/;"	f	struct:MPD::Iterator::State
~Window	src/curses/window.cpp	/^Window::~Window()$/;"	f	class:NC::Window
