
runtime/doc/doctags.c,72
#define LINELEN LINELEN15,270
main(int argc, char **argv)main18,296

runtime/macros/maze/mazeansi.c,486
char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&M1,0
char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&A1,0
char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&Z1,0
char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&E1,0
char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&J1,0
char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&T1,0
char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&main1,0

runtime/macros/maze/maze.c,486
char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);M1,0
char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);A1,0
char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);Z1,0
char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);E1,0
char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);J1,0
char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);T1,0
char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);main1,0

runtime/macros/maze/mazeclean.c,306
char *M, A, Z, E = 40, line[80], T[3];M9,183
char *M, A, Z, E = 40, line[80], T[3];A9,183
char *M, A, Z, E = 40, line[80], T[3];Z9,183
char *M, A, Z, E = 40, line[80], T[3];E9,183
char *M, A, Z, E = 40, line[80], T[3];line9,183
char *M, A, Z, E = 40, line[80], T[3];T9,183
main (C)main11,226

runtime/tools/blink.c,23
main(void)main12,316

runtime/tools/ccfilter.c,1420
#define __CCFILTER_C____CCFILTER_C__14,731
#define LINELENGTH LINELENGTH21,834
char	       Line[LINELENGTH];Line24,878
char	       Line2[LINELENGTH];Line225,908
char	       FileName[1024];FileName27,956
char	       BasePath[1024];BasePath28,984
char	       CWD[1024];CWD29,1012
unsigned long  Row;Row30,1035
unsigned long  Col;Col31,1055
char	       Severity;Severity32,1075
char	       Reason[LINELENGTH];Reason33,1097
#define COMPILER_UNKNOWN COMPILER_UNKNOWN35,1130
#define COMPILER_GCC	COMPILER_GCC36,1160
#define COMPILER_AIX	COMPILER_AIX37,1187
#define COMPILER_ATT	COMPILER_ATT38,1214
#define COMPILER_IRIX	COMPILER_IRIX39,1241
#define COMPILER_SOLARIS COMPILER_SOLARIS40,1269
#define COMPILER_HPUX	COMPILER_HPUX41,1299
char	*COMPILER_Names[][2] =COMPILER_Names43,1328
#define COMPILER_QTY COMPILER_QTY54,1719
#			define COMPILER_DEFAULT COMPILER_DEFAULT57,1812
#			define COMPILER_DEFAULT COMPILER_DEFAULT59,1873
#			define COMPILER_DEFAULT COMPILER_DEFAULT61,1934
#			define COMPILER_DEFAULT COMPILER_DEFAULT63,1996
#			define COMPILER_DEFAULT COMPILER_DEFAULT65,2062
#			define COMPILER_DEFAULT COMPILER_DEFAULT67,2128
#			define COMPILER_DEFAULT COMPILER_DEFAULT69,2176
const char USAGE[] =USAGE72,2229
int ShowUsage( char *szError )ShowUsage87,2803
char *echogets(char *s, int echo)echogets105,3234
int main( int argc, char *argv[] )main114,3399

runtime/tools/xcmdsrv_client.c,715
main(int argc, char **argv)main37,998
#define MAX_PROP_WORDS MAX_PROP_WORDS65,1471
static Atom	registryProperty = None;registryProperty82,2028
static Atom	commProperty = None;commProperty83,2065
static Window	commWindow = None;commWindow84,2098
static int	got_x_error = FALSE;got_x_error85,2131
sendToVim(sendToVim97,2330
#define STATIC_SPACE STATIC_SPACE107,2636
#define SEND_MSEC_POLL SEND_MSEC_POLL204,5079
SendInit(Display *dpy)SendInit248,6022
LookupName(LookupName291,7135
SendEventProc(SendEventProc398,9644
AppendPropCarefully(AppendPropCarefully537,12647
x_error_check(Display *dpy, XErrorEvent *error_event)x_error_check562,13345
IsSerialName(char *str)IsSerialName573,13579

src/arabic.c,3066
#define a_HAMZA	a_HAMZA36,950
#define a_ALEF_MADDA	a_ALEF_MADDA37,976
#define a_ALEF_HAMZA_ABOVE	a_ALEF_HAMZA_ABOVE38,1006
#define a_WAW_HAMZA	a_WAW_HAMZA39,1041
#define a_ALEF_HAMZA_BELOW	a_ALEF_HAMZA_BELOW40,1070
#define a_YEH_HAMZA	a_YEH_HAMZA41,1105
#define a_ALEF	a_ALEF42,1134
#define a_BEH	a_BEH43,1159
#define a_TEH_MARBUTA	a_TEH_MARBUTA44,1183
#define a_TEH	a_TEH45,1214
#define a_THEH	a_THEH46,1238
#define a_JEEM	a_JEEM47,1263
#define a_HAH	a_HAH48,1288
#define a_KHAH	a_KHAH49,1312
#define a_DAL	a_DAL50,1337
#define a_THAL	a_THAL51,1361
#define a_REH	a_REH52,1386
#define a_ZAIN	a_ZAIN53,1410
#define a_SEEN	a_SEEN54,1435
#define a_SHEEN	a_SHEEN55,1460
#define a_SAD	a_SAD56,1486
#define a_DAD	a_DAD57,1510
#define a_TAH	a_TAH58,1534
#define a_ZAH	a_ZAH59,1558
#define a_AIN	a_AIN60,1582
#define a_GHAIN	a_GHAIN61,1606
#define a_TATWEEL	a_TATWEEL62,1632
#define a_FEH	a_FEH63,1659
#define a_QAF	a_QAF64,1683
#define a_KAF	a_KAF65,1707
#define a_LAM	a_LAM66,1731
#define a_MEEM	a_MEEM67,1755
#define a_NOON	a_NOON68,1780
#define a_HEH	a_HEH69,1805
#define a_WAW	a_WAW70,1829
#define a_ALEF_MAKSURA	a_ALEF_MAKSURA71,1853
#define a_YEH	a_YEH72,1885
#define a_FATHATAN	a_FATHATAN73,1909
#define a_DAMMATAN	a_DAMMATAN74,1937
#define a_KASRATAN	a_KASRATAN75,1965
#define a_FATHA	a_FATHA76,1993
#define a_DAMMA	a_DAMMA77,2019
#define a_KASRA	a_KASRA78,2045
#define a_SHADDA	a_SHADDA79,2071
#define a_SUKUN	a_SUKUN80,2097
#define a_MADDA_ABOVE	a_MADDA_ABOVE81,2123
#define a_HAMZA_ABOVE	a_HAMZA_ABOVE82,2154
#define a_HAMZA_BELOW	a_HAMZA_BELOW83,2185
#define a_PEH	a_PEH85,2217
#define a_TCHEH	a_TCHEH86,2241
#define a_JEH	a_JEH87,2267
#define a_FKAF	a_FKAF88,2291
#define a_GAF	a_GAF89,2316
#define a_FYEH	a_FYEH90,2340
#define a_s_LAM_ALEF_MADDA_ABOVE	a_s_LAM_ALEF_MADDA_ABOVE92,2366
#define a_f_LAM_ALEF_MADDA_ABOVE	a_f_LAM_ALEF_MADDA_ABOVE93,2406
#define a_s_LAM_ALEF_HAMZA_ABOVE	a_s_LAM_ALEF_HAMZA_ABOVE94,2446
#define a_f_LAM_ALEF_HAMZA_ABOVE	a_f_LAM_ALEF_HAMZA_ABOVE95,2486
#define a_s_LAM_ALEF_HAMZA_BELOW	a_s_LAM_ALEF_HAMZA_BELOW96,2526
#define a_f_LAM_ALEF_HAMZA_BELOW	a_f_LAM_ALEF_HAMZA_BELOW97,2566
#define a_s_LAM_ALEF	a_s_LAM_ALEF98,2606
#define a_f_LAM_ALEF	a_f_LAM_ALEF99,2636
static struct achar {achar101,2667
    unsigned c;c102,2689
    unsigned isolated;isolated103,2705
    unsigned initial;initial104,2728
    unsigned medial;medial105,2750
    unsigned final;final106,2771
} achars[] = {achars107,2791
#define a_BYTE_ORDER_MARK	a_BYTE_ORDER_MARK164,5070
#define ARRAY_SIZE(ARRAY_SIZE166,5105
find_achar(int c)find_achar173,5280
chg_c_laa2i(int hid_c)chg_c_laa2i197,5666
chg_c_laa2f(int hid_c)chg_c_laa2f226,6139
can_join(int c1, int c2)can_join255,6619
arabic_maycombine(int two)arabic_maycombine268,6974
arabic_combine(arabic_combine283,7312
A_is_iso(int c)A_is_iso297,7612
A_is_ok(int c)A_is_ok306,7758
A_is_valid(int c)A_is_valid316,7960
arabic_shape(arabic_shape331,8453

src/arglist.c,1921
#define AL_SET	AL_SET16,362
#define AL_ADD	AL_ADD17,379
#define AL_DEL	AL_DEL18,396
alist_clear(alist_T *al)alist_clear24,507
alist_init(alist_T *al)alist_init35,693
alist_unlink(alist_T *al)alist_unlink46,954
alist_new(void)alist_new59,1166
alist_expand(int *fnum_list, int fnum_len)alist_expand82,1672
alist_set(alist_set120,2783
alist_add(alist_add175,3867
alist_slash_adjust(void)alist_slash_adjust197,4454
do_one_arg(char_u *str)do_one_arg220,5043
get_arglist(garray_T *gap, char_u *str, int escaped)get_arglist256,5719
get_arglist_exp(get_arglist_exp285,6433
alist_check_arg_idx(void)alist_check_arg_idx312,6977
alist_add_list(alist_add_list328,7355
do_arglist(do_arglist371,8508
set_arglist(char_u *str)set_arglist470,10810
editing_arg_idx(win_T *win)editing_arg_idx480,10979
check_arg_idx(win_T *win)check_arg_idx495,11401
ex_args(exarg_T *eap)ex_args528,12380
ex_previous(exarg_T *eap)ex_previous589,13827
ex_rewind(exarg_T *eap)ex_rewind602,14134
ex_last(exarg_T *eap)ex_last611,14228
ex_argument(exarg_T *eap)ex_argument620,14339
do_argfile(exarg_T *eap, int argn)do_argfile635,14549
ex_next(exarg_T *eap)ex_next707,16320
ex_argedit(exarg_T *eap)ex_argedit735,16874
ex_argadd(exarg_T *eap)ex_argadd760,17437
ex_argdelete(exarg_T *eap)ex_argdelete774,17660
get_arglist_name(expand_T *xp UNUSED, int idx)get_arglist_name825,18966
alist_name(aentry_T *aep)alist_name837,19165
do_arg_all(do_arg_all852,19493
ex_all(exarg_T *eap)ex_all1142,27082
arg_all(void)arg_all1156,27470
f_argc(typval_T *argvars, typval_T *rettv)f_argc1222,28526
f_argidx(typval_T *argvars UNUSED, typval_T *rettv)f_argidx1248,29100
f_arglistid(typval_T *argvars, typval_T *rettv)f_arglistid1257,29245
get_arglist_as_rettv(aentry_T *arglist, int argcount, typval_T *rettv)get_arglist_as_rettv1271,29527
f_argv(typval_T *argvars, typval_T *rettv)f_argv1285,29835

src/autocmd.c,5986
typedef struct AutoCmdAutoCmd51,1258
    char_u	    *cmd;		// The command to be executed (NULLcmd53,1283
    char	    once;		// "One shot": removed after executiononce55,1381
    char	    nested;		// If autocommands nest here.nested56,1440
    char	    last;		// last command in listlast57,1492
    sctx_T	    script_ctx;		// script context where definedscript_ctx59,1553
    struct AutoCmd  *next;		// next AutoCmd in listnext61,1620
} AutoCmd;AutoCmd62,1672
typedef struct AutoPatAutoPat64,1684
    struct AutoPat  *next;		// Next AutoPat in AutoPat list; MUSTnext66,1709
    char_u	    *pat;		// pattern as typed (NULL when patternpat68,1803
    regprog_T	    *reg_prog;		// compiled regprog for patternreg_prog70,1890
    AutoCmd	    *cmds;		// list of commands to docmds71,1952
    int		    group;		// group IDgroup72,2002
    int		    patlen;		// strlen() of patpatlen73,2035
    int		    buflocal_nr;	// !=0 for buffer-local AutoPatbuflocal_nr74,2076
    char	    allow_dirs;		// Pattern may match whole pathallow_dirs75,2134
    char	    last;		// last pattern for apply_autocmds()last76,2192
} AutoPat;AutoPat77,2249
static struct event_nameevent_name79,2261
    char	*name;	// event namename81,2288
    event_T	event;	// event numberevent82,2318
} event_names[] =event_names83,2353
static AutoPat *first_autopat[NUM_EVENTS] =first_autopat195,6684
static AutoPat *last_autopat[NUM_EVENTS] =last_autopat205,7117
#define AUGROUP_DEFAULT AUGROUP_DEFAULT215,7549
#define AUGROUP_ERROR	AUGROUP_ERROR216,7608
#define AUGROUP_ALL	AUGROUP_ALL217,7667
struct AutoPatCmd_SAutoPatCmd_S222,7800
    AutoPat	*curpat;	// next AutoPat to examinecurpat224,7822
    AutoCmd	*nextcmd;	// next AutoCmd to executenextcmd225,7870
    int		group;		// group being usedgroup226,7919
    char_u	*fname;		// fname to match withfname227,7956
    char_u	*sfname;	// sfname to match withsfname228,7999
    char_u	*tail;		// tail of fnametail229,8043
    event_T	event;		// current eventevent230,8079
    int		arg_bufnr;	// Initially equal to <abuf>, set to zero whenarg_bufnr231,8116
    AutoPatCmd   *next;		// chain of active apc-s for auto-invalidationnext233,8206
static AutoPatCmd *active_apc_list = NULL; // stack of active autocommandsactive_apc_list236,8282
static garray_T augroups = {0, 0, sizeof(char_u *), 10, NULL};augroups241,8415
#define AUGROUP_NAME(AUGROUP_NAME242,8478
static char_u *deleted_augroup = NULL;deleted_augroup244,8578
static int current_augroup = AUGROUP_DEFAULT;current_augroup249,8686
static int au_need_clean = FALSE;   // need to delete marked patternsau_need_clean251,8733
static event_T	last_event;last_event260,9240
static int	last_group;last_group261,9267
static int	autocmd_blocked = 0;	// block all autocmdsautocmd_blocked262,9290
get_deleted_augroup(void)get_deleted_augroup265,9365
show_autocmd(AutoPat *ap, event_T event)show_autocmd276,9569
au_remove_pat(AutoPat *ap)au_remove_pat340,10919
au_remove_cmds(AutoPat *ap)au_remove_cmds351,11099
static void au_del_cmd(AutoCmd *ac)au_del_cmd361,11295
au_cleanup(void)au_cleanup372,11524
aubuflocal_remove(buf_T *buf)aubuflocal_remove444,13180
au_new_group(char_u *name)au_new_group479,14081
au_del_group(char_u *name)au_del_group504,14615
au_find_group(char_u *name)au_find_group544,15566
au_has_group(char_u *name)au_has_group559,15868
do_augroup(char_u *arg, int del_group)do_augroup568,15987
free_all_autocmds(void)free_all_autocmds605,16702
event_name2nr(char_u *start, char_u **end)event_name2nr630,17251
event_nr2name(event_T event)event_nr2name657,17870
find_end_event(find_end_event671,18161
event_ignored(event_T event)event_ignored708,18872
check_ei(void)check_ei727,19199
au_event_disable(char *what)au_event_disable754,19732
au_event_restore(char_u *old_ei)au_event_restore778,20212
do_autocmd(char_u *arg_in, int forceit)do_autocmd822,21777
au_get_grouparg(char_u **argp)au_get_grouparg979,25168
do_autocmd_event(do_autocmd_event1011,25949
do_doautocmd(do_doautocmd1269,32080
ex_doautoall(exarg_T *eap)ex_doautoall1328,33368
check_nomodeline(char_u **argp)check_nomodeline1382,34892
aucmd_prepbuf(aucmd_prepbuf1399,35287
aucmd_restbuf(aucmd_restbuf1487,37550
static int	autocmd_nested = FALSE;autocmd_nested1596,40438
apply_autocmds(apply_autocmds1603,40595
apply_autocmds_exarg(apply_autocmds_exarg1619,41073
apply_autocmds_retval(apply_autocmds_retval1638,41604
has_cursorhold(void)has_cursorhold1668,42307
trigger_cursorhold(void)trigger_cursorhold1678,42527
has_cursormoved(void)has_cursormoved1699,42913
has_cursormovedI(void)has_cursormovedI1708,43080
has_textchanged(void)has_textchanged1717,43248
has_textchangedI(void)has_textchangedI1726,43415
has_textchangedP(void)has_textchangedP1735,43584
has_insertcharpre(void)has_insertcharpre1744,43755
has_cmdundefined(void)has_cmdundefined1753,43927
has_funcundefined(void)has_funcundefined1762,44098
has_textyankpost(void)has_textyankpost1772,44310
has_completechanged(void)has_completechanged1783,44530
apply_autocmds_group(apply_autocmds_group1794,44760
static char_u	*old_termresponse = NULL;old_termresponse2208,55669
block_autocmds(void)block_autocmds2216,55857
unblock_autocmds(void)unblock_autocmds2227,56070
is_autocmd_blocked(void)is_autocmd_blocked2242,56496
auto_next_pat(auto_next_pat2251,56629
getnextac(int c UNUSED, void *cookie, int indent UNUSED, int do_concat UNUSED)getnextac2317,58339
has_autocmd(event_T event, char_u *sfname, buf_T *buf)has_autocmd2381,59890
get_augroup_name(expand_T *xp UNUSED, int idx)get_augroup_name2428,60947
static int include_groups = FALSE;include_groups2440,61320
set_context_in_autocmd(set_context_in_autocmd2443,61370
get_event_name(expand_T *xp UNUSED, int idx)get_event_name2495,62606
autocmd_supported(char_u *name)autocmd_supported2513,63092
au_exists(char_u *arg)au_exists2533,63660

src/auto/gui_gtk_gresources.c,1630
# define SECTION SECTION4,105
# define SECTIONSECTION6,190
static const SECTION union { const guint8 data[13210]; const double alignment; void * const ptr;}  gui_gtk_resource_data = { {data10,231
static const SECTION union { const guint8 data[13210]; const double alignment; void * const ptr;}  gui_gtk_resource_data = { {alignment10,231
static const SECTION union { const guint8 data[13210]; const double alignment; void * const ptr;}  gui_gtk_resource_data = { {ptr10,231
static const SECTION union { const guint8 data[13210]; const double alignment; void * const ptr;}  gui_gtk_resource_data = { {gui_gtk_resource_data10,231
static const SECTION union { const guint8 data[13210]; const double alignment; void * const ptr;}  gui_gtk_resource_data = {data839,82114
static const SECTION union { const guint8 data[13210]; const double alignment; void * const ptr;}  gui_gtk_resource_data = {alignment839,82114
static const SECTION union { const guint8 data[13210]; const double alignment; void * const ptr;}  gui_gtk_resource_data = {ptr839,82114
static const SECTION union { const guint8 data[13210]; const double alignment; void * const ptr;}  gui_gtk_resource_data = {gui_gtk_resource_data839,82114
static GStaticResource static_resource = { gui_gtk_resource_data.data, sizeof (gui_gtk_resource_data.data) - 1 /* nul terminator */, NULL, NULL, NULL };static_resource1668,139232
GResource *gui_gtk_get_resource (void)gui_gtk_get_resource1670,139432
void gui_gtk_unregister_resource (void)gui_gtk_unregister_resource1676,139584
void gui_gtk_register_resource (void)gui_gtk_register_resource1682,139720

src/auto/pathdef.c,1396
char_u *default_vim_dir = (char_u *)"/usr/local/share/vim";default_vim_dir5,125
char_u *default_vimruntime_dir = (char_u *)"";default_vimruntime_dir6,185
char_u *all_cflags = (char_u *)"gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/pango-1.0 -I/usr/include/fribidi -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libpng16   -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1       ";all_cflags7,232
char_u *all_lflags = (char_u *)"gcc   -L/usr/local/lib -Wl,--as-needed -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lfontconfig -lfreetype -lSM -lICE -lXpm -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo -lelf -lnsl  -lselinux  -lacl -lattr -ldl     -L/usr/lib/python3.8/config-3.8-x86_64-linux-gnu -lpython3.8 -lcrypt -lpthread -ldl -lutil -lm -lm      ";all_lflags8,850
char_u *compiled_user = (char_u *)"coot";compiled_user9,1309
char_u *compiled_sys = (char_u *)"fozzie";compiled_sys10,1351

src/beval.c,315
find_word_under_cursor(find_word_under_cursor22,688
get_beval_info(get_beval_info140,3530
post_balloon(BalloonEval *beval UNUSED, char_u *mesg, list_T *list UNUSED)post_balloon184,4366
can_use_beval(void)can_use_beval205,4857
general_beval_cb(BalloonEval *beval, int state UNUSED)general_beval_cb225,5166

src/blob.c,771
blob_alloc(void)blob_alloc23,489
rettv_blob_alloc(typval_T *rettv)rettv_blob_alloc37,738
rettv_blob_set(typval_T *rettv, blob_T *b)rettv_blob_set52,938
blob_copy(blob_T *from, typval_T *to)blob_copy61,1090
blob_free(blob_T *b)blob_free88,1586
blob_unref(blob_T *b)blob_unref99,1760
blob_len(blob_T *b)blob_len109,1889
blob_get(blob_T *b, int idx)blob_get121,2061
blob_set(blob_T *b, int idx, char_u c)blob_set131,2246
blob_equal(blob_equal140,2407
read_blob(FILE *fd, blob_T *blob)read_blob166,2883
write_blob(FILE *fd, blob_T *blob)write_blob186,3291
blob2string(blob_T *blob, char_u **tofree, char_u *numbuf)blob2string201,3577
string2blob(char_u *str)string2blob231,4245
blob_remove(typval_T *argvars, typval_T *rettv)blob_remove265,4857

src/blowfish.c,1813
#define ARRAY_LENGTH(ARRAY_LENGTH26,950
#define BF_BLOCK BF_BLOCK28,1005
#define BF_BLOCK_MASK BF_BLOCK_MASK29,1027
#define BF_MAX_CFB_LEN BF_MAX_CFB_LEN30,1051
    UINT32_T ul[2];ul33,1107
    char_u   uc[8];uc34,1127
} block8;block835,1147
    UINT32_T	pax[18];	    // P-arraypax49,1500
    UINT32_T	sbx[4][256];	    // S-boxessbx50,1537
    int		randbyte_offset;randbyte_offset51,1578
    int		update_offset;update_offset52,1604
    char_u	cfb_buffer[BF_MAX_CFB_LEN]; // up to 64 bytes usedcfb_buffer53,1628
    int		cfb_len;	    // size of cfb_buffer actually usedcfb_len54,1690
} bf_state_T;bf_state_T55,1748
static UINT32_T pax_init[18] = {pax_init59,1781
static UINT32_T sbx_init[4][256] = {sbx_init68,2075
#define F1(F1328,16457
#define F2(F2335,16650
bf_e_block(bf_e_block343,16859
# define htonl2(htonl2371,17288
# define htonl2(htonl2375,17443
bf_e_cblock(bf_e_cblock379,17486
bf_key_init(bf_key_init399,17879
bf_check_tables(bf_check_tables465,19339
    char_u   password[64];password482,19619
    char_u   salt[9];salt483,19646
    char_u   plaintxt[9];plaintxt484,19668
    char_u   cryptxt[9];cryptxt485,19694
    char_u   badcryptxt[9]; // cryptxt when big/little endian is wrongbadcryptxt486,19719
    UINT32_T keysum;keysum487,19790
} struct_bf_test_data;struct_bf_test_data488,19811
static struct_bf_test_data bf_test_data[] = {bf_test_data494,19932
bf_self_test(void)bf_self_test509,20271
bf_cfb_init(bf_cfb_init561,21512
#define BF_CFB_UPDATE(BF_CFB_UPDATE578,21884
#define BF_RANBYTE(BF_RANBYTE584,22052
crypt_blowfish_encode(crypt_blowfish_encode597,22440
crypt_blowfish_decode(crypt_blowfish_decode620,22804
crypt_blowfish_init(crypt_blowfish_init639,23098
blowfish_self_test(void)blowfish_self_test671,23858

src/buffer.c,5252
# define dev_T dev_T50,1714
# define dev_T dev_T52,1741
static char *msg_loclist = N_("[Location List]");msg_loclist56,1800
static char *msg_qflist = N_("[Quickfix List]");msg_qflist57,1850
static char *e_auabort = N_("E855: Autocommands caused command to abort");e_auabort59,1906
static int	buf_free_count = 0;buf_free_count62,2027
static int	top_file_num = 1;	// highest file numbertop_file_num64,2059
static garray_T buf_reuse = GA_EMPTY;	// file numbers to recyclebuf_reuse65,2111
get_highest_fnum(void)get_highest_fnum71,2238
read_buffer(read_buffer80,2356
buffer_ensure_loaded(buf_T *buf)buffer_ensure_loaded141,3987
open_buffer(open_buffer160,4341
set_bufref(bufref_T *bufref, buf_T *buf)set_bufref385,10416
bufref_valid(bufref_T *bufref)bufref_valid400,10929
buf_valid(buf_T *buf)buf_valid412,11270
static hashtab_T buf_hashtab;buf_hashtab427,11574
buf_hashtab_add(buf_T *buf)buf_hashtab_add430,11621
buf_hashtab_remove(buf_T *buf)buf_hashtab_remove438,11821
can_unload_buffer(buf_T *buf)can_unload_buffer452,12182
close_buffer(close_buffer494,13398
buf_clear_file(buf_T *buf)buf_clear_file756,20642
buf_freeall(buf_T *buf, int flags)buf_freeall782,21413
free_buffer(buf_T *buf)free_buffer888,24470
init_changedtick(buf_T *buf)init_changedtick951,25799
free_buffer_stuff(free_buffer_stuff970,26238
clear_wininfo(buf_T *buf)clear_wininfo1009,27221
goto_buffer(goto_buffer1032,27604
handle_swap_exists(bufref_T *old_curbuf)handle_swap_exists1075,28649
do_bufdel(do_bufdel1165,31186
empty_curbuf(empty_curbuf1272,33802
do_buffer(do_buffer1326,35427
set_curbuf(buf_T *buf, int action)set_curbuf1677,44063
enter_buffer(buf_T *buf)enter_buffer1760,46414
do_autochdir(void)do_autochdir1871,49403
no_write_message(void)no_write_message1881,49596
no_write_message_nobang(buf_T *buf UNUSED)no_write_message_nobang1892,49837
curbuf_reusable(void)curbuf_reusable1911,50242
buflist_new(buflist_new1937,51218
free_buf_options(free_buf_options2215,58166
buflist_getfile(buflist_getfile2338,61742
buflist_getfpos(void)buflist_getfpos2431,63814
buflist_findname_exp(char_u *fname)buflist_findname_exp2457,64335
buflist_findname(char_u *ffname)buflist_findname2486,64901
buflist_findname_stat(buflist_findname_stat2502,65244
buflist_findpat(buflist_findpat2526,65718
    buf_T   *buf;buf2644,68682
    char_u  *match;match2645,68700
} bufmatch_T;bufmatch_T2646,68720
ExpandBufnames(ExpandBufnames2655,68894
buflist_match(buflist_match2808,72051
fname_match(fname_match2828,72558
buflist_findnr(int nr)buflist_findnr2859,73207
buflist_nr2name(buflist_nr2name2882,73803
buflist_setfpos(buflist_setfpos2902,74294
wininfo_other_tab_diff(wininfo_T *wip)wininfo_other_tab_diff2973,75824
find_wininfo(find_wininfo2998,76431
get_winopts(buf_T *buf)get_winopts3037,77354
buflist_findfpos(buf_T *buf)buflist_findfpos3088,78755
buflist_findlnum(buf_T *buf)buflist_findlnum3104,79047
buflist_list(exarg_T *eap)buflist_list3113,79201
buflist_name_nr(buflist_name_nr3251,83225
setfname(setfname3276,83755
buf_set_name(int fnum, char_u *name)buf_set_name3373,85909
buf_name_changed(buf_T *buf)buf_name_changed3397,86455
setaltfname(setaltfname3422,87078
getaltfname(getaltfname3441,87520
buflist_add(char_u *fname, int flags)buflist_add3463,87925
buflist_slash_adjust(void)buflist_slash_adjust3478,88235
buflist_altfpos(win_T *win)buflist_altfpos3497,88581
otherfile(char_u *ffname)otherfile3507,88834
otherfile_buf(otherfile_buf3517,88959
buf_setino(buf_T *buf)buf_setino3567,90266
buf_same_ino(buf_same_ino3585,90592
fileinfo(fileinfo3599,90806
col_print(col_print3714,94126
static char_u *lasttitle = NULL;lasttitle3727,94390
static char_u *lasticon = NULL;lasticon3728,94423
maketitle(void)maketitle3734,94534
#define SPACE_FOR_FNAME SPACE_FOR_FNAME3792,95753
#define SPACE_FOR_DIR SPACE_FOR_DIR3793,95792
#define SPACE_FOR_ARGNR SPACE_FOR_ARGNR3794,95830
value_changed(char_u *str, char_u **last)value_changed3952,99554
resettitle(void)resettitle3977,100029
free_titles(void)free_titles3984,100140
build_stl_str_hl(build_stl_str_hl4009,100878
#define TMPLEN TMPLEN4069,102111
get_rel_pos(get_rel_pos4902,120722
append_arg_number(append_arg_number4938,121853
fix_fname(char_u  *fname)fix_fname4970,122570
fname_expand(fname_expand5015,123971
ex_buffer_all(exarg_T *eap)ex_buffer_all5047,124627
do_modelines(int flags)do_modelines5255,129772
chk_modeline(chk_modeline5289,130651
bt_normal(buf_T *buf)bt_normal5419,133712
bt_quickfix(buf_T *buf)bt_quickfix5429,133896
bt_terminal(buf_T *buf)bt_terminal5440,134087
bt_help(buf_T *buf)bt_help5450,134229
bt_prompt(buf_T *buf)bt_prompt5459,134352
bt_popup(buf_T *buf)bt_popup5468,134524
bt_nofilename(buf_T *buf)bt_nofilename5479,134795
bt_nofile(buf_T *buf)bt_nofile5491,135064
bt_dontwrite(buf_T *buf)bt_dontwrite5501,135264
bt_dontwrite_msg(buf_T *buf)bt_dontwrite_msg5510,135468
buf_hide(buf_T *buf)buf_hide5526,135750
buf_spname(buf_T *buf)buf_spname5544,136157
set_buflisted(int on)set_buflisted5590,137213
buf_contents_changed(buf_T *buf)buf_contents_changed5607,137588
wipe_buffer(wipe_buffer5664,138986

src/bufwrite.c,1382
#define SMALLBUFSIZE	SMALLBUFSIZE20,449
struct bw_infobw_info25,586
    int		bw_fd;		// file descriptorbw_fd27,603
    char_u	*bw_buf;	// buffer with data to be writtenbw_buf28,639
    int		bw_len;		// length of databw_len29,693
    int		bw_flags;	// FIO_ flagsbw_flags30,729
    buf_T	*bw_buffer;	// buffer being writtenbw_buffer32,780
    char_u	bw_rest[CONV_RESTLEN]; // not converted bytesbw_rest34,833
    int		bw_restlen;	// nr of bytes in bw_rest[]bw_restlen35,890
    int		bw_first;	// first write callbw_first36,939
    char_u	*bw_conv_buf;	// buffer for writing converted charsbw_conv_buf37,978
    size_t	bw_conv_buflen; // size of bw_conv_bufbw_conv_buflen38,1041
    int		bw_conv_error;	// set for conversion errorbw_conv_error39,1091
    linenr_T	bw_conv_error_lnum;  // first line with error or zerobw_conv_error_lnum40,1143
    linenr_T	bw_start_lnum;  // line number at start of bufferbw_start_lnum41,1210
    iconv_t	bw_iconv_fd;	// descriptor for iconv() or -1bw_iconv_fd43,1290
ucs2bytes(ucs2bytes52,1470
buf_write_bytes(struct bw_info *ip)buf_write_bytes139,2890
check_mtime(buf_T *buf, stat_T *st)check_mtime524,12868
make_bom(char_u *buf, char_u *name)make_bom547,13589
set_file_time(set_file_time572,14012
buf_write(buf_write618,15258
# define TRUNC_ON_OPEN TRUNC_ON_OPEN1783,47244
#  define MIN(MIN2085,55222

src/change.c,2075
change_warning(int col)change_warning27,783
changed(void)changed79,2114
changed_internal(void)changed_internal143,3773
static long next_listener_id = 0;next_listener_id155,4008
check_recorded_changes(check_recorded_changes163,4239
may_record_change(may_record_change199,5107
f_listener_add(typval_T *argvars, typval_T *rettv)f_listener_add239,6085
f_listener_flush(typval_T *argvars, typval_T *rettv UNUSED)f_listener_flush278,6797
f_listener_remove(typval_T *argvars, typval_T *rettv)f_listener_remove295,7079
may_invoke_listeners(buf_T *buf, linenr_T lnum, linenr_T lnume, int added)may_invoke_listeners330,7755
invoke_listeners(buf_T *buf)invoke_listeners340,7997
remove_listeners(buf_T *buf)remove_listeners410,9780
changed_common(changed_common431,10204
changedOneline(buf_T *buf, linenr_T lnum)changedOneline642,16363
changed_bytes(linenr_T lnum, colnr_T col)changed_bytes670,17071
inserted_bytes(linenr_T lnum, colnr_T col, int added UNUSED)inserted_bytes699,17716
appended_lines(linenr_T lnum, long count)appended_lines715,18152
appended_lines_mark(linenr_T lnum, long count)appended_lines_mark724,18314
deleted_lines(linenr_T lnum, long count)deleted_lines743,18921
deleted_lines_mark(linenr_T lnum, long count)deleted_lines_mark754,19199
changed_lines_buf(changed_lines_buf764,19447
changed_lines(changed_lines809,20793
unchanged(buf_T *buf, int ff, int always_inc_changedtick)unchanged848,21893
save_file_ff(buf_T *buf)save_file_ff875,22532
file_ff_differs(buf_T *buf, int ignore_empty)file_ff_differs900,23321
ins_bytes(char_u *p)ins_bytes926,24139
ins_bytes_len(char_u *p, int len)ins_bytes_len936,24333
ins_char(int c)ins_char964,24962
ins_char_bytes(char_u *buf, int charlen)ins_char_bytes978,25237
ins_str(char_u *s)ins_str1116,29120
del_char(int fixpos)del_char1151,30037
del_chars(long count, int fixpos)del_chars1168,30367
del_bytes(del_bytes1193,30851
open_line(open_line1330,34880
truncate_line(int fixpos)truncate_line2274,60720
del_lines(long nlines,	int undo)del_lines2305,61407

src/channel.c,14465
# define CH_HAS_GUI CH_HAS_GUI19,420
# define SOCK_ERRNO SOCK_ERRNO26,637
# undef ECONNREFUSEDECONNREFUSED27,683
# define ECONNREFUSED ECONNREFUSED28,704
# undef EWOULDBLOCKEWOULDBLOCK29,742
# define EWOULDBLOCK EWOULDBLOCK30,762
# undef EINPROGRESSEINPROGRESS31,798
# define EINPROGRESS EINPROGRESS32,818
#  undef EINTREINTR34,868
# define EINTR EINTR36,891
# define sock_write(sock_write37,915
# define sock_read(sock_read38,979
# define sock_close(sock_close39,1042
# define SOCK_ERRNOSOCK_ERRNO48,1219
# define sock_write(sock_write49,1239
# define sock_read(sock_read50,1293
# define sock_close(sock_close51,1345
# define fd_read(fd_read52,1379
# define fd_write(fd_write53,1429
# define fd_close(fd_close54,1481
static int channel_need_redraw = FALSE;channel_need_redraw65,1956
static int safe_to_invoke_callback = 0;safe_to_invoke_callback69,2109
static char *part_names[] = {"sock", "out", "err", "in"};part_names71,2150
fd_read(sock_T fd, char *buf, size_t len)fd_read75,2237
fd_write(sock_T fd, char *buf, size_t len)fd_write86,2432
fd_close(sock_T fd)fd_close124,3323
static FILE *log_fd = NULL;log_fd133,3441
static proftime_T log_start;log_start135,3489
ch_logfile(char_u *fname, char_u *opt)ch_logfile139,3535
ch_log_active(void)ch_log_active173,4095
ch_log_lead(const char *what, channel_T *ch, ch_part_T part)ch_log_lead179,4163
ch_log(channel_T *ch, const char *fmt, ...)ch_log205,4706
ch_error(channel_T *ch, const char *fmt, ...)ch_error230,5138
# undef PERRORPERROR247,5413
# define PERROR(PERROR248,5428
strerror_win32(int eno)strerror_win32251,5518
static channel_T *first_channel = NULL;first_channel294,6222
static int next_ch_id = 0;next_ch_id295,6262
add_channel(void)add_channel303,6456
has_any_channel(void)has_any_channel338,7182
channel_still_useful(channel_T *channel)channel_still_useful349,7399
channel_can_close(channel_T *channel)channel_can_close392,9134
channel_free_contents(channel_T *channel)channel_free_contents401,9289
channel_free_channel(channel_T *channel)channel_free_channel409,9454
channel_free(channel_T *channel)channel_free421,9745
channel_may_free(channel_T *channel)channel_may_free442,10206
channel_unref(channel_T *channel)channel_unref458,10568
free_unused_channels_contents(int copyID, int mask)free_unused_channels_contents466,10724
free_unused_channels(int copyID, int mask)free_unused_channels490,11327
channel_fd2channel(sock_T fd, ch_part_T *partp)channel_fd2channel515,11906
channel_read_fd(int fd)channel_read_fd535,12299
messageFromServerX11(XtPointer clientData,messageFromServerX11553,12638
messageFromServerGtk3(GIOChannel *unused1 UNUSED,messageFromServerGtk3564,12866
messageFromServerGtk2(gpointer clientData,messageFromServerGtk2574,13170
channel_gui_register_one(channel_T *channel, ch_part_T part UNUSED)channel_gui_register_one584,13358
channel_gui_register(channel_T *channel)channel_gui_register641,15062
channel_gui_register_all(void)channel_gui_register_all659,15651
channel_gui_unregister_one(channel_T *channel UNUSED, ch_part_T part UNUSED)channel_gui_unregister_one668,15839
channel_gui_unregister(channel_T *channel)channel_gui_unregister694,16598
static char *e_cannot_connect = N_("E902: Cannot connect to port");e_cannot_connect704,16783
channel_open(channel_open714,17080
copy_callback(callback_T *dest, callback_T *src)copy_callback991,23898
free_set_callback(callback_T *cbp, callback_T *callback)free_set_callback1009,24266
prepare_buffer(buf_T *buf)prepare_buffer1023,24554
channel_find_buffer(char_u *name, int err, int msg)channel_find_buffer1043,25084
channel_set_options(channel_T *channel, jobopt_T *opt)channel_set_options1077,25821
channel_open_func(typval_T *argvars)channel_open_func1212,29987
ch_close_part(channel_T *channel, ch_part_T part)ch_close_part1270,31218
channel_set_pipes(channel_T *channel, sock_T in, sock_T out, sock_T err)channel_set_pipes1301,31968
channel_set_job(channel_T *channel, job_T *job, jobopt_T *options)channel_set_job1345,33101
channel_set_req_callback(channel_set_req_callback1385,34207
write_buf_line(buf_T *buf, linenr_T lnum, channel_T *channel)write_buf_line1409,34702
can_write_buf_line(channel_T *channel)can_write_buf_line1441,35422
channel_write_in(channel_T *channel)channel_write_in1509,36872
channel_buffer_free(buf_T *buf)channel_buffer_free1565,38458
channel_write_input(channel_T *channel)channel_write_input1588,38981
channel_write_any_lines(void)channel_write_any_lines1607,39455
channel_write_new_lines(buf_T *buf)channel_write_new_lines1619,39709
invoke_callback(channel_T *channel, callback_T *callback, typval_T *argv)invoke_callback1666,40980
channel_peek(channel_T *channel, ch_part_T part)channel_peek1686,41481
channel_first_nl(readq_T *node)channel_first_nl1699,41747
channel_get(channel_T *channel, ch_part_T part, int *outlen)channel_get1716,42101
channel_get_all(channel_T *channel, ch_part_T part, int *outlen)channel_get_all1742,42726
channel_consume(channel_T *channel, ch_part_T part, int len)channel_consume1814,44304
channel_collapse(channel_T *channel, ch_part_T part, int want_nl)channel_collapse1831,44810
channel_save(channel_T *channel, ch_part_T part, char_u *buf, int len,channel_save1892,46320
channel_fill(js_read_T *reader)channel_fill1967,48071
channel_parse_json(channel_T *channel, ch_part_T part)channel_parse_json2007,48961
remove_cb_node(cbq_T *head, cbq_T *node)remove_cb_node2157,52718
remove_json_node(jsonq_T *head, jsonq_T *node)remove_json_node2174,53124
channel_add_block_id(chanpart_T *chanpart, int id)channel_add_block_id2191,53508
channel_remove_block_id(chanpart_T *chanpart, int id)channel_remove_block_id2208,53871
channel_has_block_id(chanpart_T *chanpart, int id)channel_has_block_id2232,54410
channel_get_json(channel_get_json2253,55047
channel_push_json(channel_T *channel, ch_part_T part, typval_T *rettv)channel_push_json2295,56087
#define CH_JSON_MAX_ARGS CH_JSON_MAX_ARGS2349,57356
channel_exe_cmd(channel_T *channel, ch_part_T part, typval_T *argv)channel_exe_cmd2357,57569
invoke_one_time_callback(invoke_one_time_callback2490,60955
append_to_buffer(buf_T *buffer, char_u *msg, channel_T *channel, ch_part_T part)append_to_buffer2507,61442
drop_messages(channel_T *channel, ch_part_T part)drop_messages2616,64270
may_invoke_callback(channel_T *channel, ch_part_T part)may_invoke_callback2633,64710
channel_can_write_to(channel_T *channel)channel_can_write_to2862,70638
channel_is_open(channel_T *channel)channel_is_open2874,70928
channel_has_readahead(channel_T *channel, ch_part_T part)channel_has_readahead2886,71237
channel_status(channel_T *channel, int req_part)channel_status2909,71841
channel_part_info(channel_T *channel, dict_T *dict, char *name, ch_part_T part)channel_part_info2948,72639
channel_info(channel_T *channel, dict_T *dict)channel_info2997,73969
channel_close(channel_T *channel, int invoke_close_cb)channel_close3022,74679
channel_close_in(channel_T *channel)channel_close_in3105,76825
remove_from_writeque(writeq_T *wq, writeq_T *entry)remove_from_writeque3111,76920
channel_clear_one(channel_T *channel, ch_part_T part)channel_clear_one3126,77219
channel_clear(channel_T *channel)channel_clear3162,78102
channel_free_all(void)channel_free_all3176,78520
#define DETACH_MSG_RAW DETACH_MSG_RAW3188,78789
#define MAXMSGSIZE MAXMSGSIZE3191,78870
channel_fill_wfds(int maxfd_arg, fd_set *wfds)channel_fill_wfds3198,79008
channel_fill_poll_write(int nfd_in, struct pollfd *fds)channel_fill_poll_write3223,79580
    CW_READY,CW_READY3249,80119
    CW_NOT_READY,CW_NOT_READY3250,80133
    CW_ERRORCW_ERROR3251,80151
} channel_wait_result;channel_wait_result3252,80164
channel_wait(channel_T *channel, sock_T fd, int timeout)channel_wait3261,80427
ch_close_part_on_error(ch_close_part_on_error3368,82609
channel_close_now(channel_T *channel)channel_close_now3413,84240
channel_read(channel_T *channel, ch_part_T part, char *func)channel_read3427,84678
channel_read_block(channel_read_block3495,86555
static int channel_blocking_wait = 0;channel_blocking_wait3577,88547
channel_in_blocking_wait(void)channel_in_blocking_wait3583,88668
channel_read_json_block(channel_read_json_block3597,89056
get_channel_arg(typval_T *tv, int check_open, int reading, ch_part_T part)get_channel_arg3694,91367
common_channel_read(typval_T *argvars, typval_T *rettv, int raw, int blob)common_channel_read3730,92199
channel_handle_events(int only_keep_open)channel_handle_events3816,94206
channel_any_keep_open()channel_any_keep_open3851,94996
channel_set_nonblock(channel_T *channel, ch_part_T part)channel_set_nonblock3867,95295
channel_send(channel_send3891,95782
send_common(send_common4073,99698
ch_expr_common(typval_T *argvars, typval_T *rettv, int eval)ch_expr_common4119,100867
ch_raw_common(typval_T *argvars, typval_T *rettv, int eval)ch_raw_common4181,102525
#define KEEP_OPEN_TIME KEEP_OPEN_TIME4219,103487
channel_poll_setup(int nfd_in, void *fds_in, int *towait)channel_poll_setup4228,103753
channel_poll_check(int ret_in, void *fds_in)channel_poll_check4273,104796
channel_select_setup(channel_select_setup4320,105905
channel_select_check(int ret_in, void *rfds_in, void *wfds_in)channel_select_check4373,107020
channel_parse_messages(void)channel_parse_messages4423,108306
channel_any_readahead(void)channel_any_readahead4524,110709
set_ref_in_channel(int copyID)set_ref_in_channel4548,111098
channel_part_send(channel_T *channel)channel_part_send4569,111562
channel_part_read(channel_T *channel)channel_part_read4580,111772
channel_get_mode(channel_T *channel, ch_part_T part)channel_get_mode4592,112011
channel_get_timeout(channel_T *channel, ch_part_T part)channel_get_timeout4603,112220
handle_mode(typval_T *item, jobopt_T *opt, ch_mode_T *modep, int jo)handle_mode4609,112342
handle_io(typval_T *item, ch_part_T part, jobopt_T *opt)handle_io4631,112796
clear_job_options(jobopt_T *opt)clear_job_options4658,113441
free_job_options(jobopt_T *opt)free_job_options4667,113579
part_from_char(int c)part_from_char4697,114621
get_job_options(typval_T *tv, jobopt_T *opt, int supported, int supported2)get_job_options4709,114940
static job_T *first_job = NULL;first_job5289,129145
job_free_contents(job_T *job)job_free_contents5292,129194
job_unlink(job_T *job)job_unlink5331,130181
job_free_job(job_T *job)job_free_job5342,130399
job_free(job_T *job)job_free5349,130485
static job_T *jobs_to_free = NULL;jobs_to_free5358,130598
job_free_later(job_T *job)job_free_later5364,130731
free_jobs_to_free_later(void)free_jobs_to_free_later5372,130857
job_free_all(void)job_free_all5387,131095
job_need_end_check(job_T *job)job_need_end_check5403,131361
job_channel_still_useful(job_T *job)job_channel_still_useful5413,131589
job_channel_can_close(job_T *job)job_channel_can_close5422,131783
job_still_useful(job_T *job)job_still_useful5433,132143
job_any_running()job_any_running5443,132396
win32_escape_arg(char_u *arg)win32_escape_arg5463,132828
win32_build_cmd(list_T *l, garray_T *gap)win32_build_cmd5540,134187
job_cleanup(job_T *job)job_cleanup5571,134922
set_ref_in_job(int copyID)set_ref_in_job5618,136308
job_unref(job_T *job)job_unref5638,136722
free_unused_jobs_contents(int copyID, int mask)free_unused_jobs_contents5666,137460
free_unused_jobs(int copyID, int mask)free_unused_jobs5684,137901
job_alloc(void)job_alloc5705,138317
job_set_options(job_T *job, jobopt_T *opt)job_set_options5726,138634
job_stop_on_exit(void)job_stop_on_exit5753,139314
has_pending_job(void)has_pending_job5767,139686
#define MAX_CHECK_ENDED MAX_CHECK_ENDED5781,140085
job_check_ended(void)job_check_ended5788,140235
job_start(job_start5828,141139
# define USE_ARGVUSE_ARGV5840,141363
job_status(job_T *job)job_status6031,145619
job_stop(job_T *job, typval_T *argvars, char *type)job_stop6055,146104
invoke_prompt_callback(void)invoke_prompt_callback6096,147067
invoke_prompt_interrupt(void)invoke_prompt_interrupt6130,148004
f_prompt_setcallback(typval_T *argvars, typval_T *rettv UNUSED)f_prompt_setcallback6150,148468
f_prompt_setinterrupt(typval_T *argvars, typval_T *rettv UNUSED)f_prompt_setinterrupt6173,148941
f_prompt_setprompt(typval_T *argvars, typval_T *rettv UNUSED)f_prompt_setprompt6196,149410
f_ch_canread(typval_T *argvars, typval_T *rettv)f_ch_canread6216,149778
f_ch_close(typval_T *argvars, typval_T *rettv UNUSED)f_ch_close6231,150170
f_ch_close_in(typval_T *argvars, typval_T *rettv UNUSED)f_ch_close_in6246,150436
f_ch_getbufnr(typval_T *argvars, typval_T *rettv)f_ch_getbufnr6258,150667
f_ch_getjob(typval_T *argvars, typval_T *rettv)f_ch_getjob6286,151297
f_ch_info(typval_T *argvars, typval_T *rettv UNUSED)f_ch_info6303,151631
f_ch_log(typval_T *argvars, typval_T *rettv UNUSED)f_ch_log6315,151905
f_ch_logfile(typval_T *argvars, typval_T *rettv UNUSED)f_ch_logfile6330,152216
f_ch_open(typval_T *argvars, typval_T *rettv)f_ch_open6349,152649
f_ch_read(typval_T *argvars, typval_T *rettv)f_ch_read6361,152884
f_ch_readblob(typval_T *argvars, typval_T *rettv)f_ch_readblob6370,153034
f_ch_readraw(typval_T *argvars, typval_T *rettv)f_ch_readraw6379,153185
f_ch_evalexpr(typval_T *argvars, typval_T *rettv)f_ch_evalexpr6388,153337
f_ch_sendexpr(typval_T *argvars, typval_T *rettv)f_ch_sendexpr6397,153478
f_ch_evalraw(typval_T *argvars, typval_T *rettv)f_ch_evalraw6406,153619
f_ch_sendraw(typval_T *argvars, typval_T *rettv)f_ch_sendraw6415,153757
f_ch_setoptions(typval_T *argvars, typval_T *rettv UNUSED)f_ch_setoptions6424,153899
f_ch_status(typval_T *argvars, typval_T *rettv)f_ch_status6443,154339
get_job_arg(typval_T *tv)get_job_arg6471,155006
f_job_getchannel(typval_T *argvars, typval_T *rettv)f_job_getchannel6491,155298
job_info(job_T *job, dict_T *dict)job_info6508,155628
job_info_all(list_T *l)job_info_all6560,156965
f_job_info(typval_T *argvars, typval_T *rettv)f_job_info6579,157233
f_job_setoptions(typval_T *argvars, typval_T *rettv UNUSED)f_job_setoptions6596,157599
f_job_start(typval_T *argvars, typval_T *rettv)f_job_start6613,157965
f_job_status(typval_T *argvars, typval_T *rettv)f_job_status6625,158207
f_job_stop(typval_T *argvars, typval_T *rettv)f_job_stop6640,158472

src/charset.c,5701
static int    chartab_initialized = FALSE;chartab_initialized19,504
#define SET_CHARTAB(SET_CHARTAB23,642
#define RESET_CHARTAB(RESET_CHARTAB24,729
#define GET_CHARTAB(GET_CHARTAB25,819
static char_u	g_chartab[256];g_chartab28,967
#define CT_CELL_MASK	CT_CELL_MASK33,1031
#define CT_PRINT_CHAR	CT_PRINT_CHAR34,1098
#define CT_ID_CHAR	CT_ID_CHAR35,1158
#define CT_FNAME_CHAR	CT_FNAME_CHAR36,1208
init_chartab(void)init_chartab67,2540
buf_init_chartab(buf_init_chartab73,2615
trans_characters(trans_characters282,7586
transstr(char_u *s)transstr321,8491
str_foldcase(str_foldcase390,9771
#define GA_CHAR(GA_CHAR400,9908
#define GA_PTR(GA_PTR401,9954
#define STR_CHAR(STR_CHAR402,10001
#define STR_PTR(STR_PTR403,10058
static char_u	transchar_buf[7];transchar_buf502,12386
transchar(int c)transchar505,12432
transchar_byte(int c)transchar_byte540,13090
transchar_nonprint(char_u *buf, int c)transchar_nonprint556,13455
transchar_hex(char_u *buf, int c)transchar_hex621,14782
nr2hex(unsigned c)nr2hex643,15263
byte2cells(int b)byte2cells659,15699
char2cells(int c)char2cells672,16018
ptr2cells(char_u *p)ptr2cells698,16623
vim_strsize(char_u *s)vim_strsize712,17024
vim_strnsize(char_u *s, int len)vim_strnsize722,17231
# define RET_WIN_BUF_CHARTABSIZE(RET_WIN_BUF_CHARTABSIZE749,17720
# define RET_WIN_BUF_CHARTABSIZE(RET_WIN_BUF_CHARTABSIZE757,17952
chartabsize(char_u *p, colnr_T col)chartabsize769,18193
win_chartabsize(win_T *wp, char_u *p, colnr_T col)win_chartabsize776,18323
linetabsize(char_u *s)linetabsize787,18572
linetabsize_col(int startcol, char_u *s)linetabsize_col796,18707
win_linetabsize(win_T *wp, char_u *line, colnr_T len)win_linetabsize810,19025
vim_isIDc(int c)vim_isIDc826,19409
vim_iswordc(int c)vim_iswordc837,19699
vim_iswordc_buf(int c, buf_T *buf)vim_iswordc_buf843,19770
vim_iswordp(char_u *p)vim_iswordp860,20141
vim_iswordp_buf(char_u *p, buf_T *buf)vim_iswordp_buf866,20216
vim_isfilec(int c)vim_isfilec880,20503
vim_isfilec_or_wc(int c)vim_isfilec_or_wc892,20841
vim_isprintc(int c)vim_isprintc907,21144
vim_isprintc_strict(int c)vim_isprintc_strict919,21423
lbr_chartabsize(lbr_chartabsize932,21739
lbr_chartabsize_adv(lbr_chartabsize_adv955,22287
win_lbr_chartabsize(win_lbr_chartabsize975,22745
win_nolbr_chartabsize(win_nolbr_chartabsize1142,26755
in_win_border(win_T *wp, colnr_T vcol)in_win_border1177,27485
getvcol(getvcol1204,28266
getvcol_nolist(pos_T *posp)getvcol_nolist1344,31591
getvvcol(getvvcol1362,31936
getvcols(getvcols1413,32947
skipwhite(char_u *q)skipwhite1451,33580
getwhitecols_curline()getwhitecols_curline1465,33812
getwhitecols(char_u *p)getwhitecols1471,33891
skipdigits(char_u *q)skipdigits1480,33989
skipbin(char_u *q)skipbin1494,34223
skiphex(char_u *q)skiphex1507,34401
skiptobin(char_u *q)skiptobin1521,34594
skiptodigit(char_u *q)skiptodigit1534,34788
skiptohex(char_u *q)skiptohex1547,34991
vim_isdigit(int c)vim_isdigit1563,35356
vim_isxdigit(int c)vim_isxdigit1574,35598
vim_isbdigit(int c)vim_isbdigit1586,35813
#define LATIN1LOWER LATIN1LOWER1597,36126
#define LATIN1UPPER LATIN1UPPER1598,36150
static char_u latin1flags[257] = "                                                                 UUUUUUUUUUUUUUUUUUUUUUUUUU      llllllllllllllllllllllllll                                                                     UUUUUUUUUUUUUUUUUUUUUUU UUUUUUUllllllllllllllllllllllll llllllll";latin1flags1600,36175
static char_u latin1upper[257] = "                                 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xf7\xd8\xd9\xda\xdb\xdc\xdd\xde\xff";latin1upper1601,36468
static char_u latin1lower[257] = "                                 !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xd7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff";latin1lower1602,37150
vim_islower(int c)vim_islower1605,37841
vim_isupper(int c)vim_isupper1629,38252
vim_toupper(int c)vim_toupper1653,38663
vim_tolower(int c)vim_tolower1679,39144
skiptowhite(char_u *p)skiptowhite1708,39694
skiptowhite_esc(char_u *p)skiptowhite_esc1719,39879
getdigits(char_u **pp)getdigits1735,40187
vim_isblankline(char_u *lbuf)vim_isblankline1753,40495
vim_str2nr(vim_str2nr1783,41577
hex2nr(int c)hex2nr1977,45922
hexhex2nr(char_u *p)hexhex2nr1992,46245
rem_backslash(char_u *str)rem_backslash2014,47117
backslash_halve(char_u *p)backslash_halve2035,47587
backslash_halve_save(char_u *p)backslash_halve_save2047,47814
static char_u ebcdic2ascii_tab[256] =ebcdic2ascii_tab2064,48202
ebcdic2ascii(char_u *buffer, int len)ebcdic2ascii2105,50056

src/cindent.c,4067
#define LOOKFOR_INITIAL	LOOKFOR_INITIAL21,526
#define LOOKFOR_IF	LOOKFOR_IF22,553
#define LOOKFOR_DO	LOOKFOR_DO23,575
#define LOOKFOR_CASE	LOOKFOR_CASE24,597
#define LOOKFOR_ANY	LOOKFOR_ANY25,621
#define LOOKFOR_TERM	LOOKFOR_TERM26,644
#define LOOKFOR_UNTERM	LOOKFOR_UNTERM27,668
#define LOOKFOR_SCOPEDECL	LOOKFOR_SCOPEDECL28,694
#define LOOKFOR_NOBREAK	LOOKFOR_NOBREAK29,722
#define LOOKFOR_CPP_BASECLASS	LOOKFOR_CPP_BASECLASS30,749
#define LOOKFOR_ENUM_OR_INIT	LOOKFOR_ENUM_OR_INIT31,781
#define LOOKFOR_JS_KEY	LOOKFOR_JS_KEY32,813
#define LOOKFOR_COMMA	LOOKFOR_COMMA33,840
cin_is_cinword(char_u *line)cin_is_cinword40,1009
skip_string(char_u *p)skip_string76,1790
ind_find_start_comment(void)	    // XXXind_find_start_comment146,3288
find_start_comment(int ind_maxcomment)	// XXXfind_start_comment152,3402
find_start_rawstring(int ind_maxcomment)	// XXXfind_start_rawstring188,4291
ind_find_start_CORS(linenr_T *is_raw)	    // XXXind_find_start_CORS227,5337
cindent_on(void)cindent_on262,6319
    int	    found;found273,6508
    lpos_T  lpos;lpos274,6527
} cpp_baseclass_cache_T;cpp_baseclass_cache_T275,6545
cin_skipcomment(char_u *s)cin_skipcomment282,6705
cin_nocode(char_u *s)cin_nocode322,7434
cin_iscomment(char_u *p)cin_iscomment331,7568
cin_islinecomment(char_u *p)cin_islinecomment340,7720
find_line_comment(void) // XXXfind_line_comment349,7897
cin_has_js_key(char_u *text)cin_has_js_key375,8301
cin_islabel_skip(char_u **s)cin_islabel_skip405,8887
cin_isscopedecl(char_u *s)cin_isscopedecl423,9235
cin_ispreproc(char_u *s)cin_ispreproc443,9642
cin_ispreproc_cont(char_u **pp, linenr_T *lnump, int *amount)cin_ispreproc_cont457,9987
cin_iselse(cin_iselse490,10622
cin_isterminated(cin_isterminated508,11216
cin_starts_with(char_u *s, char *word)cin_starts_with553,12128
cin_isdefault(char_u *s)cin_isdefault564,12324
cin_iscase(cin_iscase575,12541
cin_islabel(void)		// XXXcin_islabel620,13412
cin_ends_in(char_u *s, char_u *find, char_u *ignore)cin_ends_in678,14906
cin_isinit(void)cin_isinit707,15533
#define FIND_NAMESPACE_LIM FIND_NAMESPACE_LIM745,16220
cin_is_cpp_namespace(char_u *s)cin_is_cpp_namespace751,16319
cin_is_cpp_extern_c(char_u *s)cin_is_cpp_extern_c800,17275
after_label(char_u *l)after_label851,18292
get_indent_nolabel (linenr_T lnum)	// XXXget_indent_nolabel878,18796
skip_label(linenr_T lnum, char_u **pp)skip_label903,19289
cin_first_id_amount(void)cin_first_id_amount939,20115
cin_get_equal_amount(linenr_T lnum)cin_get_equal_amount990,21516
cin_skip2pos(pos_T *trypos)cin_skip2pos1033,22335
find_match_char(int c, int ind_maxparen)	// XXXfind_match_char1057,22713
find_match_paren(int ind_maxparen)	// XXXfind_match_paren1110,23919
find_last_paren(char_u *l, int start, int end)find_last_paren1120,24167
cin_isfuncdecl(cin_isfuncdecl1159,25238
cin_isif(char_u *p)cin_isif1273,27766
cin_isdo(char_u *p)cin_isdo1279,27862
cin_iswhileofdo (char_u *p, linenr_T lnum)	// XXXcin_iswhileofdo1290,28173
cin_is_if_for_while_before_offset(char_u *line, int *poffset)cin_is_if_for_while_before_offset1326,29120
cin_iswhileofdo_end(int terminated)cin_iswhileofdo_end1372,29945
cin_isbreak(char_u *p)cin_isbreak1421,30975
cin_is_cpp_baseclass(cin_is_cpp_baseclass1440,31472
get_baseclass_amount(int col)get_baseclass_amount1601,35229
find_start_brace(void)	    // XXXfind_start_brace1638,36090
find_match_paren_after_brace (int ind_maxparen)	    // XXXfind_match_paren_after_brace1669,36905
corr_ind_maxparen(pos_T *startpos)corr_ind_maxparen1695,37669
parse_cino(buf_T *buf)parse_cino1709,38046
find_match(int lookfor, linenr_T ourscope)find_match1930,44990
get_c_indent(void)get_c_indent2030,47352
#define BRACE_IN_COL0	BRACE_IN_COL02046,47687
#define BRACE_AT_START	BRACE_AT_START2047,47738
#define BRACE_AT_END	BRACE_AT_END2048,47795
in_cinkeys(in_cinkeys3867,98383
do_c_expr_indent(void)do_c_expr_indent4101,103831
f_cindent(typval_T *argvars UNUSED, typval_T *rettv)f_cindent4117,104079

src/cmdexpand.c,1465
static int	cmd_showtail;	// Only show path tail in lists ?cmd_showtail16,357
sort_func_compare(const void *s1, const void *s2)sort_func_compare31,1053
ExpandEscape(ExpandEscape42,1307
nextwild(nextwild133,3614
ExpandOne(ExpandOne280,8099
ExpandInit(expand_T *xp)ExpandInit494,13285
ExpandCleanup(expand_T *xp)ExpandCleanup514,13654
showmatches(expand_T *xp, int wildmenu UNUSED)showmatches529,13982
#define L_SHOWFILE(L_SHOWFILE532,14080
sm_gettail(char_u *s)sm_gettail712,18535
expand_showtail(expand_T *xp)expand_showtail742,19046
addstar(addstar777,20082
set_expand_context(expand_T *xp)set_expand_context945,25843
set_one_cmd_context(set_one_cmd_context971,26643
set_cmd_context(set_cmd_context1780,45526
expand_cmdline(expand_cmdline1837,47098
cleanup_help_tags(int num_file, char_u **file)cleanup_help_tags1885,48439
get_behave_arg(expand_T *xp UNUSED, int idx)get_behave_arg1939,49619
get_messages_arg(expand_T *xp UNUSED, int idx)get_messages_arg1953,49912
get_mapclear_arg(expand_T *xp UNUSED, int idx)get_mapclear_arg1961,50046
ExpandFromContext(ExpandFromContext1972,50240
ExpandGeneric(ExpandGeneric2235,57925
expand_shellcmd(expand_shellcmd2333,60109
call_user_expand_func(call_user_expand_func2475,63366
ExpandUserDefined(ExpandUserDefined2525,64559
ExpandUserList(ExpandUserList2575,65508
globpath(globpath2615,66429
f_getcompletion(typval_T *argvars, typval_T *rettv)f_getcompletion2675,67770

src/cmdhist.c,1797
static histentry_T *(history[HIST_COUNT]) = {NULL, NULL, NULL, NULL, NULL};history16,364
static int	hisidx[HIST_COUNT] = {-1, -1, -1, -1, -1};  // lastused entryhisidx17,440
static int	hisnum[HIST_COUNT] = {0, 0, 0, 0, 0};hisnum18,513
static int	hislen = 0;		// actual length of history tableshislen20,623
get_hislen(void)get_hislen26,741
get_histentry(int hist_type)get_histentry35,856
set_histentry(int hist_type, histentry_T *entry)set_histentry41,930
get_hisidx(int hist_type)get_hisidx47,1026
get_hisnum(int hist_type)get_hisnum53,1098
hist_char2type(int c)hist_char2type62,1239
static char *(history_names[]) =history_names81,1639
get_history_arg(expand_T *xp UNUSED, int idx)get_history_arg96,1875
init_history(void)init_history120,2574
clear_hist_entry(histentry_T *hisptr)clear_hist_entry195,4271
in_history(in_history208,4563
get_histtype(char_u *name)get_histtype268,5886
static int	last_maptick = -1;	// last seen mapticklast_maptick287,6307
add_to_history(add_to_history295,6541
get_history_idx(int histype)get_history_idx355,8198
calc_hist_idx(int histype, int num)calc_hist_idx371,8617
get_history_entry(int histype, int idx)get_history_entry411,9355
clr_history(int histype)clr_history425,9628
del_history_entry(int histype, char_u *str)del_history_entry451,10153
del_history_idx(int histype, int idx)del_history_idx507,11323
f_histadd(typval_T *argvars UNUSED, typval_T *rettv)f_histadd539,12028
f_histdel(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_histdel567,12589
f_histget(typval_T *argvars UNUSED, typval_T *rettv)f_histget594,13309
f_histnr(typval_T *argvars UNUSED, typval_T *rettv)f_histnr620,13878
remove_key_from_history(void)remove_key_from_history641,14347
ex_history(exarg_T *eap)ex_history671,14849

src/crypt.c,2774
    char    *name;	// encryption name as used in 'cryptmethod'name33,1001
    char    *magic;	// magic bytes stored in file headermagic34,1064
    int	    salt_len;	// length of salt, or 0 when not using saltsalt_len35,1121
    int	    seed_len;	// length of seed, or 0 when not using saltseed_len36,1187
    int	    works_inplace; // encryption/decryption can be done in-placeworks_inplace38,1278
    int	    whole_undofile; // whole undo file is encryptedwhole_undofile40,1358
    int (* self_test_fn)();self_test_fn43,1469
    int (* init_fn)(cryptstate_T *state, char_u *key,init_fn46,1562
    void (*encode_fn)(cryptstate_T *state, char_u *from, size_t len,encode_fn51,1833
    void (*decode_fn)(cryptstate_T *state, char_u *from, size_t len,decode_fn53,1925
    long (*encode_buffer_fn)(cryptstate_T *state, char_u *from, size_t len,encode_buffer_fn58,2165
    long (*decode_buffer_fn)(cryptstate_T *state, char_u *from, size_t len,decode_buffer_fn60,2271
    void (*encode_inplace_fn)(cryptstate_T *state, char_u *p1, size_t len,encode_inplace_fn70,2850
    void (*decode_inplace_fn)(cryptstate_T *state, char_u *p1, size_t len,decode_inplace_fn72,2948
} cryptmethod_T;cryptmethod_T74,3046
static cryptmethod_T cryptmethods[CRYPT_M_COUNT] = {cryptmethods77,3113
#define CRYPT_MAGIC_LEN	CRYPT_MAGIC_LEN133,4175
static char	crypt_magic_head[] = "VimCrypt~";crypt_magic_head134,4219
crypt_method_nr_from_name(char_u *name)crypt_method_nr_from_name143,4430
crypt_method_nr_from_magic(char *ptr, int len)crypt_method_nr_from_magic159,4757
crypt_works_inplace(cryptstate_T *state)crypt_works_inplace182,5268
crypt_get_method_nr(buf_T *buf)crypt_get_method_nr192,5447
crypt_whole_undofile(int method_nr)crypt_whole_undofile202,5693
crypt_get_header_len(int method_nr)crypt_get_header_len211,5865
crypt_set_cm_option(buf_T *buf, int method_nr)crypt_set_cm_option223,6145
crypt_self_test(void)crypt_self_test234,6413
crypt_create(crypt_create248,6706
crypt_create_from_header(crypt_create_from_header277,7344
crypt_create_from_file(FILE *fp, char_u *key)crypt_create_from_file300,7925
crypt_create_for_writing(crypt_create_for_writing339,9049
crypt_free_state(cryptstate_T *state)crypt_free_state381,10170
crypt_encode_alloc(crypt_encode_alloc394,10485
crypt_decode_alloc(crypt_decode_alloc422,11193
crypt_encode(crypt_encode450,11764
crypt_encode_inplace(crypt_encode_inplace478,12246
crypt_decode_inplace(crypt_decode_inplace490,12483
crypt_free_key(char_u *key)crypt_free_key503,12760
crypt_check_method(int method)crypt_check_method519,12981
crypt_check_current_method(void)crypt_check_current_method529,13156
crypt_get_key(crypt_get_key542,13527
crypt_append_msg(crypt_append_msg600,14612

src/crypt_zip.c,481
typedef unsigned int u32_T;	// int is at least 32 bitsu32_T27,795
    u32_T keys[3];keys31,924
} zip_state_T;zip_state_T32,943
static u32_T crc_32_table[256];crc_32_table35,960
make_crc_tab(void)make_crc_tab41,1060
#define CRC32(CRC3258,1322
#define DECRYPT_BYTE_ZIP(DECRYPT_BYTE_ZIP63,1458
#define UPDATE_KEYS_ZIP(UPDATE_KEYS_ZIP71,1676
crypt_zip_init(crypt_zip_init82,1951
crypt_zip_encode(crypt_zip_encode113,2579
crypt_zip_decode(crypt_zip_decode136,2956

src/debugger.c,2917
static int debug_greedy = FALSE;	// batch mode debugging: don't savedebug_greedy17,389
static char_u *debug_oldval = NULL;	// old and newval for debug expressionsdebug_oldval23,623
static char_u *debug_newval = NULL;debug_newval24,699
static int     debug_expr   = 0;        // use debug_exprdebug_expr25,735
has_watchexpr(void)has_watchexpr28,802
do_debug(char_u *cmd)do_debug38,965
#define CMD_CONT	CMD_CONT57,1498
#define CMD_NEXT	CMD_NEXT58,1517
#define CMD_STEP	CMD_STEP59,1536
#define CMD_FINISH	CMD_FINISH60,1555
#define CMD_QUIT	CMD_QUIT61,1576
#define CMD_INTERRUPT	CMD_INTERRUPT62,1595
#define CMD_BACKTRACE	CMD_BACKTRACE63,1619
#define CMD_FRAME	CMD_FRAME64,1643
#define CMD_UP	CMD_UP65,1663
#define CMD_DOWN	CMD_DOWN66,1681
get_maxbacktrace_level(char_u *sname)get_maxbacktrace_level306,7381
do_setdebugtracelevel(char_u *arg)do_setdebugtracelevel324,7647
do_checkbacktracelevel(void)do_checkbacktracelevel338,7889
do_showbacktrace(char_u *cmd)do_showbacktrace360,8278
ex_debug(exarg_T *eap)ex_debug401,9001
static char_u	*debug_breakpoint_name = NULL;debug_breakpoint_name410,9191
static linenr_T	debug_breakpoint_lnum;debug_breakpoint_lnum411,9236
static int	debug_skipped;debug_skipped420,9648
static char_u	*debug_skipped_name;debug_skipped_name421,9674
dbg_check_breakpoint(exarg_T *eap)dbg_check_breakpoint431,10048
dbg_check_skipped(exarg_T *eap)dbg_check_skipped478,11099
struct debuggydebuggy503,11639
    int		dbg_nr;		// breakpoint numberdbg_nr505,11656
    int		dbg_type;	// DBG_FUNC, DBG_FILE or DBG_EXPRdbg_type506,11695
    char_u	*dbg_name;	// function, expression or file namedbg_name507,11748
    regprog_T	*dbg_prog;	// regexp programdbg_prog508,11807
    linenr_T	dbg_lnum;	// line number in function or filedbg_lnum509,11850
    int		dbg_forceit;	// ! useddbg_forceit510,11908
    typval_T    *dbg_val;       // last result of watchexpressiondbg_val512,11957
    int		dbg_level;      // stored nested level for exprdbg_level514,12030
static garray_T dbg_breakp = {0, 0, sizeof(struct debuggy), 4, NULL};dbg_breakp517,12091
#define BREAKP(BREAKP518,12161
#define DEBUGGY(DEBUGGY519,12228
static int last_breakp = 0;	// nr of last defined breakpointlast_breakp520,12294
static garray_T prof_ga = {0, 0, sizeof(struct debuggy), 4, NULL};prof_ga524,12438
#define DBG_FUNC	DBG_FUNC526,12512
#define DBG_FILE	DBG_FILE527,12531
#define DBG_EXPR	DBG_EXPR528,12550
dbg_parsearg(dbg_parsearg539,12888
ex_breakadd(exarg_T *eap)ex_breakadd648,15088
ex_debuggreedy(exarg_T *eap)ex_debuggreedy702,16094
ex_breakdel(exarg_T *eap)ex_breakdel714,16278
ex_breaklist(exarg_T *eap UNUSED)ex_breaklist809,18194
dbg_find_breakpoint(dbg_find_breakpoint839,18952
has_profiling(has_profiling852,19325
debuggy_find(debuggy_find866,19681
dbg_breakpoint(char_u *name, linenr_T lnum)dbg_breakpoint988,22460

src/dict.c,3280
static dict_T		*first_dict = NULL;first_dict21,598
dict_alloc(void)dict_alloc27,700
dict_alloc_id(alloc_id_T id UNUSED)dict_alloc_id54,1180
dict_alloc_lock(int lock)dict_alloc_lock64,1363
rettv_dict_alloc(typval_T *rettv)rettv_dict_alloc78,1562
rettv_dict_set(typval_T *rettv, dict_T *d)rettv_dict_set93,1773
dict_free_contents(dict_T *d)dict_free_contents106,2034
dict_free_dict(dict_T *d)dict_free_dict133,2693
dict_free(dict_T *d)dict_free146,3033
dict_unref(dict_T *d)dict_unref160,3257
dict_free_nonref(int copyID)dict_free_nonref171,3465
dict_free_items(int copyID)dict_free_items189,3928
dictitem_alloc(char_u *key)dictitem_alloc209,4385
dictitem_copy(dictitem_T *org)dictitem_copy227,4699
dictitem_remove(dict_T *dict, dictitem_T *item)dictitem_remove245,5050
dictitem_free(dictitem_T *item)dictitem_free261,5375
dict_copy(dict_T *orig, int deep, int copyID)dict_copy275,5689
dict_add(dict_T *d, dictitem_T *item)dict_add338,6731
dict_add_number_special(dict_T *d, char *key, varnumber_T nr, vartype_T vartype)dict_add_number_special348,6963
dict_add_number(dict_T *d, char *key, varnumber_T nr)dict_add_number370,7438
dict_add_bool(dict_T *d, char *key, varnumber_T nr)dict_add_bool380,7678
dict_add_string(dict_T *d, char *key, char_u *str)dict_add_string390,7913
dict_add_string_len(dict_T *d, char *key, char_u *str, int len)dict_add_string_len402,8257
dict_add_list(dict_T *d, char *key, list_T *list)dict_add_list432,8860
dict_add_tv(dict_T *d, char *key, typval_T *tv)dict_add_tv455,9332
dict_add_callback(dict_T *d, char *key, callback_T *cb)dict_add_callback476,9731
dict_iterate_start(typval_T *var, dict_iterator_T *iter)dict_iterate_start500,10308
dict_iterate_next(dict_iterator_T *iter, typval_T **tv_result)dict_iterate_next521,10852
dict_add_dict(dict_T *d, char *key, dict_T *dict)dict_add_dict546,11333
dict_len(dict_T *d)dict_len568,11743
dict_find(dict_T *d, char_u *key, int len)dict_find581,11979
#define AKEYLEN AKEYLEN583,12024
dict_get_tv(dict_T *d, char_u *key, typval_T *rettv)dict_get_tv618,12695
dict_get_string(dict_T *d, char_u *key, int save)dict_get_string636,13117
dict_get_number(dict_T *d, char_u *key)dict_get_number655,13475
dict_get_number_def(dict_T *d, char_u *key, int def)dict_get_number_def665,13671
dict_get_number_check(dict_T *d, char_u *key)dict_get_number_check681,14004
dict2string(typval_T *tv, int copyID, int restore_copyID)dict2string701,14407
get_literal_key(char_u **arg, typval_T *tv)get_literal_key763,15682
eval_dict(char_u **arg, typval_T *rettv, int evaluate, int literal)eval_dict785,16196
dict_extend(dict_T *d1, dict_T *d2, char_u *action)dict_extend905,18698
dict_lookup(hashitem_T *hi)dict_lookup957,20020
dict_equal(dict_equal966,20161
dict_list(typval_T *argvars, typval_T *rettv, int what)dict_list1008,21026
f_items(typval_T *argvars, typval_T *rettv)f_items1087,22472
f_keys(typval_T *argvars, typval_T *rettv)f_keys1096,22592
f_values(typval_T *argvars, typval_T *rettv)f_values1105,22717
dict_set_items_ro(dict_T *di)dict_set_items_ro1114,22885
f_has_key(typval_T *argvars, typval_T *rettv)f_has_key1133,23215
dict_remove(typval_T *argvars, typval_T *rettv, char_u *arg_errmsg)dict_remove1151,23554

src/diff.c,5112
static int diff_busy = FALSE;	    // using diff structs, don't change themdiff_busy24,606
static int diff_need_update = FALSE; // ex_diffupdate needs to be calleddiff_need_update25,681
#define DIFF_FILLER	DIFF_FILLER28,799
#define DIFF_IBLANK	DIFF_IBLANK29,849
#define DIFF_ICASE	DIFF_ICASE30,897
#define DIFF_IWHITE	DIFF_IWHITE31,937
#define DIFF_IWHITEALL	DIFF_IWHITEALL32,995
#define DIFF_IWHITEEOL	DIFF_IWHITEEOL33,1058
#define DIFF_HORIZONTAL	DIFF_HORIZONTAL34,1126
#define DIFF_VERTICAL	DIFF_VERTICAL35,1177
#define DIFF_HIDDEN_OFF	DIFF_HIDDEN_OFF36,1224
#define DIFF_INTERNAL	DIFF_INTERNAL37,1277
#define DIFF_CLOSE_OFF	DIFF_CLOSE_OFF38,1337
#define ALL_WHITE_DIFF ALL_WHITE_DIFF39,1397
static int	diff_flags = DIFF_INTERNAL | DIFF_FILLER | DIFF_CLOSE_OFF;diff_flags40,1468
static long diff_algorithm = 0;diff_algorithm42,1539
#define LBUFLEN LBUFLEN44,1572
static int diff_a_works = MAYBE; // TRUE when "diff -a" works, FALSE when itdiff_a_works46,1624
static int diff_bin_works = MAYBE; // TRUE when "diff --binary" works, FALSEdiff_bin_works49,1769
    char_u	*din_fname;  // used for external diffdin_fname56,1963
    mmfile_t	din_mmfile;  // used for internal diffdin_mmfile57,2013
} diffin_T;diffin_T58,2065
    char_u	*dout_fname;  // used for external diffdout_fname62,2119
    garray_T	dout_ga;      // used for internal diffdout_ga63,2170
} diffout_T;diffout_T64,2223
    diffin_T	dio_orig;     // original file inputdio_orig68,2288
    diffin_T	dio_new;      // new file inputdio_new69,2338
    diffout_T	dio_diff;     // diff resultdio_diff70,2383
    int		dio_internal; // using internal diffdio_internal71,2426
} diffio_T;diffio_T72,2472
diff_buf_delete(buf_T *buf)diff_buf_delete97,3711
diff_buf_adjust(win_T *win)diff_buf_adjust120,4089
diff_buf_add(buf_T *buf)diff_buf_add156,4911
diff_buf_clear(void)diff_buf_clear179,5342
diff_buf_idx(buf_T *buf)diff_buf_idx197,5697
diff_buf_idx_tp(buf_T *buf, tabpage_T *tp)diff_buf_idx_tp212,5984
diff_invalidate(buf_T *buf)diff_invalidate227,6268
diff_mark_adjust(diff_mark_adjust248,6581
diff_mark_adjust_tp(diff_mark_adjust_tp274,7324
diff_alloc_new(tabpage_T *tp, diff_T *dprev, diff_T *dp)diff_alloc_new537,13678
diff_check_unchanged(tabpage_T *tp, diff_T *dp)diff_check_unchanged560,14213
diff_check_sanity(tabpage_T *tp, diff_T *dp)diff_check_sanity634,16202
diff_redraw(diff_redraw650,16536
clear_diffin(diffin_T *din)clear_diffin680,17225
clear_diffout(diffout_T *dout)clear_diffout692,17417
diff_write_buffer(buf_T *buf, diffin_T *din)diff_write_buffer705,17654
diff_write(buf_T *buf, diffin_T *din)diff_write771,19285
diff_try_update(diff_try_update800,20086
diff_internal(void)diff_internal875,22130
diff_internal_failed(void)diff_internal_failed888,22339
ex_diffupdate(exarg_T *eap)	// "eap" can be NULLex_diffupdate907,22867
check_external_diff(diffio_T *diffio)check_external_diff969,24629
diff_file_internal(diffio_T *diffio)diff_file_internal1069,26752
diff_file(diffio_T *dio)diff_file1108,27824
ex_diffpatch(exarg_T *eap)ex_diffpatch1173,29656
ex_diffsplit(exarg_T *eap)ex_diffsplit1363,34590
ex_diffthis(exarg_T *eap UNUSED)ex_diffthis1410,35843
set_diff_option(win_T *wp, int value)set_diff_option1417,35984
diff_win_options(diff_win_options1434,36333
ex_diffoff(exarg_T *eap)ex_diffoff1496,37906
diff_read(diff_read1572,39800
diff_copy_entry(diff_copy_entry1787,45502
diff_clear(tabpage_T *tp)diff_clear1808,45951
diff_check(win_T *wp, linenr_T lnum)diff_check1830,46558
diff_equal_entry(diff_T *dp, int idx1, int idx2)diff_equal_entry1923,49300
diff_equal_char(char_u *p1, char_u *p2, int *len)diff_equal_char1953,50056
diff_cmp(char_u *s1, char_u *s2)diff_cmp1985,50693
diff_check_fill(win_T *wp, linenr_T lnum)diff_check_fill2034,51707
diff_set_topline(win_T *fromwin, win_T *towin)diff_set_topline2052,52060
diffopt_changed(void)diffopt_changed2172,55506
diffopt_horizontal(void)diffopt_horizontal2318,58683
diffopt_hiddenoff(void)diffopt_hiddenoff2327,58826
diffopt_closeoff(void)diffopt_closeoff2336,58967
diff_find_change(diff_find_change2346,59166
diff_infold(win_T *wp, linenr_T lnum)diff_infold2481,62700
nv_diffgetput(int put, long count)nv_diffgetput2528,63780
ex_diffgetput(exarg_T *eap)ex_diffgetput2562,64323
diff_fold_update(diff_T *dp, int skip_idx)diff_fold_update2895,72833
diff_mode_buf(buf_T *buf)diff_mode_buf2912,73177
diff_move_to(int dir, long count)diff_move_to2927,73461
diff_get_corresponding_line_int(diff_get_corresponding_line_int2984,74747
diff_get_corresponding_line(buf_T *buf1, linenr_T lnum1)diff_get_corresponding_line3043,76498
diff_lnum_win(linenr_T lnum, win_T *wp)diff_lnum_win3058,76914
parse_diff_ed(parse_diff_ed3098,77977
parse_diff_unified(parse_diff_unified3164,79144
xdiff_out(void *priv, mmbuffer_t *mb, int nbuf)xdiff_out3224,80210
f_diff_filler(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_diff_filler3255,80869
f_diff_hlID(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_diff_hlID3266,81078

src/digraph.c,1416
typedef int result_T;result_T18,381
typedef struct digraphdigraph20,404
    char_u	char1;char122,429
    char_u	char2;char223,447
    result_T	result;result24,465
} digr_T;digr_T25,486
static garray_T	user_digraphs = {0, 0, (int)sizeof(digr_T), 10, NULL};user_digraphs30,586
static digr_T digraphdefault[] =digraphdefault36,810
do_digraph(int c)do_digraph1838,41381
get_digraph_for_char(int val_arg)get_digraph_for_char1864,41914
get_digraph(get_digraph1923,43097
getexactdigraph(int char1, int char2, int meta_char)getexactdigraph1967,43977
getdigraph(int char1, int char2, int meta_char)getdigraph2050,45559
putdigraph(char_u *str)putdigraph2066,45952
digraph_header(char *msg)digraph_header2126,47033
listdigraphs(int use_headers)listdigraphs2136,47199
static struct dg_header_entry {dg_header_entry2183,48374
    int	    dg_start;dg_start2184,48406
    char    *dg_header;dg_header2185,48428
} header_table[] = {header_table2186,48452
printdigraph(digr_T *dp, result_T *previous)printdigraph2217,49654
    char_u	*from;from2286,51049
    char_u	*to;to2287,51067
} kmap_T;kmap_T2288,51083
#define KMAP_MAXLEN KMAP_MAXLEN2290,51094
keymap_init(void)keymap_init2301,51427
ex_loadkeymap(exarg_T *eap)ex_loadkeymap2348,52586
#define KMAP_LLEN KMAP_LLEN2354,52680
keymap_unload(void)keymap_unload2431,54557
keymap_clear(garray_T *kmap)keymap_clear2461,55239

src/dlldata.c,49
#define PROXY_DELEGATIONPROXY_DELEGATION14,419

src/dosinst.c,6379
#define DOSINSTDOSINST19,473
#define GVIMEXT64_PATH	GVIMEXT64_PATH23,527
#define GVIMEXT32_PATH	GVIMEXT32_PATH24,579
#define CHECK_REG_ERROR(CHECK_REG_ERROR27,689
int	has_vim = 0;		// installable vim.exe existshas_vim36,877
int	has_gvim = 0;		// installable gvim.exe existshas_gvim37,925
char	oldvimrc[BUFSIZE];	// name of existing vimrc fileoldvimrc39,976
char	vimrc[BUFSIZE];		// name of vimrc file to createvimrc40,1031
char	*default_bat_dir = NULL;  // when not NULL, use this as the defaultdefault_bat_dir42,1086
char	*default_vim_dir = NULL;  // when not NULL, use this as the defaultdefault_vim_dir44,1201
struct choicechoice50,1365
    int	    active;			// non-zero when choice is activeactive52,1381
    char    *text;			// text displayed for this choicetext53,1437
    void    (*changefunc)(int idx);	// function to change this choicechangefunc54,1492
    int	    arg;			// argument for functionarg55,1562
    void    (*installfunc)(int idx);	// function to install this choiceinstallfunc56,1606
struct choice	choices[30];		// choices the user can makechoices59,1682
int		choice_count = 0;	// number of choices availablechoice_count60,1739
#define TABLE_SIZE(TABLE_SIZE62,1794
    compat_vi = 1,compat_vi66,1854
    compat_vim,compat_vim67,1873
    compat_some_enhancements,compat_some_enhancements68,1889
    compat_all_enhancementscompat_all_enhancements69,1919
char	*(compat_choices[]) =compat_choices71,1950
int	compat_choice = (int)compat_all_enhancements;compat_choice79,2163
char	*compat_text = "- run Vim %s";compat_text80,2213
    remap_no = 1,remap_no84,2257
    remap_winremap_win85,2275
char	*(remap_choices[]) =remap_choices87,2292
int	remap_choice = (int)remap_no;remap_choice93,2461
char	*remap_text = "- %s";remap_text94,2495
    mouse_xterm = 1,mouse_xterm98,2530
    mouse_mswin,mouse_mswin99,2551
    mouse_defaultmouse_default100,2568
char	*(mouse_choices[]) =mouse_choices102,2589
int	mouse_choice = (int)mouse_default;mouse_choice109,2877
char	*mouse_text = "- The mouse %s";mouse_text110,2916
    vimfiles_dir_none = 1,vimfiles_dir_none114,2961
    vimfiles_dir_vim,vimfiles_dir_vim115,2988
    vimfiles_dir_homevimfiles_dir_home116,3010
static char *(vimfiles_dir_choices[]) =vimfiles_dir_choices118,3035
static int	install_popup = 0;install_popup127,3244
static int	install_openwith = 0;install_openwith130,3335
static int	need_uninstall_entry = 0;need_uninstall_entry133,3433
static char	*(vimfiles_subdirs[]) =vimfiles_subdirs139,3581
get_choice(char **table, int entries)get_choice157,3857
check_unpack(void)check_unpack188,4342
pathcmp(char *p, int plen, char *q, int qlen)pathcmp244,5956
findoldfile(char **destination)findoldfile290,7081
find_bat_exe(int check_bat_only)find_bat_exe346,8352
get_vim_env(void)get_vim_env382,9256
static int num_windows;num_windows434,10394
window_cb(HWND hwnd, LPARAM lparam)window_cb442,10569
run_silent_uninstall(char *uninst_exe)run_silent_uninstall457,10853
uninstall_check(int skip_question)uninstall_check502,11923
inspect_system(void)inspect_system701,17537
add_dummy_choice(void)add_dummy_choice808,20665
install_bat_choice(int idx)install_bat_choice825,21074
alloc_text(int idx, char *fmt, char *arg)alloc_text962,25387
toggle_bat_choice(int idx)toggle_bat_choice975,25683
set_bat_text(int idx, char *batpath, char *name)set_bat_text997,26166
change_bat_choice(int idx)change_bat_choice1008,26370
char *bat_text_yes = "Install .bat files to use Vim at the command line:";bat_text_yes1089,28106
char *bat_text_no = "do NOT install .bat files to use Vim at the command line";bat_text_no1090,28181
change_main_bat_choice(int idx)change_main_bat_choice1093,28278
init_bat_choice(int target)init_bat_choice1130,29210
init_bat_choices(void)init_bat_choices1187,30674
install_vimrc(int idx)install_vimrc1214,31460
change_vimrc_choice(int idx)change_vimrc_choice1337,35745
change_run_choice(int idx)change_run_choice1369,36578
change_remap_choice(int idx)change_remap_choice1379,36823
change_mouse_choice(int idx)change_mouse_choice1389,37056
init_vimrc_choices(void)init_vimrc_choices1396,37241
reg_create_key(reg_create_key1436,38680
reg_set_string_value(reg_set_string_value1453,38947
reg_create_key_and_value(reg_create_key_and_value1463,39160
register_inproc_server(register_inproc_server1482,39529
register_shellex(register_shellex1509,40198
register_openwith(register_openwith1546,40873
register_uninstall(register_uninstall1580,41588
install_registry(void)install_registry1615,42686
change_popup_choice(int idx)change_popup_choice1712,44983
init_popup_choice(void)init_popup_choice1731,45530
change_openwith_choice(int idx)change_openwith_choice1750,45938
init_openwith_choice(void)init_openwith_choice1769,46504
create_shortcut(create_shortcut1791,46953
build_link_name(build_link_name1871,49151
build_shortcut(build_shortcut1896,49813
#define WORKDIR WORKDIR1927,50775
install_start_menu(int idx)install_start_menu1933,50900
toggle_startmenu_choice(int idx)toggle_startmenu_choice1997,52867
install_shortcut_gvim(int idx)install_shortcut_gvim2021,53533
install_shortcut_evim(int idx)install_shortcut_evim2033,53770
install_shortcut_gview(int idx)install_shortcut_gview2044,53966
toggle_shortcut_choice(int idx)toggle_shortcut_choice2055,54163
init_startmenu_choice(void)init_startmenu_choice2078,54646
init_shortcut_choices(void)init_shortcut_choices2092,54992
install_OLE_register(void)install_OLE_register2126,56080
dir_remove_last(const char *path, char to[MAX_PATH])dir_remove_last2142,56537
set_directories_text(int idx)set_directories_text2163,56991
static char *homedir = NULL;homedir2182,57534
init_homedir(void)init_homedir2185,57573
change_directories_choice(int idx)change_directories_choice2263,59298
install_vimfilesdir(int idx)install_vimfilesdir2279,59670
init_directories_choice(void)init_directories_choice2343,61363
setup_choices(void)setup_choices2387,62623
print_cmd_line_help(void)print_cmd_line_help2412,63165
command_line_setup_choices(int argc, char **argv)command_line_setup_choices2446,64639
show_help(void)show_help2577,67853
install(void)install2705,72917
request_choice(void)request_choice2730,73422
main(int argc, char **argv)main2743,73760

src/drawline.c,903
advance_color_col(int vcol, int **color_cols)advance_color_col23,575
margin_columns_win(win_T *wp, int *left_col, int *right_col)margin_columns_win37,891
get_sign_display_info(get_sign_display_info85,2218
static textprop_T	*current_text_props = NULL;current_text_props186,4277
static buf_T		*current_buf = NULL;current_buf187,4323
text_prop_compare(const void *s1, const void *s2)text_prop_compare190,4374
win_line(win_line222,5268
# define SPWORDLEN SPWORDLEN313,8975
# define LINE_ATTRLINE_ATTR349,10675
#define WL_START	WL_START380,11521
# define WL_CMDLINE	WL_CMDLINE382,11580
# define WL_FOLD	WL_FOLD387,11700
# define WL_SIGN	WL_SIGN392,11807
#define WL_NR	WL_NR396,11915
# define WL_BRI	WL_BRI398,11979
# define WL_SBR	WL_SBR403,12109
#define WL_LINE	WL_LINE407,12199
# define VCOL_HLC VCOL_HLC429,12939
# define FIX_FOR_BOGUSCOLS FIX_FOR_BOGUSCOLS430,12975

src/drawscreen.c,2093
static int  did_update_one_window;did_update_one_window73,3158
update_screen(int type_arg)update_screen82,3430
win_redr_status(win_T *wp, int ignore_pum UNUSED)win_redr_status386,11214
redraw_custom_statusline(win_T *wp)redraw_custom_statusline537,14705
showruler(int always)showruler569,15589
win_redr_ruler(win_T *wp, int always, int ignore_pum)win_redr_ruler604,16336
#define RULER_BUF_LEN RULER_BUF_LEN606,16392
after_updating_screen(int may_resize_shell UNUSED)after_updating_screen789,21250
update_curbuf(int type)update_curbuf811,21719
text_to_screenline(win_T *wp, char_u *text, int col)text_to_screenline823,21953
redraw_win_toolbar(win_T *wp)redraw_win_toolbar952,24484
copy_text_attr(copy_text_attr1019,26233
fold_line(fold_line1038,26579
# define RL_MEMSET(RL_MEMSET1102,28124
win_update(win_T *wp)win_update1362,35081
#define DID_NONE DID_NONE1401,36513
#define DID_LINE DID_LINE1402,36556
#define DID_FOLD DID_FOLD1403,36600
update_prepare(void)update_prepare2645,70950
update_finish(void)update_finish2668,71444
update_debug_sign(buf_T *buf, linenr_T lnum)update_debug_sign2693,71891
updateWindow(win_T *wp)updateWindow2742,72969
redraw_asap(int type)redraw_asap2790,74055
redraw_after_callback(int call_update_screen)redraw_after_callback2923,77646
redraw_later(int type)redraw_later2973,78875
redraw_win_later(redraw_win_later2979,78948
redraw_later_clear(void)redraw_later_clear2998,79384
redraw_all_later(int type)redraw_all_later3008,79525
redraw_curbuf_later(int type)redraw_curbuf_later3023,79815
redraw_buf_later(buf_T *buf, int type)redraw_buf_later3029,79895
redraw_buf_line_later(buf_T *buf, linenr_T lnum)redraw_buf_line_later3047,80287
redraw_buf_and_status_later(buf_T *buf, int type)redraw_buf_and_status_later3060,80558
status_redraw_all(void)status_redraw_all3085,81000
status_redraw_curbuf(void)status_redraw_curbuf3101,81232
redraw_statuslines(void)redraw_statuslines3117,81492
win_redraw_last_status(frame_T *frp)win_redraw_last_status3133,81778
redrawWinline(redrawWinline3161,82596

src/edit.c,6381
#define BACKSPACE_CHAR	BACKSPACE_CHAR16,340
#define BACKSPACE_WORD	BACKSPACE_WORD17,370
#define BACKSPACE_WORD_NOT_SPACE BACKSPACE_WORD_NOT_SPACE18,400
#define BACKSPACE_LINE	BACKSPACE_LINE19,438
static int	compl_busy = FALSE;compl_busy23,571
static colnr_T	Insstart_textlen;	// length of line when insert startedInsstart_textlen82,2387
static colnr_T	Insstart_blank_vcol;	// vcol for first inserted blankInsstart_blank_vcol83,2458
static int	update_Insstart_orig = TRUE; // set Insstart_orig to Insstartupdate_Insstart_orig84,2527
static char_u	*last_insert = NULL;	// the text of the previous insert,last_insert86,2601
static int	last_insert_skip; // nr of chars in front of previous insertlast_insert_skip88,2710
static int	new_insert_skip;  // nr of chars in front of current insertnew_insert_skip89,2782
static int	did_restart_edit;	// "restart_edit" when calling edit()did_restart_edit90,2853
static int	can_cindent;		// may do cindenting on this linecan_cindent93,2941
static int	revins_on;		// reverse insert mode onrevins_on97,3030
static int	revins_chars;		// how much to skip after editrevins_chars98,3079
static int	revins_legal;		// was the last char 'legal'?revins_legal99,3136
static int	revins_scol;		// start column of revins sessionrevins_scol100,3192
static int	ins_need_undo;		// call u_save() before inserting ains_need_undo103,3259
static int	did_add_space = FALSE;	// auto_format() added an extra spacedid_add_space107,3404
static int	dont_sync_undo = FALSE;	// CTRL-G U prevents syncing undo fordont_sync_undo109,3501
edit(edit132,4284
ins_need_undo_get(void)ins_need_undo_get1393,34076
ins_redraw(int ready)	    // not busy with somethingins_redraw1406,34407
ins_ctrl_v(void)ins_ctrl_v1530,38184
decodeModifyOtherKeys(int c)decodeModifyOtherKeys1579,39414
static int  pc_status;pc_status1632,40646
#define PC_STATUS_UNSET	PC_STATUS_UNSET1633,40669
#define PC_STATUS_RIGHT	PC_STATUS_RIGHT1634,40719
#define PC_STATUS_LEFT	PC_STATUS_LEFT1635,40780
#define PC_STATUS_SET	PC_STATUS_SET1636,40839
static char_u pc_bytes[MB_MAXBYTES + 1]; // saved bytespc_bytes1637,40886
static int  pc_attr;pc_attr1638,40942
static int  pc_row;pc_row1639,40963
static int  pc_col;pc_col1640,40983
edit_putchar(int c, int highlight)edit_putchar1643,41013
prompt_text(void)prompt_text1697,42146
init_prompt(int cmdchar_todo)init_prompt1709,42395
prompt_curpos_editable()prompt_curpos_editable1752,43695
edit_unputchar(void)edit_unputchar1763,43904
display_dollar(colnr_T col)display_dollar1781,44403
undisplay_dollar(void)undisplay_dollar1813,45088
truncate_spaces(char_u *line)truncate_spaces1828,45399
backspace_until_column(int col)backspace_until_column1848,45940
del_char_after_col(int limit_col UNUSED)del_char_after_col1866,46346
get_literal(void)get_literal1900,47289
insert_special(insert_special2017,49604
# define ISSPECIAL(ISSPECIAL2066,51068
# define ISSPECIAL(ISSPECIAL2068,51136
#define WHITECHAR(WHITECHAR2071,51220
insertchar(insertchar2084,51756
#define INPUT_BUFLEN INPUT_BUFLEN2234,56595
internal_format(internal_format2316,58331
auto_format(auto_format2687,68174
check_auto_format(check_auto_format2796,71239
comp_textwidth(comp_textwidth2834,72016
redo_literal(int c)redo_literal2874,72879
start_arrow(start_arrow2894,73307
start_arrow_with_change(start_arrow_with_change2905,73555
start_arrow_common(start_arrow_common2918,73841
check_spell_redraw(void)check_spell_redraw2939,74389
stop_arrow(void)stop_arrow2958,74762
stop_insert(stop_insert3005,75910
set_last_insert(int c)set_last_insert3142,79785
free_last_insert(void)free_last_insert3163,80183
add_char2buf(int c, char_u *s)add_char2buf3175,80433
beginline(int flags)beginline3214,81194
oneright(void)oneright3244,81845
oneleft(void)oneleft3284,82787
cursor_up(cursor_up3343,83976
cursor_down(cursor_down3402,85297
stuff_inserted(stuff_inserted3463,86752
get_last_insert(void)get_last_insert3522,88230
get_last_insert_save(void)get_last_insert_save3534,88483
echeck_abbr(int c)echeck_abbr3558,89078
static char_u	*replace_stack = NULL;replace_stack3588,90239
static long	replace_stack_nr = 0;	    // next entry in replace stackreplace_stack_nr3589,90276
static long	replace_stack_len = 0;	    // max. number of entriesreplace_stack_len3590,90345
replace_push(replace_push3593,90420
replace_push_mb(char_u *p)replace_push_mb3630,91388
replace_pop(void)replace_pop3646,91666
replace_join(replace_join3658,91893
replace_pop_ins(void)replace_pop_ins3678,92379
mb_replace_pop_ins(int cc)mb_replace_pop_ins3697,92771
replace_flush(void)replace_flush3750,93691
replace_do_bs(int limit_col)replace_do_bs3767,94237
hkmap(int c)hkmap3861,96478
ins_reg(void)ins_reg3940,98875
ins_ctrl_g(void)ins_ctrl_g4065,101886
ins_ctrl_hat(void)ins_ctrl_hat4121,103109
ins_esc(ins_esc4176,104208
ins_ctrl_(void)ins_ctrl_4312,107463
ins_start_select(int c)ins_start_select4340,108059
ins_insert(int replaceState)ins_insert4394,109079
ins_ctrl_o(void)ins_ctrl_o4418,109643
ins_shift(int c, int lastc)ins_shift4441,110230
ins_del(void)ins_del4478,111158
ins_bs_one(colnr_T *vcolp)ins_bs_one4516,112108
ins_bs(ins_bs4537,112616
bracketed_paste(paste_mode_T mode, int drop, garray_T *gap)bracketed_paste4938,122681
ins_tabline(int c)ins_tabline5037,124955
ins_scroll(void)ins_scroll5062,125509
ins_horscroll(void)ins_horscroll5078,125718
ins_left(void)ins_left5095,125972
ins_home(int c)ins_home5144,127252
ins_end(int c)ins_end5163,127614
ins_s_left()ins_s_left5182,127975
ins_right(void)ins_right5204,128502
ins_s_right()ins_s_right5251,129568
ins_up(ins_up5274,130120
ins_pageup(void)ins_pageup5305,130718
ins_down(ins_down5335,131163
ins_pagedown(void)ins_pagedown5366,131765
ins_drop(void)ins_drop5397,132231
ins_tab(void)ins_tab5408,132439
ins_eol(int c)ins_eol5679,139365
ins_digraph(void)ins_digraph5738,140953
ins_copychar(linenr_T lnum)ins_copychar5830,142888
ins_ctrl_ey(int tc)ins_ctrl_ey5866,143589
get_nolist_virtcol(void)get_nolist_virtcol5911,144621
do_insert_char_pre(int c)do_insert_char_pre5932,145259
get_can_cindent(void)get_can_cindent5976,146298
set_can_cindent(int val)set_can_cindent5982,146358
ins_apply_autocmds(event_T event)ins_apply_autocmds5992,146482

src/evalbuffer.c,2003
set_ref_in_buffers(int copyID)set_ref_in_buffers21,453
buflist_find_by_name(char_u *name, int curtab_only)buflist_find_by_name61,1395
find_buffer(typval_T *avar)find_buffer85,1907
find_win_for_curbuf(void)find_win_for_curbuf116,2649
set_buffer_lines(set_buffer_lines134,2920
f_append(typval_T *argvars, typval_T *rettv)f_append265,6031
f_appendbufline(typval_T *argvars, typval_T *rettv)f_appendbufline276,6258
f_bufadd(typval_T *argvars, typval_T *rettv)f_bufadd295,6612
f_bufexists(typval_T *argvars, typval_T *rettv)f_bufexists306,6827
f_buflisted(typval_T *argvars, typval_T *rettv)f_buflisted315,6989
f_bufload(typval_T *argvars, typval_T *rettv UNUSED)f_bufload327,7196
f_bufloaded(typval_T *argvars, typval_T *rettv)f_bufloaded339,7393
f_bufname(typval_T *argvars, typval_T *rettv)f_bufname351,7613
f_bufnr(typval_T *argvars, typval_T *rettv)f_bufnr375,8098
buf_win_common(typval_T *argvars, typval_T *rettv, int get_nr)buf_win_common408,8875
f_bufwinid(typval_T *argvars, typval_T *rettv)f_bufwinid431,9343
f_bufwinnr(typval_T *argvars, typval_T *rettv)f_bufwinnr440,9481
f_deletebufline(typval_T *argvars, typval_T *rettv)f_deletebufline449,9621
get_buffer_info(buf_T *buf)get_buffer_info534,11541
f_getbufinfo(typval_T *argvars, typval_T *rettv)f_getbufinfo611,13564
get_buffer_lines(get_buffer_lines684,15441
f_getbufline(typval_T *argvars, typval_T *rettv)f_getbufline735,16328
ret_f_getline(int argcount, type_T **argtypes UNUSED)ret_f_getline756,16800
f_getline(typval_T *argvars, typval_T *rettv)f_getline765,16965
f_setbufline(typval_T *argvars, typval_T *rettv)f_setbufline790,17359
f_setline(typval_T *argvars, typval_T *rettv)f_setline809,17708
switch_buffer(bufref_T *save_curbuf, buf_T *buf)switch_buffer825,18161
restore_buffer(bufref_T *save_curbuf)restore_buffer839,18447
find_win_for_buf(find_win_for_buf858,18895
switch_to_win_for_buf(switch_to_win_for_buf876,19314
restore_win_for_buf(restore_win_for_buf895,19739

src/eval.c,6554
#define USING_FLOAT_STUFFUSING_FLOAT_STUFF13,318
static char *e_dictrange = N_("E719: Cannot use [:] with a Dictionary");e_dictrange23,444
static char *e_float_as_string = N_("E806: using Float as a String");e_float_as_string25,535
#define NAMESPACE_CHAR	NAMESPACE_CHAR28,613
static int current_copyID = 0;current_copyID35,892
static int echo_attr = 0;   // attributes used for ":echo"echo_attr37,924
    int		fi_semicolon;	// TRUE if ending in '; var]'fi_semicolon44,1039
    int		fi_varcount;	// nr of variables in the listfi_varcount45,1092
    listwatch_T	fi_lw;		// keep an eye on the item used.fi_lw46,1145
    list_T	*fi_list;	// list being usedfi_list47,1202
    int		fi_bi;		// index of blobfi_bi48,1242
    blob_T	*fi_blob;	// blob being usedfi_blob49,1276
} forinfo_T;forinfo_T50,1316
num_divide(varnumber_T n1, varnumber_T n2)num_divide69,2195
num_modulus(varnumber_T n1, varnumber_T n2)num_modulus92,2588
compare_func_name(const void *s1, const void *s2)compare_func_name103,2810
sortFunctions(void)sortFunctions117,3157
eval_init(void)eval_init129,3397
eval_clear(void)eval_clear144,3620
eval_to_bool(eval_to_bool167,4097
eval1_emsg(char_u **arg, typval_T *rettv, int evaluate)eval1_emsg199,4638
eval_expr_typval(typval_T *expr, typval_T *argv, int argc, typval_T *rettv)eval_expr_typval226,5452
eval_expr_to_bool(typval_T *expr, int *error)eval_expr_to_bool286,6852
eval_to_string_skip(eval_to_string_skip307,7369
skip_expr(char_u **pp)skip_expr335,7844
eval_to_string(eval_to_string350,8192
eval_to_string_safe(eval_to_string_safe398,9208
eval_to_number(char_u *expr)eval_to_number424,9710
eval_expr(char_u *arg, char_u **nextcmd)eval_expr450,10159
call_vim_function(call_vim_function468,10560
call_func_retnr(call_func_retnr496,11289
call_func_retstr(call_func_retstr519,11818
call_func_retlist(call_func_retlist542,12345
eval_foldexpr(char_u *arg, int *cp)eval_foldexpr567,12791
get_lval(get_lval629,14534
clear_lval(lval_T *lp)clear_lval1034,23614
set_var_lval(set_var_lval1047,23945
tv_op(typval_T *tv1, typval_T *tv2, char_u *op)tv_op1262,28572
eval_for_line(eval_for_line1401,31875
next_for_item(void *fi_void, char_u *arg)next_for_item1490,33665
free_for_info(void *fi_void)free_for_info1528,34552
set_context_for_expression(set_context_for_expression1543,34851
pattern_match(char_u *pat, char_u *text, int ic)pattern_match1661,37547
eval_func(eval_func1687,38157
eval0(eval01762,40159
eval1(char_u **arg, typval_T *rettv, int evaluate)eval11808,41261
eval2(char_u **arg, typval_T *rettv, int evaluate)eval21878,42523
eval3(char_u **arg, typval_T *rettv, int evaluate)eval31946,43787
eval4(char_u **arg, typval_T *rettv, int evaluate)eval42023,45167
eval_addblob(typval_T *tv1, typval_T *tv2)eval_addblob2121,46857
eval_addlist(typval_T *tv1, typval_T *tv2)eval_addlist2141,47265
eval5(char_u **arg, typval_T *rettv, int evaluate)eval52170,47885
eval6(eval62353,51847
eval7(eval72523,55122
eval7_leader(typval_T *rettv, char_u *start_leader, char_u **end_leaderp)eval7_leader2711,58941
call_func_rettv(call_func_rettv2776,60046
eval_lambda(eval_lambda2830,61240
eval_method(eval_method2875,62135
eval_index(eval_index2934,63278
get_option_tv(get_option_tv3286,70018
get_number_tv(get_number_tv3365,71701
get_string_tv(char_u **arg, typval_T *rettv, int evaluate)get_string_tv3475,74010
get_lit_string_tv(char_u **arg, typval_T *rettv, int evaluate)get_lit_string_tv3612,76716
partial_name(partial_T *pt)partial_name3674,77721
partial_free(partial_T *pt)partial_free3682,77853
partial_unref(partial_T *pt)partial_unref3705,78277
static int tv_equal_recurse_limit;tv_equal_recurse_limit3711,78376
func_equal(func_equal3714,78427
tv_equal(tv_equal3771,79993
get_copyID(void)get_copyID3869,82547
garbage_collect(int testing)garbage_collect3901,83516
free_unref_items(int copyID)free_unref_items4064,87733
set_ref_in_ht(hashtab_T *ht, int copyID, list_stack_T **list_stack)set_ref_in_ht4122,89643
set_ref_in_dict(dict_T *d, int copyID)set_ref_in_dict4167,90607
set_ref_in_list(list_T *ll, int copyID)set_ref_in_list4182,90916
set_ref_in_list_items(list_T *l, int copyID, ht_stack_T **ht_stack)set_ref_in_list_items4199,91321
set_ref_in_item(set_ref_in_item4238,92406
echo_string_core(echo_string_core4413,96853
echo_string(echo_string4614,101141
tv2string(tv2string4631,101594
string_quote(char_u *str, int function)string_quote4646,101943
string2float(string2float4692,102818
get_env_tv(char_u **arg, typval_T *rettv, int evaluate)get_env_tv4728,103575
var2fpos(var2fpos4777,104526
list2fpos(list2fpos4895,107448
get_env_len(char_u **arg)get_env_len4951,108625
get_id_len(char_u **arg)get_id_len4972,109023
get_name_len(get_name_len5009,109989
find_name_end(find_name_end5082,111706
make_expanded_name(make_expanded_name5179,113858
eval_isnamec(int c)eval_isnamec5236,115152
eval_isnamec1(int c)eval_isnamec15246,115395
handle_subscript(handle_subscript5261,115720
alloc_tv(void)alloc_tv5355,118309
alloc_string_tv(char_u *s)alloc_string_tv5366,118580
free_tv(typval_T *varp)free_tv5385,118852
clear_tv(typval_T *varp)clear_tv5435,119772
init_tv(typval_T *varp)init_tv5496,120948
tv_get_number(typval_T *varp)tv_get_number5511,121367
tv_get_number_chk(typval_T *varp, int *denote)tv_get_number_chk5519,121509
tv_get_float(typval_T *varp)tv_get_float5577,122826
tv_get_string(typval_T *varp)tv_get_string5637,124365
tv_get_string_buf(typval_T *varp, char_u *buf)tv_get_string_buf5645,124495
tv_get_string_chk(typval_T *varp)tv_get_string_chk5656,124740
tv_get_string_buf_chk(typval_T *varp, char_u *buf)tv_get_string_buf_chk5664,124878
tv_stringify(typval_T *varp, char_u *buf)tv_stringify5753,126991
tv_check_lock(typval_T *tv, char_u *name, int use_gettext)tv_check_lock5779,127609
copy_tv(typval_T *from, typval_T *to)copy_tv5812,128471
item_copy(item_copy5904,130550
echo_one(typval_T *rettv, int with_space, int *atstart, int *needclr)echo_one5978,132191
ex_echo(exarg_T *eap)ex_echo6036,133492
ex_echohl(exarg_T *eap)ex_echohl6094,134795
get_echo_attr(void)get_echo_attr6103,134911
ex_execute(exarg_T *eap)ex_execute6116,135201
find_option_end(char_u **arg, int *opt_flags)find_option_end6218,137398
last_set_msg(sctx_T script_ctx)last_set_msg6253,138009
typval_compare(typval_compare6280,138505
typval_tostring(typval_T *arg)typval_tostring6509,144562
do_string_sub(do_string_sub6533,145230

src/evalfunc.c,19949
#define USING_FLOAT_STUFFUSING_FLOAT_STUFF13,317
ret_void(int argcount UNUSED, type_T **argtypes UNUSED)ret_void269,12638
ret_any(int argcount UNUSED, type_T **argtypes UNUSED)ret_any274,12738
ret_number(int argcount UNUSED, type_T **argtypes UNUSED)ret_number279,12836
ret_float(int argcount UNUSED, type_T **argtypes UNUSED)ret_float285,12958
ret_string(int argcount UNUSED, type_T **argtypes UNUSED)ret_string291,13067
    static type_T * ret_list_any(int argcount UNUSED, type_T **argtypes UNUSED)ret_list_any295,13151
ret_list_number(int argcount UNUSED, type_T **argtypes UNUSED)ret_list_number300,13279
ret_list_string(int argcount UNUSED, type_T **argtypes UNUSED)ret_list_string305,13393
ret_list_dict_any(int argcount UNUSED, type_T **argtypes UNUSED)ret_list_dict_any310,13507
ret_dict_any(int argcount UNUSED, type_T **argtypes UNUSED)ret_dict_any315,13625
ret_dict_number(int argcount UNUSED, type_T **argtypes UNUSED)ret_dict_number320,13733
ret_dict_string(int argcount UNUSED, type_T **argtypes UNUSED)ret_dict_string325,13847
ret_blob(int argcount UNUSED, type_T **argtypes UNUSED)ret_blob330,13961
ret_partial_void(int argcount UNUSED, type_T **argtypes UNUSED)ret_partial_void335,14061
ret_channel(int argcount UNUSED, type_T **argtypes UNUSED)ret_channel341,14201
ret_job(int argcount UNUSED, type_T **argtypes UNUSED)ret_job346,14307
    char	*f_name;	// function namef_name360,14612
    char	f_min_argc;	// minimal number of argumentsf_min_argc361,14647
    char	f_max_argc;	// maximal number of argumentsf_max_argc362,14699
    char	f_argtype;	// for method: FEARG_ valuesf_argtype363,14751
    type_T	*(*f_retfunc)(int argcount, type_T **argtypes);f_retfunc364,14800
    void	(*f_func)(typval_T *args, typval_T *rvar);f_func366,14887
} funcentry_T;funcentry_T368,14973
#define FEARG_1 FEARG_1371,15055
#define FEARG_2 FEARG_2372,15110
#define FEARG_3 FEARG_3373,15166
#define FEARG_4 FEARG_4374,15221
#define FEARG_LAST FEARG_LAST375,15277
static funcentry_T global_functions[] =global_functions377,15332
get_function_name(expand_T *xp, int idx)get_function_name969,47071
get_expr_name(expand_T *xp, int idx)get_expr_name999,47702
find_internal_func(char_u *name)find_internal_func1020,48085
has_internal_func(char_u *name)has_internal_func1045,48564
internal_func_name(int idx)internal_func_name1051,48654
internal_func_ret_type(int idx, int argcount, type_T **argtypes)internal_func_ret_type1057,48741
check_internal_func(int idx, int argcount)check_internal_func1067,48977
call_internal_func(call_internal_func1088,49399
call_internal_func_by_idx(call_internal_func_by_idx1109,49861
call_internal_method(call_internal_method1121,50055
non_zero_arg(typval_T *argvars)non_zero_arg1193,51730
tv_get_lnum(typval_T *argvars)tv_get_lnum1210,52212
tv_get_lnum_buf(typval_T *argvars, buf_T *buf)tv_get_lnum_buf1232,52647
get_float_arg(typval_T *argvars, float_T *f)get_float_arg1248,53085
f_abs(typval_T *argvars, typval_T *rettv)f_abs1268,53447
f_acos(typval_T *argvars, typval_T *rettv)f_acos1294,53906
f_and(typval_T *argvars, typval_T *rettv)f_and1310,54178
f_asin(typval_T *argvars, typval_T *rettv)f_asin1321,54396
f_atan(typval_T *argvars, typval_T *rettv)f_atan1336,54652
f_atan2(typval_T *argvars, typval_T *rettv)f_atan21351,54909
f_balloon_gettext(typval_T *argvars UNUSED, typval_T *rettv)f_balloon_gettext1369,55267
f_balloon_show(typval_T *argvars, typval_T *rettv UNUSED)f_balloon_show1382,55552
f_balloon_split(typval_T *argvars, typval_T *rettv UNUSED)f_balloon_split1411,56150
tv_get_buf(typval_T *tv, int curtab_only)tv_get_buf1439,56731
get_buf_arg(typval_T *arg)get_buf_arg1467,57368
f_byte2line(typval_T *argvars UNUSED, typval_T *rettv)f_byte2line1483,57637
byteidx(typval_T *argvars, typval_T *rettv, int comp UNUSED)byteidx1500,58012
f_byteidx(typval_T *argvars, typval_T *rettv)f_byteidx1529,58574
f_byteidxcomp(typval_T *argvars, typval_T *rettv)f_byteidxcomp1538,58712
f_call(typval_T *argvars, typval_T *rettv)f_call1547,58868
f_ceil(typval_T *argvars, typval_T *rettv)f_ceil1591,59741
f_changenr(typval_T *argvars UNUSED, typval_T *rettv)f_changenr1607,60008
f_char2nr(typval_T *argvars, typval_T *rettv)f_char2nr1616,60168
get_optional_window(typval_T *argvars, int idx)get_optional_window1635,60596
f_col(typval_T *argvars, typval_T *rettv)f_col1655,60913
f_confirm(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_confirm1699,61925
f_copy(typval_T *argvars, typval_T *rettv)f_copy1755,63234
f_cos(typval_T *argvars, typval_T *rettv)f_cos1765,63388
f_cosh(typval_T *argvars, typval_T *rettv)f_cosh1780,63642
f_cursor(typval_T *argvars, typval_T *rettv)f_cursor1800,64054
f_debugbreak(typval_T *argvars, typval_T *rettv)f_debugbreak1856,65277
f_deepcopy(typval_T *argvars, typval_T *rettv)f_deepcopy1882,65720
f_did_filetype(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_did_filetype1902,66116
f_echoraw(typval_T *argvars, typval_T *rettv UNUSED)f_echoraw1911,66280
f_empty(typval_T *argvars, typval_T *rettv)f_empty1926,66517
f_environ(typval_T *argvars UNUSED, typval_T *rettv)f_environ1992,67931
f_escape(typval_T *argvars, typval_T *rettv)f_escape2045,68855
f_eval(typval_T *argvars, typval_T *rettv)f_eval2058,69128
f_eventhandler(typval_T *argvars UNUSED, typval_T *rettv)f_eventhandler2083,69589
static garray_T	redir_execute_ga;redir_execute_ga2088,69691
execute_redir_str(char_u *value, int value_len)execute_redir_str2094,69796
get_list_line(get_list_line2117,70363
execute_common(typval_T *argvars, typval_T *rettv, int arg_off)execute_common2139,70793
f_execute(typval_T *argvars, typval_T *rettv)f_execute2252,73557
f_exists(typval_T *argvars, typval_T *rettv)f_exists2261,73693
f_exp(typval_T *argvars, typval_T *rettv)f_exp2315,74746
f_expand(typval_T *argvars, typval_T *rettv)f_expand2331,75009
f_expandcmd(typval_T *argvars, typval_T *rettv)f_expandcmd2399,76754
f_feedkeys(typval_T *argvars, typval_T *rettv UNUSED)f_feedkeys2427,77336
f_float2nr(typval_T *argvars, typval_T *rettv)f_float2nr2517,79317
f_floor(typval_T *argvars, typval_T *rettv)f_floor2536,79706
f_fmod(typval_T *argvars, typval_T *rettv)f_fmod2551,79964
f_fnameescape(typval_T *argvars, typval_T *rettv)f_fnameescape2568,80309
f_foreground(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_foreground2579,80542
common_function(typval_T *argvars, typval_T *rettv, int is_funcref)common_function2594,80814
f_funcref(typval_T *argvars, typval_T *rettv)f_funcref2803,85914
ret_f_function(int argcount, type_T **argtypes UNUSED)ret_f_function2809,86028
f_function(typval_T *argvars, typval_T *rettv)f_function2820,86246
f_garbagecollect(typval_T *argvars, typval_T *rettv UNUSED)f_garbagecollect2829,86396
f_get(typval_T *argvars, typval_T *rettv)f_get2843,86802
f_getchangelist(typval_T *argvars, typval_T *rettv)f_getchangelist2965,89415
f_getcharsearch(typval_T *argvars UNUSED, typval_T *rettv)f_getcharsearch3024,90787
f_getenv(typval_T *argvars, typval_T *rettv)f_getenv3040,91149
f_getfontname(typval_T *argvars UNUSED, typval_T *rettv)f_getfontname3061,91556
f_getjumplist(typval_T *argvars, typval_T *rettv)f_getjumplist3098,92412
f_getpid(typval_T *argvars UNUSED, typval_T *rettv)f_getpid3147,93577
getpos_both(getpos_both3153,93692
f_getcurpos(typval_T *argvars, typval_T *rettv)f_getcurpos3209,95141
f_getpos(typval_T *argvars, typval_T *rettv)f_getpos3218,95285
f_getreg(typval_T *argvars, typval_T *rettv)f_getreg3227,95421
f_getregtype(typval_T *argvars, typval_T *rettv)f_getregtype3278,96576
f_gettagstack(typval_T *argvars, typval_T *rettv)f_gettagstack3322,97523
f_has(typval_T *argvars, typval_T *rettv)f_has3346,97937
f_haslocaldir(typval_T *argvars, typval_T *rettv)f_haslocaldir3990,109145
f_hasmapto(typval_T *argvars, typval_T *rettv)f_hasmapto4010,109595
f_hlID(typval_T *argvars, typval_T *rettv)f_hlID4037,110157
f_hlexists(typval_T *argvars, typval_T *rettv)f_hlexists4046,110329
f_hostname(typval_T *argvars UNUSED, typval_T *rettv)f_hostname4055,110502
f_iconv(typval_T *argvars UNUSED, typval_T *rettv)f_iconv4068,110751
f_index(typval_T *argvars, typval_T *rettv)f_index4099,111569
static int inputsecret_flag = 0;inputsecret_flag4174,113117
f_input(typval_T *argvars, typval_T *rettv)f_input4181,113255
f_inputdialog(typval_T *argvars, typval_T *rettv)f_inputdialog4190,113416
f_inputlist(typval_T *argvars, typval_T *rettv)f_inputlist4231,114556
static garray_T	    ga_userinput = {0, 0, sizeof(tasave_T), 4, NULL};ga_userinput4272,115551
f_inputrestore(typval_T *argvars UNUSED, typval_T *rettv)f_inputrestore4278,115674
f_inputsave(typval_T *argvars UNUSED, typval_T *rettv)f_inputsave4298,116123
f_inputsecret(typval_T *argvars, typval_T *rettv)f_inputsecret4316,116533
f_interrupt(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_interrupt4329,116754
f_invert(typval_T *argvars, typval_T *rettv)f_invert4338,116891
tv_islocked(typval_T *tv)tv_islocked4348,117162
f_islocked(typval_T *argvars, typval_T *rettv)f_islocked4363,117485
f_isinf(typval_T *argvars, typval_T *rettv)f_isinf4412,118696
f_isnan(typval_T *argvars, typval_T *rettv)f_isnan4422,118928
f_last_buffer_nr(typval_T *argvars UNUSED, typval_T *rettv)f_last_buffer_nr4433,119141
f_len(typval_T *argvars, typval_T *rettv)f_len4449,119382
libcall_common(typval_T *argvars UNUSED, typval_T *rettv, int type)libcall_common4482,120110
f_libcall(typval_T *argvars, typval_T *rettv)f_libcall4524,121103
f_libcallnr(typval_T *argvars, typval_T *rettv)f_libcallnr4533,121251
f_line(typval_T *argvars, typval_T *rettv)f_line4542,121411
f_line2byte(typval_T *argvars UNUSED, typval_T *rettv)f_line2byte4582,122245
f_log(typval_T *argvars, typval_T *rettv)f_log4604,122708
f_log10(typval_T *argvars, typval_T *rettv)f_log104619,122963
f_luaeval(typval_T *argvars, typval_T *rettv)f_luaeval4636,123247
f_maparg(typval_T *argvars, typval_T *rettv)f_maparg4653,123540
f_mapcheck(typval_T *argvars, typval_T *rettv)f_mapcheck4662,123676
    MATCH_END,	    // matchend()MATCH_END4669,123782
    MATCH_MATCH,    // match()MATCH_MATCH4670,123815
    MATCH_STR,	    // matchstr()MATCH_STR4671,123846
    MATCH_LIST,	    // matchlist()MATCH_LIST4672,123879
    MATCH_POS	    // matchstrpos()MATCH_POS4673,123914
} matchtype_T;matchtype_T4674,123949
find_some_match(typval_T *argvars, typval_T *rettv, matchtype_T type)find_some_match4677,123981
f_match(typval_T *argvars, typval_T *rettv)f_match4906,129267
f_matchend(typval_T *argvars, typval_T *rettv)f_matchend4915,129414
f_matchlist(typval_T *argvars, typval_T *rettv)f_matchlist4924,129563
f_matchstr(typval_T *argvars, typval_T *rettv)f_matchstr4933,129713
f_matchstrpos(typval_T *argvars, typval_T *rettv)f_matchstrpos4942,129864
max_min(typval_T *argvars, typval_T *rettv, int domax)max_min4948,129983
f_max(typval_T *argvars, typval_T *rettv)f_max5026,131428
f_min(typval_T *argvars, typval_T *rettv)f_min5035,131553
f_mzeval(typval_T *argvars, typval_T *rettv)f_mzeval5045,131727
mzscheme_call_vim(char_u *name, typval_T *args, typval_T *rettv)mzscheme_call_vim5057,131960
f_nextnonblank(typval_T *argvars, typval_T *rettv)f_nextnonblank5074,132312
f_nr2char(typval_T *argvars, typval_T *rettv)f_nr2char5095,132663
f_or(typval_T *argvars, typval_T *rettv)f_or5123,133253
f_perleval(typval_T *argvars, typval_T *rettv)f_perleval5134,133473
f_pow(typval_T *argvars, typval_T *rettv)f_pow5149,133714
f_prevnonblank(typval_T *argvars, typval_T *rettv)f_prevnonblank5166,134050
static va_list	ap;ap5183,134589
f_printf(typval_T *argvars, typval_T *rettv)f_printf5189,134655
f_pum_getpos(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_pum_getpos5221,135366
f_pumvisible(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_pumvisible5232,135576
f_py3eval(typval_T *argvars, typval_T *rettv)f_py3eval5243,135761
f_pyeval(typval_T *argvars, typval_T *rettv)f_pyeval5264,136093
f_pyxeval(typval_T *argvars, typval_T *rettv)f_pyxeval5285,136455
static UINT32_T srand_seed_for_testing = 0;srand_seed_for_testing5304,136853
static int	srand_seed_for_testing_is_used = FALSE;srand_seed_for_testing_is_used5305,136897
f_test_srand_seed(typval_T *argvars, typval_T *rettv UNUSED)f_test_srand_seed5308,136965
init_srand(UINT32_T *x)init_srand5320,137276
#define ROTL(ROTL5365,138152
#define SPLITMIX32(SPLITMIX325366,138200
#define SHUFFLE_XOSHIRO128STARSTAR(SHUFFLE_XOSHIRO128STARSTAR5372,138364
f_rand(typval_T *argvars, typval_T *rettv)f_rand5385,138596
f_srand(typval_T *argvars, typval_T *rettv)f_srand5453,140296
#undef ROTLROTL5478,140917
#undef SPLITMIX32SPLITMIX325479,140929
#undef SHUFFLE_XOSHIRO128STARSTARSHUFFLE_XOSHIRO128STARSTAR5480,140947
f_range(typval_T *argvars, typval_T *rettv)f_range5486,141027
range_list_materialize(list_T *list)range_list_materialize5531,142201
return_register(int regname, typval_T *rettv)return_register5551,142716
f_reg_executing(typval_T *argvars UNUSED, typval_T *rettv)f_reg_executing5564,142956
f_reg_recording(typval_T *argvars UNUSED, typval_T *rettv)f_reg_recording5573,143116
make_connection(void)make_connection5580,143291
check_connection(void)check_connection5595,143494
remote_common(typval_T *argvars, typval_T *rettv, int expr)remote_common5609,143710
f_remote_expr(typval_T *argvars UNUSED, typval_T *rettv)f_remote_expr5679,145254
f_remote_foreground(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_remote_foreground5692,145511
f_remote_peek(typval_T *argvars UNUSED, typval_T *rettv)f_remote_peek5717,146182
f_remote_read(typval_T *argvars UNUSED, typval_T *rettv)f_remote_read5772,147375
f_remote_send(typval_T *argvars UNUSED, typval_T *rettv)f_remote_send5811,148286
f_remote_startserver(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_remote_startserver5824,148545
f_rename(typval_T *argvars, typval_T *rettv)f_rename5851,149123
f_repeat(typval_T *argvars, typval_T *rettv)f_repeat5866,149441
#define SP_NOMOVE	SP_NOMOVE5907,150202
#define SP_REPEAT	SP_REPEAT5908,150250
#define SP_RETCOUNT	SP_RETCOUNT5909,150306
#define SP_SETPCMARK	SP_SETPCMARK5910,150356
#define SP_START	SP_START5911,150415
#define SP_SUBPAT	SP_SUBPAT5912,150475
#define SP_END	SP_END5913,150539
#define SP_COLUMN	SP_COLUMN5914,150596
get_search_arg(typval_T *varp, int *flagsp)get_search_arg5922,150786
search_cmn(typval_T *argvars, pos_T *match_pos, int *flagsp)search_cmn5974,151917
vim_round(float_T f)vim_round6083,154617
f_round(typval_T *argvars, typval_T *rettv)f_round6092,154746
f_rubyeval(typval_T *argvars, typval_T *rettv)f_rubyeval6109,155036
f_screenattr(typval_T *argvars, typval_T *rettv)f_screenattr6123,155266
f_screenchar(typval_T *argvars, typval_T *rettv)f_screenchar6143,155694
f_screenchars(typval_T *argvars, typval_T *rettv)f_screenchars6169,156237
f_screencol(typval_T *argvars UNUSED, typval_T *rettv)f_screencol6204,157083
f_screenrow(typval_T *argvars UNUSED, typval_T *rettv)f_screenrow6213,157243
f_screenstring(typval_T *argvars, typval_T *rettv)f_screenstring6222,157406
f_search(typval_T *argvars, typval_T *rettv)f_search6259,158283
f_searchdecl(typval_T *argvars, typval_T *rettv)f_searchdecl6270,158466
searchpair_cmn(typval_T *argvars, pos_T *match_pos)searchpair_cmn6295,159139
f_searchpair(typval_T *argvars, typval_T *rettv)f_searchpair6383,161389
f_searchpairpos(typval_T *argvars, typval_T *rettv)f_searchpairpos6392,161554
do_searchpair(do_searchpair6417,162107
f_searchpos(typval_T *argvars, typval_T *rettv)f_searchpos6592,166585
f_server2client(typval_T *argvars UNUSED, typval_T *rettv)f_server2client6617,167128
f_serverlist(typval_T *argvars UNUSED, typval_T *rettv)f_serverlist6646,167765
f_setcharsearch(typval_T *argvars, typval_T *rettv UNUSED)f_setcharsearch6664,168102
f_setenv(typval_T *argvars, typval_T *rettv UNUSED)f_setenv6708,168991
f_setfperm(typval_T *argvars, typval_T *rettv)f_setfperm6725,169420
f_setpos(typval_T *argvars, typval_T *rettv)f_setpos6761,170100
f_setreg(typval_T *argvars, typval_T *rettv)f_setreg6804,170977
f_settagstack(typval_T *argvars, typval_T *rettv)f_settagstack6923,173657
f_sha256(typval_T *argvars, typval_T *rettv)f_sha2566981,174859
f_shellescape(typval_T *argvars, typval_T *rettv)f_shellescape6996,175164
f_shiftwidth(typval_T *argvars UNUSED, typval_T *rettv)f_shiftwidth7009,175459
f_sin(typval_T *argvars, typval_T *rettv)f_sin7034,175929
f_sinh(typval_T *argvars, typval_T *rettv)f_sinh7049,176183
f_soundfold(typval_T *argvars, typval_T *rettv)f_soundfold7065,176457
f_spellbadword(typval_T *argvars UNUSED, typval_T *rettv)f_spellbadword7082,176766
f_spellsuggest(typval_T *argvars UNUSED, typval_T *rettv)f_spellsuggest7139,177944
f_split(typval_T *argvars, typval_T *rettv)f_split7196,179069
f_sqrt(typval_T *argvars, typval_T *rettv)f_sqrt7273,180859
f_str2float(typval_T *argvars, typval_T *rettv)f_str2float7290,181145
f_str2list(typval_T *argvars, typval_T *rettv)f_str2list7308,181520
f_str2nr(typval_T *argvars, typval_T *rettv)f_str2nr7349,182274
f_strgetchar(typval_T *argvars, typval_T *rettv)f_strgetchar7392,183254
f_stridx(typval_T *argvars, typval_T *rettv)f_stridx7425,183864
f_string(typval_T *argvars, typval_T *rettv)f_string7460,184719
f_strlen(typval_T *argvars, typval_T *rettv)f_strlen7477,185175
f_strchars(typval_T *argvars, typval_T *rettv)f_strchars7487,185363
f_strdisplaywidth(typval_T *argvars, typval_T *rettv)f_strdisplaywidth7514,185948
f_strwidth(typval_T *argvars, typval_T *rettv)f_strwidth7529,186274
f_strcharpart(typval_T *argvars, typval_T *rettv)f_strcharpart7540,186488
f_strpart(typval_T *argvars, typval_T *rettv)f_strpart7606,187724
f_strridx(typval_T *argvars, typval_T *rettv)f_strridx7649,188551
f_strtrans(typval_T *argvars, typval_T *rettv)f_strtrans7702,189759
f_submatch(typval_T *argvars, typval_T *rettv)f_submatch7712,189956
f_substitute(typval_T *argvars, typval_T *rettv)f_substitute7747,190623
f_swapinfo(typval_T *argvars, typval_T *rettv)f_swapinfo7776,191444
f_swapname(typval_T *argvars, typval_T *rettv)f_swapname7786,191645
f_synID(typval_T *argvars UNUSED, typval_T *rettv)f_synID7803,192045
f_synIDattr(typval_T *argvars UNUSED, typval_T *rettv)f_synIDattr7828,192698
f_synIDtrans(typval_T *argvars UNUSED, typval_T *rettv)f_synIDtrans7920,194799
f_synconcealed(typval_T *argvars UNUSED, typval_T *rettv)f_synconcealed7940,195098
f_synstack(typval_T *argvars UNUSED, typval_T *rettv)f_synstack7997,196537
f_tabpagebuflist(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_tabpagebuflist8033,197308
f_tagfiles(typval_T *argvars UNUSED, typval_T *rettv)f_tagfiles8059,197872
f_taglist(typval_T *argvars, typval_T *rettv)f_taglist8083,198349
f_tan(typval_T *argvars, typval_T *rettv)f_tan8105,198810
f_tanh(typval_T *argvars, typval_T *rettv)f_tanh8120,199064
f_tolower(typval_T *argvars, typval_T *rettv)f_tolower8136,199336
f_toupper(typval_T *argvars, typval_T *rettv)f_toupper8146,199540
f_tr(typval_T *argvars, typval_T *rettv)f_tr8156,199754
f_trim(typval_T *argvars, typval_T *rettv)f_trim8269,202212
f_trunc(typval_T *argvars, typval_T *rettv)f_trunc8336,203402
f_type(typval_T *argvars, typval_T *rettv)f_type8353,203747
f_virtcol(typval_T *argvars, typval_T *rettv)f_virtcol8384,204570
f_visualmode(typval_T *argvars, typval_T *rettv)f_visualmode8415,205192
f_wildmenumode(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_wildmenumode8433,205592
f_windowsversion(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_windowsversion8445,205798
f_wordcount(typval_T *argvars UNUSED, typval_T *rettv)f_wordcount8455,206017
f_xor(typval_T *argvars, typval_T *rettv)f_xor8466,206221

src/evalvars.c,7915
static dictitem_T	globvars_var;		// variable used for g:globvars_var18,397
static dict_T		globvardict;		// Dictionary with g: variablesglobvardict19,454
#define globvarht globvarht20,515
static hashtab_T	compat_hashtab;compat_hashtab26,703
#define VV_COMPAT	VV_COMPAT36,995
#define VV_RO	VV_RO37,1053
#define VV_RO_SBX	VV_RO_SBX38,1083
#define VV_NAME(VV_NAME40,1132
typedef struct vimvar vimvar_T;vimvar_T42,1180
static struct vimvarvimvar44,1213
    char	*vv_name;	// name of variable, without v:vv_name46,1236
    dictitem16_T vv_di;		// value and name for key (max 16 chars!)vv_di47,1287
    char	vv_flags;	// VV_COMPAT, VV_RO, VV_RO_SBXvv_flags48,1354
} vimvars[VV_LEN] =vimvars49,1404
#define vv_type	vv_type151,6125
#define vv_nr	vv_nr152,6161
#define vv_float	vv_float153,6202
#define vv_str	vv_str154,6244
#define vv_list	vv_list155,6286
#define vv_dict	vv_dict156,6327
#define vv_blob	vv_blob157,6368
#define vv_tv	vv_tv158,6409
static dictitem_T	vimvars_var;		// variable used for v:vimvars_var160,6437
static dict_T		vimvardict;		// Dictionary with v: variablesvimvardict161,6493
#define vimvarht vimvarht162,6553
evalvars_init(void)evalvars_init187,7636
evalvars_clear(void)evalvars_clear257,10005
garbage_collect_globvars(int copyID)garbage_collect_globvars290,10809
garbage_collect_vimvars(int copyID)garbage_collect_vimvars296,10911
garbage_collect_scriptvars(int copyID)garbage_collect_scriptvars302,11011
set_internal_string_var(char_u *name, char_u *value)set_internal_string_var318,11339
eval_charconvert(eval_charconvert336,11609
eval_printexpr(char_u *fname, char_u *args)eval_printexpr362,12289
eval_diff(eval_diff384,12743
eval_patch(eval_patch401,13201
eval_spell_expr(char_u *badword, char_u *expr)eval_spell_expr425,13854
get_spellword(list_T *list, char_u **pp)get_spellword461,14697
prepare_vimvar(int idx, typval_T *save_tv)prepare_vimvar483,15134
restore_vimvar(int idx, typval_T *save_tv)restore_vimvar497,15563
list_vim_vars(int *first)list_vim_vars516,15930
list_script_vars(int *first)list_script_vars525,16094
heredoc_get(exarg_T *eap, char_u *cmd)heredoc_get547,16731
ex_let(exarg_T *eap)ex_let675,19729
ex_const(exarg_T *eap)ex_const687,19973
ex_let_const(exarg_T *eap, int is_const)ex_let_const693,20046
ex_let_vars(ex_let_vars807,22813
skip_var_list(skip_var_list903,24992
skip_var_one(char_u *arg, int include_type)skip_var_one956,25937
list_hashtable_vars(list_hashtable_vars977,26475
list_glob_vars(int *first)list_glob_vars1013,27197
list_buf_vars(int *first)list_buf_vars1022,27332
list_win_vars(int *first)list_win_vars1031,27485
list_tab_vars(int *first)list_tab_vars1040,27640
list_arg_vars(exarg_T *eap, char_u *arg, int *first)list_arg_vars1049,27800
ex_let_one(ex_let_one1156,30198
ex_unlet(exarg_T *eap)ex_unlet1360,34805
ex_lockvar(exarg_T *eap)ex_lockvar1369,34925
ex_unletlock(ex_unletlock1389,35247
do_unlet_var(do_unlet_var1458,36534
do_unlet(char_u *name, int forceit)do_unlet1523,37968
do_lock_var(do_lock_var1579,39212
item_lock(typval_T *tv, int deep, int lock)item_lock1643,40597
del_menutrans_vars(void)del_menutrans_vars1735,42452
static char_u	*varnamebuf = NULL;varnamebuf1761,43002
static int	varnamebuflen = 0;varnamebuflen1762,43036
cat_prefix_varname(int prefix, char_u *name)cat_prefix_varname1768,43151
get_user_var_name(expand_T *xp, int idx)get_user_var_name1796,43724
get_var_special_name(int nr)get_var_special_name1875,45231
get_globvar_dict(void)get_globvar_dict1892,45559
get_globvar_ht(void)get_globvar_ht1901,45677
get_vimvar_dict(void)get_vimvar_dict1910,45784
find_vim_var(char_u *name)find_vim_var1919,45912
set_vim_var_type(int idx, vartype_T type)set_vim_var_type1935,46218
set_vim_var_nr(int idx, varnumber_T val)set_vim_var_nr1945,46424
get_vim_var_name(int idx)get_vim_var_name1951,46511
get_vim_var_tv(int idx)get_vim_var_tv1960,46632
set_vim_var_tv(int idx, typval_T *tv)set_vim_var_tv1970,46798
get_vim_var_nr(int idx)get_vim_var_nr1987,47124
get_vim_var_str(int idx)get_vim_var_str1998,47376
get_vim_var_list(int idx)get_vim_var_list2008,47562
get_vim_var_dict(int idx)get_vim_var_dict2018,47735
set_vim_var_char(int c)set_vim_var_char2027,47847
set_vcount(set_vcount2046,48194
save_vimvars(vimvars_save_T *vvsave)save_vimvars2062,48539
restore_vimvars(vimvars_save_T *vvsave)restore_vimvars2073,48797
set_vim_var_string(set_vim_var_string2085,49101
set_vim_var_list(int idx, list_T *val)set_vim_var_list2104,49523
set_vim_var_dict(int idx, dict_T *val)set_vim_var_dict2117,49775
set_argv_var(char **argv, int argc)set_argv_var2133,50048
set_reg_var(int c)set_reg_var2154,50436
v_exception(char_u *oldval)v_exception2174,50990
v_throwpoint(char_u *oldval)v_throwpoint2190,51417
set_cmdarg(exarg_T *eap, char_u *oldarg)set_cmdarg2206,51798
get_var_tv(get_var_tv2274,53483
check_vars(char_u *name, int len)check_vars2333,54825
find_var(char_u *name, hashtab_T **htp, int no_autoload)find_var2364,55540
find_var_in_ht(find_var_in_ht2388,56111
get_script_local_ht(void)get_script_local_ht2438,57471
lookup_scriptvar(char_u *name, size_t len, cctx_T *dummy UNUSED)lookup_scriptvar2452,57727
find_var_ht(char_u *name, char_u **varname)find_var_ht2492,58522
get_var_value(char_u *name)get_var_value2568,60642
new_script_vars(scid_T id)new_script_vars2583,60965
init_var_dict(dict_T *dict, dictitem_T *dict_var, int scope)init_var_dict2599,61285
unref_var_dict(dict_T *dict)unref_var_dict2617,61781
vars_clear(hashtab_T *ht)vars_clear2631,62155
vars_clear_ext(hashtab_T *ht, int free_val)vars_clear_ext2640,62301
delete_var(hashtab_T *ht, hashitem_T *hi)delete_var2673,62983
list_one_var(dictitem_T *v, char *prefix, int *first)list_one_var2686,63199
list_one_var_a(list_one_var_a2699,63524
set_var(set_var2749,64575
set_var_const(set_var_const2763,64893
var_check_ro(int flags, char_u *name, int use_gettext)var_check_ro2935,69086
var_check_fixed(int flags, char_u *name, int use_gettext)var_check_fixed2955,69540
var_check_func_name(var_check_func_name2971,69889
var_check_lock(int lock, char_u *name, int use_gettext)var_check_lock3002,70856
valid_varname(char_u *varname)valid_varname3028,71429
getwinvar(getwinvar3046,71747
setwinvar(typval_T *argvars, int off)setwinvar3127,73625
reset_v_option_vars(void)reset_v_option_vars3189,75098
assert_error(garray_T *gap)assert_error3203,75493
var_exists(char_u *var)var_exists3214,75810
static lval_T	*redir_lval = NULL;redir_lval3245,76416
#define EVALCMD_BUSY EVALCMD_BUSY3246,76450
static garray_T redir_ga;	// only valid when redir_lval is not NULLredir_ga3247,76509
static char_u	*redir_endp = NULL;redir_endp3248,76577
static char_u	*redir_varname = NULL;redir_varname3249,76611
var_redir_start(char_u *name, int append)var_redir_start3257,76837
var_redir_str(char_u *value, int value_len)var_redir_str3334,78878
var_redir_stop(void)var_redir_stop3360,79398
f_gettabvar(typval_T *argvars, typval_T *rettv)f_gettabvar3400,80284
f_gettabwinvar(typval_T *argvars, typval_T *rettv)f_gettabwinvar3443,81416
f_getwinvar(typval_T *argvars, typval_T *rettv)f_getwinvar3452,81548
f_getbufvar(typval_T *argvars, typval_T *rettv)f_getbufvar3461,81677
f_settabvar(typval_T *argvars, typval_T *rettv UNUSED)f_settabvar3528,83040
f_settabwinvar(typval_T *argvars, typval_T *rettv UNUSED)f_settabwinvar3566,83863
f_setwinvar(typval_T *argvars, typval_T *rettv UNUSED)f_setwinvar3575,83995
f_setbufvar(typval_T *argvars, typval_T *rettv UNUSED)f_setbufvar3584,84124
get_callback(typval_T *arg)get_callback3644,85549
put_callback(callback_T *cb, typval_T *tv)put_callback3686,86486
set_callback(callback_T *dest, callback_T *src)set_callback3707,86926
free_callback(callback_T *callback)free_callback3728,87383

src/evalwindow.c,3041
win_getid(typval_T *argvars)win_getid19,410
win_id2tabwin(typval_T *argvars, list_T *list)win_id2tabwin54,1031
win_id2wp(int id)win_id2wp85,1562
win_id2wp_tp(int id, tabpage_T **tpp)win_id2wp_tp94,1692
win_id2win(typval_T *argvars)win_id2win129,2309
win_findbuf(typval_T *argvars, list_T *list)win_findbuf145,2530
find_win_by_nr(find_win_by_nr160,2841
find_win_by_nr_or_id(typval_T *vp)find_win_by_nr_or_id206,3756
find_tabwin(find_tabwin220,4052
get_framelayout(frame_T *fr, list_T *l, int outer)get_framelayout265,4835
get_winnr(tabpage_T *tp, typval_T *argvar)get_winnr315,5770
get_win_info(win_T *wp, short tpnr, short winnr)get_win_info390,7440
get_tabpage_info(tabpage_T *tp, int tp_idx)get_tabpage_info432,8683
f_gettabinfo(typval_T *argvars, typval_T *rettv)f_gettabinfo463,9280
f_getwininfo(typval_T *argvars, typval_T *rettv)f_getwininfo498,9974
f_getwinpos(typval_T *argvars UNUSED, typval_T *rettv)f_getwinpos540,10825
f_getwinposx(typval_T *argvars UNUSED, typval_T *rettv)f_getwinposx568,11405
f_getwinposy(typval_T *argvars UNUSED, typval_T *rettv)f_getwinposy588,11749
f_tabpagenr(typval_T *argvars UNUSED, typval_T *rettv)f_tabpagenr607,12091
f_tabpagewinnr(typval_T *argvars UNUSED, typval_T *rettv)f_tabpagewinnr633,12529
f_win_execute(typval_T *argvars, typval_T *rettv)f_win_execute650,12832
f_win_findbuf(typval_T *argvars, typval_T *rettv)f_win_findbuf679,13492
f_win_getid(typval_T *argvars, typval_T *rettv)f_win_getid689,13673
f_win_gotoid(typval_T *argvars, typval_T *rettv)f_win_gotoid698,13816
f_win_id2tabwin(typval_T *argvars, typval_T *rettv)f_win_id2tabwin724,14222
f_win_id2win(typval_T *argvars, typval_T *rettv)f_win_id2win734,14408
f_win_screenpos(typval_T *argvars, typval_T *rettv)f_win_screenpos743,14556
win_move_into_split(win_T *wp, win_T *targetwin, int size, int flags)win_move_into_split759,14978
f_win_splitmove(typval_T *argvars, typval_T *rettv)f_win_splitmove803,16092
f_win_gettype(typval_T *argvars, typval_T *rettv)f_win_gettype846,17183
f_getcmdwintype(typval_T *argvars UNUSED, typval_T *rettv)f_getcmdwintype876,17814
f_winbufnr(typval_T *argvars, typval_T *rettv)f_winbufnr894,18171
f_wincol(typval_T *argvars UNUSED, typval_T *rettv)f_wincol909,18425
f_winheight(typval_T *argvars, typval_T *rettv)f_winheight919,18596
f_winlayout(typval_T *argvars, typval_T *rettv)f_winlayout934,18846
f_winline(typval_T *argvars UNUSED, typval_T *rettv)f_winline957,19233
f_winnr(typval_T *argvars UNUSED, typval_T *rettv)f_winnr967,19399
f_winrestcmd(typval_T *argvars UNUSED, typval_T *rettv)f_winrestcmd979,19588
f_winrestview(typval_T *argvars, typval_T *rettv UNUSED)f_winrestview1005,20119
f_winsaveview(typval_T *argvars UNUSED, typval_T *rettv)f_winsaveview1056,21850
f_winwidth(typval_T *argvars, typval_T *rettv)f_winwidth1082,22615
switch_win(switch_win1105,23320
switch_win_noblock(switch_win_noblock1120,23616
restore_win(restore_win1155,24348
restore_win_noblock(restore_win_noblock1168,24599

src/ex_cmds2.c,1843
autowrite(buf_T *buf, int forceit)autowrite24,546
autowrite_all(void)autowrite_all50,1216
check_changed(buf_T *buf, int flags)check_changed76,1706
browse_save_fname(buf_T *buf)browse_save_fname131,3006
dialog_changed(dialog_changed154,3442
can_abandon(buf_T *buf, int forceit)can_abandon239,5394
add_bufnum(int *bufnrs, int *bufnump, int nr)add_bufnum252,5651
check_changed_any(check_changed_any270,6085
check_fname(void)check_fname412,9381
buf_write_all(buf_T *buf, int forceit)buf_write_all428,9620
ex_listdo(exarg_T *eap)ex_listdo448,10126
ex_compiler(exarg_T *eap)ex_compiler716,16351
init_pyxversion(void)init_pyxversion792,18536
requires_py_version(char_u *filename)requires_py_version814,18991
source_pyx_file(exarg_T *eap, char_u *fname)source_pyx_file867,20000
ex_pyxfile(exarg_T *eap)ex_pyxfile928,21179
ex_pyx(exarg_T *eap)ex_pyx937,21271
ex_pyxdo(exarg_T *eap)ex_pyxdo956,21561
ex_checktime(exarg_T *eap)ex_checktime977,21874
# define HAVE_GET_LOCALE_VALHAVE_GET_LOCALE_VAL996,22389
get_locale_val(int what)get_locale_val998,22438
gettext_lang(char_u *name)gettext_lang1041,23207
is_valid_mess_lang(char_u *lang)is_valid_mess_lang1078,24038
get_mess_lang(void)get_mess_lang1088,24295
get_mess_env(void)get_mess_env1127,25379
set_lang_var(void)set_lang_var1157,25990
ex_language(exarg_T *eap)ex_language1190,26765
# define VIM_LC_MESSAGES VIM_LC_MESSAGES1198,26908
static char_u	**locales = NULL;	// Array of all available localeslocales1316,29773
static int	did_init_locales = FALSE;did_init_locales1319,29855
find_locales(void)find_locales1326,30040
init_locales(void)init_locales1369,31121
free_locales(void)free_locales1382,31313
get_lang_arg(expand_T *xp UNUSED, int idx)get_lang_arg1399,31603
get_locales(expand_T *xp UNUSED, int idx)get_locales1418,31967

src/ex_cmds.c,4876
do_ascii(exarg_T *eap UNUSED)do_ascii33,820
ex_align(exarg_T *eap)ex_align144,3306
linelen(int *has_tab)linelen246,5590
static char_u	*sortbuf1;sortbuf1279,6437
static char_u	*sortbuf2;sortbuf2280,6462
static int	sort_ic;	// ignore casesort_ic282,6488
static int	sort_nr;	// sort on numbersort_nr283,6523
static int	sort_rx;	// sort on regex instead of skipping itsort_rx284,6561
static int	sort_flt;	// sort on floating numbersort_flt286,6639
static int	sort_abort;	// flag to indicate if sorting has been interruptedsort_abort289,6695
    linenr_T	lnum;			// line numberlnum294,6826
	    varnumber_T	start_col_nr;	// starting column numberstart_col_nr298,6885
	    varnumber_T	end_col_nr;	// ending column numberend_col_nr299,6942
	} line;line300,6995
	    varnumber_T	value;		// value if sorting by integervalue303,7015
	    int is_number;		// TRUE when line contains a numberis_number304,7071
	} num;num305,7128
	float_T value_flt;		// value if sorting by floatvalue_flt307,7154
    } st_u;st_u309,7211
} sorti_T;sorti_T310,7223
sort_compare(const void *s1, const void *s2)sort_compare315,7308
ex_sort(exarg_T *eap)ex_sort369,8960
do_move(linenr_T line1, linenr_T line2, linenr_T dest)do_move674,16156
ex_copy(linenr_T line1, linenr_T line2, linenr_T n)ex_copy817,19947
static char_u	*prevcmd = NULL;	// the previous commandprevcmd871,21233
free_prev_shellcmd(void)free_prev_shellcmd875,21338
do_bang(do_bang887,21579
do_filter(do_filter1052,25575
do_shell(do_shell1340,33210
find_pipe(char_u *cmd)find_pipe1515,37526
make_filter_cmd(make_filter_cmd1539,37992
append_redir(append_redir1645,40560
do_fixdel(exarg_T *eap UNUSED)do_fixdel1688,41405
print_line_no_prefix(print_line_no_prefix1698,41609
print_line(linenr_T lnum, int use_number, int list)print_line1718,42022
rename_buffer(char_u *new_fname)rename_buffer1741,42520
ex_file(exarg_T *eap)ex_file1793,43919
ex_update(exarg_T *eap)ex_update1822,44516
ex_write(exarg_T *eap)ex_write1832,44637
do_write(exarg_T *eap)do_write1856,45147
check_overwrite(check_overwrite2068,50499
ex_wnext(exarg_T *eap)ex_wnext2187,53253
do_wqall(exarg_T *eap)do_wqall2205,53618
not_writing(void)not_writing2281,55330
check_readonly(int *forceit, buf_T *buf)check_readonly2295,55697
getfile(getfile2353,57423
do_ecmd(do_ecmd2454,60309
delbuf_msg(char_u *name)delbuf_msg3157,78654
static int append_indent = 0;	    // autoindent for first lineappend_indent3166,78890
ex_append(exarg_T *eap)ex_append3172,79021
ex_change(exarg_T *eap)ex_change3319,82529
ex_z(exarg_T *eap)ex_z3348,83261
check_restricted(void)check_restricted3487,86007
check_secure(void)check_secure3503,86343
static char_u	*old_sub = NULL;	// previous substitute patternold_sub3525,86677
static int	global_need_beginline;	// call beginline() after ":g"global_need_beginline3526,86739
    int	do_all;		// do multiple substitutions per linedo_all3532,86882
    int	do_ask;		// ask for confirmationdo_ask3533,86937
    int	do_count;	// count onlydo_count3534,86978
    int	do_error;	// if false, ignore errorsdo_error3535,87010
    int	do_print;	// print last line with subs.do_print3536,87055
    int	do_list;	// list last line with subs.do_list3537,87103
    int	do_number;	// list last line with line nrdo_number3538,87149
    int	do_ic;		// ignore case flagdo_ic3539,87199
} subflags_T;subflags_T3540,87235
do_sub(exarg_T *eap)do_sub3551,87512
do_sub_msg(do_sub_msg4669,118391
global_exe_one(char_u *cmd, linenr_T lnum)global_exe_one4719,119719
ex_global(exarg_T *eap)ex_global4746,120610
global_exe(char_u *cmd)global_exe4877,123684
get_old_sub(void)get_old_sub4932,125437
set_old_sub(char_u *val)set_old_sub4941,125562
free_old_sub(void)free_old_sub4950,125706
prepare_tagpreview(prepare_tagpreview4963,125932
ex_help(exarg_T *eap)ex_help5044,127762
ex_helpclose(exarg_T *eap UNUSED)ex_helpclose5238,132409
check_help_lang(char_u *arg)check_help_lang5259,132812
help_heuristic(help_heuristic5285,133645
help_compare(const void *s1, const void *s2)help_compare5326,134956
find_help_tags(find_help_tags5351,135651
prepare_help_buffer(void)prepare_help_buffer5602,142607
fix_help_buffer(void)fix_help_buffer5670,144533
ex_exusage(exarg_T *eap UNUSED)ex_exusage5901,150012
ex_viusage(exarg_T *eap UNUSED)ex_viusage5910,150130
helptags_one(helptags_one5919,150281
do_helptags(char_u *dirname, int add_help_tags, int ignore_writeerr)do_helptags6170,156037
helptags_cb(char_u *fname, void *cookie)helptags_cb6270,158508
ex_helptags(exarg_T *eap)ex_helptags6279,158631
ex_smile(exarg_T *eap UNUSED)ex_smile6315,159452
ex_drop(exarg_T *eap)ex_drop6346,160873
skip_vimgrep_pat(char_u *p, char_u **s, int *flags)skip_vimgrep_pat6428,163095
ex_oldfiles(exarg_T *eap UNUSED)ex_oldfiles6477,163852

src/ex_docmd.c,17109
static int	quitmore = 0;quitmore16,362
static int	ex_pressedreturn = FALSE;ex_pressedreturn17,387
# define ex_hardcopy	ex_hardcopy19,445
static int	if_level = 0;		// depth in :ifif_level26,717
# define ex_emenu	ex_emenu32,857
# define ex_menu	ex_menu33,882
# define ex_menutranslate	ex_menutranslate34,906
# define ex_make	ex_make48,1383
# define ex_cbuffer	ex_cbuffer49,1407
# define ex_cc	ex_cc50,1434
# define ex_cnext	ex_cnext51,1457
# define ex_cbelow	ex_cbelow52,1482
# define ex_cfile	ex_cfile53,1508
# define qf_list	qf_list54,1533
# define qf_age	qf_age55,1557
# define qf_history	qf_history56,1581
# define ex_helpgrep	ex_helpgrep57,1608
# define ex_vimgrep	ex_vimgrep58,1636
# define ex_cclose	ex_cclose61,1698
# define ex_copen	ex_copen62,1724
# define ex_cwindow	ex_cwindow63,1749
# define ex_cbottom	ex_cbottom64,1776
# define ex_cexpr	ex_cexpr67,1861
# define HAVE_EX_SCRIPT_NIHAVE_EX_SCRIPT_NI78,2248
# define ex_pclose	ex_pclose106,3305
# define ex_ptag	ex_ptag107,3331
# define ex_pedit	ex_pedit108,3355
# define ex_goto	ex_goto117,3589
# define ex_gui	ex_gui128,3934
# define ex_tearoff	ex_tearoff134,4123
# define ex_popup	ex_popup140,4312
# define ex_simalt	ex_simalt143,4367
# define gui_mch_find_dialog	gui_mch_find_dialog146,4483
# define gui_mch_replace_dialog gui_mch_replace_dialog147,4518
# define ex_helpfind	ex_helpfind150,4590
# define ex_cscope	ex_cscope153,4645
# define ex_scscope	ex_scscope154,4671
# define ex_cstag	ex_cstag155,4698
# define ex_syntax	ex_syntax158,4750
# define ex_ownsyntax	ex_ownsyntax159,4776
# define ex_syntime	ex_syntime162,4864
# define ex_spell	ex_spell165,4917
# define ex_mkspell	ex_mkspell166,4942
# define ex_spelldump	ex_spelldump167,4969
# define ex_spellinfo	ex_spellinfo168,4998
# define ex_spellrepall	ex_spellrepall169,5027
# define ex_rundo	ex_rundo172,5094
# define ex_wundo	ex_wundo173,5119
# define ex_lua	ex_lua176,5168
# define ex_luado	ex_luado177,5199
# define ex_luafile	ex_luafile178,5224
# define ex_mzscheme	ex_mzscheme181,5280
# define ex_mzfile	ex_mzfile182,5315
# define ex_perl	ex_perl185,5366
# define ex_perldo	ex_perldo186,5397
# define ex_python	ex_python189,5450
# define ex_pydo	ex_pydo190,5483
# define ex_pyfile	ex_pyfile191,5507
# define ex_py3	ex_py3194,5561
# define ex_py3do	ex_py3do195,5592
# define ex_py3file	ex_py3file196,5617
# define ex_pyx	ex_pyx199,5703
# define ex_pyxdo	ex_pyxdo200,5734
# define ex_pyxfile	ex_pyxfile201,5759
# define ex_tcl	ex_tcl204,5810
# define ex_tcldo	ex_tcldo205,5841
# define ex_tclfile	ex_tclfile206,5866
# define ex_ruby	ex_ruby209,5918
# define ex_rubydo	ex_rubydo210,5949
# define ex_rubyfile	ex_rubyfile211,5975
# define ex_loadkeymap	ex_loadkeymap214,6030
# define ex_winpos	ex_winpos227,6477
# define ex_findpat	ex_findpat254,7357
# define ex_checkpath	ex_checkpath255,7384
# define ex_psearch	ex_psearch260,7516
# define ex_break	ex_break265,7654
# define ex_breakadd	ex_breakadd266,7679
# define ex_breakdel	ex_breakdel267,7707
# define ex_breaklist	ex_breaklist268,7735
# define ex_call	ex_call269,7764
# define ex_catch	ex_catch270,7788
# define ex_compiler	ex_compiler271,7813
# define ex_const	ex_const272,7841
# define ex_continue	ex_continue273,7866
# define ex_debug	ex_debug274,7894
# define ex_debuggreedy	ex_debuggreedy275,7919
# define ex_delfunction	ex_delfunction276,7950
# define ex_disassemble	ex_disassemble277,7981
# define ex_echo	ex_echo278,8012
# define ex_echohl	ex_echohl279,8036
# define ex_else	ex_else280,8062
# define ex_endfunction	ex_endfunction281,8086
# define ex_endif	ex_endif282,8117
# define ex_endtry	ex_endtry283,8142
# define ex_endwhile	ex_endwhile284,8168
# define ex_eval	ex_eval285,8196
# define ex_execute	ex_execute286,8220
# define ex_finally	ex_finally287,8247
# define ex_finish	ex_finish288,8274
# define ex_function	ex_function289,8300
# define ex_if	ex_if290,8328
# define ex_let	ex_let291,8351
# define ex_lockvar	ex_lockvar292,8375
# define ex_oldfiles	ex_oldfiles293,8402
# define ex_options	ex_options294,8430
# define ex_packadd	ex_packadd295,8457
# define ex_packloadall	ex_packloadall296,8484
# define ex_return	ex_return297,8515
# define ex_scriptnames	ex_scriptnames298,8541
# define ex_throw	ex_throw299,8572
# define ex_try	ex_try300,8597
# define ex_unlet	ex_unlet301,8621
# define ex_unlockvar	ex_unlockvar302,8646
# define ex_vim9script	ex_vim9script303,8675
# define ex_while	ex_while304,8705
# define ex_import	ex_import305,8730
# define ex_export	ex_export306,8756
# define ex_loadview	ex_loadview309,8810
# define ex_viminfo	ex_viminfo312,8866
# define ex_diffoff	ex_diffoff318,9036
# define ex_diffpatch	ex_diffpatch319,9063
# define ex_diffgetput	ex_diffgetput320,9092
# define ex_diffsplit	ex_diffsplit321,9122
# define ex_diffthis	ex_diffthis322,9151
# define ex_diffupdate	ex_diffupdate323,9179
# define ex_nohlsearch	ex_nohlsearch329,9327
# define ex_match	ex_match330,9357
# define ex_X	ex_X335,9445
# define ex_fold	ex_fold342,9611
# define ex_foldopen	ex_foldopen343,9635
# define ex_folddo	ex_folddo344,9663
# define ex_language	ex_language347,9747
# define ex_sign	ex_sign350,9801
# define ex_nbclose	ex_nbclose353,9859
# define ex_nbkey	ex_nbkey354,9886
# define ex_nbstart	ex_nbstart355,9911
# define ex_jumps	ex_jumps359,9968
# define ex_clearjumps	ex_clearjumps360,9993
# define ex_changes	ex_changes361,10023
# define ex_profile	ex_profile365,10079
# define ex_terminal	ex_terminal368,10135
# define ex_xrestore	ex_xrestore371,10222
# define ex_popupclear	ex_popupclear374,10287
#define DO_DECLARE_EXCMDDO_DECLARE_EXCMD380,10355
static char_u dollar_command[2] = {'$', 0};dollar_command384,10426
    char_u	*line;		// command lineline391,10559
    linenr_T	lnum;		// sourcing_lnum of the linelnum392,10594
} wcmd_T;wcmd_T393,10643
struct loop_cookieloop_cookie400,10868
    garray_T	*lines_gap;		// growarray with line infolines_gap402,10889
    int		current_line;		// last read line from growarraycurrent_line403,10943
    int		repeating;		// TRUE when looping a second timerepeating404,11000
    char_u	*(*getline)(int, void *, int, int);getline406,11129
    void	*cookie;cookie407,11176
struct dbg_stuffdbg_stuff415,11452
    int		trylevel;trylevel417,11471
    int		force_abort;force_abort418,11490
    except_T	*caught_stack;caught_stack419,11512
    char_u	*vv_exception;vv_exception420,11540
    char_u	*vv_throwpoint;vv_throwpoint421,11566
    int		did_emsg;did_emsg422,11593
    int		got_int;got_int423,11612
    int		did_throw;did_throw424,11630
    int		need_rethrow;need_rethrow425,11650
    int		check_cstack;check_cstack426,11673
    except_T	*current_exception;current_exception427,11696
save_dbg_stuff(struct dbg_stuff *dsp)save_dbg_stuff431,11749
restore_dbg_stuff(struct dbg_stuff *dsp)restore_dbg_stuff449,12490
do_exmode(do_exmode471,13090
msg_verbose_cmd(linenr_T lnum, char_u *cmd)msg_verbose_cmd567,15396
do_cmdline_cmd(char_u *cmd)do_cmdline_cmd587,15807
do_cmdline(do_cmdline613,16663
get_loop_line(int c, void *cookie, int indent, int do_concat)get_loop_line1406,40321
store_loop_line(garray_T *gap, char_u *line)store_loop_line1439,41211
free_cmdlines(garray_T *gap)free_cmdlines1453,41557
    void	*cookie UNUSED,		// argument for fgetline()UNUSED1470,41939
    char_u	*(*func)(int, void *, int, int))func1471,41992
compute_buffer_local_count(int addr_type, int lnum, int offset)compute_buffer_local_count1529,43374
current_win_nr(win_T *win)current_win_nr1572,44403
current_tab_nr(tabpage_T *tab)current_tab_nr1587,44569
# define CURRENT_WIN_NR CURRENT_WIN_NR1601,44729
# define LAST_WIN_NR LAST_WIN_NR1602,44776
# define CURRENT_TAB_NR CURRENT_TAB_NR1603,44818
# define LAST_TAB_NR LAST_TAB_NR1604,44865
do_one_cmd(do_one_cmd1630,45432
parse_command_modifiers(exarg_T *eap, char **errormsg, int skip_only)parse_command_modifiers2613,70044
free_cmdmod(void)free_cmdmod2872,75881
parse_cmd_address(exarg_T *eap, char **errormsg, int silent)parse_cmd_address2892,76402
checkforcmd(checkforcmd3081,80538
append_command(char_u *cmd)append_command3105,81038
find_ex_command(find_ex_command3139,81889
static struct cmdmodcmdmod3307,86199
    char	*name;name3309,86222
    int		minlen;minlen3310,86238
    int		has_count;  // :123verbose  :3tabhas_count3311,86255
} cmdmods[] = {cmdmods3312,86298
modifier_len(char_u *cmd)modifier_len3343,87079
cmd_exists(char_u *name)cmd_exists3368,87656
excmd_get_cmdidx(char_u *cmd, int len)excmd_get_cmdidx3402,88557
excmd_get_argt(cmdidx_T idx)excmd_get_argt3415,88815
skip_range(skip_range3430,89215
addr_error(cmd_addr_T addr_type)addr_error3471,89978
get_address(get_address3489,90374
get_flags(exarg_T *eap)get_flags3844,97586
ex_ni(exarg_T *eap)ex_ni3862,97953
ex_script_ni(exarg_T *eap)ex_script_ni3874,98235
invalid_range(exarg_T *eap)invalid_range3888,98477
correct_range(exarg_T *eap)correct_range3982,100523
skip_grep_pat(exarg_T *eap)skip_grep_pat3999,100879
replace_makeprg(exarg_T *eap, char_u *p, char_u **cmdlinep)replace_makeprg4020,101388
expand_filename(expand_filename4103,103388
# define ESCAPE_CHARS ESCAPE_CHARS4201,105876
repl_cmdline(repl_cmdline4325,108715
separate_nextcmd(exarg_T *eap)separate_nextcmd4382,110390
getargcmd(char_u **argp)getargcmd4451,111885
skip_cmd_arg(skip_cmd_arg4479,112399
get_bad_opt(char_u *p, exarg_T *eap)get_bad_opt4498,112671
getargopt(exarg_T *eap)getargopt4516,113020
ex_autocmd(exarg_T *eap)ex_autocmd4604,114739
ex_doautocmd(exarg_T *eap)ex_doautocmd4625,115167
ex_bunload(exarg_T *eap)ex_bunload4643,115635
ex_buffer(exarg_T *eap)ex_buffer4659,116010
ex_bmodified(exarg_T *eap)ex_bmodified4681,116500
ex_bnext(exarg_T *eap)ex_bnext4693,116758
ex_bprevious(exarg_T *eap)ex_bprevious4710,117160
ex_brewind(exarg_T *eap)ex_brewind4727,117529
ex_blast(exarg_T *eap)ex_blast4742,117806
ends_excmd(int c)ends_excmd4753,118003
find_nextcmd(char_u *p)find_nextcmd4765,118290
check_nextcmd(char_u *p)check_nextcmd4782,118594
check_more(check_more4801,118965
get_command_name(expand_T *xp UNUSED, int idx)get_command_name4838,119940
ex_colorscheme(exarg_T *eap)ex_colorscheme4846,120109
ex_highlight(exarg_T *eap)ex_highlight4886,120796
not_exiting(void)not_exiting4899,121113
before_quit_autocmds(win_T *wp, int quit_all, int forceit)before_quit_autocmds4906,121197
ex_quit(exarg_T *eap)ex_quit4938,122253
ex_cquit(exarg_T *eap UNUSED)ex_cquit5015,123933
ex_quit_all(exarg_T *eap)ex_quit_all5025,124170
ex_close(exarg_T *eap)ex_close5058,124768
ex_pclose(exarg_T *eap)ex_pclose5091,125316
ex_win_close(ex_win_close5114,125764
get_tabpage_arg(exarg_T *eap)get_tabpage_arg5161,126814
ex_tabclose(exarg_T *eap)ex_tabclose5261,128786
ex_tabonly(exarg_T *eap)ex_tabonly5299,129474
tabpage_close(int forceit)tabpage_close5343,130346
tabpage_close_other(tabpage_T *tp, int forceit)tabpage_close_other5363,130903
ex_only(exarg_T *eap)ex_only5393,131588
ex_hide(exarg_T *eap UNUSED)ex_hide5416,131941
ex_stop(exarg_T *eap)ex_stop5448,132461
ex_exit(exarg_T *eap)ex_exit5481,133211
ex_print(exarg_T *eap)ex_print5530,134222
ex_goto(exarg_T *eap)ex_goto5557,134829
ex_shell(exarg_T *eap UNUSED)ex_shell5567,134926
static int drop_busy = FALSE;drop_busy5574,135031
static int drop_filec;drop_filec5575,135061
static char_u **drop_filev = NULL;drop_filev5576,135084
static int drop_split;drop_split5577,135119
static void (*drop_callback)(void *);drop_callback5578,135142
static void *drop_cookie;drop_cookie5579,135180
handle_drop_internal(void)handle_drop_internal5582,135223
handle_drop(handle_drop5654,137419
handle_any_postponed_drop(void)handle_any_postponed_drop5701,138678
ex_preserve(exarg_T *eap UNUSED)ex_preserve5713,138893
ex_recover(exarg_T *eap)ex_recover5723,139037
ex_wrongmodifier(exarg_T *eap)ex_wrongmodifier5742,139494
ex_splitview(exarg_T *eap)ex_splitview5761,140196
tabpage_new(void)tabpage_new5885,143072
ex_tabnext(exarg_T *eap)ex_tabnext5900,143300
ex_tabmove(exarg_T *eap)ex_tabmove5959,144316
ex_tabs(exarg_T *eap UNUSED)ex_tabs5972,144533
ex_mode(exarg_T *eap)ex_mode6016,145658
ex_resize(exarg_T *eap)ex_resize6029,145852
ex_find(exarg_T *eap)ex_find6067,146630
ex_open(exarg_T *eap)ex_open6103,147362
ex_edit(exarg_T *eap)ex_edit6140,148222
do_exedit(do_exedit6149,148328
ex_nogui(exarg_T *eap)ex_nogui6325,152886
ex_tearoff(exarg_T *eap)ex_tearoff6333,153040
ex_popup(exarg_T *eap)ex_popup6342,153238
ex_swapname(exarg_T *eap UNUSED)ex_swapname6358,153538
ex_syncbind(exarg_T *eap UNUSED)ex_syncbind6372,153908
ex_read(exarg_T *eap)ex_read6445,155205
static char_u	*prev_dir = NULL;prev_dir6522,156888
free_cd_dir(void)free_cd_dir6526,156970
post_chdir(cdscope_T scope)post_chdir6539,157279
changedir_func(changedir_func6578,158413
ex_cd(exarg_T *eap)ex_cd6665,160340
ex_pwd(exarg_T *eap UNUSED)ex_pwd6697,160997
ex_equal(exarg_T *eap)ex_equal6714,161242
ex_sleep(exarg_T *eap)ex_sleep6721,161344
do_sleep(long msec)do_sleep6747,161832
ex_winsize(exarg_T *eap)ex_winsize6814,163364
ex_wincmd(exarg_T *eap)ex_wincmd6831,163687
ex_winpos(exarg_T *eap)ex_winpos6870,164540
ex_operators(exarg_T *eap)ex_operators6934,165896
ex_put(exarg_T *eap)ex_put6989,166935
ex_copymove(exarg_T *eap)ex_copymove7006,167268
ex_may_print(exarg_T *eap)ex_may_print7043,168008
ex_submagic(exarg_T *eap)ex_submagic7057,168251
ex_join(exarg_T *eap)ex_join7070,168435
ex_at(exarg_T *eap)ex_at7093,168924
ex_bang(exarg_T *eap)ex_bang7137,169900
ex_undo(exarg_T *eap)ex_undo7146,170023
ex_wundo(exarg_T *eap)ex_wundo7156,170206
ex_rundo(exarg_T *eap)ex_rundo7165,170366
ex_redo(exarg_T *eap UNUSED)ex_redo7178,170535
ex_later(exarg_T *eap)ex_later7187,170635
ex_redir(exarg_T *eap)ex_redir7220,171324
ex_redraw(exarg_T *eap)ex_redraw7350,173765
ex_redrawstatus(exarg_T *eap UNUSED)ex_redrawstatus7387,174543
ex_redrawtabline(exarg_T *eap UNUSED)ex_redrawtabline7408,174939
close_redir(void)close_redir7424,175175
vim_mkdir_emsg(char_u *name, int prot UNUSED)vim_mkdir_emsg7443,175462
open_exfile(open_exfile7459,175780
ex_mark(exarg_T *eap)ex_mark7490,176384
update_topline_cursor(void)update_topline_cursor7513,176959
save_current_state(save_state_T *sst)save_current_state7527,177245
restore_current_state(save_state_T *sst)restore_current_state7552,178033
ex_normal(exarg_T *eap)ex_normal7577,178793
ex_startinsert(exarg_T *eap)ex_startinsert7698,181185
ex_stopinsert(exarg_T *eap UNUSED)ex_stopinsert7732,181896
exec_normal_cmd(char_u *cmd, int remap, int silent)exec_normal_cmd7744,182101
exec_normal(int was_typed, int use_vpeekc, int may_use_terminal_loop UNUSED)exec_normal7756,182441
ex_checkpath(exarg_T *eap)ex_checkpath7791,183427
ex_psearch(exarg_T *eap)ex_psearch7803,183687
ex_findpat(exarg_T *eap)ex_findpat7812,183815
ex_ptag(exarg_T *eap)ex_ptag7875,185146
ex_pedit(exarg_T *eap)ex_pedit7885,185333
ex_stag(exarg_T *eap)ex_stag7921,186049
ex_tag(exarg_T *eap)ex_tag7935,186370
ex_tag_cmd(exarg_T *eap, char_u *name)ex_tag_cmd7941,186465
find_cmdline_var(char_u *src, int *usedlen)find_cmdline_var7996,187579
#define SPEC_PERC SPEC_PERC8002,187696
#define SPEC_HASH SPEC_HASH8004,187729
#define SPEC_CWORD SPEC_CWORD8006,187798
#define SPEC_CCWORD SPEC_CCWORD8008,187867
#define SPEC_CEXPR SPEC_CEXPR8010,187943
#define SPEC_CFILE SPEC_CFILE8012,188019
#define SPEC_SFILE SPEC_SFILE8014,188093
#define SPEC_SLNUM SPEC_SLNUM8016,188174
#define SPEC_AFILE SPEC_AFILE8018,188254
#define SPEC_ABUF SPEC_ABUF8020,188337
#define SPEC_AMATCH SPEC_AMATCH8022,188419
#define SPEC_SFLNUM SPEC_SFLNUM8024,188501
# define SPEC_CLIENT SPEC_CLIENT8027,188582
eval_vars(eval_vars8065,189672
expand_sfile(char_u *arg)expand_sfile8354,196638
dialog_msg(char_u *buff, char *format, char_u *fname)dialog_msg8416,197965
ex_behave(exarg_T *eap)ex_behave8428,198202
static int filetype_detect = FALSE;filetype_detect8449,198951
static int filetype_plugin = FALSE;filetype_plugin8450,198987
static int filetype_indent = FALSE;filetype_indent8451,199023
ex_filetype(exarg_T *eap)ex_filetype8463,199441
ex_setfiletype(exarg_T *eap)ex_setfiletype8548,201163
ex_digraphs(exarg_T *eap UNUSED)ex_digraphs8564,201440
set_no_hlsearch(int flag)set_no_hlsearch8578,201707
ex_nohlsearch(exarg_T *eap UNUSED)ex_nohlsearch8590,201884
ex_X(exarg_T *eap UNUSED)ex_X8602,202056
ex_fold(exarg_T *eap)ex_fold8611,202201
ex_foldopen(exarg_T *eap)ex_foldopen8618,202314
ex_folddo(exarg_T *eap)ex_folddo8625,202460
is_loclist_cmd(int cmdidx)is_loclist_cmd8653,203134
get_pressedreturn(void)get_pressedreturn8663,203329
set_pressedreturn(int val)set_pressedreturn8669,203396

src/ex_eval.c,2557
# define THROW_ON_ERROR	THROW_ON_ERROR60,2393
# define THROW_ON_ERROR_TRUETHROW_ON_ERROR_TRUE61,2423
# define THROW_ON_INTERRUPT	THROW_ON_INTERRUPT62,2452
# define THROW_ON_INTERRUPT_TRUETHROW_ON_INTERRUPT_TRUE63,2485
static int cause_abort = FALSE;cause_abort75,3048
aborting(void)aborting90,3826
update_force_abort(void)update_force_abort102,4238
should_abort(int retcode)should_abort115,4605
aborted_in_try(void)aborted_in_try127,4991
cause_errthrow(cause_errthrow144,5650
free_msglist(struct msglist *l)free_msglist301,10520
free_global_msglist(void)free_global_msglist320,10850
do_errthrow(cstack_T *cstack, char_u *cmdname)do_errthrow332,11137
do_intthrow(cstack_T *cstack)do_intthrow367,11995
get_exception_string(get_exception_string417,13336
throw_exception(void *value, except_type_T type, char_u *cmdname)throw_exception501,15237
discard_exception(except_T *excp, int was_finished)discard_exception588,17494
discard_current_exception(void)discard_current_exception637,18671
catch_exception(except_T *excp)catch_exception652,18934
finish_exception(except_T *excp)finish_exception699,20211
#define RP_MAKE	RP_MAKE736,21249
#define RP_RESUME	RP_RESUME737,21268
#define RP_DISCARD	RP_DISCARD738,21288
report_pending(int action, int pending, void *value)report_pending748,21704
report_make_pending(int pending, void *value)report_make_pending827,23464
report_resume_pending(int pending, void *value)report_resume_pending844,23885
report_discard_pending(int pending, void *value)report_discard_pending861,24295
ex_eval(exarg_T *eap)ex_eval878,24587
ex_if(exarg_T *eap)ex_if890,24737
ex_endif(exarg_T *eap)ex_endif928,25596
ex_else(exarg_T *eap)ex_else958,26532
ex_while(exarg_T *eap)ex_while1049,29274
ex_continue(exarg_T *eap)ex_continue1148,31814
ex_break(exarg_T *eap)ex_break1186,32898
ex_endwhile(exarg_T *eap)ex_endwhile1212,33592
ex_throw(exarg_T *eap)ex_throw1298,35938
do_throw(cstack_T *cstack)do_throw1328,36651
ex_try(exarg_T *eap)ex_try1409,39363
ex_catch(exarg_T *eap)ex_catch1478,41588
ex_finally(exarg_T *eap)ex_finally1642,46484
ex_endtry(exarg_T *eap)ex_endtry1769,51255
enter_cleanup(cleanup_T *csp)enter_cleanup1966,58211
leave_cleanup(cleanup_T *csp)leave_cleanup2030,60410
cleanup_conditionals(cleanup_conditionals2115,63336
get_end_emsg(cstack_T *cstack)get_end_emsg2238,66720
rewind_conditionals(rewind_conditionals2256,67221
ex_endfunction(exarg_T *eap UNUSED)ex_endfunction2276,67630
has_loop_cmd(char_u *p)has_loop_cmd2285,67817

src/ex_getln.c,5417
# define MAX(MAX17,385
static cmdline_info_T ccline;ccline23,663
static int	new_cmdpos;	// position set by set_cmdline_pos()new_cmdpos26,711
static int	extra_char = NUL;  // extra character to display when redrawingextra_char29,779
static int	extra_char_shift;extra_char_shift31,881
static int	cmd_hkmap = 0;	// Hebrew mapping during command linecmd_hkmap34,933
static int	cedit_key INIT(= -1);	// key value of 'cedit' optioncedit_key56,1667
trigger_cmd_autocmd(int typechar, int evt)trigger_cmd_autocmd61,1756
abandon_cmdline(void)abandon_cmdline74,1987
empty_pattern(char_u *p)empty_pattern89,2319
    colnr_T	vs_curswant;vs_curswant102,2674
    colnr_T	vs_leftcol;vs_leftcol103,2699
    linenr_T	vs_topline;vs_topline104,2723
    int		vs_topfill;vs_topfill106,2766
    linenr_T	vs_botline;vs_botline108,2795
    linenr_T	vs_empty_rows;vs_empty_rows109,2820
} viewstate_T;viewstate_T110,2848
save_viewstate(viewstate_T *vs)save_viewstate113,2880
restore_viewstate(viewstate_T *vs)restore_viewstate126,3207
    pos_T	search_start;	// where 'incsearch' starts searchingsearch_start140,3596
    pos_T	save_cursor;save_cursor141,3658
    viewstate_T	init_viewstate;init_viewstate142,3681
    viewstate_T	old_viewstate;old_viewstate143,3713
    pos_T	match_start;match_start144,3744
    pos_T	match_end;match_end145,3767
    int		did_incsearch;did_incsearch146,3788
    int		incsearch_postponed;incsearch_postponed147,3812
    int		magic_save;magic_save148,3842
} incsearch_state_T;incsearch_state_T149,3863
init_incsearch_state(incsearch_state_T *is_state)init_incsearch_state152,3901
set_search_match(pos_T *t)set_search_match170,4516
do_incsearch_highlighting(int firstc, int *search_delim, incsearch_state_T *is_state,do_incsearch_highlighting187,4934
finish_incsearch_highlighting(finish_incsearch_highlighting337,8327
may_do_incsearch_highlighting(may_do_incsearch_highlighting377,9202
may_adjust_incsearch_highlighting(may_adjust_incsearch_highlighting561,14254
may_add_char_to_search(int firstc, int *c, incsearch_state_T *is_state)may_add_char_to_search675,17169
cmdline_has_arabic(int start, int len)cmdline_has_arabic735,18771
cmdline_init(void)cmdline_init759,19202
getcmdline(getcmdline784,19924
getcmdline_int(getcmdline_int794,20166
getcmdline_prompt(getcmdline_prompt2447,61038
check_opt_wim(void)check_opt_wim2497,62402
text_locked(void)text_locked2553,63646
text_locked_msg(void)text_locked_msg2567,63910
get_text_locked_msg(void)get_text_locked_msg2573,63984
curbuf_locked(void)curbuf_locked2587,64228
allbuf_locked(void)allbuf_locked2602,64495
cmdline_charsize(int idx)cmdline_charsize2613,64668
set_cmdspos(void)set_cmdspos2627,64980
set_cmdspos_cursor(void)set_cmdspos_cursor2639,65215
correct_cmdspos(int idx, int cells)correct_cmdspos2675,66064
getexline(getexline2687,66335
getexmodeline(getexmodeline2706,66887
cmdline_overstrike(void)cmdline_overstrike3002,72912
cmdline_at_end(void)cmdline_at_end3011,73046
cmdline_getvcol_cursor(void)cmdline_getvcol_cursor3023,73354
redrawcmd_preedit(void)redrawcmd_preedit3049,73883
alloc_cmdbuff(int len)alloc_cmdbuff3116,75300
realloc_cmdbuff(int len)realloc_cmdbuff3135,75692
static char_u	*arshape_buf = NULL;arshape_buf3172,76730
free_arshape_buf(void)free_arshape_buf3176,76816
draw_cmdline(int start, int len)draw_cmdline3188,77015
putcmdline(int c, int shift)putcmdline3307,79562
unputcmdline(void)unputcmdline3325,79885
put_on_cmdline(char_u *str, int len, int redraw)put_on_cmdline3351,80639
static cmdline_info_T	prev_ccline;prev_ccline3494,84221
static int		prev_ccline_used = FALSE;prev_ccline_used3495,84256
save_cmdline(cmdline_info_T *ccp)save_cmdline3503,84503
restore_cmdline(cmdline_info_T *ccp)restore_cmdline3519,84861
cmdline_paste(cmdline_paste3534,85242
cmdline_paste_str(char_u *s, int literally)cmdline_paste_str3619,87274
cmdline_del(int from)cmdline_del3652,87905
redrawcmdline(void)redrawcmdline3667,88310
redrawcmdline_ex(int do_compute_cmdrow)redrawcmdline_ex3673,88372
redrawcmdprompt(void)redrawcmdprompt3685,88572
redrawcmd(void)redrawcmd3710,89103
compute_cmdrow(void)compute_cmdrow3748,89975
cursorcmd(void)cursorcmd3758,90179
gotocmdline(int clr)gotocmdline3791,90844
ccheck_abbr(int c)ccheck_abbr3812,91422
vim_strsave_fnameescape(char_u *fname, int shell UNUSED)vim_strsave_fnameescape3841,92262
escape_fname(char_u **pp)escape_fname3880,93338
tilde_replace(tilde_replace3899,93640
get_cmdline_info(void)get_cmdline_info3925,94063
get_ccline_ptr(void)get_ccline_ptr3936,94336
get_cmdline_str(void)get_cmdline_str3955,94775
f_getcmdline(typval_T *argvars UNUSED, typval_T *rettv)f_getcmdline3971,95016
f_getcmdpos(typval_T *argvars UNUSED, typval_T *rettv)f_getcmdpos3981,95197
set_cmdline_pos(set_cmdline_pos3996,95580
f_setcmdpos(typval_T *argvars, typval_T *rettv)f_setcmdpos4017,95916
f_getcmdtype(typval_T *argvars UNUSED, typval_T *rettv)f_getcmdtype4029,96129
get_cmdline_type(void)get_cmdline_type4050,96657
get_cmdline_firstc(void)get_cmdline_firstc4070,96966
get_list_range(char_u **str, int *num1, int *num2)get_list_range4081,97250
check_cedit(void)check_cedit4119,98144
open_cmdwin(void)open_cmdwin4144,98625
script_get(exarg_T *eap, char_u *cmd)script_get4408,105205
get_user_input(get_user_input4456,106248

src/fileio.c,3108
#define USE_MCH_ACCESSUSE_MCH_ACCESS21,487
static char *e_auchangedbuf = N_("E812: Autocommands changed buffer or buffer name");e_auchangedbuf32,978
filemess(filemess35,1074
readfile(readfile99,3241
#define UNKNOWN	UNKNOWN140,4531
is_dev_fd_file(char_u *fname)is_dev_fd_file2588,66761
readfile_linenr(readfile_linenr2604,67198
prep_exarg(exarg_T *eap, buf_T *buf)prep_exarg2625,67710
set_file_options(int set_options, exarg_T *eap)set_file_options2646,68207
set_forced_fenc(exarg_T *eap)set_forced_fenc2671,68779
next_fenc(char_u **pp, int *alloced)next_fenc2693,69367
readfile_charconvert(readfile_charconvert2742,70272
check_for_cryptkey(check_for_cryptkey2793,71738
check_file_readonly(check_file_readonly2873,74128
vim_fsync(int fd)vim_fsync2900,74662
set_rw_fname(char_u *fname, char_u *sfname)set_rw_fname2918,75002
msg_add_fname(buf_T *buf, char_u *fname)msg_add_fname2964,76204
msg_add_fileformat(int eol_type)msg_add_fileformat2978,76507
msg_add_lines(msg_add_lines3006,77053
msg_add_eol(void)msg_add_eol3034,77657
time_differs(long t1, long t2)time_differs3040,77774
need_conversion(char_u *fenc)need_conversion3057,78235
get_fio_flags(char_u *ptr)get_fio_flags3094,79197
get_win_fio_flags(char_u *ptr)get_win_fio_flags3137,80085
get_mac_fio_flags(char_u *ptr)get_mac_fio_flags3165,80695
check_for_bom(check_for_bom3181,81104
shorten_fname1(char_u *full_path)shorten_fname13236,82537
shorten_fname(char_u *full_path, char_u *dir_name)shorten_fname3261,83073
shorten_buf_fname(buf_T *buf, char_u *dirname, int force)shorten_buf_fname3316,84539
shorten_fnames(int force)shorten_fnames3346,85166
shorten_filenames(char_u **fnames, int count)shorten_filenames3376,85876
modname(modname3412,86917
buf_modname(buf_modname3422,87140
vim_fgets(char_u *buf, int size, FILE *fp)vim_fgets3587,91145
#define FGETS_SIZE FGETS_SIZE3590,91205
vim_rename(char_u *from, char_u *to)vim_rename3615,91879
static int already_warned = FALSE;already_warned3822,97212
check_timestamps(check_timestamps3833,97576
move_lines(buf_T *frombuf, buf_T *tobuf)move_lines3900,99184
buf_check_timestamp(buf_check_timestamp3947,100239
buf_reload(buf_T *buf, int orig_mode)buf_reload4241,107721
buf_store_time(buf_T *buf, stat_T *st, char_u *fname UNUSED)buf_store_time4391,111905
write_lnum_adjust(linenr_T offset)write_lnum_adjust4407,112315
readdir_core(readdir_core4420,112686
delete_recursive(char_u *name)delete_recursive4567,115169
static long	temp_count = 0;		// Temp filename counter.temp_count4611,116018
vim_deltempdir(void)vim_deltempdir4617,116146
vim_settempdir(char_u *tempdir)vim_settempdir4634,116560
vim_tempname(vim_tempname4660,117157
forward_slash(char_u *fname)forward_slash4865,122626
match_file_pat(match_file_pat4888,123184
match_file_list(char_u *list, char_u *sfname, char_u *ffname)match_file_list4933,124603
file_pat_to_reg_pat(file_pat_to_reg_pat4972,125596
read_eintr(int fd, void *buf, size_t bufsize)read_eintr5174,129721
write_eintr(int fd, void *buf, size_t bufsize)write_eintr5192,130014

src/filepath.c,4200
get_short_pathname(char_u **fnamep, char_u **bufp, int *fnamelen)get_short_pathname30,777
shortpath_for_invalid_fname(shortpath_for_invalid_fname102,2565
shortpath_for_partial(shortpath_for_partial209,5025
modify_fname(modify_fname290,6952
f_chdir(typval_T *argvars, typval_T *rettv)f_chdir718,16642
f_delete(typval_T *argvars, typval_T *rettv)f_delete758,17472
f_executable(typval_T *argvars, typval_T *rettv)f_executable797,18340
f_exepath(typval_T *argvars, typval_T *rettv)f_exepath809,18616
f_filereadable(typval_T *argvars, typval_T *rettv)f_filereadable822,18858
# define O_NONBLOCK O_NONBLOCK829,18971
f_filewritable(typval_T *argvars, typval_T *rettv)f_filewritable849,19345
findfilendir(findfilendir855,19486
f_finddir(typval_T *argvars, typval_T *rettv)f_finddir925,21063
f_findfile(typval_T *argvars, typval_T *rettv)f_findfile934,21231
f_fnamemodify(typval_T *argvars, typval_T *rettv)f_fnamemodify943,21391
f_getcwd(typval_T *argvars, typval_T *rettv)f_getcwd988,22769
f_getfperm(typval_T *argvars, typval_T *rettv)f_getfperm1034,23856
f_getfsize(typval_T *argvars, typval_T *rettv)f_getfsize1064,24394
f_getftime(typval_T *argvars, typval_T *rettv)f_getftime1094,24944
f_getftype(typval_T *argvars, typval_T *rettv)f_getftype1111,25250
f_glob(typval_T *argvars, typval_T *rettv)f_glob1148,25966
f_glob2regpat(typval_T *argvars, typval_T *rettv)f_glob2regpat1199,27280
f_globpath(typval_T *argvars, typval_T *rettv)f_globpath1212,27558
f_isdirectory(typval_T *argvars, typval_T *rettv)f_isdirectory1257,28857
mkdir_recurse(char_u *dir, int prot)mkdir_recurse1268,29107
f_mkdir(typval_T *argvars, typval_T *rettv)f_mkdir1296,29699
f_pathshorten(typval_T *argvars, typval_T *rettv)f_pathshorten1340,30574
readdir_checkitem(void *context, char_u *name)readdir_checkitem1361,30942
f_readdir(typval_T *argvars, typval_T *rettv)f_readdir1396,31664
f_readfile(typval_T *argvars, typval_T *rettv)f_readfile1426,32268
f_resolve(typval_T *argvars, typval_T *rettv)f_resolve1655,38160
f_tempname(typval_T *argvars UNUSED, typval_T *rettv)f_tempname1863,42274
f_writefile(typval_T *argvars, typval_T *rettv)f_writefile1896,42860
do_browse(do_browse2002,45262
f_browse(typval_T *argvars UNUSED, typval_T *rettv)f_browse2164,49713
f_browsedir(typval_T *argvars UNUSED, typval_T *rettv)f_browsedir2196,50515
home_replace(home_replace2225,51211
home_replace_save(home_replace_save2351,54424
fullpathcmp(fullpathcmp2378,55197
gettail(char_u *fname)gettail2462,57300
gettail_sep(char_u *fname)gettail_sep2483,57763
getnextcomp(char_u *fname)getnextcomp2503,58142
get_past_head(char_u *path)get_past_head2518,58484
vim_ispathsep(int c)vim_ispathsep2550,59022
vim_ispathsep_nocolon(int c)vim_ispathsep_nocolon2573,59555
shorten_dir(char_u *str)shorten_dir2587,59786
dir_of_file_exists(char_u *fname)dir_of_file_exists2629,60535
vim_fnamecmp(char_u *x, char_u *y)vim_fnamecmp2650,60893
vim_fnamencmp(char_u *x, char_u *y, size_t len)vim_fnamencmp2662,61091
concat_fnames(char_u *fname1, char_u *fname2, int sep)concat_fnames2698,61859
add_pathsep(char_u *p)add_pathsep2718,62228
FullName_save(FullName_save2729,62455
vim_fexists(char_u *fname)vim_fexists2756,62954
expand_wildcards_eval(expand_wildcards_eval2771,63205
expand_wildcards(expand_wildcards2811,64166
match_suffix(char_u *fname)match_suffix2896,65985
#define MAXSUFLEN MAXSUFLEN2900,66065
vim_backtick(char_u *p)vim_backtick2937,66810
expand_backtick(expand_backtick2948,67129
pstrcmp(const void *a, const void *b)pstrcmp3011,68401
dos_expandpath(dos_expandpath3026,68918
mch_expandpath(mch_expandpath3243,74592
pstrcmp(const void *a, const void *b)pstrcmp3259,74954
unix_expandpath(unix_expandpath3273,75425
has_env_var(char_u *p)has_env_var3491,80893
has_special_wildchar(char_u *p)has_special_wildchar3515,81313
gen_expand_wildcards(gen_expand_wildcards3552,82379
addfile(addfile3719,86631
FreeWild(int count, char_u **files)FreeWild3776,88028
pathcmp(const char *p, const char *q, int maxlen)pathcmp3791,88348
vim_isAbsName(char_u *name)vim_isAbsName3863,89899
vim_FullName(vim_FullName3874,90104

src/findfile.c,4899
typedef struct ff_stackff_stack63,2249
    struct ff_stack	*ffs_prev;ffs_prev65,2275
    char_u		*ffs_fix_path;ffs_fix_path69,2406
    char_u		*ffs_wc_path;ffs_wc_path71,2456
    char_u		**ffs_filearray;ffs_filearray76,2586
    int			ffs_filearray_size;ffs_filearray_size77,2615
    char_u		ffs_filearray_cur;   // needed for partly handled dirsffs_filearray_cur78,2645
    int			ffs_stage;ffs_stage83,2885
    int			ffs_level;ffs_level87,3027
    int			ffs_star_star_empty;ffs_star_star_empty90,3103
} ff_stack_T;ff_stack_T91,3134
typedef struct ff_visitedff_visited96,3206
    struct ff_visited	*ffv_next;ffv_next98,3234
    char_u		*ffv_wc_path;ffv_wc_path103,3400
    int			ffv_dev_valid;	// ffv_dev and ffv_ino were setffv_dev_valid108,3543
    dev_t		ffv_dev;	// device numberffv_dev109,3600
    ino_t		ffv_ino;	// inode numberffv_ino110,3637
    char_u		ffv_fname[1];	// actually longerffv_fname114,3772
} ff_visited_T;ff_visited_T115,3817
typedef struct ff_visited_list_hdrff_visited_list_hdr131,4603
    struct ff_visited_list_hdr	*ffvl_next;ffvl_next133,4640
    char_u			*ffvl_filename;ffvl_filename136,4737
    ff_visited_T		*ffvl_visited_list;ffvl_visited_list138,4767
} ff_visited_list_hdr_T;ff_visited_list_hdr_T140,4806
#define FF_MAX_STAR_STAR_EXPAND FF_MAX_STAR_STAR_EXPAND147,4927
typedef struct ff_search_ctx_Tff_search_ctx_T166,5889
     ff_stack_T			*ffsc_stack_ptr;ffsc_stack_ptr168,5922
     ff_visited_list_hdr_T	*ffsc_visited_list;ffsc_visited_list169,5957
     ff_visited_list_hdr_T	*ffsc_dir_visited_list;ffsc_dir_visited_list170,6004
     ff_visited_list_hdr_T	*ffsc_visited_lists_list;ffsc_visited_lists_list171,6055
     ff_visited_list_hdr_T	*ffsc_dir_visited_lists_list;ffsc_dir_visited_lists_list172,6108
     char_u			*ffsc_file_to_search;ffsc_file_to_search173,6165
     char_u			*ffsc_start_dir;ffsc_start_dir174,6201
     char_u			*ffsc_fix_path;ffsc_fix_path175,6232
     char_u			*ffsc_wc_path;ffsc_wc_path177,6285
     int			ffsc_level;ffsc_level178,6314
     char_u			**ffsc_stopdirs_v;ffsc_stopdirs_v179,6337
     int			ffsc_find_what;ffsc_find_what181,6377
     int			ffsc_tagfile;ffsc_tagfile182,6404
} ff_search_ctx_T;ff_search_ctx_T183,6429
static char_u e_pathtoolong[] = N_("E854: path too long for completion");e_pathtoolong209,7427
static char_u	*ff_expand_buffer = NULL; // used for expanding filenamesff_expand_buffer211,7502
vim_findfile_init(vim_findfile_init300,10678
vim_findfile_stopdir(char_u *buf)vim_findfile_stopdir646,20038
vim_findfile_cleanup(void *ctx)vim_findfile_cleanup676,20557
vim_findfile(void *search_ctx_arg)vim_findfile699,21193
vim_findfile_free_visited(void *search_ctx_arg)vim_findfile_free_visited1191,33471
vim_findfile_free_visited_list(ff_visited_list_hdr_T **list_headp)vim_findfile_free_visited_list1204,33820
ff_free_visited_list(ff_visited_T *vl)ff_free_visited_list1221,34182
ff_get_visited_list(ff_get_visited_list1242,34547
ff_wc_equal(char_u *s1, char_u *s2)ff_wc_equal1315,36187
ff_check_visited(ff_check_visited1357,37068
ff_create_stack_element(ff_create_stack_element1453,38932
ff_push(ff_search_ctx_T *search_ctx, ff_stack_T *stack_ptr)ff_push1503,39930
ff_pop(ff_search_ctx_T *search_ctx)ff_pop1519,40328
ff_free_stack_element(ff_stack_T *stack_ptr)ff_free_stack_element1534,40617
ff_clear(ff_search_ctx_T *search_ctx)ff_clear1552,41036
ff_path_in_stoplist(char_u *path, int path_len, char_u **stopdirs_v)ff_path_in_stoplist1598,42068
find_file_in_path(find_file_in_path1658,43671
static char_u	*ff_file_to_find = NULL;ff_file_to_find1670,44062
static void	*fdip_search_ctx = NULL;fdip_search_ctx1671,44101
free_findfile(void)free_findfile1675,44189
find_directory_in_path(find_directory_in_path1695,44600
find_file_in_path_option(find_file_in_path_option1706,44909
grab_file_name(long count, linenr_T *file_lnum)grab_file_name1927,50395
file_name_at_cursor(int options, long count, linenr_T *file_lnum)file_name_at_cursor1958,51236
file_name_in_line(file_name_in_line1970,51555
eval_includeexpr(char_u *ptr, int len)eval_includeexpr2078,54393
find_file_name_in_path(find_file_name_in_path2095,54797
gettail_dir(char_u *fname)gettail_dir2174,56629
vim_ispathlistsep(int c)vim_ispathlistsep2206,57113
find_previous_pathsep(char_u *path, char_u **psep)find_previous_pathsep2220,57408
is_unique(char_u *maybe_unique, garray_T *gap, int i)is_unique2242,57881
expand_path_option(char_u *curdir, garray_T *gap)expand_path_option2279,59002
get_path_cutoff(char_u *fname, garray_T *gap)get_path_cutoff2359,60952
uniquefy_paths(garray_T *gap, char_u *pattern)uniquefy_paths2397,61840
expand_in_path(expand_in_path2579,66690
simplify_filename(char_u *filename)simplify_filename2623,67748
f_simplify(typval_T *argvars, typval_T *rettv)f_simplify2833,73435

src/fold.c,6948
    linenr_T	fd_top;		// first line of fold; for nested foldfd_top29,727
    linenr_T	fd_len;		// number of lines in the foldfd_len31,814
    garray_T	fd_nested;	// array of nested foldsfd_nested32,867
    char	fd_flags;	// see belowfd_flags33,916
    char	fd_small;	// TRUE, FALSE or MAYBE: fold smaller thanfd_small34,948
} fold_T;fold_T37,1074
#define FD_OPEN	FD_OPEN39,1085
#define FD_CLOSED	FD_CLOSED40,1148
#define FD_LEVEL	FD_LEVEL41,1186
#define MAX_LEVEL	MAX_LEVEL43,1251
static char *e_nofold = N_("E490: No fold found");e_nofold68,2714
static linenr_T invalid_top = (linenr_T)0;invalid_top74,2927
static linenr_T invalid_bot = (linenr_T)0;invalid_bot75,2970
static linenr_T prev_lnum = 0;prev_lnum84,3349
static int prev_lnum_lvl = -1;prev_lnum_lvl85,3380
#define DONE_NOTHING	DONE_NOTHING88,3464
#define DONE_ACTION	DONE_ACTION89,3487
#define DONE_FOLD	DONE_FOLD90,3537
static int foldstartmarkerlen;foldstartmarkerlen92,3577
static char_u *foldendmarker;foldendmarker93,3608
static int foldendmarkerlen;foldendmarkerlen94,3638
copyFoldingState(win_T *wp_from, win_T *wp_to)copyFoldingState103,3816
hasAnyFolding(win_T *win)hasAnyFolding115,4136
hasFolding(linenr_T lnum, linenr_T *firstp, linenr_T *lastp)hasFolding130,4565
hasFoldingWin(hasFoldingWin137,4730
foldLevel(linenr_T lnum)foldLevel252,7231
lineFolded(win_T *win, linenr_T lnum)lineFolded279,8025
foldedCount(win_T *win, linenr_T lnum, foldinfo_T *infop)foldedCount294,8533
foldmethodIsManual(win_T *wp)foldmethodIsManual308,8811
foldmethodIsIndent(win_T *wp)foldmethodIsIndent318,8969
foldmethodIsExpr(win_T *wp)foldmethodIsExpr328,9123
foldmethodIsMarker(win_T *wp)foldmethodIsMarker338,9279
foldmethodIsSyntax(win_T *wp)foldmethodIsSyntax348,9437
foldmethodIsDiff(win_T *wp)foldmethodIsDiff358,9591
closeFold(linenr_T lnum, long count)closeFold369,9770
closeFoldRecurse(linenr_T lnum)closeFoldRecurse379,9955
opFoldRange(opFoldRange390,10204
openFold(linenr_T lnum, long count)openFold427,11241
openFoldRecurse(linenr_T lnum)openFoldRecurse437,11422
foldOpenCursor(void)foldOpenCursor447,11609
newFoldLevel(void)newFoldLevel467,11939
newFoldLevelWin(win_T *wp)newFoldLevelWin492,12341
foldCheckClose(void)foldCheckClose516,12935
checkCloseRec(garray_T *gap, linenr_T lnum, int level)checkCloseRec529,13209
foldManualAllowed(int create)foldManualAllowed561,13931
foldCreate(linenr_T start, linenr_T end)foldCreate578,14341
deleteFold(deleteFold702,17625
clearFolding(win_T *win)clearFolding797,19681
foldUpdate(win_T *wp, linenr_T top, linenr_T bot)foldUpdate811,20031
foldUpdateAll(win_T *win)foldUpdateAll857,21092
foldMoveTo(foldMoveTo870,21376
foldInitWin(win_T *new_win)foldInitWin1007,24091
find_wl_entry(win_T *win, linenr_T lnum)find_wl_entry1020,24444
foldAdjustVisual(void)foldAdjustVisual1040,24833
foldAdjustCursor(void)foldAdjustCursor1077,25562
cloneFoldGrowArray(garray_T *from, garray_T *to)cloneFoldGrowArray1090,25873
foldFind(garray_T *gap, linenr_T lnum, fold_T **fpp)foldFind1124,26765
foldLevelWin(win_T *wp, linenr_T lnum)foldLevelWin1163,27563
checkupdate(win_T *wp)checkupdate1190,28117
setFoldRepeat(linenr_T lnum, long count, int do_open)setFoldRepeat1205,28409
setManualFold(setManualFold1230,28969
setManualFoldWin(setManualFoldWin1272,30184
foldOpenNested(fold_T *fpr)foldOpenNested1383,32538
deleteFoldEntry(garray_T *gap, int idx, int recursive)deleteFoldEntry1403,32987
deleteFoldRecurse(garray_T *gap)deleteFoldRecurse1457,34384
foldMarkAdjust(foldMarkAdjust1471,34657
foldMarkAdjustRecurse(foldMarkAdjustRecurse1491,35348
getDeepestNesting(void)getDeepestNesting1615,38089
getDeepestNestingRecurse(garray_T *gap)getDeepestNestingRecurse1622,38213
check_closed(check_closed1645,38658
checkSmall(checkSmall1685,39631
setSmallMaybe(garray_T *gap)setSmallMaybe1722,40268
foldCreateMarkers(linenr_T start, linenr_T end)foldCreateMarkers1738,40583
foldAddMarker(linenr_T lnum, char_u *marker, int markerlen)foldAddMarker1760,41149
deleteFoldMarkers(deleteFoldMarkers1800,42284
foldDelMarker(linenr_T lnum, char_u *marker, int markerlen)foldDelMarker1824,42999
get_foldtext(get_foldtext1878,44434
foldtext_cleanup(char_u *str)foldtext_cleanup1996,47137
    win_T	*wp;		// windowwp2087,49378
    linenr_T	lnum;		// current line numberlnum2088,49404
    linenr_T	off;		// offset between lnum and real line numberoff2089,49447
    linenr_T	lnum_save;	// line nr used by foldUpdateIEMSRecurse()lnum_save2090,49510
    int		lvl;		// current level (-1 for undefined)lvl2091,49577
    int		lvl_next;	// level used for next linelvl_next2092,49628
    int		start;		// number of folds that are forced to start atstart2093,49675
    int		end;		// level of fold that is forced to end belowend2095,49757
    int		had_end;	// level of fold that is forced to end abovehad_end2097,49834
} fline_T;fline_T2099,49944
static int fold_changed;fold_changed2102,49997
foldUpdateIEMS(win_T *wp, linenr_T top, linenr_T bot)foldUpdateIEMS2124,50858
foldUpdateIEMSRecurse(foldUpdateIEMSRecurse2377,58100
foldInsert(garray_T *gap, int i)foldInsert2837,71778
foldSplit(foldSplit2860,72380
foldRemove(garray_T *gap, linenr_T top, linenr_T bot)foldRemove2924,73987
foldReverseOrder(garray_T *gap, linenr_T start_arg, linenr_T end_arg)foldReverseOrder2980,75351
truncate_fold(fold_T *fp, linenr_T end)truncate_fold3031,76865
#define fold_end(fold_end3038,77018
#define valid_fold(valid_fold3039,77073
#define fold_index(fold_index3040,77153
foldMoveRange(garray_T *gap, linenr_T line1, linenr_T line2, linenr_T dest)foldMoveRange3043,77235
#undef fold_endfold_end3155,80393
#undef valid_foldvalid_fold3156,80409
#undef fold_indexfold_index3157,80427
foldMerge(fold_T *fp1, garray_T *gap, fold_T *fp2)foldMerge3168,80772
foldlevelIndent(fline_T *flp)foldlevelIndent3206,81875
foldlevelDiff(fline_T *flp)foldlevelDiff3242,82745
foldlevelExpr(fline_T *flp)foldlevelExpr3258,83089
parseMarker(win_T *wp)parseMarker3360,85330
foldlevelMarker(fline_T *flp)foldlevelMarker3378,85973
foldlevelSyntax(fline_T *flp)foldlevelSyntax3460,87665
put_folds(FILE *fd, win_T *wp)put_folds3496,88634
put_folds_recurse(FILE *fd, garray_T *gap, linenr_T off)put_folds_recurse3518,89172
put_foldopen_recurse(put_foldopen_recurse3544,89814
put_fold_open_close(FILE *fd, fold_T *fp, linenr_T off)put_fold_open_close3601,91112
foldclosed_both(foldclosed_both3623,91590
f_foldclosed(typval_T *argvars, typval_T *rettv)f_foldclosed3652,92128
f_foldclosedend(typval_T *argvars, typval_T *rettv)f_foldclosedend3661,92272
f_foldlevel(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_foldlevel3670,92414
f_foldtext(typval_T *argvars UNUSED, typval_T *rettv)f_foldtext3685,92702
f_foldtextresult(typval_T *argvars UNUSED, typval_T *rettv)f_foldtextresult3750,94294

src/getchar.c,5479
#define MINIMAL_SIZE MINIMAL_SIZE41,1321
static buffheader_T redobuff = {{NULL, {NUL}}, NULL, 0, 0};redobuff43,1374
static buffheader_T old_redobuff = {{NULL, {NUL}}, NULL, 0, 0};old_redobuff44,1434
static buffheader_T recordbuff = {{NULL, {NUL}}, NULL, 0, 0};recordbuff45,1498
static int typeahead_char = 0;		// typeahead char that's not flushedtypeahead_char47,1561
static int	block_redo = FALSE;block_redo53,1764
static int	KeyNoremap = 0;	    // remapping flagsKeyNoremap55,1796
#define RM_YES	RM_YES76,2935
#define RM_NONE	RM_NONE77,2974
#define RM_SCRIPT	RM_SCRIPT78,3020
#define RM_ABBR	RM_ABBR79,3083
#define TYPELEN_INIT	TYPELEN_INIT84,3326
static char_u	typebuf_init[TYPELEN_INIT];	// initial typebuf.tb_buftypebuf_init85,3369
static char_u	noremapbuf_init[TYPELEN_INIT];	// initial typebuf.tb_noremapnoremapbuf_init86,3437
static int	last_recorded_len = 0;	// number of last recorded charslast_recorded_len88,3513
free_buff(buffheader_T *buf)free_buff103,3932
get_buffcont(get_buffcont120,4261
get_recorded(void)get_recorded151,5028
get_inserted(void)get_inserted185,5772
add_buff(add_buff195,5976
add_num_buff(buffheader_T *buf, long n)add_num_buff253,7285
add_char_buff(buffheader_T *buf, int c)add_char_buff266,7560
static buffheader_T readbuf1 = {{NULL, {NUL}}, NULL, 0, 0};readbuf1310,8403
static buffheader_T readbuf2 = {{NULL, {NUL}}, NULL, 0, 0};readbuf2313,8508
read_readbuffers(int advance)read_readbuffers322,8793
read_readbuf(buffheader_T *buf, int advance)read_readbuf333,8968
start_stuff(void)start_stuff360,9468
stuff_empty(void)stuff_empty378,9791
readbuf1_empty(void)readbuf1_empty390,10043
typeahead_noflush(int c)typeahead_noflush400,10191
flush_buffers(flush_buffers_T flush_typeahead)flush_buffers411,10487
ResetRedobuff(void)ResetRedobuff457,11764
CancelRedo(void)CancelRedo472,12009
saveRedobuff(save_redo_T *save_redo)saveRedobuff490,12361
restoreRedobuff(save_redo_T *save_redo)restoreRedobuff513,12926
AppendToRedobuff(char_u *s)AppendToRedobuff526,13218
AppendToRedobuffLit(AppendToRedobuffLit537,13437
AppendCharToRedobuff(int c)AppendCharToRedobuff596,14835
AppendNumberToRedobuff(long n)AppendNumberToRedobuff606,14974
stuffReadbuff(char_u *s)stuffReadbuff617,15171
stuffRedoReadbuff(char_u *s)stuffRedoReadbuff627,15350
stuffReadbuffLen(char_u *s, long len)stuffReadbuffLen633,15426
stuffReadbuffSpec(char_u *s)stuffReadbuffSpec645,15718
stuffcharReadbuff(int c)stuffcharReadbuff673,16199
stuffnumReadbuff(long n)stuffnumReadbuff682,16318
read_redo(int init, int old_redo)read_redo696,16681
copy_redo(int old_redo)copy_redo763,18049
start_redo(long count, int old_redo)start_redo781,18476
start_redo_ins(void)start_redo_ins842,19814
stop_redo_ins(void)stop_redo_ins868,20314
init_typebuf(void)init_typebuf879,20545
noremap_keys(void)noremap_keys896,20862
ins_typebuf(ins_typebuf921,21729
ins_char_typebuf(int c)ins_char_typebuf1064,25843
typebuf_changed(typebuf_changed1089,26571
typebuf_typed(void)typebuf_typed1104,26981
typebuf_maplen(void)typebuf_maplen1113,27123
del_typebuf(int len, int offset)del_typebuf1122,27267
gotchars(char_u *chars, int len)gotchars1200,29408
may_sync_undo(void)may_sync_undo1261,30930
alloc_typebuf(void)alloc_typebuf1273,31177
free_typebuf(void)free_typebuf1300,31840
static typebuf_T saved_typebuf[NSCRIPT];saved_typebuf1316,32228
save_typebuf(void)save_typebuf1319,32278
static int old_char = -1;	// character put back by vungetc()old_char1332,32509
static int old_mod_mask;	// mod_mask for ungotten characterold_mod_mask1333,32570
static int old_mouse_row;	// mouse_row related to old_charold_mouse_row1334,32630
static int old_mouse_col;	// mouse_col related to old_charold_mouse_col1335,32689
save_typeahead(tasave_T *tp)save_typeahead1341,32843
restore_typeahead(tasave_T *tp)restore_typeahead1366,33463
openscript(openscript1390,33911
closescript(void)closescript1469,35868
close_all_scripts(void)close_all_scripts1482,36103
using_script(void)using_script1493,36255
before_blocking(void)before_blocking1503,36460
updatescript(int c)updatescript1520,36898
merge_modifyOtherKeys(int c_arg)merge_modifyOtherKeys1538,37208
vgetc(void)vgetc1575,38089
safe_vgetc(void)safe_vgetc1845,44415
plain_vgetc(void)plain_vgetc1860,44619
vpeekc(void)vpeekc1883,45181
vpeekc_nomap(void)vpeekc_nomap1896,45446
vpeekc_any(void)vpeekc_any1915,45830
char_avail(void)char_avail1930,46079
f_getchar(typval_T *argvars, typval_T *rettv)f_getchar1951,46461
f_getcharmod(typval_T *argvars UNUSED, typval_T *rettv)f_getcharmod2060,49087
# define MAX_REPEAT_PARSE MAX_REPEAT_PARSE2067,49250
parse_queued_messages(void)parse_queued_messages2076,49508
    map_result_fail,    // failed, break loopmap_result_fail2163,52081
    map_result_get,     // get a character from typeaheadmap_result_get2164,52127
    map_result_retry,   // try to map againmap_result_retry2165,52185
    map_result_nomatch  // no matching mapping, get charmap_result_nomatch2166,52229
} map_result_T;map_result_T2167,52286
at_ctrl_x_key(void)at_ctrl_x_key2174,52470
handle_mapping(handle_mapping2195,53045
vungetc(int c)vungetc2678,66227
vgetorpeek(int advance)vgetorpeek2711,67264
inchar(inchar3262,81932
#define DUM_LEN DUM_LEN3344,84239
fix_input_buffer(char_u *buf, int len)fix_input_buffer3390,85394
input_available(void)input_available3458,87129

src/gui_at_fs.c,8631
# undef FMT8BITFMT8BIT52,1933
#define SEL_FILE_CANCEL	SEL_FILE_CANCEL73,2318
#define SEL_FILE_OK	SEL_FILE_OK74,2346
#define SEL_FILE_NULL	SEL_FILE_NULL75,2369
#define SEL_FILE_TEXT	SEL_FILE_TEXT76,2394
#define SF_DO_SCROLL	SF_DO_SCROLL78,2420
#define SF_DO_NOT_SCROLL	SF_DO_NOT_SCROLL79,2444
    int		statDone;statDone83,2489
    char	*real;real84,2508
    char	*shown;shown85,2524
} SFEntry;SFEntry86,2541
    char	*dir;dir90,2570
    char	*path;path91,2585
    SFEntry	*entries;entries92,2601
    int		nEntries;nEntries93,2623
    int		vOrigin;vOrigin94,2642
    int		nChars;nChars95,2660
    int		hOrigin;hOrigin96,2677
    int		changed;changed97,2695
    int		beginSelection;beginSelection98,2713
    int		endSelection;endSelection99,2738
    time_t	mtime;mtime100,2761
} SFDir;SFDir101,2779
static char	SFstartDir[MAXPATHL],SFstartDir103,2789
		SFcurrentPath[MAXPATHL],SFcurrentPath104,2823
		SFcurrentDir[MAXPATHL];SFcurrentDir105,2850
static Widget	selFile,selFile107,2877
		selFileField,selFileField108,2900
		selFileForm,selFileForm109,2916
		selFileHScroll,selFileHScroll110,2931
		selFileHScrolls[3],selFileHScrolls111,2949
		selFileLists[3],selFileLists112,2971
		selFileOK,selFileOK113,2990
		selFileCancel,selFileCancel114,3003
		selFilePrompt,selFilePrompt115,3020
		selFileVScrolls[3];selFileVScrolls116,3037
static Display	*SFdisplay;SFdisplay118,3060
static int	SFcharWidth, SFcharAscent, SFcharHeight;SFcharWidth120,3088
static int	SFcharWidth, SFcharAscent, SFcharHeight;SFcharAscent120,3088
static int	SFcharWidth, SFcharAscent, SFcharHeight;SFcharHeight120,3088
static SFDir	*SFdirs = NULL;SFdirs122,3141
static int	SFdirEnd;SFdirEnd124,3171
static int	SFdirPtr;SFdirPtr125,3192
static Pixel	SFfore, SFback;SFfore127,3214
static Pixel	SFfore, SFback;SFback127,3214
static Atom	SFwmDeleteWindow;SFwmDeleteWindow129,3244
static XSegment SFsegs[2], SFcompletionSegs[2];SFsegs131,3275
static XSegment SFsegs[2], SFcompletionSegs[2];SFcompletionSegs131,3275
static XawTextPosition SFtextPos;SFtextPos133,3324
static int	SFupperX, SFlowerY, SFupperY;SFupperX135,3359
static int	SFupperX, SFlowerY, SFupperY;SFlowerY135,3359
static int	SFupperX, SFlowerY, SFupperY;SFupperY135,3359
static int	SFtextX, SFtextYoffset;SFtextX137,3401
static int	SFtextX, SFtextYoffset;SFtextYoffset137,3401
static int	SFentryWidth, SFentryHeight;SFentryWidth139,3437
static int	SFentryWidth, SFentryHeight;SFentryHeight139,3437
static int	SFlineToTextH = 3;SFlineToTextH141,3478
static int	SFlineToTextV = 3;SFlineToTextV142,3508
static int	SFbesideText = 3;SFbesideText144,3539
static int	SFaboveAndBelowText = 2;SFaboveAndBelowText145,3568
static int	SFcharsPerEntry = 15;SFcharsPerEntry147,3605
static int	SFlistSize = 10;SFlistSize149,3639
static int	SFcurrentInvert[3] = { -1, -1, -1 };SFcurrentInvert151,3668
static int	SFworkProcAdded = 0;SFworkProcAdded153,3717
static XtAppContext SFapp;SFapp155,3750
static int	SFpathScrollWidth, SFvScrollHeight, SFhScrollWidth;SFpathScrollWidth157,3778
static int	SFpathScrollWidth, SFvScrollHeight, SFhScrollWidth;SFvScrollHeight157,3778
static int	SFpathScrollWidth, SFvScrollHeight, SFhScrollWidth;SFhScrollWidth157,3778
static char	SFtextBuffer[MAXPATHL*sizeof(wchar_t)];SFtextBuffer160,3863
static char	SFtextBuffer[MAXPATHL];SFtextBuffer162,3921
static int	SFbuttonPressed = 0;SFbuttonPressed165,3965
static XtIntervalId SFdirModTimerId;SFdirModTimerId167,3998
static int	(*SFfunc)();SFfunc169,4036
static int	SFstatus = SEL_FILE_NULL;SFstatus171,4061
# define S_IXUSR S_IXUSR190,4685
# define S_IXGRP S_IXGRP193,4730
# define S_IXOTH S_IXOTH196,4775
#define S_ISXXX(S_ISXXX199,4805
    char	*name;name207,4925
    char	*dir;dir208,4941
} SFLogin;SFLogin209,4956
static int	SFdoNotTouchDirPtr = 0;SFdoNotTouchDirPtr211,4968
static int	SFdoNotTouchVorigin = 0;SFdoNotTouchVorigin213,5004
static SFDir	SFrootDir, SFhomeDir;SFrootDir215,5041
static SFDir	SFrootDir, SFhomeDir;SFhomeDir215,5041
static SFLogin	*SFlogins;SFlogins217,5077
static int	SFtwiddle = 0;SFtwiddle219,5104
SFchdir(char *path)SFchdir222,5146
SFfree(int i)SFfree239,5371
SFstrdup(char **s1, char *s2)SFstrdup260,5715
SFunreadableDir(SFDir *dir)SFunreadableDir266,5826
SFreplaceText(SFDir *dir, char *str)SFreplaceText279,6172
SFexpand(char *str)SFexpand298,6581
SFfindFile(SFDir *dir, char *str)SFfindFile352,7535
SFunselect(void)SFunselect449,9100
SFcompareLogins(const void *p, const void *q)SFcompareLogins461,9301
SFgetHomeDirs(void)SFgetHomeDirs467,9431
SFfindHomeDir(char *begin, char *end)SFfindHomeDir533,11226
SFupdatePath(void)SFupdatePath563,11737
WcsLen(wchar_t *p)WcsLen757,15367
SFsetText(char *path)SFsetText767,15471
SFbuttonPressList(SFbuttonPressList800,16405
SFbuttonReleaseList(SFbuttonReleaseList809,16551
SFcheckDir(int n, SFDir *dir)SFcheckDir831,16973
SFcheckFiles(SFDir *dir)SFcheckFiles893,18365
SFdirModTimer(XtPointer cl UNUSED, XtIntervalId *id UNUSED)SFdirModTimer929,18954
SFstatChar(stat_T *statBuf)SFstatChar975,19841
# define SF_DEFAULT_FONT SF_DEFAULT_FONT997,20260
# define SF_DEFAULT_FONT SF_DEFAULT_FONT999,20327
# undef ABSABS1003,20378
#define ABS(ABS1005,20397
    char *fontname;fontname1009,20457
} TextData;TextData1010,20477
static GC SFlineGC, SFscrollGC, SFinvertGC, SFtextGC;SFlineGC1012,20490
static GC SFlineGC, SFscrollGC, SFinvertGC, SFtextGC;SFscrollGC1012,20490
static GC SFlineGC, SFscrollGC, SFinvertGC, SFtextGC;SFinvertGC1012,20490
static GC SFlineGC, SFscrollGC, SFinvertGC, SFtextGC;SFtextGC1012,20490
static XtResource textResources[] =textResources1014,20545
static XFontSet SFfont;SFfont1026,20870
static XFontStruct *SFfont;SFfont1028,20900
static int SFcurrentListY;SFcurrentListY1031,20936
static XtIntervalId SFscrollTimerId;SFscrollTimerId1033,20964
SFinitFont(void)SFinitFont1036,21018
SFcreateGC(void)SFcreateGC1085,22303
SFclearList(int n, int doScroll)SFclearList1143,23501
SFdeleteEntry(SFDir *dir, SFEntry *entry)SFdeleteEntry1216,25354
SFwriteStatChar(SFwriteStatChar1266,26502
SFstatAndCheck(SFDir *dir, SFEntry *entry)SFstatAndCheck1275,26629
SFdrawStrings(SFdrawStrings1336,27660
SFdrawList(int n, int doScroll)SFdrawList1423,29410
SFdrawLists(int doScroll)SFdrawLists1459,30075
SFinvertEntry(int n)SFinvertEntry1468,30188
SFscrollTimerInterval(void)SFscrollTimerInterval1481,30436
SFscrollTimer(XtPointer p, XtIntervalId *id UNUSED)SFscrollTimer1508,30930
SFnewInvertEntry(int n, XMotionEvent *event)SFnewInvertEntry1558,32160
SFenterList(Widget w UNUSED, int n, XEnterWindowEvent *event)SFenterList1603,32983
SFleaveList(Widget w UNUSED, int n, XEvent *event UNUSED)SFleaveList1623,33316
SFmotionList(Widget w UNUSED, int n, XMotionEvent *event)SFmotionList1633,33486
SFvFloatSliderMovedCallback(Widget w, XtPointer n, XtPointer fnew)SFvFloatSliderMovedCallback1650,33781
SFvSliderMovedCallback(Widget w UNUSED, int n, int nw)SFvSliderMovedCallback1659,34002
SFvAreaSelectedCallback(Widget w, XtPointer n, XtPointer pnew)SFvAreaSelectedCallback1741,35583
SFhSliderMovedCallback(Widget w UNUSED, XtPointer n, XtPointer nw)SFhSliderMovedCallback1798,36593
SFhAreaSelectedCallback(Widget w, XtPointer n, XtPointer pnew)SFhAreaSelectedCallback1813,36920
SFpathSliderMovedCallback(SFpathSliderMovedCallback1870,37955
SFpathAreaSelectedCallback(SFpathAreaSelectedCallback1906,38615
SFworkProc(void)SFworkProc1957,39483
SFcompareEntries(const void *p, const void *q)SFcompareEntries1986,39926
SFgetDir(SFgetDir1992,40053
static char *oneLineTextEditTranslations = "\oneLineTextEditTranslations2070,41613
SFexposeList(SFexposeList2076,41746
SFmodVerifyCallback(SFmodVerifyCallback2089,41981
SFokCallback(Widget w UNUSED, XtPointer cl UNUSED, XtPointer cd UNUSED)SFokCallback2105,42297
static XtCallbackRec SFokSelect[] =SFokSelect2110,42402
SFcancelCallback(Widget w UNUSED, XtPointer cl UNUSED, XtPointer cd UNUSED)SFcancelCallback2117,42532
static XtCallbackRec SFcancelSelect[] =SFcancelSelect2122,42645
SFdismissAction(SFdismissAction2129,42783
static char *wmDeleteWindowTranslation = "\wmDeleteWindowTranslation2142,43044
static XtActionsRec actions[] =actions2146,43136
SFsetColors(SFsetColors2152,43231
SFcreateWidgets(SFcreateWidgets2234,44986
SFtextChanged(void)SFtextChanged2554,54294
SFgetText(void)SFgetText2598,55393
SFprepareToReturn(void)SFprepareToReturn2624,56031
vim_SelFile(vim_SelFile2638,56330

src/gui_athena.c,4365
static Widget vimForm = (Widget)0;vimForm45,1154
Widget textArea = (Widget)0;textArea46,1189
static Widget menuBar = (Widget)0;menuBar48,1235
static XtIntervalId timer = 0;	    // 0 = expired, otherwise activetimer49,1270
static vimmenu_T *a_cur_menu = NULL;a_cur_menu52,1375
static XtActionsRec	pullAction[2] = {pullAction60,1722
static Widget toolBar = (Widget)0;toolBar68,1983
static XtTranslations	popupTrans, parentTrans, menuTrans, supermenuTrans;popupTrans77,2198
static XtTranslations	popupTrans, parentTrans, menuTrans, supermenuTrans;parentTrans77,2198
static XtTranslations	popupTrans, parentTrans, menuTrans, supermenuTrans;menuTrans77,2198
static XtTranslations	popupTrans, parentTrans, menuTrans, supermenuTrans;supermenuTrans77,2198
static Pixmap		pullerBitmap = None;pullerBitmap78,2272
static int		puller_width = 0;puller_width79,2308
gui_athena_scroll_cb_jump(gui_athena_scroll_cb_jump87,2480
gui_athena_scroll_cb_scroll(gui_athena_scroll_cb_scroll123,3343
gui_x11_create_widgets(void)gui_x11_create_widgets230,5686
gui_athena_create_pullright_pixmap(Widget w)gui_athena_create_pullright_pixmap327,8717
gui_x11_destroy_widgets(void)gui_x11_destroy_widgets425,11101
get_toolbar_pixmap(vimmenu_T *menu, Pixmap *sen)get_toolbar_pixmap449,11531
createXpmImages(char_u *path, char **xpm, Pixmap *sen)createXpmImages489,12690
gui_mch_set_toolbar_pos(gui_mch_set_toolbar_pos560,14548
gui_mch_set_text_area_pos(gui_mch_set_text_area_pos589,15074
gui_mch_reset_focus(void)gui_mch_reset_focus616,15687
gui_x11_set_back_color(void)gui_x11_set_back_color624,15778
gui_mch_enable_menu(int flag)gui_mch_enable_menu645,16252
gui_mch_set_menu_pos(gui_mch_set_menu_pos677,16755
athena_calculate_ins_pos(Widget widget)athena_calculate_ins_pos709,17479
gui_mch_add_menu(vimmenu_T *menu, int idx UNUSED)gui_mch_add_menu753,18698
gui_athena_menu_has_submenus(Widget id, Widget ignore)gui_athena_menu_has_submenus869,21949
gui_athena_menu_font(Widget id)gui_athena_menu_font889,22356
gui_mch_new_menu_font(void)gui_mch_new_menu_font936,23352
gui_mch_new_tooltip_font(void)gui_mch_new_tooltip_font1011,24979
gui_mch_new_tooltip_colors(void)gui_mch_new_tooltip_colors1026,25226
gui_mch_submenu_change(gui_mch_submenu_change1042,25486
make_pull_name(char_u * name)make_pull_name1120,27370
gui_mch_add_menu_item(vimmenu_T *menu, int idx UNUSED)gui_mch_add_menu_item1136,27672
gui_mch_show_toolbar(int showit)gui_mch_show_toolbar1252,30818
gui_mch_compute_toolbar_height(void)gui_mch_compute_toolbar_height1373,33696
gui_mch_get_toolbar_colors(gui_mch_get_toolbar_colors1408,34623
gui_mch_toggle_tearoffs(int enable UNUSED)gui_mch_toggle_tearoffs1424,34885
gui_mch_new_menu_colors(void)gui_mch_new_menu_colors1430,34966
gui_mch_destroy_menu(vimmenu_T *menu)gui_mch_destroy_menu1448,35355
gui_athena_menu_timeout(gui_athena_menu_timeout1588,39415
gui_athena_popup_callback(gui_athena_popup_callback1621,40273
gui_athena_popdown_submenus_action(gui_athena_popdown_submenus_action1653,41116
has_submenu(Widget widget)has_submenu1684,41764
gui_athena_delayed_arm_action(gui_athena_delayed_arm_action1698,42038
get_popup_entry(Widget w)get_popup_entry1742,42938
submenu_widget(Widget widget)submenu_widget1758,43292
gui_mch_show_popupmenu(vimmenu_T *menu)gui_mch_show_popupmenu1776,43792
gui_mch_def_colors(void)gui_mch_def_colors1811,44497
gui_mch_set_scrollbar_thumb(gui_mch_set_scrollbar_thumb1836,45194
gui_mch_set_scrollbar_pos(gui_mch_set_scrollbar_pos1872,45861
gui_mch_enable_scrollbar(scrollbar_T *sb, int flag)gui_mch_enable_scrollbar1893,46187
gui_mch_create_scrollbar(gui_mch_create_scrollbar1905,46369
gui_mch_destroy_scrollbar(scrollbar_T *sb)gui_mch_destroy_scrollbar1942,47353
gui_mch_set_scrollbar_colors(scrollbar_T *sb)gui_mch_set_scrollbar_colors1949,47465
gui_x11_get_wid(void)gui_x11_get_wid1966,47868
gui_mch_browse(gui_mch_browse1977,48087
static int	dialogStatus;dialogStatus2018,49233
static Atom	dialogatom;dialogatom2019,49258
keyhit_callback(keyhit_callback2026,49425
butproc(butproc2044,49748
dialog_wm_handler(dialog_wm_handler2056,49958
gui_mch_dialog(gui_mch_dialog2068,50216
gui_athena_menu_colors(Widget id)gui_athena_menu_colors2256,54990
gui_athena_scroll_colors(Widget id)gui_athena_scroll_colors2269,55316

src/gui_at_sb.c,2590
static char defaultTranslations[] =defaultTranslations75,2958
static float floatZero = 0.0;floatZero88,3419
#define Offset(Offset90,3450
static XtResource resources[] =resources92,3505
#undef OffsetOffset127,5605
static XtActionsRec actions[] =actions151,6754
ScrollbarClassRec vim_scrollbarClassRec =vim_scrollbarClassRec165,7120
WidgetClass vim_scrollbarWidgetClass = (WidgetClass)&vim_scrollbarClassRec;vim_scrollbarWidgetClass212,8537
#define NoButton NoButton214,8614
#define PICKLENGTH(PICKLENGTH215,8634
#define AT_MIN(AT_MIN217,8741
#define AT_MAX(AT_MAX218,8788
#define LINE_DELAY	LINE_DELAY220,8836
#define PAGE_DELAY	PAGE_DELAY221,8859
#define LINE_REPEAT	LINE_REPEAT222,8882
#define PAGE_REPEAT	PAGE_REPEAT223,8906
ClassInitialize(void)ClassInitialize226,8947
#define MARGIN(MARGIN233,9122
FillArea(FillArea236,9218
PaintThumb(ScrollbarWidget sbw)PaintThumb345,12042
PaintArrows(ScrollbarWidget sbw)PaintArrows378,13084
Destroy(Widget w)Destroy457,15312
CreateGC(Widget w)CreateGC468,15634
SetDimensions(ScrollbarWidget sbw)SetDimensions506,16675
Initialize(Initialize521,16996
Realize(Realize549,17836
SetValues(SetValues560,18115
Resize(Widget w)Resize601,19268
Redisplay(Widget w, XEvent *event, Region region)Redisplay611,19510
CompareEvents(XEvent *oldEvent, XEvent *newEvent)CompareEvents646,20312
#define Check(Check648,20364
#undef CheckCheck680,20990
struct EventDataEventData685,21024
    XEvent *oldEvent;oldEvent687,21043
    int count;count688,21065
PeekNotifyEvent(Display *dpy, XEvent *event, char *args)PeekNotifyEvent692,21100
LookAhead(Widget w, XEvent *event)LookAhead702,21362
ExtractPosition(ExtractPosition720,21712
HandleThumb(HandleThumb763,22610
RepeatNotify(XtPointer client_data, XtIntervalId *idp UNUSED)RepeatNotify786,23338
FloatInRange(float num, float small, float big)FloatInRange826,24223
ScrollOneLineUp(ScrollOneLineUp832,24354
ScrollOneLineDown(ScrollOneLineDown842,24527
ScrollPageDown(ScrollPageDown852,24701
ScrollPageUp(ScrollPageUp862,24872
ScrollSome(ScrollSome872,25042
NotifyScroll(NotifyScroll890,25418
EndScroll(EndScroll979,27489
FractionLoc(ScrollbarWidget sbw, int x, int y)FractionLoc994,27876
MoveThumb(MoveThumb1008,28203
NotifyThumb(NotifyThumb1053,29294
AllocTopShadowGC(Widget w)AllocTopShadowGC1079,30026
AllocBotShadowGC(Widget w)AllocBotShadowGC1091,30330
_Xaw3dDrawShadows(_Xaw3dDrawShadows1103,30634
vim_XawScrollbarSetThumb(Widget w, double top, double shown, double max)vim_XawScrollbarSetThumb1175,32472

src/gui_beval.c,2499
static BalloonEval *current_beval = NULL;current_beval53,1268
gui_mch_create_beval_area(gui_mch_create_beval_area91,2811
gui_mch_destroy_beval_area(BalloonEval *beval)gui_mch_destroy_beval_area156,4390
gui_mch_enable_beval_area(BalloonEval *beval)gui_mch_enable_beval_area175,4779
gui_mch_disable_beval_area(BalloonEval *beval)gui_mch_disable_beval_area182,4902
gui_mch_currently_showing_beval(void)gui_mch_currently_showing_beval196,5286
gui_mch_post_balloon(BalloonEval *beval, char_u *mesg)gui_mch_post_balloon210,5556
gui_mch_unpost_balloon(BalloonEval *beval)gui_mch_unpost_balloon228,5982
addEventHandler(GtkWidget *target, BalloonEval *beval)addEventHandler237,6126
removeEventHandler(BalloonEval *beval)removeEventHandler263,6989
target_event_cb(GtkWidget *widget, GdkEvent *event, gpointer data)target_event_cb279,7410
mainwin_event_cb(GtkWidget *widget UNUSED, GdkEvent *event, gpointer data)mainwin_event_cb351,9353
pointer_event(BalloonEval *beval, int x, int y, unsigned state)pointer_event371,9760
key_event(BalloonEval *beval, unsigned keyval, int is_keypress)key_event415,10639
timeout_cb(gpointer data)timeout_cb446,11383
balloon_draw_event_cb(GtkWidget *widget,balloon_draw_event_cb463,11823
balloon_expose_event_cb(GtkWidget *widget,balloon_expose_event_cb493,12590
addEventHandler(Widget target, BalloonEval *beval)addEventHandler509,12969
removeEventHandler(BalloonEval *beval)removeEventHandler520,13233
pointerEventEH(pointerEventEH535,13571
pointerEvent(BalloonEval *beval, XEvent *event)pointerEvent552,13901
timerRoutine(XtPointer dx, XtIntervalId *id UNUSED)timerRoutine683,17229
requestBalloon(BalloonEval *beval)requestBalloon700,17660
# define IS_NONPRINTABLE(IS_NONPRINTABLE722,18231
set_printable_label_text(GtkLabel *label, char_u *text)set_printable_label_text725,18342
# define DOUBLE2UINT16(DOUBLE2UINT16849,21375
# undef DOUBLE2UINT16DOUBLE2UINT16858,21690
# undef IS_NONPRINTABLEIS_NONPRINTABLE896,22491
drawBalloon(BalloonEval *beval)drawBalloon902,22558
undrawBalloon(BalloonEval *beval)undrawBalloon989,25038
cancelBalloon(BalloonEval *beval)cancelBalloon997,25205
createBalloonEvalWindow(BalloonEval *beval)createBalloonEvalWindow1012,25504
drawBalloon(BalloonEval *beval)drawBalloon1057,27206
undrawBalloon(BalloonEval *beval)undrawBalloon1160,29663
cancelBalloon(BalloonEval *beval)cancelBalloon1170,29856
createBalloonEvalWindow(BalloonEval *beval)createBalloonEvalWindow1186,30190

src/gui.c,6360
gui_T gui;gui14,383
    GUI_CHILD_IO_ERROR,GUI_CHILD_IO_ERROR43,1415
    GUI_CHILD_OK,GUI_CHILD_OK44,1439
    GUI_CHILD_FAILEDGUI_CHILD_FAILED45,1457
static int can_update_cursor = TRUE; // can display the cursorcan_update_cursor51,1527
static int disable_flush = 0;	// If > 0, gui_mch_flush() is disabled.disable_flush52,1590
# define SCROLL_PAST_ENDSCROLL_PAST_END60,1895
gui_start(char_u *arg UNUSED)gui_start71,2172
gui_attempt_start(void)gui_attempt_start179,5220
gui_do_fork(void)gui_do_fork231,6400
gui_read_child_pipe(int fd)gui_read_child_pipe349,9486
#define READ_BUFFER_SIZE READ_BUFFER_SIZE352,9537
#undef READ_BUFFER_SIZEREAD_BUFFER_SIZE356,9664
gui_prepare(int *argc, char **argv)gui_prepare372,9981
gui_init_check(void)gui_init_check386,10391
gui_init(void)gui_init485,12815
gui_exit(int rc)gui_exit829,21943
# define NEED_GUI_UPDATE_SCREEN NEED_GUI_UPDATE_SCREEN840,22281
gui_shell_closed(void)gui_shell_closed848,22544
gui_init_font(char_u *font_list, int fontset UNUSED)gui_init_font882,23500
#define FONTLEN FONTLEN884,23555
set_guifontwide(char_u *name)set_guifontwide962,25531
gui_get_wide_font(void)gui_get_wide_font1011,26477
gui_set_cursor(int row, int col)gui_set_cursor1058,27620
gui_check_pos(void)gui_check_pos1068,27776
gui_update_cursor(gui_update_cursor1084,28241
gui_position_menu(void)gui_position_menu1330,34702
gui_position_components(int total_width UNUSED)gui_position_components1344,35067
gui_get_base_width(void)gui_get_base_width1424,37367
gui_get_base_height(void)gui_get_base_height1440,37735
gui_resize_shell(int pixel_width, int pixel_height)gui_resize_shell1485,39040
gui_may_resize_shell(void)gui_may_resize_shell1569,41079
gui_get_shellsize(void)gui_get_shellsize1578,41300
gui_set_shellsize(gui_set_shellsize1593,41700
gui_new_shellsize(void)gui_new_shellsize1707,44818
gui_reset_scroll_region(void)gui_reset_scroll_region1716,44943
gui_start_highlight(int mask)gui_start_highlight1725,45151
gui_stop_highlight(int mask)gui_stop_highlight1734,45321
gui_clear_block(gui_clear_block1747,45604
gui_update_cursor_later(void)gui_update_cursor_later1769,46198
gui_write(gui_write1775,46286
gui_dont_update_cursor(int undraw)gui_dont_update_cursor2004,51211
gui_can_update_cursor(void)gui_can_update_cursor2016,51428
gui_disable_flush(void)gui_disable_flush2027,51642
gui_enable_flush(void)gui_enable_flush2036,51743
gui_may_flush(void)gui_may_flush2045,51856
gui_outstr(char_u *s, int len)gui_outstr2052,51943
gui_screenchar(gui_screenchar2108,53172
gui_screenstr(gui_screenstr2146,54372
gui_outstr_nowrap(gui_outstr_nowrap2230,56591
gui_undraw_cursor(void)gui_undraw_cursor2636,66927
gui_redraw(gui_redraw2652,67414
gui_redraw_block(gui_redraw_block2685,68346
gui_delete_lines(int row, int count)gui_delete_lines2853,72706
gui_insert_lines(int row, int count)gui_insert_lines2881,73456
gui_wait_for_chars_3(gui_wait_for_chars_32911,74199
gui_wait_for_chars_or_timer(gui_wait_for_chars_or_timer2925,74471
gui_wait_for_chars_buf(gui_wait_for_chars_buf2949,75150
gui_wait_for_chars(long wtime, int tb_change_cnt)gui_wait_for_chars3000,76493
gui_inchar(gui_inchar3009,76672
fill_mouse_coord(char_u *p, int col, int row)fill_mouse_coord3022,76950
gui_send_mouse_event(gui_send_mouse_event3047,77909
gui_xy2colrow(int x, int y, int *colp)gui_xy2colrow3362,86052
gui_menu_cb(vimmenu_T *menu)gui_menu_cb3376,86342
static int	prev_which_scrollbars[3];prev_which_scrollbars3393,86695
gui_init_which_components(char_u *oldval UNUSED)gui_init_which_components3401,86875
gui_use_tabline(void)gui_use_tabline3659,93557
gui_has_tabline(void)gui_has_tabline3669,93747
gui_update_tabline(void)gui_update_tabline3683,94014
get_tabline_label(get_tabline_label3710,94700
send_tabline_event(int nr)send_tabline_event3800,97238
send_tabline_menu_event(int tabidx, int event)send_tabline_menu_event3832,97819
gui_remove_scrollbars(void)gui_remove_scrollbars3863,98429
gui_create_scrollbar(scrollbar_T *sb, int type, win_T *wp)gui_create_scrollbar3882,98737
gui_find_scrollbar(long ident)gui_find_scrollbar3906,99276
gui_drag_scrollbar(scrollbar_T *sb, long value, int still_dragging)gui_drag_scrollbar3938,100366
gui_may_update_scrollbars(void)gui_may_update_scrollbars4141,104854
gui_update_scrollbars(gui_update_scrollbars4153,105058
gui_do_scrollbar(gui_do_scrollbar4354,111130
gui_do_scroll(void)gui_do_scroll4398,112428
scroll_line_len(linenr_T lnum)scroll_line_len4507,114950
static linenr_T longest_lnum = 0;longest_lnum4529,115366
gui_find_longest_lnum(void)gui_find_longest_lnum4536,115584
gui_update_horiz_scrollbar(int force)gui_update_horiz_scrollbar4577,116640
gui_do_horiz_scroll(long_u leftcol, int compute_longest_lnum)gui_do_horiz_scroll4667,118619
gui_check_colors(void)gui_check_colors4705,119573
gui_set_fg_color(char_u *name)gui_set_fg_color4716,119854
gui_set_bg_color(char_u *name)gui_set_bg_color4723,119993
gui_get_color(char_u *name)gui_get_color4734,120229
gui_get_lightness(guicolor_T pixel)gui_get_lightness4755,120596
gui_bg_default(void)gui_bg_default4765,120824
init_gui_options(void)init_gui_options4776,121049
gui_new_scrollbar_colors(void)gui_new_scrollbar_colors4789,121434
gui_focus_change(int in_focus)gui_focus_change4810,121840
gui_mouse_focus(int x, int y)gui_mouse_focus4844,122611
gui_mouse_moved(int x, int y)gui_mouse_moved4911,124362
gui_mouse_window(mouse_find_T popup)gui_mouse_window4933,124868
gui_mouse_correct(void)gui_mouse_correct4952,125304
xy2win(int x, int y, mouse_find_T popup)xy2win4973,125843
ex_gui(exarg_T *eap)ex_gui5013,126947
gfp_setname(char_u *fname, void *cookie)gfp_setname5067,128209
gui_find_bitmap(char_u *name, char_u *buffer, char *ext)gui_find_bitmap5082,128544
gui_find_iconfile(char_u *name, char_u *buffer, char *ext)gui_find_iconfile5102,129211
display_errors(void)display_errors5115,129537
no_console_input(void)no_console_input5147,130390
gui_update_screen(void)gui_update_screen5164,130689
get_find_dialog_text(get_find_dialog_text5228,132339
gui_do_findrepl(gui_do_findrepl5290,133721
gui_wingoto_xy(int x, int y)gui_wingoto_xy5434,137437
drop_callback(void *cookie)drop_callback5453,137812
gui_handle_drop(gui_handle_drop5491,138747

src/gui_gtk.c,6773
# undef MINMIN43,1143
# undef MAXMAX46,1173
#  undef __52,1267
#  undef N_N_55,1297
#  undef textdomaintextdomain58,1336
#  undef bindtextdomainbindtextdomain61,1387
#  undef bind_textdomain_codesetbind_textdomain_codeset64,1451
#  define ENABLE_NLS	ENABLE_NLS67,1543
typedef int GtkWidget;GtkWidget88,1983
# define gpointer gpointer89,2006
# define guint8 guint890,2028
# define GdkPixmap GdkPixmap91,2048
# define GdkBitmap GdkBitmap92,2071
# define GtkIconFactory GtkIconFactory93,2094
# define GtkToolbar GtkToolbar94,2122
# define GtkAdjustment GtkAdjustment95,2146
# define gboolean gboolean96,2173
# define GdkEventKey GdkEventKey97,2195
# define CancelData CancelData98,2220
static const char * const menu_themed_names[] =menu_themed_names119,2891
static const char * const menu_stock_ids[] =menu_stock_ids182,5277
typedef struct IconNames {IconNames221,6464
    const char *icon_name;icon_name222,6491
    const char *file_name;file_name223,6518
} IconNames;IconNames224,6545
static IconNames stock_vim_icons[] = {stock_vim_icons226,6559
add_stock_icon(GtkIconFactory	*factory,add_stock_icon247,7481
lookup_menu_iconfile(char_u *iconfile, char_u *dest)lookup_menu_iconfile266,7942
load_menu_iconfile(char_u *name, GtkIconSize icon_size)load_menu_iconfile292,8442
create_menu_icon(vimmenu_T *menu, GtkIconSize icon_size)create_menu_icon365,10226
toolbar_button_focus_in_event(GtkWidget *widget UNUSED,toolbar_button_focus_in_event409,11506
gui_gtk_register_stock_icons(void)gui_gtk_register_stock_icons426,12009
#  define ADD_ICON(ADD_ICON433,12175
#  undef ADD_ICONADD_ICON449,13074
translate_mnemonic_tag(char_u *name, int use_mnemonic)translate_mnemonic_tag547,15901
menu_item_new(vimmenu_T *menu, GtkWidget *parent_widget)menu_item_new594,16728
gui_mch_add_menu(vimmenu_T *menu, int idx)gui_mch_add_menu635,17879
menu_item_activate(GtkWidget *widget UNUSED, gpointer data)menu_item_activate682,19184
gui_mch_add_menu_item(vimmenu_T *menu, int idx)gui_mch_add_menu_item688,19294
gui_mch_set_text_area_pos(int x, int y, int w, int h)gui_mch_set_text_area_pos811,22397
gui_gtk_set_mnemonics(int enable)gui_gtk_set_mnemonics822,22647
recurse_tearoffs(vimmenu_T *menu, int val)recurse_tearoffs841,23038
gui_mch_toggle_tearoffs(int enable UNUSED)gui_mch_toggle_tearoffs860,23460
gui_mch_toggle_tearoffs(int enable)gui_mch_toggle_tearoffs866,23541
get_menu_position(vimmenu_T *menu)get_menu_position875,23692
gui_mch_menu_set_tip(vimmenu_T *menu)gui_mch_menu_set_tip893,24000
gui_mch_destroy_menu(vimmenu_T *menu)gui_mch_destroy_menu921,24789
gui_mch_set_scrollbar_thumb(scrollbar_T *sb, long val, long size, long max)gui_mch_set_scrollbar_thumb977,26228
gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h)gui_mch_set_scrollbar_pos1005,26998
adjustment_value_changed(GtkAdjustment *adjustment, gpointer data)adjustment_value_changed1015,27227
gui_mch_create_scrollbar(scrollbar_T *sb, int orient)gui_mch_create_scrollbar1078,28844
gui_mch_destroy_scrollbar(scrollbar_T *sb)gui_mch_destroy_scrollbar1111,29662
browse_ok_cb(GtkWidget *widget UNUSED, gpointer cbdata)browse_ok_cb1128,29958
browse_cancel_cb(GtkWidget *widget UNUSED, gpointer cbdata)browse_cancel_cb1141,30280
browse_destroy_cb(GtkWidget *widget UNUSED)browse_destroy_cb1154,30532
gui_mch_browse(int saving UNUSED,gui_mch_browse1178,31088
gui_mch_browsedir(gui_mch_browsedir1336,35625
create_message_dialog(int type, char_u *title, char_u *message)create_message_dialog1403,37580
split_button_string(char_u *button_string, int *n_buttons)split_button_string1445,38826
split_button_translation(const char *message)split_button_translation1481,39526
button_equal(const char *a, const char *b)button_equal1525,40556
dialog_add_buttons(GtkDialog *dialog, char_u *button_string)dialog_add_buttons1546,40957
typedef struct _DialogInfo_DialogInfo1650,44776
    int		ignore_enter;	    // no default button, ignore "Enter"ignore_enter1652,44805
    int		noalt;		    // accept accelerators without Altnoalt1653,44869
    GtkDialog	*dialog;	    // Widget of the dialogdialog1654,44925
} DialogInfo;DialogInfo1655,44976
dialog_key_press_event_cb(GtkWidget *widget, GdkEventKey *event, gpointer data)dialog_key_press_event_cb1658,45011
gui_mch_dialog(int	type,	    // type of dialoggui_mch_dialog1688,45867
gui_mch_show_popupmenu(vimmenu_T *menu)gui_mch_show_popupmenu1796,48885
static int popup_mouse_pos;popup_mouse_pos1867,51055
popup_menu_position_func(GtkMenu *menu UNUSED,popup_menu_position_func1877,51363
gui_make_popup(char_u *path_name, int mouse_pos)gui_make_popup1902,51965
typedef struct _SharedFindReplace_SharedFindReplace1971,53694
    GtkWidget *dialog;	// the main dialog widgetdialog1973,53730
    GtkWidget *wword;	// 'Whole word only' check buttonwword1974,53779
    GtkWidget *mcase;	// 'Match case' check buttonmcase1975,53835
    GtkWidget *up;	// search direction 'Up' radio buttonup1976,53886
    GtkWidget *down;	// search direction 'Down' radio buttondown1977,53943
    GtkWidget *what;	// 'Find what' entry text widgetwhat1978,54004
    GtkWidget *with;	// 'Replace with' entry text widgetwith1979,54058
    GtkWidget *find;	// 'Find Next' action buttonfind1980,54115
    GtkWidget *replace;	// 'Replace With' action buttonreplace1981,54165
    GtkWidget *all;	// 'Replace All' action buttonall1982,54221
} SharedFindReplace;SharedFindReplace1983,54272
static SharedFindReplace find_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};find_widgets1985,54294
static SharedFindReplace repl_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};repl_widgets1986,54396
find_key_press_event(find_key_press_event1989,54514
create_image_button(const char *stock_id UNUSED,create_image_button2015,55187
convert_localized_message(char_u **buffer, const char *message)convert_localized_message2073,56829
entry_get_text_length(GtkEntry *entry)entry_get_text_length2088,57166
find_replace_dialog_create(char_u *arg, int do_replace)find_replace_dialog_create2114,58358
#   define CONV(CONV2127,58706
#undef CONVCONV2484,70144
gui_mch_find_dialog(exarg_T *eap)gui_mch_find_dialog2488,70168
gui_mch_replace_dialog(exarg_T *eap)gui_mch_replace_dialog2495,70282
find_replace_cb(GtkWidget *widget UNUSED, gpointer data)find_replace_cb2505,70468
entry_activate_cb(GtkWidget *widget UNUSED, gpointer data)entry_activate_cb2546,71603
entry_changed_cb(GtkWidget * entry, GtkWidget * dialog)entry_changed_cb2561,72250
ex_helpfind(exarg_T *eap UNUSED)ex_helpfind2588,72862
recent_func_log_func(const gchar *log_domain UNUSED,recent_func_log_func2597,73124

src/gui_gtk_f.c,2453
typedef struct _GtkFormChild GtkFormChild;GtkFormChild41,1095
struct _GtkFormChild_GtkFormChild43,1139
    GtkWidget *widget;widget45,1162
    GdkWindow *window;window46,1185
    gint x;		// relative subwidget x positionx47,1208
    gint y;		// relative subwidget y positiony48,1254
    gint mapped;mapped49,1300
static GtkWidgetClass *parent_class = NULL;parent_class101,2997
gtk_form_new(void)gtk_form_new107,3086
gtk_form_put(GtkForm	*form,gtk_form_put121,3303
gtk_form_move(GtkForm	*form,gtk_form_move166,4559
gtk_form_freeze(GtkForm *form)gtk_form_freeze191,5006
gtk_form_thaw(GtkForm *form)gtk_form_thaw199,5119
gtk_form_class_init(GtkFormClass *klass)gtk_form_class_init240,6051
gtk_form_init(GtkForm *form)gtk_form_init273,7043
gtk_form_realize(GtkWidget *widget)gtk_form_realize288,7294
gtk_form_map(GtkWidget *widget)gtk_form_map372,10063
gtk_form_unrealize(GtkWidget *widget)gtk_form_unrealize397,10613
gtk_form_size_request(GtkWidget *widget, GtkRequisition *requisition)gtk_form_size_request444,11729
gtk_form_get_preferred_width(GtkWidget *widget,gtk_form_get_preferred_width455,11993
gtk_form_get_preferred_height(GtkWidget *widget,gtk_form_get_preferred_height468,12293
gtk_form_size_allocate(GtkWidget *widget, GtkAllocation *allocation)gtk_form_size_allocate482,12627
gtk_form_render_background(GtkWidget *widget, cairo_t *cr)gtk_form_render_background532,13898
gtk_form_draw(GtkWidget *widget, cairo_t *cr)gtk_form_draw541,14153
gtk_form_expose(GtkWidget *widget, GdkEventExpose *event)gtk_form_expose578,15384
gtk_form_remove(GtkContainer *container, GtkWidget *widget)gtk_form_remove601,15919
gtk_form_forall(GtkContainer	*container,gtk_form_forall649,17156
gtk_form_attach_child_window(GtkForm *form, GtkFormChild *child)gtk_form_attach_child_window676,17681
gtk_form_realize_child(GtkForm *form, GtkFormChild *child)gtk_form_realize_child748,19757
gtk_form_position_child(GtkForm *form, GtkFormChild *child,gtk_form_position_child755,19923
gtk_form_position_children(GtkForm *form)gtk_form_position_children829,21339
gtk_form_move_resize(GtkForm *form, GtkWidget *widget,gtk_form_move_resize838,21545
gtk_form_send_configure(GtkForm *form)gtk_form_send_configure852,21861
gtk_form_child_map(GtkWidget *widget UNUSED, gpointer user_data)gtk_form_child_map872,22343
gtk_form_child_unmap(GtkWidget *widget UNUSED, gpointer user_data)gtk_form_child_unmap883,22557

src/gui_gtk_x11.c,18233
#  undef __36,886
#  undef N_N_39,916
#  undef textdomaintextdomain42,955
#  undef bindtextdomainbindtextdomain45,1006
#  undef bind_textdomain_codesetbind_textdomain_codeset48,1070
#  define ENABLE_NLS	ENABLE_NLS51,1162
# define GdkAtom GdkAtom61,1537
# define GdkEventExpose GdkEventExpose62,1558
# define GdkEventFocus GdkEventFocus63,1586
# define GdkEventVisibility GdkEventVisibility64,1613
# define GdkEventProperty GdkEventProperty65,1645
# define GtkContainer GtkContainer66,1675
# define GtkTargetEntry GtkTargetEntry67,1701
# define GtkType GtkType68,1729
# define GtkWidget GtkWidget69,1750
# define gint gint70,1773
# define gpointer gpointer71,1791
# define guint guint72,1813
# define GdkEventKey GdkEventKey73,1832
# define GdkEventSelection GdkEventSelection74,1857
# define GtkSelectionData GtkSelectionData75,1888
# define GdkEventMotion GdkEventMotion76,1918
# define GdkEventButton GdkEventButton77,1946
# define GdkDragContext GdkDragContext78,1974
# define GdkEventConfigure GdkEventConfigure79,2002
# define GdkEventClient GdkEventClient80,2033
#define GET_X_ATOM(GET_X_ATOM105,2475
    TARGET_TYPE_NONE,TARGET_TYPE_NONE111,2629
    TARGET_UTF8_STRING,TARGET_UTF8_STRING112,2651
    TARGET_STRING,TARGET_STRING113,2675
    TARGET_COMPOUND_TEXT,TARGET_COMPOUND_TEXT114,2694
    TARGET_HTML,TARGET_HTML115,2720
    TARGET_TEXT,TARGET_TEXT116,2737
    TARGET_TEXT_URI_LIST,TARGET_TEXT_URI_LIST117,2754
    TARGET_TEXT_PLAIN,TARGET_TEXT_PLAIN118,2780
    TARGET_VIM,TARGET_VIM119,2803
    TARGET_VIMENCTARGET_VIMENC120,2819
static const GtkTargetEntry selection_targets[] =selection_targets127,2955
#define N_SELECTION_TARGETS N_SELECTION_TARGETS137,3280
static const GtkTargetEntry dnd_targets[] =dnd_targets144,3492
# define N_DND_TARGETS N_DND_TARGETS152,3744
# define DEFAULT_FONT	DEFAULT_FONT160,3942
# define USE_GNOME_SESSIONUSE_GNOME_SESSION163,4033
static GdkAtom wm_protocols_atom = GDK_NONE;wm_protocols_atom171,4262
static GdkAtom save_yourself_atom = GDK_NONE;save_yourself_atom172,4307
static GdkAtom html_atom = GDK_NONE;html_atom178,4419
static GdkAtom utf8_string_atom = GDK_NONE;utf8_string_atom179,4456
static GdkAtom vim_atom = GDK_NONE;	// Vim's own special selection formatvim_atom180,4500
static GdkAtom vimenc_atom = GDK_NONE;	// Vim's extended selection formatvimenc_atom181,4574
static struct special_keyspecial_key188,4774
    guint key_sym;key_sym190,4802
    char_u code0;code0191,4821
    char_u code1;code1192,4839
const special_keys[] =special_keys194,4859
#define ARG_FONT	ARG_FONT289,7314
#define ARG_GEOMETRY	ARG_GEOMETRY290,7333
#define ARG_REVERSE	ARG_REVERSE291,7356
#define ARG_NOREVERSE	ARG_NOREVERSE292,7378
#define ARG_BACKGROUND	ARG_BACKGROUND293,7402
#define ARG_FOREGROUND	ARG_FOREGROUND294,7427
#define ARG_ICONIC	ARG_ICONIC295,7452
#define ARG_ROLE	ARG_ROLE296,7473
#define ARG_NETBEANS	ARG_NETBEANS297,7492
#define ARG_XRM	ARG_XRM298,7515
#define ARG_MENUFONT	ARG_MENUFONT299,7546
#define ARG_INDEX_MASK	ARG_INDEX_MASK300,7581
#define ARG_HAS_VALUE	ARG_HAS_VALUE301,7611
#define ARG_NEEDS_GUI	ARG_NEEDS_GUI302,7682
#define ARG_FOR_GTK	ARG_FOR_GTK303,7750
#define ARG_COMPAT_LONG	ARG_COMPAT_LONG304,7817
#define ARG_KEEP	ARG_KEEP305,7889
    const char	    *name;name316,8254
    unsigned int    flags;flags317,8280
cmdline_option_T;cmdline_option_T319,8309
static const cmdline_option_T cmdline_options[] =cmdline_options321,8328
static int    gui_argc = 0;gui_argc380,10766
static char **gui_argv = NULL;gui_argv381,10794
static const char *role_argument = NULL;role_argument383,10826
static const char *restart_command = NULL;restart_command385,10898
static       char *abs_restart_command = NULL;abs_restart_command386,10941
static int found_iconic_arg = FALSE;found_iconic_arg388,10995
static int using_gnome = 0;using_gnome394,11101
# define using_gnome using_gnome396,11135
gui_mch_prepare(int *argc, char **argv)gui_mch_prepare405,11396
gui_mch_free_all(void)gui_mch_free_all584,15770
visibility_event(GtkWidget *widget UNUSED,visibility_event600,16091
static gboolean is_key_pressed = FALSE;is_key_pressed621,16666
static gboolean blink_mode = TRUE;blink_mode622,16706
gui_gtk3_redraw(int x, int y, int width, int height)gui_gtk3_redraw627,16802
gui_gtk3_update_cursor(cairo_t *cr)gui_gtk3_update_cursor636,17049
gui_gtk3_should_draw_cursor(void)gui_gtk3_should_draw_cursor651,17323
draw_event(GtkWidget *widget UNUSED,draw_event662,17557
expose_event(GtkWidget *widget UNUSED,expose_event731,19291
property_event(GtkWidget *widget,property_event763,20277
gtk_settings_xft_dpi_changed_cb(GtkSettings *gtk_settings UNUSED,gtk_settings_xft_dpi_changed_cb790,20976
typedef gboolean timeout_cb_type;timeout_cb_type810,21658
timeout_add(int time, timeout_cb_type (*callback)(gpointer), int *flagp)timeout_add817,21807
timeout_remove(guint timer)timeout_remove823,21970
#define BLINK_NONE BLINK_NONE840,22289
#define BLINK_OFF BLINK_OFF841,22311
#define BLINK_ON BLINK_ON842,22333
static int blink_state = BLINK_NONE;blink_state844,22356
static long_u blink_waittime = 700;blink_waittime845,22393
static long_u blink_ontime = 400;blink_ontime846,22429
static long_u blink_offtime = 250;blink_offtime847,22463
static guint blink_timer = 0;blink_timer848,22498
gui_gtk_is_blink_on(void)gui_gtk_is_blink_on852,22578
gui_mch_is_blinking(void)gui_mch_is_blinking859,22660
gui_mch_is_blink_off(void)gui_mch_is_blink_off865,22737
gui_mch_set_blinking(long waittime, long on, long off)gui_mch_set_blinking871,22815
gui_mch_stop_blink(int may_call_gui_update_cursor)gui_mch_stop_blink901,23336
blink_cb(gpointer data UNUSED)blink_cb917,23657
gui_mch_start_blink(void)gui_mch_start_blink941,24176
enter_notify_event(GtkWidget *widget UNUSED,enter_notify_event959,24585
leave_notify_event(GtkWidget *widget UNUSED,leave_notify_event974,24942
focus_in_event(GtkWidget *widget,focus_in_event985,25153
focus_out_event(GtkWidget *widget UNUSED,focus_out_event1003,25545
keyval_to_string(unsigned int keyval, unsigned int state, char_u *string)keyval_to_string1026,26231
modifiers_gdk2vim(guint state)modifiers_gdk2vim1093,27867
modifiers_gdk2mouse(guint state)modifiers_gdk2mouse1114,28307
key_press_event(GtkWidget *widget UNUSED,key_press_event1132,28616
key_release_event(GtkWidget *widget UNUSED,key_release_event1335,33613
static int in_selection_clear_event = FALSE;in_selection_clear_event1363,34395
selection_clear_event(GtkWidget		*widget UNUSED,selection_clear_event1366,34457
#define RS_NONE	RS_NONE1380,34803
#define RS_OK	RS_OK1381,34863
#define RS_FAIL	RS_FAIL1382,34920
static int received_selection = RS_NONE;received_selection1383,34983
selection_received_cb(GtkWidget		*widget UNUSED,selection_received_cb1386,35041
selection_get_cb(GtkWidget	    *widget UNUSED,selection_get_cb1496,37580
gui_mch_early_init_check(int give_message)gui_mch_early_init_check1654,41726
gui_mch_init_check(void)gui_mch_init_check1676,42166
static guint mouse_click_timer = 0;mouse_click_timer1721,43254
static int mouse_timed_out = TRUE;mouse_timed_out1722,43290
mouse_click_timer_cb(gpointer data)mouse_click_timer_cb1728,43423
static guint		motion_repeat_timer  = 0;motion_repeat_timer1737,43611
static int		motion_repeat_offset = FALSE;motion_repeat_offset1738,43651
process_motion_notify(int x, int y, GdkModifierType state)process_motion_notify1742,43767
gui_gtk_get_pointer_device(GtkWidget *widget)gui_gtk_get_pointer_device1819,45790
gui_gtk_get_pointer(GtkWidget       *widget,gui_gtk_get_pointer1833,46257
gui_gtk_window_at_position(GtkWidget *widget,gui_gtk_window_at_position1845,46637
# define gui_gtk_get_pointer(gui_gtk_get_pointer1854,46891
# define gui_gtk_window_at_position(gui_gtk_window_at_position1856,46987
motion_repeat_timer_cb(gpointer data UNUSED)motion_repeat_timer_cb1863,47168
motion_notify_event(GtkWidget *widget,motion_notify_event1904,48264
button_press_event(GtkWidget *widget,button_press_event1933,48928
scroll_event(GtkWidget *widget,scroll_event2000,50513
button_release_event(GtkWidget *widget UNUSED,button_release_event2044,51358
count_and_decode_uri_list(char_u *out, char_u *raw, int len)count_and_decode_uri_list2084,52375
filter_uri_list(char_u **outlist, int max, char_u *src)filter_uri_list2122,53149
parse_uri_list(int *count, char_u *data, int len)parse_uri_list2144,53559
drag_handle_uri_list(GdkDragContext	*context,drag_handle_uri_list2162,53988
drag_handle_text(GdkDragContext	    *context,drag_handle_text2191,54597
drag_data_received_cb(GtkWidget		*widget,drag_data_received_cb2228,55543
sm_client_check_changed_any(GnomeClient	    *client UNUSED,sm_client_check_changed_any2274,56825
sm_client_save_yourself(GnomeClient	    *client,sm_client_save_yourself2313,57930
sm_client_die(GnomeClient *client UNUSED, gpointer data UNUSED)sm_client_die2398,60813
setup_save_yourself(void)setup_save_yourself2413,61194
local_xsmp_handle_requests(local_xsmp_handle_requests2437,61747
setup_save_yourself(void)setup_save_yourself2461,62317
global_event_filter(GdkXEvent *xev,global_event_filter2537,64531
mainwin_realize(GtkWidget *widget UNUSED, gpointer data UNUSED)mainwin_realize2571,65478
# undef magickmagick2576,65644
# define static static2579,65735
#define magick magick2580,65764
#undef magickmagick2582,65823
#define magick magick2583,65837
#undef magickmagick2585,65896
#define magick magick2586,65910
#undef magickmagick2588,65969
# undef staticstatic2589,65983
create_blank_pointer(void)create_blank_pointer2655,68042
mainwin_screen_changed_cb(GtkWidget  *widget,mainwin_screen_changed_cb2718,69583
drawarea_realize_cb(GtkWidget *widget, gpointer data UNUSED)drawarea_realize_cb2766,70917
drawarea_unrealize_cb(GtkWidget *widget UNUSED, gpointer data UNUSED)drawarea_unrealize_cb2807,72182
drawarea_style_updated_cb(GtkWidget *widget UNUSED,drawarea_style_updated_cb2849,73064
drawarea_configure_event_cb(GtkWidget	      *widget,drawarea_configure_event_cb2863,73370
delete_event_cb(GtkWidget *widget UNUSED,delete_event_cb2927,75716
get_item_dimensions(GtkWidget *widget, GtkOrientation orientation)get_item_dimensions2937,75949
get_menu_tool_width(void)get_menu_tool_width2986,77194
get_menu_tool_height(void)get_menu_tool_height3007,77683
static int init_window_hints_state = 0;init_window_hints_state3030,78337
update_window_manager_hints(int force_width, int force_height)update_window_manager_hints3033,78394
gui_mch_set_dark_theme(int dark)gui_mch_set_dark_theme3118,81106
icon_size_changed_foreach(GtkWidget *widget, gpointer user_data)icon_size_changed_foreach3137,81665
set_toolbar_style(GtkToolbar *toolbar)set_toolbar_style3178,82728
static int ignore_tabline_evt = FALSE;ignore_tabline_evt3230,84379
static GtkWidget *tabline_menu;tabline_menu3231,84418
static GtkTooltips *tabline_tooltip;tabline_tooltip3233,84481
static int clicked_page;	    // page clicked in tab lineclicked_page3235,84526
tabline_menu_handler(GtkMenuItem *item UNUSED, gpointer user_data)tabline_menu_handler3241,84663
add_tabline_menu_item(GtkWidget *menu, char_u *text, int resp)add_tabline_menu_item3248,84860
create_tabline_menu(void)create_tabline_menu3268,85371
on_tabline_menu(GtkWidget *widget, GdkEvent *event)on_tabline_menu3281,85723
on_select_tab(on_select_tab3338,87074
on_tab_reordered(on_tab_reordered3353,87340
gui_mch_show_tabline(int showit)gui_mch_show_tabline3373,87645
gui_mch_showing_tabline(void)gui_mch_showing_tabline3394,88105
gui_mch_update_tabline(void)gui_mch_update_tabline3404,88289
gui_mch_set_curtab(int nr)gui_mch_set_curtab3495,90857
gui_gtk_set_selection_targets(void)gui_gtk_set_selection_targets3512,91241
gui_gtk_set_dnd_targets(void)gui_gtk_set_dnd_targets3543,92206
gui_mch_init(void)gui_mch_init3569,92854
gui_mch_forked(void)gui_mch_forked4047,108352
color_to_rgba(guicolor_T color)color_to_rgba4063,108617
set_cairo_source_rgba_from_color(cairo_t *cr, guicolor_T color)set_cairo_source_rgba_from_color4074,108873
gui_mch_new_colors(void)gui_mch_new_colors4087,109295
form_configure_event(GtkWidget *widget UNUSED,form_configure_event4141,110782
mainwin_destroy_cb(GObject *object UNUSED, gpointer data UNUSED)mainwin_destroy_cb4190,112802
check_startup_plug_hints(gpointer data UNUSED)check_startup_plug_hints4224,114007
gui_mch_open(void)gui_mch_open4243,114397
gui_mch_exit(int rc UNUSED)gui_mch_exit4440,120443
gui_mch_get_winpos(int *x, int *y)gui_mch_get_winpos4450,120612
gui_mch_set_winpos(int x, int y)gui_mch_set_winpos4461,120829
gui_mch_maximized(void)gui_mch_maximized4510,122189
gui_mch_unmaximize(void)gui_mch_unmaximize4521,122452
gui_mch_newfont(void)gui_mch_newfont4533,122740
gui_mch_set_shellsize(int width, int height,gui_mch_set_shellsize4547,122974
gui_gtk_get_screen_geom_of_win(gui_gtk_get_screen_geom_of_win4591,124336
gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)gui_mch_get_screen_dimensions4628,125346
gui_mch_settitle(char_u *title, char_u *icon UNUSED)gui_mch_settitle4650,126080
gui_mch_enable_menu(int showit)gui_mch_enable_menu4664,126454
gui_mch_show_toolbar(int showit)gui_mch_show_toolbar4690,126973
is_cjk_font(PangoFontDescription *font_desc)is_cjk_font4727,127851
gui_mch_adjust_charheight(void)gui_mch_adjust_charheight4766,128673
font_filter(const PangoFontFamily *family,font_filter4795,129659
gui_mch_font_dialog(char_u *oldval)gui_mch_font_dialog4813,130254
get_styled_font_variants(void)get_styled_font_variants4921,133143
static PangoEngineShape *default_shape_engine = NULL;default_shape_engine4953,134088
ascii_glyph_table_init(void)ascii_glyph_table_init4961,134369
gui_mch_init_font(char_u *font_name, int fontset UNUSED)gui_mch_init_font5032,136260
gui_mch_get_font(char_u *name, int report_error)gui_mch_get_font5130,139245
gui_mch_get_fontname(GuiFont font, char_u *name UNUSED)gui_mch_get_fontname5188,140420
gui_mch_free_font(GuiFont font)gui_mch_free_font5210,140796
gui_mch_get_color(char_u *name)gui_mch_get_color5222,141010
gui_mch_get_rgb_color(int r, int g, int b)gui_mch_get_rgb_color5250,141553
gui_mch_set_fg_color(guicolor_T color)gui_mch_set_fg_color5273,142106
gui_mch_set_bg_color(guicolor_T color)gui_mch_set_bg_color5286,142338
gui_mch_set_sp_color(guicolor_T color)gui_mch_set_sp_color5299,142567
#define INSERT_PANGO_ATTR(INSERT_PANGO_ATTR5311,142811
apply_wide_font_attr(char_u *s, int len, PangoAttrList *attr_list)apply_wide_font_attr5321,143139
count_cluster_cells(char_u *s, PangoItem *item,count_cluster_cells5351,143808
setup_zero_width_cluster(PangoItem *item, PangoGlyphInfo *glyph,setup_zero_width_cluster5425,146143
draw_glyph_string(int row, int col, int num_cells, int flags,draw_glyph_string5454,147054
draw_under(int flags, int row, int col, int cells, cairo_t *cr)draw_under5528,148908
gui_gtk2_draw_string(int row, int col, char_u *s, int len, int flags)gui_gtk2_draw_string5611,151372
gui_mch_haskey(char_u *name)gui_mch_haskey5919,160432
gui_get_x11_windis(Window *win, Display **dis)gui_get_x11_windis5935,160793
gui_mch_get_display(void)gui_mch_get_display5954,161242
gui_mch_beep(void)gui_mch_beep5964,161452
gui_mch_flash(int msec)gui_mch_flash5978,161729
gui_mch_invert_rectangle(int r, int c, int nr, int nc)gui_mch_invert_rectangle6030,163268
gui_mch_iconify(void)gui_mch_iconify6081,164730
gui_mch_set_foreground(void)gui_mch_set_foreground6091,164906
gui_mch_draw_hollow_cursor(guicolor_T color)gui_mch_draw_hollow_cursor6101,165044
gui_mch_draw_part_cursor(int w, int h, guicolor_T color)gui_mch_draw_part_cursor6147,166159
gui_mch_update(void)gui_mch_update6194,167461
input_timer_cb(gpointer data)input_timer_cb6201,167622
channel_poll_cb(gpointer data UNUSED)channel_poll_cb6213,167866
gui_mch_wait_for_chars(long wtime)gui_mch_wait_for_chars6234,168487
gui_mch_flush(void)gui_mch_flush6327,170421
gui_mch_clear_block(int row1arg, int col1arg, int row2arg, int col2arg)gui_mch_clear_block6342,170787
gui_gtk_window_clear(GdkWindow *win)gui_gtk_window_clear6404,172579
# define gui_gtk_window_clear(gui_gtk_window_clear6427,173221
gui_mch_clear_all(void)gui_mch_clear_all6431,173296
check_copy_area(void)check_copy_area6442,173541
gui_gtk_surface_copy_rect(int dest_x, int dest_y,gui_gtk_surface_copy_rect6478,174472
gui_mch_delete_lines(int row, int num_lines)gui_mch_delete_lines6501,175062
gui_mch_insert_lines(int row, int num_lines)gui_mch_insert_lines6551,176958
clip_mch_request_selection(Clipboard_T *cbd)clip_mch_request_selection6598,178712
clip_mch_lose_selection(Clipboard_T *cbd UNUSED)clip_mch_lose_selection6635,179728
clip_mch_own_selection(Clipboard_T *cbd)clip_mch_own_selection6648,179979
clip_mch_set_selection(Clipboard_T *cbd UNUSED)clip_mch_set_selection6663,180356
clip_gtk_owner_exists(Clipboard_T *cbd)clip_gtk_owner_exists6669,180489
gui_mch_menu_grey(vimmenu_T *menu, int grey)gui_mch_menu_grey6681,180737
gui_mch_menu_hidden(vimmenu_T *menu, int hidden)gui_mch_menu_hidden6702,181160
gui_mch_draw_menubar(void)gui_mch_draw_menubar6729,181582
gui_mch_enable_scrollbar(scrollbar_T *sb, int flag)gui_mch_enable_scrollbar6740,181761
gui_mch_get_rgb(guicolor_T pixel)gui_mch_get_rgb6754,182000
gui_mch_getmouse(int *x, int *y)gui_mch_getmouse6775,182455
gui_mch_setmouse(int x, int y)gui_mch_setmouse6781,182553
static int last_shape = 0;last_shape6795,183048
gui_mch_mousehide(int hide)gui_mch_mousehide6804,183195
static const int mshape_ids[] =mshape_ids6828,183760
mch_set_mouse_shape(int shape)mch_set_mouse_shape6850,184330
# define SIGN_WIDTH SIGN_WIDTH6898,185655
# define SIGN_HEIGHT SIGN_HEIGHT6899,185697
# define SIGN_ASPECT SIGN_ASPECT6900,185736
gui_mch_drawsign(int row, int col, int typenr)gui_mch_drawsign6903,185810
gui_mch_register_sign(char_u *signfile)gui_mch_register_sign7048,189876
gui_mch_destroy_sign(void *sign)gui_mch_destroy_sign7082,190633

src/gui_mac.c,18246
#define USE_CARBONIZEDUSE_CARBONIZED41,1199
#define USE_AEVENT	USE_AEVENT42,1222
#undef USE_OFFSETED_WINDOW	USE_OFFSETED_WINDOW43,1259
# define USE_AEVENT USE_AEVENT47,1429
#define VIMSCRAPFLAVOR VIMSCRAPFLAVOR51,1508
#define SCRAPTEXTFLAVOR SCRAPTEXTFLAVOR52,1538
static EventHandlerUPP mouseWheelHandlerUPP = NULL;mouseWheelHandlerUPP54,1587
SInt32 gMacSystemVersion;gMacSystemVersion55,1639
# define USE_CARBONKEYHANDLERUSE_CARBONKEYHANDLER58,1687
static int im_is_active = FALSE;im_is_active60,1718
# define NR_ELEMS(NR_ELEMS67,1852
static TSMDocumentID gTSMDocument;gTSMDocument69,1901
static EventHandlerUPP keyEventHandlerUPP = NULL;keyEventHandlerUPP72,1982
static EventHandlerUPP winEventHandlerUPP = NULL;winEventHandlerUPP73,2032
#define kNothing kNothing115,3171
#define kCreateEmpty kCreateEmpty116,3190
#define kCreateRect kCreateRect117,3217
#define kDestroy kDestroy118,3239
#define topLeft(topLeft123,3295
#define botRight(botRight124,3334
static long lastMouseTick = 0;lastMouseTick128,3428
static RgnHandle cursorRgn;cursorRgn131,3467
static RgnHandle dragRgn;dragRgn132,3495
static Rect dragRect;dragRect133,3521
static short dragRectEnbl;dragRectEnbl134,3543
static short dragRectControl;dragRectControl135,3570
static int allow_scrollbar = FALSE;allow_scrollbar141,3875
static short clickIsPopup;clickIsPopup144,3984
ControlActionUPP gScrollAction;gScrollAction147,4045
ControlActionUPP gScrollDrag;gScrollDrag148,4077
static ControlHandle dragged_sb = NULL;dragged_sb151,4161
static short *gDialogHotKeys;gDialogHotKeys154,4263
    FMFontFamily family;family158,4310
    FMFontSize size;size159,4335
    FMFontStyle style;style160,4356
    Boolean isPanelVisible;isPanelVisible161,4379
} gFontPanelInfo = { 0, 0, 0, false };gFontPanelInfo162,4407
# define USE_ATSUI_DRAWINGUSE_ATSUI_DRAWING165,4468
int	    p_macatsui_last;p_macatsui_last166,4495
ATSUStyle   gFontStyle;gFontStyle167,4520
ATSUStyle   gWideFontStyle;gWideFontStyle168,4544
Boolean	    gIsFontFallbackSet;gIsFontFallbackSet169,4572
UInt32      useAntialias_cached = 0x0;useAntialias_cached170,4604
#define RGB(RGB174,4668
#define Red(Red175,4718
#define Green(Green176,4759
#define Blue(Blue177,4801
#define vk_Esc	vk_Esc181,4860
#define vk_F1	vk_F1183,4891
#define vk_F2	vk_F2184,4920
#define vk_F3	vk_F3185,4948
#define vk_F4	vk_F4186,4976
#define vk_F5	vk_F5187,5004
#define vk_F6	vk_F6188,5032
#define vk_F7	vk_F7189,5060
#define vk_F8	vk_F8190,5090
#define vk_F9	vk_F9191,5110
#define vk_F10	vk_F10192,5130
#define vk_F11	vk_F11193,5151
#define vk_F12	vk_F12194,5172
#define vk_F13	vk_F13195,5193
#define vk_F14	vk_F14196,5214
#define vk_F15	vk_F15197,5235
#define vk_Clr	vk_Clr199,5257
#define vk_Enter	vk_Enter200,5293
#define vk_Space	vk_Space202,5325
#define vk_Tab	vk_Tab203,5356
#define vk_Return	vk_Return204,5386
#define vk_Delete	vk_Delete206,5460
#define vk_Help	vk_Help208,5503
#define vk_Home	vk_Home209,5534
#define	vk_PageUp	vk_PageUp210,5565
#define vk_FwdDelete	vk_FwdDelete211,5597
#define	vk_End	vk_End212,5632
#define vk_PageDown	vk_PageDown213,5662
#define vk_Up	vk_Up215,5697
#define vk_Down	vk_Down216,5726
#define	vk_Left	vk_Left217,5757
#define vk_Right	vk_Right218,5788
#define vk_Undo	vk_Undo220,5820
#define vk_Cut	vk_Cut221,5843
#define	vk_Copy	vk_Copy222,5865
#define	vk_Paste	vk_Paste223,5888
#define vk_PrintScreen	vk_PrintScreen224,5911
#define vk_SCrollLock	vk_SCrollLock225,5941
#define	vk_Pause	vk_Pause226,5970
#define	vk_NumLock	vk_NumLock227,5994
#define vk_Insert	vk_Insert228,6020
#define KeySym	KeySym230,6047
    KeySym  key_sym;key_sym234,6084
    char_u  vim_code0;vim_code0235,6105
    char_u  vim_code1;vim_code1236,6128
} special_keys[] =special_keys237,6151
static WindowRef drawer = NULL; // TODO: put into gui.hdrawer292,7376
C2Pascal_save(char_u *Cstring)C2Pascal_save314,7808
C2Pascal_save_and_remove_backslash(char_u *Cstring)C2Pascal_save_and_remove_backslash346,8374
EventModifiers2VimMouseModifiers(EventModifiers macModifiers)EventModifiers2VimMouseModifiers379,8958
EventModifiers2VimModifiers(EventModifiers macModifiers)EventModifiers2VimModifiers402,9545
points_to_pixels(char_u *str, char_u **end, int vertical)points_to_pixels429,10460
menu_title_removing_mnemonic(vimmenu_T *menu)menu_title_removing_mnemonic469,11190
new_fnames_from_AEDesc(AEDesc *theList, long *numFiles, OSErr *error)new_fnames_from_AEDesc524,12644
typedef struct WindowSearch WindowSearch;WindowSearch598,14596
struct WindowSearch // for handling class 'KAHL', event 'SRCH', keyDirectObject typeCharWindowSearch599,14638
    FSSpec theFile; // identifies the filetheFile601,14729
    long *theDate; // where to put the modification date/timetheDate602,14772
Handle_KAHL_SRCH_AE(Handle_KAHL_SRCH_AE606,14855
typedef struct ModificationInfo ModificationInfo;ModificationInfo671,16354
struct ModificationInfo // for replying to class 'KAHL', event 'MOD ', keyDirectObject typeAEListModificationInfo672,16404
    FSSpec theFile; // identifies the filetheFile674,16504
    long theDate; // the date/time the file was last modifiedtheDate675,16547
    short saved; // set this to zero when replying, unusedsaved676,16609
Handle_KAHL_MOD_AE(Handle_KAHL_MOD_AE680,16689
typedef struct CW_GetText CW_GetText;CW_GetText766,18781
struct CW_GetText // for handling class 'KAHL', event 'GTTX', keyDirectObject typeCharCW_GetText767,18819
    FSSpec theFile; // identifies the filetheFile769,18908
    Handle theText; // the location where you return the text (must be resized properly)theText770,18951
    long *unused;   // 0 (not used)unused771,19040
    long *theDate;  // where to put the modification date/timetheDate772,19076
Handle_KAHL_GTTX_AE(Handle_KAHL_GTTX_AE776,19160
FindProcessBySignature(FindProcessBySignature858,21083
Send_KAHL_MOD_AE(buf_T *buf)Send_KAHL_MOD_AE894,21901
HandleUnusedParms(const AppleEvent *theAEvent)HandleUnusedParms955,23465
typedef struct SelectionRange SelectionRange;SelectionRange992,24196
struct SelectionRange // for handling kCoreClassEvent:kOpenDocuments:keyAEPosition typeCharSelectionRange993,24242
    short unused1; // 0 (not used)unused1995,24336
    short lineNum; // line to select (<0 to specify range)lineNum996,24371
    long startRange; // start of selection range (if line < 0)startRange997,24430
    long endRange; // end of selection range (if line < 0)endRange998,24493
    long unused2; // 0 (not used)unused2999,24552
    long theDate; // modification date/timetheDate1000,24586
static long drop_numFiles;drop_numFiles1003,24634
static short drop_gotPosition;drop_gotPosition1004,24661
static SelectionRange drop_thePosition;drop_thePosition1005,24692
drop_callback(void *cookie UNUSED)drop_callback1008,24749
HandleODocAE(const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)HandleODocAE1061,26137
Handle_aevt_oapp_AE(Handle_aevt_oapp_AE1180,28781
Handle_aevt_quit_AE(Handle_aevt_quit_AE1195,28999
Handle_aevt_pdoc_AE(Handle_aevt_pdoc_AE1216,29327
Handle_unknown_AE(Handle_unknown_AE1234,29615
InstallAEHandlers(void)InstallAEHandlers1251,29866
FontPanelHandler(FontPanelHandler1346,32970
InstallFontPanelHandler(void)InstallFontPanelHandler1389,34144
#define FONT_STYLE_BUFFER_SIZE FONT_STYLE_BUFFER_SIZE1411,34785
GetFontPanelSelection(char_u *outName)GetFontPanelSelection1413,34835
gui_mac_get_menu_item_index(vimmenu_T *pMenu)gui_mac_get_menu_item_index1467,36330
gui_mac_get_vim_menu(short menuID, short itemIndex, vimmenu_T *pMenu)gui_mac_get_vim_menu1496,36909
gui_mac_drag_thumb(ControlHandle theControl, short partCode)gui_mac_drag_thumb1541,37847
gui_mac_scroll_action(ControlHandle theControl, short partCode)gui_mac_scroll_action1568,38599
gui_mac_doInContentClick(EventRecord *theEvent, WindowPtr whichWindow)gui_mac_doInContentClick1662,40859
gui_mac_doInDragClick(Point where, WindowPtr whichWindow)gui_mac_doInDragClick1752,43104
gui_mac_doInGrowClick(Point where, WindowPtr whichWindow)gui_mac_doInGrowClick1766,43460
gui_mac_doInZoomClick(EventRecord *theEvent, WindowPtr whichWindow)gui_mac_doInZoomClick1795,44299
gui_mac_doUpdateEvent(EventRecord *event)gui_mac_doUpdateEvent1846,45698
gui_mac_doActivateEvent(EventRecord *event)gui_mac_doActivateEvent1947,48388
gui_mac_doSuspendEvent(EventRecord *event)gui_mac_doSuspendEvent1973,48924
gui_mac_handle_window_activate(gui_mac_handle_window_activate1995,49393
gui_mac_handle_text_input(gui_mac_handle_text_input2021,49902
OSStatus gui_mac_update_input_area(gui_mac_update_input_area2056,50909
static int dialog_busy = FALSE;	    // TRUE when gui_mch_dialog() wants thedialog_busy2063,51039
# define INLINE_KEY_BUFFER_SIZE INLINE_KEY_BUFFER_SIZE2066,51132
gui_mac_unicode_key_event(gui_mac_unicode_key_event2068,51194
gui_mac_doKeyEvent(EventRecord *theEvent)gui_mac_doKeyEvent2232,55316
gui_mac_doMouseDownEvent(EventRecord *theEvent)gui_mac_doMouseDownEvent2408,59532
gui_mac_doMouseMovedEvent(EventRecord *event)gui_mac_doMouseMovedEvent2461,60594
gui_mac_doMouseUpEvent(EventRecord *theEvent)gui_mac_doMouseUpEvent2492,61317
gui_mac_mouse_wheel(EventHandlerCallRef nextHandler, EventRef theEvent,gui_mac_mouse_wheel2515,61960
gui_mch_mousehide(int hide)gui_mch_mousehide2571,63499
gui_mac_handle_menu(long menuChoice)gui_mac_handle_menu2617,64547
gui_mac_handle_event(EventRecord *event)gui_mac_handle_event2643,65061
gui_mac_find_font(char_u *font_name)gui_mac_find_font2720,66568
gui_mch_prepare(int *argc, char **argv)gui_mch_prepare2846,69472
gui_mch_init_check(void)gui_mch_init_check2934,71593
receiveHandler(WindowRef theWindow, void *handlerRefCon, DragRef theDrag)receiveHandler2945,71835
gui_mch_init(void)gui_mch_init3007,73287
gui_mch_new_colors(void)gui_mch_new_colors3176,78199
gui_mch_open(void)gui_mch_open3187,78426
gui_mac_dispose_atsui_style(void)gui_mac_dispose_atsui_style3209,78854
gui_mch_exit(int rc)gui_mch_exit3219,79047
gui_mch_get_winpos(int *x, int *y)gui_mch_get_winpos3250,79669
gui_mch_set_winpos(int x, int y)gui_mch_set_winpos3271,80072
gui_mch_set_shellsize(gui_mch_set_shellsize3279,80291
gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)gui_mch_get_screen_dimensions3319,81271
gui_mac_select_font(char_u *font_name)gui_mac_select_font3336,81782
gui_mac_create_atsui_style(void)gui_mac_create_atsui_style3379,83141
gui_mch_init_font(char_u *font_name, int fontset)gui_mch_init_font3401,83609
gui_mch_adjust_charheight(void)gui_mch_adjust_charheight3487,85570
gui_mch_get_font(char_u *name, int giveErrorIfMissing)gui_mch_get_font3501,85872
gui_mch_get_fontname(GuiFont font, char_u *name)gui_mch_get_fontname3526,86349
gui_mac_set_font_attributes(GuiFont font)gui_mac_set_font_attributes3536,86517
gui_mch_set_font(GuiFont font)gui_mch_set_font3598,87887
gui_mch_free_font(GuiFont font)gui_mch_free_font3655,89275
gui_mch_get_color(char_u *name)gui_mch_get_color3671,89702
gui_mch_get_rgb_color(int r, int g, int b)gui_mch_get_rgb_color3685,90027
gui_mch_set_fg_color(guicolor_T color)gui_mch_set_fg_color3694,90176
gui_mch_set_bg_color(guicolor_T color)gui_mch_set_bg_color3709,90458
RGBColor specialColor;specialColor3720,90682
gui_mch_set_sp_color(guicolor_T color)gui_mch_set_sp_color3726,90761
draw_undercurl(int flags, int row, int col, int cells)draw_undercurl3737,91021
draw_string_QD(int row, int col, char_u *s, int len, int flags)draw_string_QD3758,91443
draw_string_ATSUI(int row, int col, char_u *s, int len, int flags)draw_string_ATSUI3867,94056
gui_mch_draw_string(int row, int col, char_u *s, int len, int flags)gui_mch_draw_string4049,99259
gui_mch_haskey(char_u *name)gui_mch_haskey4070,99814
gui_mch_beep(void)gui_mch_beep4082,100050
gui_mch_flash(int msec)gui_mch_flash4088,100127
gui_mch_invert_rectangle(int r, int c, int nr, int nc)gui_mch_invert_rectangle4111,100642
gui_mch_iconify(void)gui_mch_iconify4129,101003
gui_mch_set_foreground(void)gui_mch_set_foreground4141,101237
gui_mch_draw_hollow_cursor(guicolor_T color)gui_mch_draw_hollow_cursor4151,101338
gui_mch_draw_part_cursor(int w, int h, guicolor_T color)gui_mch_draw_part_cursor4174,101831
gui_mch_update(void)gui_mch_update4204,102535
WaitNextEventWrp(EventMask eventMask, EventRecord *theEvent, UInt32 sleep, RgnHandle mouseRgn)WaitNextEventWrp4227,103069
gui_mch_wait_for_chars(int wtime)gui_mch_wait_for_chars4244,103629
gui_mch_flush(void)gui_mch_flush4316,105182
gui_mch_clear_block(int row1, int col1, int row2, int col2)gui_mch_clear_block4326,105362
gui_mch_clear_all(void)gui_mch_clear_all4347,105830
gui_mch_delete_lines(int row, int num_lines)gui_mch_delete_lines4367,106296
gui_mch_insert_lines(int row, int num_lines)gui_mch_insert_lines4390,106966
clip_mch_request_selection(Clipboard_T *cbd)clip_mch_request_selection4424,107940
clip_mch_lose_selection(Clipboard_T *cbd)clip_mch_lose_selection4514,109817
clip_mch_own_selection(Clipboard_T *cbd)clip_mch_own_selection4522,109922
clip_mch_set_selection(Clipboard_T *cbd)clip_mch_set_selection4531,110047
gui_mch_set_text_area_pos(int x, int y, int w, int h)gui_mch_set_text_area_pos4586,111194
gui_mch_enable_menu(int flag)gui_mch_enable_menu4608,111621
gui_mch_set_menu_pos(int x, int y, int w, int h)gui_mch_set_menu_pos4616,111710
gui_mch_add_menu(vimmenu_T *menu, int idx)gui_mch_add_menu4627,111882
gui_mch_add_menu_item(vimmenu_T *menu, int idx)gui_mch_add_menu_item4723,114629
gui_mch_toggle_tearoffs(int enable)gui_mch_toggle_tearoffs4828,118089
gui_mch_destroy_menu(vimmenu_T *menu)gui_mch_destroy_menu4837,118215
gui_mch_menu_grey(vimmenu_T *menu, int grey)gui_mch_menu_grey4879,118992
gui_mch_menu_hidden(vimmenu_T *menu, int hidden)gui_mch_menu_hidden4908,119641
gui_mch_draw_menubar(void)gui_mch_draw_menubar4919,119857
gui_mch_enable_scrollbar(gui_mch_enable_scrollbar4930,119946
gui_mch_set_scrollbar_thumb(gui_mch_set_scrollbar_thumb4945,120156
gui_mch_set_scrollbar_pos(gui_mch_set_scrollbar_pos4961,120512
gui_mch_create_scrollbar(gui_mch_create_scrollbar4997,121118
gui_mch_destroy_scrollbar(scrollbar_T *sb)gui_mch_destroy_scrollbar5023,121590
gui_mch_is_blinking(void)gui_mch_is_blinking5033,121781
gui_mch_is_blink_off(void)gui_mch_is_blink_off5039,121838
gui_mch_set_blinking(long wait, long on, long off)gui_mch_set_blinking5053,122084
gui_mch_stop_blink(int may_call_gui_update_cursor)gui_mch_stop_blink5067,122341
gui_mch_start_blink(void)gui_mch_start_blink5085,122771
gui_mch_get_rgb(guicolor_T pixel)gui_mch_get_rgb5107,123266
gui_mch_browse(gui_mch_browse5134,124269
    short   idx;idx5220,126456
    short   width;	// Size of the text in pixelwidth5221,126473
    Rect    box;box5222,126521
} vgmDlgItm; // Vim Gui_Mac.c Dialog ItemvgmDlgItm5223,126538
#define MoveRectTo(MoveRectTo5225,126581
macMoveDialogItem(macMoveDialogItem5228,126657
macSizeDialogItem(macSizeDialogItem5261,127550
macSetDialogItemText(macSetDialogItemText5297,128540
DialogHotkeyFilterProc (DialogHotkeyFilterProc5321,129163
gui_mch_dialog(gui_mch_dialog5362,130340
display_errors(void)display_errors5691,140158
gui_mch_getmouse(int *x, int *y)gui_mch_getmouse5724,140821
gui_mch_setmouse(int x, int y)gui_mch_setmouse5735,140945
gui_mch_show_popupmenu(vimmenu_T *menu)gui_mch_show_popupmenu5781,141701
mch_post_buffer_write(buf_T *buf)mch_post_buffer_write5834,143042
gui_mch_settitle(char_u *title, char_u *icon)gui_mch_settitle5847,143273
C2PascalString(char_u *CString, Str255 *PascalString)C2PascalString5886,144133
GetFSSpecFromPath(char_u *file, FSSpec *fileFSSpec)GetFSSpecFromPath5909,144498
char_u *FullPathFromFSSpec_save(FSSpec file)FullPathFromFSSpec_save5936,145056
im_set_position(int row, int col)im_set_position6151,151097
static ScriptLanguageRecord gTSLWindow;gTSLWindow6160,151226
static ScriptLanguageRecord gTSLInsert;gTSLInsert6161,151266
static ScriptLanguageRecord gTSLDefault = { 0, 0 };gTSLDefault6162,151306
static Component	     gTSCWindow;gTSCWindow6164,151359
static Component	     gTSCInsert;gTSCInsert6165,151393
static Component	     gTSCDefault;gTSCDefault6166,151427
static int		     im_initialized = 0;im_initialized6168,151463
im_on_window_switch(int active)im_on_window_switch6171,151517
im_set_active(int active)im_set_active6224,152594
im_get_status(void)im_get_status6283,153888
static MenuRef contextMenu = NULL;contextMenu6297,154055
    kTabContextMenuId = 42kTabContextMenuId6300,154097
getTabLabel(tabpage_T *page)getTabLabel6305,154204
#define DRAWER_SIZE DRAWER_SIZE6318,154533
#define DRAWER_INSET DRAWER_INSET6319,154557
static ControlRef dataBrowser = NULL;dataBrowser6321,154582
static CFStringRef *tabLabels = NULL;tabLabels6328,155008
static int tabLabelsSize = 0;tabLabelsSize6329,155046
    kTabsColumn = 'Tabs'kTabsColumn6333,155084
getTabCount(void)getTabCount6337,155128
dbItemDataCallback(ControlRef browser,dbItemDataCallback6349,155308
dbItemNotificationCallback(ControlRef browser,dbItemNotificationCallback6379,156104
dbGetContextualMenuCallback(ControlRef browser,dbGetContextualMenuCallback6393,156384
dbSelectContextualMenuCallback(ControlRef browser,dbSelectContextualMenuCallback6407,156709
dbFocusCallback(EventHandlerCallRef handler, EventRef event, void *data)dbFocusCallback6448,157796
drawerCallback(EventHandlerCallRef handler, EventRef event, void *data)drawerCallback6459,158087
enum { kMyDataBrowserAttributeListViewAlternatingRowColors = (1 << 1) };kMyDataBrowserAttributeListViewAlternatingRowColors6491,159019
myDataBrowserChangeAttributes(ControlRef inDataBrowser,myDataBrowserChangeAttributes6494,159113
initialise_tabline(void)initialise_tabline6522,160027
gui_mch_show_tabline(int showit)gui_mch_show_tabline6617,164042
gui_mch_showing_tabline(void)gui_mch_showing_tabline6629,164240
gui_mch_update_tabline(void)gui_mch_update_tabline6640,164455
gui_mch_set_curtab(int nr)gui_mch_set_curtab6681,165507

src/gui_motif.c,7966
#define MOTIF_POPUPMOTIF_POPUP62,1378
static Widget vimForm;vimForm66,1424
static Widget textAreaForm;textAreaForm67,1447
Widget textArea;textArea68,1475
static Widget toolBarFrame;toolBarFrame70,1512
static Widget toolBar;toolBar71,1540
static Widget	tabLine;tabLine74,1594
static Widget	tabLine_menu = 0;tabLine_menu75,1617
static int	showing_tabline = 0;showing_tabline76,1649
static Widget footer;footer79,1707
static int tearoff_val = (int)XmTEAR_OFF_ENABLED;tearoff_val84,1830
static Widget menuBar;menuBar86,1888
# define STRING_TAG STRING_TAG101,2277
# define STRING_TAG STRING_TAG103,2327
scroll_cb(Widget w UNUSED, XtPointer client_data, XtPointer call_data)scroll_cb111,2428
tabline_cb(tabline_cb127,2854
tabline_button_cb(tabline_button_cb140,3134
motif_tabline_timer_cb (motif_tabline_timer_cb157,3484
tabline_scroller_clicked(tabline_scroller_clicked168,3680
tabline_menu_cb(tabline_menu_cb193,4329
tabline_balloon_cb(BalloonEval *beval, int state UNUSED)tabline_balloon_cb266,6128
static XtExposeProc old_label_expose = NULL;old_label_expose297,6643
label_expose(Widget _w, XEvent *_event, Region _region)label_expose300,6705
gui_x11_create_widgets(void)gui_x11_create_widgets380,8798
gui_x11_destroy_widgets(void)gui_x11_destroy_widgets614,15881
gui_mch_set_text_area_pos(gui_mch_set_text_area_pos623,15990
gui_x11_set_back_color(void)gui_x11_set_back_color636,16232
manage_centered(Widget dialog_child)manage_centered653,16546
gui_motif_create_fontlist(XFontStruct *font)gui_motif_create_fontlist710,18232
gui_motif_fontset2fontlist(XFontSet *fontset)gui_motif_fontset2fontlist731,18798
static int menu_enabled = TRUE;menu_enabled762,19535
gui_mch_enable_menu(int flag)gui_mch_enable_menu765,19577
gui_motif_set_mnemonics(int enable)gui_motif_set_mnemonics876,21918
do_set_mnemonics(int enable)do_set_mnemonics888,22177
gui_mch_add_menu(vimmenu_T *menu, int idx)gui_mch_add_menu900,22422
gui_motif_add_actext(vimmenu_T *menu)gui_motif_add_actext1004,25129
gui_mch_toggle_tearoffs(int enable)gui_mch_toggle_tearoffs1020,25487
toggle_tearoff(Widget wid)toggle_tearoff1038,25876
gui_mch_recurse_tearoffs(vimmenu_T *menu)gui_mch_recurse_tearoffs1049,26126
gui_mch_text_area_extra_height(void)gui_mch_text_area_extra_height1065,26407
gui_mch_compute_menu_height(gui_mch_compute_menu_height1079,26784
check_xpm(char_u *path)check_xpm1162,29169
get_toolbar_pixmap(vimmenu_T *menu, char **fname)get_toolbar_pixmap1190,29768
add_pixmap_args(vimmenu_T *menu, Arg *args, int n)add_pixmap_args1231,30750
gui_mch_add_menu_item(vimmenu_T *menu, int idx)gui_mch_add_menu_item1251,31247
gui_motif_update_mousemodel(vimmenu_T *menu)gui_motif_update_mousemodel1408,35640
gui_mch_new_menu_colors(void)gui_mch_new_menu_colors1450,36521
gui_mch_new_menu_font(void)gui_mch_new_menu_font1464,36782
gui_mch_new_tooltip_font(void)gui_mch_new_tooltip_font1489,37299
gui_mch_new_tooltip_colors(void)gui_mch_new_tooltip_colors1504,37536
submenu_change(submenu_change1520,37800
gui_mch_destroy_menu(vimmenu_T *menu)gui_mch_destroy_menu1600,39575
gui_mch_show_popupmenu(vimmenu_T *menu UNUSED)gui_mch_show_popupmenu1655,41193
gui_mch_def_colors(void)gui_mch_def_colors1669,41477
gui_mch_set_scrollbar_thumb(gui_mch_set_scrollbar_thumb1694,42057
gui_mch_set_scrollbar_pos(gui_mch_set_scrollbar_pos1710,42383
gui_mch_enable_scrollbar(scrollbar_T *sb, int flag)gui_mch_enable_scrollbar1744,43006
gui_mch_create_scrollbar(gui_mch_create_scrollbar1799,44064
gui_mch_destroy_scrollbar(scrollbar_T *sb)gui_mch_destroy_scrollbar1856,45783
gui_mch_set_scrollbar_colors(scrollbar_T *sb)gui_mch_set_scrollbar_colors1863,45895
gui_x11_get_wid(void)gui_x11_get_wid1897,46609
do_mnemonic(Widget w, unsigned int keycode)do_mnemonic1909,47003
mnemonic_event(Widget w, XtPointer call_data UNUSED, XKeyEvent *event)mnemonic_event1977,48677
add_mnemonic_grabs(Widget dialog, Widget w)add_mnemonic_grabs1989,49015
activate_dialog_mnemonics(Widget dialog)activate_dialog_mnemonics2039,50362
suppress_dialog_mnemonics(Widget dialog)suppress_dialog_mnemonics2053,50680
set_fontlist(Widget id)set_fontlist2068,51056
typedef struct dialog_callback_argdialog_callback_arg2123,52094
    char *  args;   // not used right nowargs2125,52131
    int	    id;id2126,52173
} dcbarg_T;dcbarg_T2127,52189
static Widget dialog_wgt;dialog_wgt2129,52202
static char *browse_fname = NULL;browse_fname2130,52228
static XmStringCharSet charset = (XmStringCharSet) XmSTRING_DEFAULT_CHARSET;charset2131,52262
set_predefined_label(Widget parent, String name, char *new_label)set_predefined_label2147,52800
set_predefined_fontlist(Widget parent, String name)set_predefined_fontlist2191,53531
gui_mch_browse(gui_mch_browse2207,53802
DialogCancelCB(DialogCancelCB2330,57644
DialogAcceptCB(DialogAcceptCB2347,58004
static int	dialogStatus;dialogStatus2372,58615
keyhit_callback(keyhit_callback2379,58783
butproc(butproc2401,59283
create_pixmap_label(create_pixmap_label2412,59459
gui_mch_dialog(gui_mch_dialog2475,61126
gui_mch_compute_footer_height(void)gui_mch_compute_footer_height2849,70586
gui_mch_enable_footer(int showit)gui_mch_enable_footer2867,71033
gui_mch_set_footer(char_u *s)gui_mch_set_footer2883,71333
gui_mch_show_toolbar(int showit)gui_mch_show_toolbar2900,71602
reset_focus(void)reset_focus3053,75359
gui_mch_compute_toolbar_height(void)gui_mch_compute_toolbar_height3060,75467
motif_get_toolbar_colors(motif_get_toolbar_colors3107,76587
toolbarbutton_enter_cb(toolbarbutton_enter_cb3130,77159
toolbarbutton_leave_cb(toolbarbutton_leave_cb3146,77511
gui_mch_show_tabline(int showit)gui_mch_show_tabline3162,77794
gui_mch_showing_tabline(void)gui_mch_showing_tabline3225,79325
gui_mch_update_tabline(void)gui_mch_update_tabline3234,79465
gui_mch_set_curtab(int nr)gui_mch_set_curtab3331,82200
gui_motif_menu_colors(Widget id)gui_motif_menu_colors3348,82532
gui_motif_scroll_colors(Widget id)gui_motif_scroll_colors3364,82929
gui_motif_menu_fontlist(Widget id UNUSED)gui_motif_menu_fontlist3380,83351
typedef struct _SharedFindReplace_SharedFindReplace3434,84375
    Widget dialog;	// the main dialog widgetdialog3436,84411
    Widget wword;	// 'Exact match' check buttonwword3437,84456
    Widget mcase;	// 'match case' check buttonmcase3438,84504
    Widget up;		// search direction 'Up' radio buttonup3439,84551
    Widget down;	// search direction 'Down' radio buttondown3440,84605
    Widget what;	// 'Find what' entry text widgetwhat3441,84662
    Widget with;	// 'Replace with' entry text widgetwith3442,84712
    Widget find;	// 'Find Next' action buttonfind3443,84765
    Widget replace;	// 'Replace With' action buttonreplace3444,84811
    Widget all;		// 'Replace All' action buttonall3445,84863
    Widget undo;	// 'Undo' action buttonundo3446,84911
    Widget cancel;cancel3448,84953
} SharedFindReplace;SharedFindReplace3449,84972
static SharedFindReplace find_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};find_widgets3451,84994
static SharedFindReplace repl_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};repl_widgets3452,85108
find_replace_destroy_callback(find_replace_destroy_callback3455,85239
find_replace_dismiss_callback(find_replace_dismiss_callback3468,85528
entry_activate_callback(entry_activate_callback3480,85773
find_replace_callback(find_replace_callback3489,85964
find_replace_keypress(find_replace_keypress3543,87193
set_label(Widget w, char *label)set_label3561,87511
find_replace_dialog_create(char_u *arg, int do_replace)find_replace_dialog_create3601,88137
gui_mch_find_dialog(exarg_T *eap)gui_mch_find_dialog3952,98358
gui_mch_replace_dialog(exarg_T *eap)gui_mch_replace_dialog3962,98487
gui_motif_synch_fonts(void)gui_motif_synch_fonts3977,98867

src/gui_photon.c,11177
# define PgColor_t	PgColor_t25,548
# define PhEvent_t	PhEvent_t26,571
# define PhPoint_t	PhPoint_t27,594
# define PtWidget_t	PtWidget_t28,617
# define Pg_BLACK	Pg_BLACK29,641
# define PtCallbackF_t	PtCallbackF_t30,661
# define PtCallbackInfo_t PtCallbackInfo_t31,688
# define PhTile_t	PhTile_t32,718
# define PtWidget_t	PtWidget_t33,740
# define PhImage_t	PhImage_t34,764
#define ARRAY_LENGTH(ARRAY_LENGTH37,795
#define RGB(RGB38,846
#define EVENT_BUFFER_SIZE EVENT_BUFFER_SIZE40,883
#define MOUSE_HIDE	MOUSE_HIDE43,975
#define MOUSE_SHOW	MOUSE_SHOW44,1000
#undef USE_PANEL_GROUPUSE_PANEL_GROUP47,1091
static char	*empty_title = "    ";empty_title50,1138
static char	**panel_titles = NULL;panel_titles51,1173
static ushort_t	num_panels = 0;num_panels52,1208
static short pg_margin_left, pg_margin_right, pg_margin_top, pg_margin_bottom;pg_margin_left53,1240
static short pg_margin_left, pg_margin_right, pg_margin_top, pg_margin_bottom;pg_margin_right53,1240
static short pg_margin_left, pg_margin_right, pg_margin_top, pg_margin_bottom;pg_margin_top53,1240
static short pg_margin_left, pg_margin_right, pg_margin_top, pg_margin_bottom;pg_margin_bottom53,1240
#define GUI_PH_MARGIN	GUI_PH_MARGIN56,1327
#define GUI_PH_MOUSE_TYPE	GUI_PH_MOUSE_TYPE58,1374
static PgColor_t gui_ph_mouse_color =	Pg_BLACK;gui_ph_mouse_color59,1418
static PhPoint_t    gui_ph_raw_offset;gui_ph_raw_offset61,1467
static PtWidget_t   *gui_ph_timer_cursor;   // handle cursor blinkinggui_ph_timer_cursor62,1506
static PtWidget_t   *gui_ph_timer_timeout;  // used in gui_mch_wait_for_charsgui_ph_timer_timeout63,1576
static short	    is_timeout;		    // Has the timeout occurred?is_timeout64,1654
static PhPoint_t    abs_mouse;abs_mouse70,1830
static int is_ignore_draw = FALSE;is_ignore_draw73,1917
static struct PxTransCtrl *charset_translate;charset_translate76,2009
    BLINK_NONE,BLINK_NONE87,2257
    BLINK_OFF,BLINK_OFF88,2273
    BLINK_ONBLINK_ON89,2288
} blink_state = BLINK_NONE;blink_state90,2301
static long_u	blink_waittime	= 700;blink_waittime92,2330
static long_u	blink_ontime	= 400;blink_ontime93,2366
static long_u	blink_offtime	= 250;blink_offtime94,2400
    int	    key_sym;key_sym98,2452
    char_u  vim_code0;vim_code099,2473
    char_u  vim_code1;vim_code1100,2496
} special_keys[] =special_keys101,2519
static PtCallbackF_t gui_ph_handle_timer_cursor;gui_ph_handle_timer_cursor194,4857
static PtCallbackF_t gui_ph_handle_timer_timeout;gui_ph_handle_timer_timeout195,4906
static PtCallbackF_t gui_ph_handle_window_cb;gui_ph_handle_window_cb197,4957
static PtCallbackF_t gui_ph_handle_scrollbar;gui_ph_handle_scrollbar199,5004
static PtCallbackF_t gui_ph_handle_keyboard;gui_ph_handle_keyboard200,5050
static PtCallbackF_t gui_ph_handle_mouse;gui_ph_handle_mouse201,5095
static PtCallbackF_t gui_ph_handle_pulldown_menu;gui_ph_handle_pulldown_menu202,5137
static PtCallbackF_t gui_ph_handle_menu;gui_ph_handle_menu203,5187
static PtCallbackF_t gui_ph_handle_focus;	// focus change of text areagui_ph_handle_focus204,5228
static PtCallbackF_t gui_ph_handle_menu_resize;gui_ph_handle_menu_resize206,5300
static PtCallbackF_t gui_ph_handle_menu_unrealized;gui_ph_handle_menu_unrealized209,5410
static PtWidget_t * gui_ph_show_tooltip(PtWidget_t *window,gui_ph_show_tooltip229,5964
gui_ph_resize_container(void)gui_ph_resize_container267,6772
gui_ph_handle_menu_resize(gui_ph_handle_menu_resize278,6990
gui_ph_handle_timer_cursor(gui_ph_handle_timer_cursor329,8108
gui_ph_handle_timer_timeout(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_handle_timer_timeout352,8568
gui_ph_handle_window_cb(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_handle_window_cb360,8720
gui_ph_handle_scrollbar(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_handle_scrollbar408,9829
gui_ph_handle_keyboard(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_handle_keyboard438,10392
gui_ph_handle_mouse(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_handle_mouse624,14189
gui_ph_handle_focus(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_handle_focus703,16233
gui_ph_handle_raw_draw(PtWidget_t *widget, PhTile_t *damage)gui_ph_handle_raw_draw721,16651
gui_ph_handle_pulldown_menu(gui_ph_handle_pulldown_menu776,17953
gui_ph_handle_menu(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_handle_menu796,18310
gui_ph_handle_menu_unrealized(gui_ph_handle_menu_unrealized810,18581
gui_ph_handle_window_open(gui_ph_handle_window_open820,18755
#define DRAW_START DRAW_START831,18997
#define DRAW_END DRAW_END832,19037
gui_ph_draw_start(void)gui_ph_draw_start838,19129
gui_ph_draw_end(void)gui_ph_draw_end854,19524
gui_ph_find_buffer_item(char_u *name)gui_ph_find_buffer_item863,19748
gui_ph_pg_set_buffer_num(int_u buf_num)gui_ph_pg_set_buffer_num884,20163
gui_ph_handle_pg_change(gui_ph_handle_pg_change911,20755
gui_ph_get_panelgroup_margins(gui_ph_get_panelgroup_margins933,21133
gui_ph_is_buffer_item(vimmenu_T *menu, vimmenu_T *parent)gui_ph_is_buffer_item963,21922
gui_ph_pg_add_buffer(char *name)gui_ph_pg_add_buffer985,22276
gui_ph_pg_remove_buffer(char *name)gui_ph_pg_remove_buffer1006,22723
gui_ph_handle_buffer_remove(gui_ph_handle_buffer_remove1047,23601
gui_ph_pane_resize(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_pane_resize1065,23864
gui_ph_encoding_changed(int new_encoding)gui_ph_encoding_changed1080,24196
gui_mch_prepare(int *argc, char **argv)gui_mch_prepare1108,24783
gui_mch_init(void)gui_mch_init1114,24854
gui_mch_init_check(void)gui_mch_init_check1286,30607
gui_mch_open(void)gui_mch_open1292,30699
gui_mch_exit(int rc)gui_mch_exit1312,31110
exit_gui_mch_update(void *data)exit_gui_mch_update1333,31553
gui_mch_update(void)gui_mch_update1340,31644
gui_mch_wait_for_chars(int wtime)gui_mch_wait_for_chars1350,31839
gui_mch_browse(gui_mch_browse1383,32642
static PtWidget_t *gui_ph_dialog_text = NULL;gui_ph_dialog_text1452,33907
gui_ph_dialog_close(int button, void *data)gui_ph_dialog_close1455,33969
gui_ph_dialog_text_enter(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_dialog_text_enter1473,34411
gui_ph_dialog_esc(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)gui_ph_dialog_esc1481,34617
gui_mch_dialog(gui_mch_dialog1495,34923
gui_mch_get_winpos(int *x, int *y)gui_mch_get_winpos1643,38775
gui_mch_set_winpos(int x, int y)gui_mch_set_winpos1656,38940
gui_mch_set_shellsize(int width, int height,gui_mch_set_shellsize1664,39073
gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)gui_mch_get_screen_dimensions1688,39753
gui_mch_iconify(void)gui_mch_iconify1700,40033
gui_mch_set_foreground(void)gui_mch_set_foreground1716,40381
gui_mch_settitle(char_u *title,	char_u *icon)gui_mch_settitle1729,40657
gui_mch_set_scrollbar_thumb(scrollbar_T *sb, int val, int size, int max)gui_mch_set_scrollbar_thumb1742,41032
gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h)gui_mch_set_scrollbar_pos1754,41362
gui_mch_create_scrollbar(scrollbar_T *sb, int orient)gui_mch_create_scrollbar1762,41540
gui_mch_enable_scrollbar(scrollbar_T *sb, int flag)gui_mch_enable_scrollbar1809,42959
gui_mch_destroy_scrollbar(scrollbar_T *sb)gui_mch_destroy_scrollbar1818,43107
static int last_shape = 0;last_shape1830,43452
static int mshape_ids[] =mshape_ids1834,43563
mch_set_mouse_shape(int shape)mch_set_mouse_shape1856,44208
gui_mch_mousehide(int hide)gui_mch_mousehide1881,44662
gui_mch_getmouse(int *x, int *y)gui_mch_getmouse1901,45072
gui_mch_setmouse(int x, int y)gui_mch_setmouse1916,45400
gui_mch_get_rgb(guicolor_T pixel)gui_mch_get_rgb1932,45766
gui_mch_new_colors(void)gui_mch_new_colors1939,45915
gui_mch_get_color(char_u *name)gui_mch_get_color1979,46925
gui_mch_get_rgb_color(int r, int g, int b)gui_mch_get_rgb_color1985,47013
gui_mch_set_fg_color(guicolor_T color)gui_mch_set_fg_color1991,47113
gui_mch_set_bg_color(guicolor_T color)gui_mch_set_bg_color1997,47193
gui_mch_set_sp_color(guicolor_T color)gui_mch_set_sp_color2003,47273
gui_mch_invert_rectangle(int row, int col, int nr, int nc)gui_mch_invert_rectangle2008,47326
gui_mch_clear_block(int row1, int col1, int row2, int col2)gui_mch_clear_block2031,47842
gui_mch_clear_all(void)gui_mch_clear_all2045,48137
gui_mch_delete_lines(int row, int num_lines)gui_mch_delete_lines2063,48513
gui_mch_insert_lines(int row, int num_lines)gui_mch_insert_lines2093,49294
gui_mch_draw_string(int row, int col, char_u *s, int len, int flags)gui_mch_draw_string2120,50039
gui_mch_draw_hollow_cursor(guicolor_T color)gui_mch_draw_hollow_cursor2200,51696
gui_mch_draw_part_cursor(int w, int h, guicolor_T color)gui_mch_draw_part_cursor2218,52052
gui_mch_is_blinking(void)gui_mch_is_blinking2234,52377
gui_mch_is_blink_off(void)gui_mch_is_blink_off2240,52454
gui_mch_set_blinking(long wait, long on, long off)gui_mch_set_blinking2246,52532
gui_mch_start_blink(void)gui_mch_start_blink2254,52672
gui_mch_stop_blink(int may_call_gui_update_cursor)gui_mch_stop_blink2267,52998
gui_mch_beep(void)gui_mch_beep2281,53365
gui_mch_flash(int msec)gui_mch_flash2287,53412
gui_mch_flush(void)gui_mch_flush2302,53695
gui_mch_set_text_area_pos(int x, int y, int w, int h)gui_mch_set_text_area_pos2308,53744
gui_mch_haskey(char_u *name)gui_mch_haskey2316,53909
static PhImage_t *gui_ph_toolbar_images[] = {gui_ph_toolbar_images2333,54255
gui_ph_toolbar_load_icon(char_u *iconfile)gui_ph_toolbar_load_icon2368,54949
gui_ph_toolbar_find_icon(vimmenu_T *menu)gui_ph_toolbar_find_icon2395,55785
gui_mch_enable_menu(int flag)gui_mch_enable_menu2426,56598
gui_mch_set_menu_pos(int x, int y, int w, int h)gui_mch_set_menu_pos2435,56740
gui_ph_position_menu(PtWidget_t *widget, int priority)gui_ph_position_menu2444,56886
gui_mch_add_menu(vimmenu_T *menu, int index)gui_mch_add_menu2475,57655
gui_mch_add_menu_item(vimmenu_T *menu, int index)gui_mch_add_menu_item2546,59501
gui_mch_destroy_menu(vimmenu_T *menu)gui_mch_destroy_menu2647,62507
gui_mch_menu_grey(vimmenu_T *menu, int grey)gui_mch_menu_grey2659,62734
gui_mch_menu_hidden(vimmenu_T *menu, int hidden)gui_mch_menu_hidden2687,63249
gui_mch_draw_menubar(void)gui_mch_draw_menubar2693,63349
gui_mch_show_popupmenu(vimmenu_T *menu)gui_mch_show_popupmenu2701,63557
gui_mch_toggle_tearoffs(int enable)gui_mch_toggle_tearoffs2708,63714
gui_mch_show_toolbar(int showit)gui_mch_show_toolbar2717,63839
gui_ph_get_font(gui_ph_get_font2730,64085
gui_ph_parse_font_name(gui_ph_parse_font_name2788,65277
gui_mch_init_font(char_u *vim_font_name, int fontset)gui_mch_init_font2836,66185
gui_mch_adjust_charheight(void)gui_mch_adjust_charheight2906,67824
gui_mch_get_font(char_u *vim_font_name, int report_error)gui_mch_get_font2919,68085
gui_mch_get_fontname(GuiFont font, char_u *name)gui_mch_get_fontname2948,68761
gui_mch_set_font(GuiFont font)gui_mch_set_font2957,68897
gui_mch_free_font(GuiFont font)gui_mch_free_font2963,68963

src/gui_w32.c,28090
static DWriteContext *s_dwc = NULL;s_dwc33,934
static int s_directx_enabled = 0;s_directx_enabled34,970
static int s_directx_load_attempted = 0;s_directx_load_attempted35,1004
# define IS_ENABLE_DIRECTX(IS_ENABLE_DIRECTX36,1045
gui_mch_set_rendering_options(char_u *s)gui_mch_set_rendering_options47,1337
# define HANDLE_WM_XBUTTONUP(HANDLE_WM_XBUTTONUP169,4079
# define HANDLE_WM_XBUTTONDOWN(HANDLE_WM_XBUTTONDOWN173,4267
# define HANDLE_WM_XBUTTONDBLCLK(HANDLE_WM_XBUTTONDBLCLK177,4466
# define MENUHINTS	MENUHINTS205,5080
#define DLG_PADDING_X	DLG_PADDING_X209,5196
#define DLG_PADDING_Y	DLG_PADDING_Y210,5222
#define DLG_OLD_STYLE_PADDING_X	DLG_OLD_STYLE_PADDING_X211,5248
#define DLG_OLD_STYLE_PADDING_Y	DLG_OLD_STYLE_PADDING_Y212,5282
#define DLG_VERT_PADDING_X	DLG_VERT_PADDING_X213,5316
#define DLG_VERT_PADDING_Y	DLG_VERT_PADDING_Y214,5369
#define DLG_ICON_WIDTH	DLG_ICON_WIDTH215,5398
#define DLG_ICON_HEIGHT	DLG_ICON_HEIGHT216,5425
#define DLG_MIN_WIDTH	DLG_MIN_WIDTH217,5453
#define DLG_FONT_NAME	DLG_FONT_NAME218,5480
#define DLG_FONT_POINT_SIZE	DLG_FONT_POINT_SIZE219,5519
#define DLG_MIN_MAX_WIDTH	DLG_MIN_MAX_WIDTH220,5549
#define DLG_MIN_MAX_HEIGHT	DLG_MIN_MAX_HEIGHT221,5579
#define DLG_NONBUTTON_CONTROL	DLG_NONBUTTON_CONTROL223,5611
# define WM_XBUTTONDOWN	WM_XBUTTONDOWN226,5731
# define WM_XBUTTONUP	WM_XBUTTONUP227,5763
# define WM_XBUTTONDBLCLK	WM_XBUTTONDBLCLK228,5793
# define MK_XBUTTON1	MK_XBUTTON1229,5826
# define MK_XBUTTON2	MK_XBUTTON2230,5855
# define APIENTRYAPIENTRY238,6042
# define CALLBACKCALLBACK239,6060
# define CONSTCONST240,6078
# define FARFAR241,6093
# define NEARNEAR242,6106
# undef _cdecl_cdecl243,6120
# define _cdecl_cdecl244,6135
typedef int BOOL;BOOL245,6151
typedef int BYTE;BYTE246,6169
typedef int DWORD;DWORD247,6187
typedef int WCHAR;WCHAR248,6206
typedef int ENUMLOGFONT;ENUMLOGFONT249,6225
typedef int FINDREPLACE;FINDREPLACE250,6250
typedef int HANDLE;HANDLE251,6275
typedef int HBITMAP;HBITMAP252,6295
typedef int HBRUSH;HBRUSH253,6316
typedef int HDROP;HDROP254,6336
typedef int INT;INT255,6355
typedef int LOGFONTW[];LOGFONTW256,6372
typedef int LPARAM;LPARAM257,6396
typedef int LPCREATESTRUCT;LPCREATESTRUCT258,6416
typedef int LPCSTR;LPCSTR259,6444
typedef int LPCTSTR;LPCTSTR260,6464
typedef int LPRECT;LPRECT261,6485
typedef int LPSTR;LPSTR262,6505
typedef int LPWINDOWPOS;LPWINDOWPOS263,6524
typedef int LPWORD;LPWORD264,6549
typedef int LRESULT;LRESULT265,6569
typedef int HRESULT;HRESULT266,6590
# undef MSGMSG267,6611
typedef int MSG;MSG268,6623
typedef int NEWTEXTMETRIC;NEWTEXTMETRIC269,6640
typedef int OSVERSIONINFO;OSVERSIONINFO270,6667
typedef int PWORD;PWORD271,6694
typedef int RECT;RECT272,6713
typedef int UINT;UINT273,6731
typedef int WORD;WORD274,6749
typedef int WPARAM;WPARAM275,6767
typedef int POINT;POINT276,6787
typedef void *HINSTANCE;HINSTANCE277,6806
typedef void *HMENU;HMENU278,6831
typedef void *HWND;HWND279,6852
typedef void *HDC;HDC280,6872
typedef void VOID;VOID281,6891
typedef int LPNMHDR;LPNMHDR282,6910
typedef int LONG;LONG283,6931
typedef int WNDPROC;WNDPROC284,6949
typedef int UINT_PTR;UINT_PTR285,6970
typedef int COLORREF;COLORREF286,6992
typedef int HCURSOR;HCURSOR287,7014
# define GET_X_LPARAM(GET_X_LPARAM291,7064
static WORD		s_dlgfntheight;		// height of the dialog fonts_dlgfntheight298,7261
static WORD		s_dlgfntwidth;		// width of the dialog fonts_dlgfntwidth299,7320
static HMENU		s_menuBar = NULL;s_menuBar302,7395
static HBITMAP	s_htearbitmap;	    // bitmap used to indicate tearoffs_htearbitmap306,7500
static int		s_busy_processing = FALSE;s_busy_processing311,7687
static int		destroying = FALSE;	// call DestroyWindow() ourselvesdestroying313,7727
static UINT		s_findrep_msg = 0;	// set in gui_w[16/32].cs_findrep_msg316,7820
static FINDREPLACEW	s_findrep_struct;s_findrep_struct317,7877
static HWND		s_findrep_hwnd = NULL;s_findrep_hwnd318,7915
static int		s_findrep_is_find;	// TRUE for find dialog, FALSEs_findrep_is_find319,7951
HWND			s_hwnd = NULL;s_hwnd326,8091
static HDC		s_hdc = NULL;s_hdc327,8113
static HBRUSH		s_brush = NULL;s_brush328,8139
static HWND		s_toolbarhwnd = NULL;s_toolbarhwnd331,8191
static WNDPROC		s_toolbar_wndproc = NULL;s_toolbar_wndproc332,8226
static HWND		s_tabhwnd = NULL;s_tabhwnd336,8300
static WNDPROC		s_tabline_wndproc = NULL;s_tabline_wndproc337,8331
static int		showing_tabline = 0;showing_tabline338,8373
static WPARAM		s_wParam = 0;s_wParam341,8414
static LPARAM		s_lParam = 0;s_lParam342,8443
static HWND		s_textArea = NULL;s_textArea344,8473
static UINT		s_uMsg = 0;s_uMsg345,8505
static char_u		*s_textfield; // Used by dialogs to pass back stringss_textfield347,8531
static int		s_need_activate = FALSE;s_need_activate349,8601
static int allow_scrollbar = FALSE;allow_scrollbar355,8913
# define MyTranslateMessage(MyTranslateMessage358,8968
# define MyTranslateMessage(MyTranslateMessage360,9036
directx_enabled(void)directx_enabled365,9136
directx_binddc(void)directx_binddc380,9426
#define MyWindowProc MyWindowProc392,9633
    UINT    key_sym;key_sym398,9748
    char_u  vim_code0;vim_code0399,9769
    char_u  vim_code1;vim_code1400,9792
} special_keys[] =special_keys401,9815
static int	s_button_pending = -1;s_button_pending477,11618
static int	s_getting_focus = FALSE;s_getting_focus481,11768
static int	s_x_pending;s_x_pending483,11805
static int	s_y_pending;s_y_pending484,11829
static UINT	s_kFlags_pending;s_kFlags_pending485,11853
static UINT	s_wait_timer = 0;	  // Timer for get char from users_wait_timer486,11883
static int	s_timed_out = FALSE;s_timed_out487,11947
static int	dead_key = 0;		  // 0: no dead key, 1: dead key presseddead_key488,11979
static UINT	surrogate_pending_ch = 0; // 0: no surrogate pending,surrogate_pending_ch489,12046
static LOGFONTW norm_logfont;norm_logfont505,12489
static LOGFONTW sub_logfont;sub_logfont509,12588
print_windows_error(void)print_windows_error525,12893
#define BLINK_NONE BLINK_NONE547,13390
#define BLINK_OFF BLINK_OFF548,13412
#define BLINK_ON BLINK_ON549,13434
static int		blink_state = BLINK_NONE;blink_state551,13457
static long_u		blink_waittime = 700;blink_waittime552,13495
static long_u		blink_ontime = 400;blink_ontime553,13532
static long_u		blink_offtime = 250;blink_offtime554,13567
static UINT		blink_timer = 0;blink_timer555,13603
gui_mch_is_blinking(void)gui_mch_is_blinking558,13642
gui_mch_is_blink_off(void)gui_mch_is_blink_off564,13719
gui_mch_set_blinking(long wait, long on, long off)gui_mch_set_blinking570,13797
_OnBlinkTimer(_OnBlinkTimer578,13953
gui_mswin_rm_blink_timer(void)gui_mswin_rm_blink_timer614,14705
gui_mch_stop_blink(int may_call_gui_update_cursor)gui_mch_stop_blink632,15033
gui_mch_start_blink(void)gui_mch_start_blink648,15409
_OnTimer(_OnTimer668,15848
_OnDeadChar(_OnDeadChar690,16283
char_to_string(int ch, char_u *string, int slen, int had_alt)char_to_string710,16955
_OnChar(_OnChar796,19055
_OnSysChar(_OnSysChar820,19452
_OnMouseEvent(_OnMouseEvent880,21042
_OnMouseButtonDown(_OnMouseButtonDown902,21480
# define GET_XBUTTON_WPARAM(GET_XBUTTON_WPARAM927,22199
_OnMouseMoveOrRelease(_OnMouseMoveOrRelease1000,24348
_OnSizeTextArea(_OnSizeTextArea1048,25330
gui_mswin_find_menu(gui_mswin_find_menu1065,25603
_OnMenu(_OnMenu1090,25980
_OnFindRepl(void)_OnFindRepl1109,26286
HandleMouseHide(UINT uMsg, LPARAM lParam)HandleMouseHide1160,27465
_TextAreaWndProc(_TextAreaWndProc1214,28821
typedef int WINAPI;WINAPI1263,30217
vim_WindowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)vim_WindowProc1267,30264
gui_mch_new_colors(void)gui_mch_new_colors1280,30580
gui_mch_def_colors(void)gui_mch_def_colors1295,30902
gui_mch_open(void)gui_mch_open1307,31199
gui_mch_get_winpos(int *x, int *y)gui_mch_get_winpos1327,31662
gui_mch_set_winpos(int x, int y)gui_mch_set_winpos1342,31911
gui_mch_set_text_area_pos(int x, int y, int w, int h)gui_mch_set_text_area_pos1348,32048
gui_mch_enable_scrollbar(gui_mch_enable_scrollbar1392,33087
gui_mch_set_scrollbar_pos(gui_mch_set_scrollbar_pos1404,33394
gui_mch_create_scrollbar(gui_mch_create_scrollbar1416,33605
gui_mswin_find_scrollbar(HWND hwnd)gui_mswin_find_scrollbar1433,33999
GetFontSize(GuiFont font)GetFontSize1453,34407
gui_mch_adjust_charheight(void)gui_mch_adjust_charheight1480,35112
get_font_handle(LOGFONTW *lf)get_font_handle1487,35215
pixels_to_points(int pixels, int vertical)pixels_to_points1501,35414
gui_mch_get_font(gui_mch_get_font1519,35724
gui_mch_get_fontname(GuiFont font UNUSED, char_u *name)gui_mch_get_fontname1539,36207
gui_mch_free_font(GuiFont font)gui_mch_free_font1548,36350
gui_mch_get_color(char_u *name)gui_mch_get_color1559,36543
gui_mch_get_rgb_color(int r, int g, int b)gui_mch_get_rgb_color1617,38223
gui_mch_haskey(char_u *name)gui_mch_haskey1626,38396
gui_mch_beep(void)gui_mch_beep1638,38628
gui_mch_invert_rectangle(gui_mch_invert_rectangle1646,38763
gui_mch_iconify(void)gui_mch_iconify1673,39259
gui_mch_draw_hollow_cursor(guicolor_T color)gui_mch_draw_hollow_cursor1682,39371
gui_mch_draw_part_cursor(gui_mch_draw_part_cursor1710,40032
outputDeadKey_rePost(MSG originalMsg)outputDeadKey_rePost1739,40683
process_message(void)process_message1766,41322
gui_mch_update(void)gui_mch_update2022,48399
remove_any_timer(void)remove_any_timer2033,48600
gui_mch_wait_for_chars(int wtime)gui_mch_wait_for_chars2058,49210
gui_mch_clear_block(gui_mch_clear_block2160,51379
gui_mch_clear_all(void)gui_mch_clear_all2184,51892
gui_mch_enable_menu(int flag)gui_mch_enable_menu2199,52150
gui_mch_set_menu_pos(gui_mch_set_menu_pos2207,52264
gui_mch_menu_hidden(gui_mch_menu_hidden2221,52519
gui_mch_draw_menubar(void)gui_mch_draw_menubar2241,52967
gui_mch_get_rgb(guicolor_T pixel)gui_mch_get_rgb2251,53112
PixelToDialogX(int numPixels)PixelToDialogX2262,53366
PixelToDialogY(int numPixels)PixelToDialogY2271,53515
GetTextWidth(HDC hdc, char_u *str, int len)GetTextWidth2280,53690
GetTextWidthEnc(HDC hdc, char_u *str, int len)GetTextWidthEnc2293,53979
CenterWindow(CenterWindow2319,54517
gui_mch_show_toolbar(int showit)gui_mch_show_toolbar2377,56112
#  define TB_SETUNICODEFORMAT TB_SETUNICODEFORMAT2386,56298
# define TOOLBAR_BITMAP_COUNT TOOLBAR_BITMAP_COUNT2398,56598
add_tabline_popup_menu_entry(HMENU pmenu, UINT item_id, char_u *item_text)add_tabline_popup_menu_entry2404,56704
show_tabline_popup_menu(void)show_tabline_popup_menu2424,57176
gui_mch_show_tabline(int showit)gui_mch_show_tabline2481,58346
gui_mch_showing_tabline(void)gui_mch_showing_tabline2500,58647
gui_mch_update_tabline(void)gui_mch_update_tabline2509,58784
#  define CCM_SETUNICODEFORMAT CCM_SETUNICODEFORMAT2523,59065
gui_mch_set_curtab(int nr)gui_mch_set_curtab2584,60660
ex_simalt(exarg_T *eap)ex_simalt2599,60862
initialise_findrep(char_u *initial_string)initialise_findrep2636,61805
set_window_title(HWND hwnd, char *title)set_window_title2668,62574
gui_mch_find_dialog(exarg_T *eap)gui_mch_find_dialog2687,62905
gui_mch_replace_dialog(exarg_T *eap)gui_mch_replace_dialog2711,63374
gui_mch_mousehide(int hide)gui_mch_mousehide2738,63893
gui_mch_show_popupmenu_at(vimmenu_T *menu, int x, int y)gui_mch_show_popupmenu_at2749,64055
_OnEndSession(void)_OnEndSession2772,64530
_OnClose(HWND hwnd UNUSED)_OnClose2782,64715
_OnDestroy(HWND hwnd)_OnDestroy2791,64847
_OnPaint(_OnPaint2798,64928
_OnSize(_OnSize2831,65549
_OnSetFocus(_OnSetFocus2849,65805
_OnKillFocus(_OnKillFocus2859,66001
_OnActivateApp(_OnActivateApp2872,66263
gui_mch_destroy_scrollbar(scrollbar_T *sb)gui_mch_destroy_scrollbar2883,66519
gui_mch_getmouse(int *x, int *y)gui_mch_getmouse2892,66659
gui_mch_setmouse(int x, int y)gui_mch_setmouse2907,66934
gui_mswin_get_valid_dimensions(gui_mswin_get_valid_dimensions2917,67144
gui_mch_flash(int msec)gui_mch_flash2943,67802
get_scroll_flags(void)get_scroll_flags2973,68479
intel_gpu_workaround(void)intel_gpu_workaround3006,69530
gui_mch_delete_lines(gui_mch_delete_lines3016,69753
gui_mch_insert_lines(gui_mch_insert_lines3058,70949
gui_mch_exit(int rc UNUSED)gui_mch_exit3092,71795
logfont2name(LOGFONTW lf)logfont2name3121,72328
update_im_font(void)update_im_font3186,73815
gui_mch_wide_font_changed(void)gui_mch_wide_font_changed3204,74204
gui_mch_init_font(char_u *font_name, int fontset UNUSED)gui_mch_init_font3246,75111
# define WPF_RESTORETOMAXIMIZED WPF_RESTORETOMAXIMIZED3318,76624
gui_mch_maximized(void)gui_mch_maximized3325,76796
gui_mch_newfont(void)gui_mch_newfont3344,77252
gui_mch_settitle(gui_mch_settitle3379,77977
static LPCSTR mshape_idcs[] =mshape_idcs3389,78248
mch_set_mouse_shape(int shape)mch_set_mouse_shape3411,78769
convert_filterW(char_u *s)convert_filterW3442,79370
gui_mch_browse(gui_mch_browse3468,80112
convert_filter(char_u *s)convert_filter3593,83269
gui_mch_browsedir(char_u *title, char_u *initdir)gui_mch_browsedir3619,83735
_OnDropFiles(_OnDropFiles3629,84067
#define BUFPATHLEN BUFPATHLEN3633,84122
#define DRAGQVAL DRAGQVAL3634,84151
_OnScroll(_OnScroll3683,85289
# define WINAPIWINAPI3800,87966
#  define     IsMinimized(IsMinimized3809,88125
#  define     IsMaximized(IsMaximized3812,88202
#  define     SelectFont(SelectFont3815,88278
#  define     GetStockBrush(GetStockBrush3818,88401
#  define     DeleteBrush(DeleteBrush3821,88493
#  define HANDLE_WM_RBUTTONDBLCLK(HANDLE_WM_RBUTTONDBLCLK3825,88607
#  define HANDLE_WM_MBUTTONUP(HANDLE_WM_MBUTTONUP3829,88807
#  define HANDLE_WM_MBUTTONDBLCLK(HANDLE_WM_MBUTTONDBLCLK3833,89001
#  define HANDLE_WM_LBUTTONDBLCLK(HANDLE_WM_LBUTTONDBLCLK3837,89205
#  define HANDLE_WM_RBUTTONDOWN(HANDLE_WM_RBUTTONDOWN3841,89407
#  define HANDLE_WM_MOUSEMOVE(HANDLE_WM_MOUSEMOVE3845,89606
#  define HANDLE_WM_RBUTTONUP(HANDLE_WM_RBUTTONUP3849,89796
#  define HANDLE_WM_MBUTTONDOWN(HANDLE_WM_MBUTTONDOWN3853,89988
#  define HANDLE_WM_LBUTTONUP(HANDLE_WM_LBUTTONUP3857,90187
#  define HANDLE_WM_LBUTTONDOWN(HANDLE_WM_LBUTTONDOWN3861,90379
#  define HANDLE_WM_SYSCHAR(HANDLE_WM_SYSCHAR3865,90576
#  define HANDLE_WM_ACTIVATEAPP(HANDLE_WM_ACTIVATEAPP3869,90739
#  define HANDLE_WM_WINDOWPOSCHANGING(HANDLE_WM_WINDOWPOSCHANGING3873,90900
#  define HANDLE_WM_VSCROLL(HANDLE_WM_VSCROLL3877,91063
#  define HANDLE_WM_SETFOCUS(HANDLE_WM_SETFOCUS3881,91247
#  define HANDLE_WM_KILLFOCUS(HANDLE_WM_KILLFOCUS3885,91380
#  define HANDLE_WM_HSCROLL(HANDLE_WM_HSCROLL3889,91512
#  define HANDLE_WM_DROPFILES(HANDLE_WM_DROPFILES3893,91696
#  define HANDLE_WM_CHAR(HANDLE_WM_CHAR3897,91826
#  define HANDLE_WM_SYSDEADCHAR(HANDLE_WM_SYSDEADCHAR3901,91986
#  define HANDLE_WM_DEADCHAR(HANDLE_WM_DEADCHAR3905,92150
#define TEAROFF_PADDING_X	TEAROFF_PADDING_X3912,92361
#define TEAROFF_BUTTON_PAD_X	TEAROFF_BUTTON_PAD_X3913,92389
#define TEAROFF_MIN_WIDTH	TEAROFF_MIN_WIDTH3914,92420
#define TEAROFF_SUBMENU_LABEL	TEAROFF_SUBMENU_LABEL3915,92450
#define TEAROFF_COLUMN_PADDING	TEAROFF_COLUMN_PADDING3916,92485
# define WM_MOUSEWHEEL	WM_MOUSEWHEEL3921,92599
# define ID_BEVAL_TOOLTIP ID_BEVAL_TOOLTIP3926,92659
# define BEVAL_TEXT_LEN	BEVAL_TEXT_LEN3927,92691
#  undef  UINT_PTRUINT_PTR3932,92893
#  define UINT_PTR UINT_PTR3933,92912
static BalloonEval  *cur_beval = NULL;cur_beval3936,92945
static UINT_PTR	    BevalTimerId = 0;BevalTimerId3937,92984
static DWORD	    LastActivity = 0;LastActivity3938,93022
typedef struct _DllVersionInfo_DllVersionInfo3952,93248
    DWORD cbSize;cbSize3954,93281
    DWORD dwMajorVersion;dwMajorVersion3955,93299
    DWORD dwMinorVersion;dwMinorVersion3956,93325
    DWORD dwBuildNumber;dwBuildNumber3957,93351
    DWORD dwPlatformID;dwPlatformID3958,93376
} DLLVERSIONINFO;DLLVERSIONINFO3959,93400
typedef struct tagTOOLINFOA_NEWtagTOOLINFOA_NEW3965,93466
    UINT       cbSize;cbSize3967,93500
    UINT       uFlags;uFlags3968,93523
    HWND       hwnd;hwnd3969,93546
    UINT_PTR   uId;uId3970,93567
    RECT       rect;rect3971,93587
    HINSTANCE  hinst;hinst3972,93608
    LPSTR      lpszText;lpszText3973,93630
    LPARAM     lParam;lParam3974,93655
} TOOLINFO_NEW;TOOLINFO_NEW3975,93678
typedef struct tagNMTTDISPINFO_NEWtagNMTTDISPINFO_NEW3977,93695
    NMHDR      hdr;hdr3979,93732
    LPSTR      lpszText;lpszText3980,93752
    char       szText[80];szText3981,93777
    HINSTANCE  hinst;hinst3982,93804
    UINT       uFlags;uFlags3983,93826
    LPARAM     lParam;lParam3984,93849
} NMTTDISPINFO_NEW;NMTTDISPINFO_NEW3985,93872
typedef struct tagTOOLINFOW_NEWtagTOOLINFOW_NEW3987,93893
    UINT       cbSize;cbSize3989,93927
    UINT       uFlags;uFlags3990,93950
    HWND       hwnd;hwnd3991,93973
    UINT_PTR   uId;uId3992,93994
    RECT       rect;rect3993,94014
    HINSTANCE  hinst;hinst3994,94035
    LPWSTR     lpszText;lpszText3995,94057
    LPARAM     lParam;lParam3996,94082
    void       *lpReserved;lpReserved3997,94105
} TOOLINFOW_NEW;TOOLINFOW_NEW3998,94133
typedef struct tagNMTTDISPINFOW_NEWtagNMTTDISPINFOW_NEW4000,94151
    NMHDR      hdr;hdr4002,94189
    LPWSTR     lpszText;lpszText4003,94209
    WCHAR      szText[80];szText4004,94234
    HINSTANCE  hinst;hinst4005,94261
    UINT       uFlags;uFlags4006,94283
    LPARAM     lParam;lParam4007,94306
} NMTTDISPINFOW_NEW;NMTTDISPINFOW_NEW4008,94329
typedef HRESULT (WINAPI* DLLGETVERSIONPROC)(DLLVERSIONINFO *);DLLGETVERSIONPROC4011,94352
#  define TTM_SETMAXTIPWIDTH	TTM_SETMAXTIPWIDTH4013,94443
#  define TTF_DI_SETITEM	TTF_DI_SETITEM4017,94518
#  define TTN_GETDISPINFO	TTN_GETDISPINFO4021,94585
typedef struct tagNMTTDISPINFOA {tagNMTTDISPINFOA4032,94990
    NMHDR	hdr;hdr4033,95024
    LPSTR	lpszText;lpszText4034,95039
    char	szText[80];szText4035,95059
    HINSTANCE	hinst;hinst4036,95080
    UINT	uFlags;uFlags4037,95101
    LPARAM	lParam;lParam4038,95118
} NMTTDISPINFOA, *LPNMTTDISPINFOA;NMTTDISPINFOA4039,95137
} NMTTDISPINFOA, *LPNMTTDISPINFOA;LPNMTTDISPINFOA4039,95137
#  define LPNMTTDISPINFO LPNMTTDISPINFO4040,95172
typedef struct tagNMTTDISPINFOW {tagNMTTDISPINFOW4042,95214
    NMHDR	hdr;hdr4043,95248
    LPWSTR	lpszText;lpszText4044,95263
    WCHAR	szText[80];szText4045,95284
    HINSTANCE	hinst;hinst4046,95306
    UINT	uFlags;uFlags4047,95327
    LPARAM	lParam;lParam4048,95344
} NMTTDISPINFOW, *LPNMTTDISPINFOW;NMTTDISPINFOW4049,95363
} NMTTDISPINFOW, *LPNMTTDISPINFOW;LPNMTTDISPINFOW4049,95363
# define TTN_GETDISPINFOW	TTN_GETDISPINFOW4054,95439
static UINT	s_menu_id = 100;s_menu_id4060,95528
#define USE_SYSMENU_FONTUSE_SYSMENU_FONT4067,95670
#define VIM_NAME	VIM_NAME4069,95696
#define VIM_CLASSW	VIM_CLASSW4070,95719
#define DLG_ALLOC_SIZE DLG_ALLOC_SIZE4075,95915
static int dialog_default_button = -1;dialog_default_button4098,96405
static int mouse_scroll_lines = 0;mouse_scroll_lines4101,96469
static int	s_usenewlook;	    // emulate W95/NT4 non-bold dialogss_usenewlook4103,96505
typedef struct tagCOMPOSITIONFORM {tagCOMPOSITIONFORM4121,97167
    DWORD dwStyle;dwStyle4122,97203
    POINT ptCurrentPos;ptCurrentPos4123,97222
    RECT  rcArea;rcArea4124,97246
} COMPOSITIONFORM, *PCOMPOSITIONFORM, NEAR *NPCOMPOSITIONFORM, FAR *LPCOMPOSITIONFORM;COMPOSITIONFORM4125,97264
} COMPOSITIONFORM, *PCOMPOSITIONFORM, NEAR *NPCOMPOSITIONFORM, FAR *LPCOMPOSITIONFORM;PCOMPOSITIONFORM4125,97264
} COMPOSITIONFORM, *PCOMPOSITIONFORM, NEAR *NPCOMPOSITIONFORM, FAR *LPCOMPOSITIONFORM;NPCOMPOSITIONFORM4125,97264
} COMPOSITIONFORM, *PCOMPOSITIONFORM, NEAR *NPCOMPOSITIONFORM, FAR *LPCOMPOSITIONFORM;LPCOMPOSITIONFORM4125,97264
typedef HANDLE HIMC;HIMC4126,97351
static HINSTANCE hLibImm = NULL;hLibImm4129,97381
static LONG (WINAPI *pImmGetCompositionStringA)(HIMC, DWORD, LPVOID, DWORD);pImmGetCompositionStringA4130,97414
static LONG (WINAPI *pImmGetCompositionStringW)(HIMC, DWORD, LPVOID, DWORD);pImmGetCompositionStringW4131,97491
static HIMC (WINAPI *pImmGetContext)(HWND);pImmGetContext4132,97568
static HIMC (WINAPI *pImmAssociateContext)(HWND, HIMC);pImmAssociateContext4133,97612
static BOOL (WINAPI *pImmReleaseContext)(HWND, HIMC);pImmReleaseContext4134,97668
static BOOL (WINAPI *pImmGetOpenStatus)(HIMC);pImmGetOpenStatus4135,97722
static BOOL (WINAPI *pImmSetOpenStatus)(HIMC, BOOL);pImmSetOpenStatus4136,97769
static BOOL (WINAPI *pImmGetCompositionFontW)(HIMC, LPLOGFONTW);pImmGetCompositionFontW4137,97822
static BOOL (WINAPI *pImmSetCompositionFontW)(HIMC, LPLOGFONTW);pImmSetCompositionFontW4138,97887
static BOOL (WINAPI *pImmSetCompositionWindow)(HIMC, LPCOMPOSITIONFORM);pImmSetCompositionWindow4139,97952
static BOOL (WINAPI *pImmGetConversionStatus)(HIMC, LPDWORD, LPDWORD);pImmGetConversionStatus4140,98025
static BOOL (WINAPI *pImmSetConversionStatus)(HIMC, DWORD, DWORD);pImmSetConversionStatus4141,98096
# define pImmGetCompositionStringA pImmGetCompositionStringA4144,98201
# define pImmGetCompositionStringW pImmGetCompositionStringW4145,98261
# define pImmGetContext	pImmGetContext4146,98321
# define pImmAssociateContext	pImmAssociateContext4147,98362
# define pImmReleaseContext	pImmReleaseContext4148,98414
# define pImmGetOpenStatus	pImmGetOpenStatus4149,98462
# define pImmSetOpenStatus	pImmSetOpenStatus4150,98508
# define pImmGetCompositionFontW pImmGetCompositionFontW4151,98554
# define pImmSetCompositionFontW pImmSetCompositionFontW4152,98611
# define pImmSetCompositionWindow pImmSetCompositionWindow4153,98668
# define pImmGetConversionStatus pImmGetConversionStatus4154,98726
# define pImmSetConversionStatus pImmSetConversionStatus4155,98783
gui_mswin_get_menu_height(gui_mswin_get_menu_height4163,98941
init_mouse_wheel(void)init_mouse_wheel4219,100426
# define SPI_GETWHEELSCROLLLINES SPI_GETWHEELSCROLLLINES4223,100484
# define SPI_SETWHEELSCROLLLINES SPI_SETWHEELSCROLLLINES4226,100563
#define VMOUSEZ_CLASSNAME VMOUSEZ_CLASSNAME4229,100611
#define VMOUSEZ_TITLE VMOUSEZ_TITLE4230,100677
#define VMSH_MOUSEWHEEL VMSH_MOUSEWHEEL4231,100752
#define VMSH_SCROLL_LINES VMSH_SCROLL_LINES4232,100797
_OnMouseWheel(_OnMouseWheel4247,101168
gui_w32_get_menu_font(LOGFONTW *lf)gui_w32_get_menu_font4313,102569
set_tabline_font(void)set_tabline_font4335,102989
_OnSettingChange(UINT n)_OnSettingChange4375,103832
_OnWindowPosChanged(_OnWindowPosChanged4389,104158
_DuringSizing(_DuringSizing4411,104648
_WndProc(_WndProc4444,105500
HWND vim_parent_hwnd = NULL;vim_parent_hwnd4814,114352
FindWindowTitle(HWND hwnd, LPARAM lParam)FindWindowTitle4817,114407
gui_mch_set_parent(char *title)gui_mch_set_parent4841,114956
ole_error(char *arg)ole_error4853,115193
gvim_error(void)gvim_error4871,115582
gui_mch_do_spawn(char_u *arg)gui_mch_do_spawn4885,115786
gui_mch_prepare(int *argc, char **argv)gui_mch_prepare5010,118667
gui_mch_init(void)gui_mch_init5103,120521
#   define HandleToLong(HandleToLong5340,126811
get_work_area(RECT *spi_rect)get_work_area5364,127284
gui_mch_set_shellsize(gui_mch_set_shellsize5388,127845
gui_mch_set_scrollbar_thumb(gui_mch_set_scrollbar_thumb5475,130751
gui_mch_set_font(GuiFont font)gui_mch_set_font5509,131304
gui_mch_set_fg_color(guicolor_T color)gui_mch_set_fg_color5519,131424
gui_mch_set_bg_color(guicolor_T color)gui_mch_set_bg_color5528,131555
gui_mch_set_sp_color(guicolor_T color)gui_mch_set_sp_color5537,131683
_OnImeNotify(HWND hWnd, DWORD dwCommand, DWORD dwData UNUSED)_OnImeNotify5556,132061
_OnImeComposition(HWND hwnd, WPARAM dbcs UNUSED, LPARAM param)_OnImeComposition5606,133177
GetCompositionString_inUCS2(HIMC hIMC, DWORD GCS, int *lenp)GetCompositionString_inUCS25629,133658
GetResultStr(HWND hwnd, int GCS, int *lenp)GetResultStr5681,134987
im_set_font(LOGFONTW *lf)im_set_font5709,135594
im_set_position(int row, int col)im_set_position5724,135843
im_set_active(int active)im_set_active5746,136317
im_get_status(void)im_get_status5823,137862
im_set_position(int row, int col)im_set_position5850,138349
im_set_active(int active)im_set_active5865,138641
im_get_status(void)im_get_status5874,138786
latin9_to_ucs(char_u *text, int len, WCHAR *unicodebuf)latin9_to_ucs5884,138938
RevOut( HDC s_hdc,RevOut5920,140097
draw_line(draw_line5938,140395
set_pixel(set_pixel5961,140881
fill_rect(fill_rect5975,141104
gui_mch_draw_string(gui_mch_draw_string5999,141477
gui_mch_flush(void)gui_mch_flush6312,149750
clear_rect(RECT *rcp)clear_rect6323,149899
gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)gui_mch_get_screen_dimensions6330,149978
gui_mch_add_menu(gui_mch_add_menu6359,150788
gui_mch_show_popupmenu(vimmenu_T *menu)gui_mch_show_popupmenu6402,151723
gui_make_popup(char_u *path_name, int mouse_pos)gui_make_popup6411,151889
gui_make_tearoff(char_u *path_name)gui_make_tearoff6445,152616
gui_mch_add_menu_item(gui_mch_add_menu_item6459,152875
gui_mch_destroy_menu(vimmenu_T *menu)gui_mch_destroy_menu6524,154225
rebuild_tearoff(vimmenu_T *menu)rebuild_tearoff6566,155274
gui_mch_menu_grey(gui_mch_menu_grey6608,156110
#define add_string(add_string6652,157115
#define add_word(add_word6653,157193
#define add_long(add_long6654,157225
dialog_callback(dialog_callback6669,157714
static const char *dlg_icons[] = // must match names in resource filedlg_icons6750,159801
gui_mch_dialog(gui_mch_dialog6760,159985
add_dialog_element(add_dialog_element7255,174028
lpwAlign(lpwAlign7298,175021
nCopyAnsiToWideChar(nCopyAnsiToWideChar7318,175572
tearoff_lookup_menuhandle(tearoff_lookup_menuhandle7359,176454
tearoff_callback(tearoff_callback7381,177069
get_dialog_font_metrics(void)get_dialog_font_metrics7454,178691
gui_mch_tearoff(gui_mch_tearoff7507,179959
#  define TBSTYLE_FLAT	TBSTYLE_FLAT7841,188782
initialise_toolbar(void)initialise_toolbar7850,188977
toolbar_wndproc(toolbar_wndproc7880,189894
get_toolbar_bitmap(vimmenu_T *menu)get_toolbar_bitmap7891,190108
initialise_tabline(void)initialise_tabline7958,191521
GetTabFromPoint(GetTabFromPoint7979,192007
static POINT	    s_pt = {0, 0};s_pt8000,192381
static HCURSOR      s_hCursor = NULL;s_hCursor8001,192413
tabline_wndproc(tabline_wndproc8004,192480
gui_mch_set_foreground(void)gui_mch_set_foreground8086,194114
dyn_imm_load(void)dyn_imm_load8096,194335
#  define IMAGE_XPM IMAGE_XPM8154,196153
typedef struct _signicon_t_signicon_t8157,196188
    HANDLE	hImage;hImage8159,196217
    UINT	uType;uType8160,196236
    HANDLE	hShape;	// Mask bitmap handlehShape8162,196273
} signicon_t;signicon_t8164,196322
gui_mch_drawsign(int row, int col, int typenr)gui_mch_drawsign8167,196346
close_signicon_image(signicon_t *sign)close_signicon_image8225,197606
gui_mch_register_sign(char_u *signfile)gui_mch_register_sign8249,198052
gui_mch_destroy_sign(void *sign)gui_mch_destroy_sign8298,199123
multiline_balloon_available(void)multiline_balloon_available8336,200212
make_tooltip(BalloonEval *beval, char *text, POINT pt)make_tooltip8403,201677
delete_tooltip(BalloonEval *beval)delete_tooltip8473,203906
BevalTimerProc(BevalTimerProc8479,204020
gui_mch_disable_beval_area(BalloonEval *beval UNUSED)gui_mch_disable_beval_area8520,204937
gui_mch_enable_beval_area(BalloonEval *beval)gui_mch_enable_beval_area8528,205144
gui_mch_post_balloon(BalloonEval *beval, char_u *mesg)gui_mch_post_balloon8539,205461
gui_mch_create_beval_area(gui_mch_create_beval_area8569,206156
Handle_WM_Notify(HWND hwnd UNUSED, LPNMHDR pnmh)Handle_WM_Notify8604,206886
TrackUserActivity(UINT uMsg)TrackUserActivity8646,207889
gui_mch_destroy_beval_area(BalloonEval *beval)gui_mch_destroy_beval_area8654,208073
netbeans_draw_multisign_indicator(int row)netbeans_draw_multisign_indicator8670,208459

src/gui_x11.c,9983
#define VIM_NAME	VIM_NAME57,1146
#define VIM_CLASS	VIM_CLASS58,1169
#define DFLT_FONT	DFLT_FONT61,1221
# define DFLT_MENU_FONT	DFLT_MENU_FONT63,1269
# define DFLT_MENU_FONT	DFLT_MENU_FONT65,1317
#define DFLT_TOOLTIP_FONT	DFLT_TOOLTIP_FONT67,1363
# define DFLT_MENU_BG_COLOR	DFLT_MENU_BG_COLOR70,1430
# define DFLT_MENU_FG_COLOR	DFLT_MENU_FG_COLOR71,1467
# define DFLT_SCROLL_BG_COLOR	DFLT_SCROLL_BG_COLOR72,1503
# define DFLT_SCROLL_FG_COLOR	DFLT_SCROLL_FG_COLOR73,1542
# define DFLT_TOOLTIP_BG_COLOR	DFLT_TOOLTIP_BG_COLOR74,1581
# define DFLT_TOOLTIP_FG_COLOR	DFLT_TOOLTIP_FG_COLOR75,1622
# define DFLT_MENU_BG_COLOR	DFLT_MENU_BG_COLOR78,1701
# define DFLT_MENU_FG_COLOR	DFLT_MENU_FG_COLOR79,1732
# define DFLT_SCROLL_BG_COLOR	DFLT_SCROLL_BG_COLOR80,1763
# define DFLT_SCROLL_FG_COLOR	DFLT_SCROLL_FG_COLOR81,1796
# define DFLT_TOOLTIP_BG_COLOR	DFLT_TOOLTIP_BG_COLOR82,1829
# define DFLT_TOOLTIP_FG_COLOR	DFLT_TOOLTIP_FG_COLOR83,1870
Widget vimShell = (Widget)0;vimShell86,1919
static Atom   wm_atoms[2];	// Window Manager Atomswm_atoms88,1949
#define DELETE_WINDOW_IDX DELETE_WINDOW_IDX89,2000
#define SAVE_YOURSELF_IDX SAVE_YOURSELF_IDX90,2072
static XFontSet current_fontset = NULL;current_fontset97,2322
#define XDrawString(XDrawString99,2363
#define XDrawString16(XDrawString16108,2595
#define XDrawImageString16(XDrawImageString16117,2853
static guicolor_T	prev_fg_color = INVALCOLOR;prev_fg_color131,3259
static guicolor_T	prev_bg_color = INVALCOLOR;prev_bg_color132,3305
static guicolor_T	prev_sp_color = INVALCOLOR;prev_sp_color133,3351
static XButtonPressedEvent last_mouse_event;last_mouse_event136,3448
static struct specialkeyspecialkey152,3916
    KeySym  key_sym;key_sym154,3943
    char_u  vim_code0;vim_code0155,3964
    char_u  vim_code1;vim_code1156,3987
} special_keys[] =special_keys157,4010
#define XtNboldFont	XtNboldFont254,6254
#define XtCBoldFont	XtCBoldFont255,6286
#define XtNitalicFont	XtNitalicFont256,6318
#define XtCItalicFont	XtCItalicFont257,6354
#define XtNboldItalicFont	XtNboldItalicFont258,6390
#define XtCBoldItalicFont	XtCBoldItalicFont259,6433
#define XtNscrollbarWidth	XtNscrollbarWidth260,6476
#define XtCScrollbarWidth	XtCScrollbarWidth261,6519
#define XtNmenuHeight	XtNmenuHeight262,6562
#define XtCMenuHeight	XtCMenuHeight263,6598
#define XtNmenuFont	XtNmenuFont264,6634
#define XtCMenuFont	XtCMenuFont265,6666
#define XtNmenuFontSet	XtNmenuFontSet266,6698
#define XtCMenuFontSet	XtCMenuFontSet267,6736
#define XtNmenuBackground	XtNmenuBackground271,6847
#define XtCMenuBackground	XtCMenuBackground272,6890
#define XtNmenuForeground	XtNmenuForeground273,6933
#define XtCMenuForeground	XtCMenuForeground274,6976
#define XtNscrollBackground	XtNscrollBackground277,7096
#define XtCScrollBackground	XtCScrollBackground278,7143
#define XtNscrollForeground	XtNscrollForeground279,7190
#define XtCScrollForeground	XtCScrollForeground280,7237
#define XtNtooltipBackground	XtNtooltipBackground283,7358
#define XtCTooltipBackground	XtCTooltipBackground284,7407
#define XtNtooltipForeground	XtNtooltipForeground285,7456
#define XtCTooltipForeground	XtCTooltipForeground286,7505
#define XtNtooltipFont	XtNtooltipFont287,7554
#define XtCTooltipFont	XtCTooltipFont288,7592
static XtResource vim_resources[] =vim_resources293,7654
static XrmOptionDescRec cmdline_options[] =cmdline_options515,11541
static int gui_argc = 0;gui_argc552,13363
static char **gui_argv = NULL;gui_argv553,13388
gui_x11_timer_cb(gui_x11_timer_cb560,13467
channel_poll_cb(channel_poll_cb569,13632
gui_x11_visibility_cb(gui_x11_visibility_cb587,14122
gui_x11_expose_cb(gui_x11_expose_cb610,14682
shellRectangle(Widget shell, XRectangle *r)shellRectangle655,16105
gui_x11_resize_window_cb(gui_x11_resize_window_cb685,16835
gui_x11_focus_change_cb(gui_x11_focus_change_cb722,17616
gui_x11_enter_cb(gui_x11_enter_cb732,17800
gui_x11_leave_cb(gui_x11_leave_cb742,17966
#  define USE_UTF8LOOKUPUSE_UTF8LOOKUP753,18173
gui_x11_key_hit_cb(gui_x11_key_hit_cb758,18223
gui_x11_mouse_cb(gui_x11_mouse_cb1051,25568
gui_mch_prepare(int *argc, char **argv)gui_mch_prepare1153,28108
# define CARDINAL CARDINAL1219,29817
# define CARDINAL CARDINAL1222,29887
# define CARDINAL CARDINAL1224,29925
gui_mch_init_check(void)gui_mch_init_check1233,30074
static XtInputId _xsmp_xtinputid;_xsmp_xtinputid1269,30935
local_xsmp_handle_requests(local_xsmp_handle_requests1272,30986
gui_mch_init(void)gui_mch_init1288,31328
gui_mch_uninit(void)gui_mch_uninit1526,38159
gui_mch_new_colors(void)gui_mch_new_colors1539,38400
gui_mch_open(void)gui_mch_open1569,39224
gui_init_tooltip_font(void)gui_init_tooltip_font1644,41452
gui_init_menu_font(void)gui_init_menu_font1663,41915
gui_mch_exit(int rc UNUSED)gui_mch_exit1692,42577
gui_mch_get_winpos(int *x, int *y)gui_mch_get_winpos1706,42895
gui_mch_set_winpos(int x, int y)gui_mch_set_winpos1724,43173
gui_mch_set_shellsize(gui_mch_set_shellsize1733,43276
gui_mch_get_screen_dimensions(gui_mch_get_screen_dimensions1764,43997
gui_mch_init_font(gui_mch_init_font1779,44442
gui_mch_get_font(char_u *name, int giveErrorIfMissing)gui_mch_get_font1909,47932
gui_mch_get_fontname(GuiFont font, char_u *name)gui_mch_get_fontname1957,49336
gui_mch_adjust_charheight(void)gui_mch_adjust_charheight1996,50185
gui_mch_set_font(GuiFont font)gui_mch_set_font2020,50703
gui_mch_set_fontset(GuiFontset fontset)gui_mch_set_fontset2043,51227
gui_mch_free_font(GuiFont font)gui_mch_free_font2054,51467
gui_mch_free_fontset(GuiFontset fontset)gui_mch_free_fontset2065,51692
gui_mch_get_fontset(gui_mch_get_fontset2076,51926
check_fontset_sanity(XFontSet fs)check_fontset_sanity2122,52844
fontset_width(XFontSet fs)fontset_width2173,54148
fontset_height(fontset_height2179,54233
fontset_height2(XFontSet fs)fontset_height22195,54621
fontset_ascent(XFontSet fs)fontset_ascent2217,55014
gui_mch_get_color(char_u *name)gui_mch_get_color2232,55297
gui_mch_get_rgb_color(int r, int g, int b)gui_mch_get_rgb_color2255,55811
gui_mch_set_fg_color(guicolor_T color)gui_mch_set_fg_color2284,56639
gui_mch_set_bg_color(guicolor_T color)gui_mch_set_bg_color2297,56862
gui_mch_set_sp_color(guicolor_T color)gui_mch_set_sp_color2310,57082
gui_x11_create_blank_mouse(void)gui_x11_create_blank_mouse2319,57218
draw_curl(int row, int col, int cells)draw_curl2333,57692
gui_mch_draw_string(gui_mch_draw_string2350,58121
gui_mch_haskey(char_u *name)gui_mch_haskey2516,62273
gui_get_x11_windis(Window *win, Display **dis)gui_get_x11_windis2531,62590
gui_mch_beep(void)gui_mch_beep2539,62717
gui_mch_flash(int msec)gui_mch_flash2545,62773
gui_mch_invert_rectangle(gui_mch_invert_rectangle2562,63346
gui_mch_iconify(void)gui_mch_iconify2576,63605
gui_mch_set_foreground(void)gui_mch_set_foreground2586,63805
gui_mch_draw_hollow_cursor(guicolor_T color)gui_mch_draw_hollow_cursor2596,63939
gui_mch_draw_part_cursor(int w, int h, guicolor_T color)gui_mch_draw_part_cursor2612,64326
gui_mch_update(void)gui_mch_update2633,64940
gui_mch_wait_for_chars(long wtime)gui_mch_wait_for_chars2658,65619
gui_mch_flush(void)gui_mch_flush2749,67753
gui_mch_clear_block(gui_mch_clear_block2759,67916
gui_mch_clear_all(void)gui_mch_clear_all2777,68339
gui_mch_delete_lines(int row, int num_lines)gui_mch_delete_lines2787,68557
gui_mch_insert_lines(int row, int num_lines)gui_mch_insert_lines2812,69451
gui_x11_check_copy_area(void)gui_x11_check_copy_area2835,70233
clip_mch_lose_selection(Clipboard_T *cbd)clip_mch_lose_selection2867,70943
clip_mch_own_selection(Clipboard_T *cbd)clip_mch_own_selection2873,71042
clip_mch_request_selection(Clipboard_T *cbd)clip_mch_request_selection2879,71147
clip_mch_set_selection(clip_mch_set_selection2885,71259
gui_mch_menu_grey(vimmenu_T *menu, int grey)gui_mch_menu_grey2900,71463
gui_mch_menu_hidden(vimmenu_T *menu, int hidden)gui_mch_menu_hidden2920,71792
gui_mch_draw_menubar(void)gui_mch_draw_menubar2935,72055
gui_x11_menu_cb(gui_x11_menu_cb2941,72122
gui_x11_wm_protocol_handler(gui_x11_wm_protocol_handler2958,72400
gui_x11_send_event_handler(gui_x11_send_event_handler3000,73486
#define BLINK_NONE BLINK_NONE3023,74028
#define BLINK_OFF BLINK_OFF3024,74050
#define BLINK_ON BLINK_ON3025,74072
static int		blink_state = BLINK_NONE;blink_state3027,74095
static long_u		blink_waittime = 700;blink_waittime3028,74133
static long_u		blink_ontime = 400;blink_ontime3029,74170
static long_u		blink_offtime = 250;blink_offtime3030,74205
static XtIntervalId	blink_timer = (XtIntervalId)0;blink_timer3031,74241
gui_mch_is_blinking(void)gui_mch_is_blinking3034,74301
gui_mch_is_blink_off(void)gui_mch_is_blink_off3040,74378
gui_mch_set_blinking(long waittime, long on, long off)gui_mch_set_blinking3046,74456
gui_mch_stop_blink(int may_call_gui_update_cursor)gui_mch_stop_blink3057,74677
gui_x11_blink_cb(gui_x11_blink_cb3070,74991
gui_mch_start_blink(void)gui_mch_start_blink3095,75585
gui_mch_get_rgb(guicolor_T pixel)gui_mch_get_rgb3113,76055
gui_x11_callbacks(Widget textArea, Widget vimForm)gui_x11_callbacks3130,76419
gui_mch_getmouse(int *x, int *y)gui_mch_getmouse3176,77983
gui_mch_setmouse(int x, int y)gui_mch_setmouse3193,78288
gui_x11_get_last_mouse_event(void)gui_x11_get_last_mouse_event3201,78499
# define SIGN_WIDTH SIGN_WIDTH3211,78737
gui_mch_drawsign(int row, int col, int typenr)gui_mch_drawsign3214,78788
gui_mch_register_sign(char_u *signfile)gui_mch_register_sign3230,79227
gui_mch_destroy_sign(void *sign)gui_mch_destroy_sign3270,80154
static int last_shape = 0;last_shape3280,80362
gui_mch_mousehide(gui_mch_mousehide3287,80452
static int mshape_ids[] =mshape_ids3308,80934
mch_set_mouse_shape(int shape)mch_set_mouse_shape3330,81467
gui_mch_menu_set_tip(vimmenu_T *menu)gui_mch_menu_set_tip3366,82325

src/gui_xmdlg.c,2744
# define apply_fontlist(apply_fontlist44,1023
# define apply_fontlist(apply_fontlist46,1083
static char wild[3] = "*";wild52,1240
add_cancel_action(Widget shell, XtCallbackProc close_callback, void *arg)add_cancel_action64,1601
#define MAX_FONTS	MAX_FONTS82,2195
#define MAX_FONT_NAME_LEN	MAX_FONT_NAME_LEN83,2221
#define MAX_ENTRIES_IN_LIST	MAX_ENTRIES_IN_LIST84,2252
#define MAX_DISPLAY_SIZE	MAX_DISPLAY_SIZE85,2286
#define TEMP_BUF_SIZE	TEMP_BUF_SIZE86,2316
enum ListSpecifierListSpecifier88,2345
    ENCODING,ENCODING90,2366
    NAME,NAME91,2380
    STYLE,STYLE92,2390
    SIZE,SIZE93,2401
    NONENONE94,2411
typedef struct _SharedFontSelData_SharedFontSelData97,2424
    Widget	dialog;dialog99,2460
    Widget	ok;ok100,2479
    Widget	cancel;cancel101,2494
    Widget	encoding_pulldown;encoding_pulldown102,2513
    Widget	encoding_menu;encoding_menu103,2543
    Widget	list[NONE];list104,2569
    Widget	name;name105,2592
    Widget	sample;sample106,2609
    char	**names;	// font name array of arraysnames107,2628
    int		num;		// number of font namesnum108,2675
    String	sel[NONE];	// selection categorysel109,2714
    Boolean	in_pixels;	// toggle state - size in pixelsin_pixels110,2758
    char	*font_name;	// current font namefont_name111,2814
    XFontStruct	*old;		// font data structure for sample displayold112,2856
    XmFontList	old_list;	// font data structure for sample displayold_list113,2921
    Boolean	exit;		// used for program exit controlexit114,2988
} SharedFontSelData;SharedFontSelData115,3040
fn(SharedFontSelData *data, int i)fn121,3143
get_part(char *in, int pos, char *out)get_part138,3405
name_part(char *font, char *buf)name_part162,3812
style_part(char *font, char *buf)style_part180,4219
size_part(char *font, char *buf, int inPixels)size_part217,5107
encoding_part(char *font, char *buf)encoding_part253,5699
add_to_list(char **buf, char *item, int *count)add_to_list273,6110
match(SharedFontSelData *data, enum ListSpecifier l, int i)match308,6753
proportional(char *font)proportional344,7405
fill_lists(enum ListSpecifier fix, SharedFontSelData *data)fill_lists363,7881
stoggle_callback(Widget w UNUSED,stoggle_callback544,11894
display_sample(SharedFontSelData *data)display_sample587,12860
do_choice(Widget w,do_choice619,13596
encoding_callback(Widget w,encoding_callback711,15514
name_callback(Widget w,name_callback729,15817
style_callback(Widget w,style_callback737,15963
size_callback(Widget w,size_callback745,16111
cancel_callback(Widget w UNUSED,cancel_callback753,16257
ok_callback(Widget w UNUSED,ok_callback789,16925
gui_xm_select_font(char_u *current)gui_xm_select_font851,18223

src/gui_xmebw.c,2107
# define UNHIGHLIGHTTUNHIGHLIGHTT36,1068
#  define Lab_IsMenupane(Lab_IsMenupane63,1767
# define XmeClearBorder	XmeClearBorder66,1893
# define XmeDrawShadows	XmeDrawShadows67,1936
# define XmeDrawHighlight(XmeDrawHighlight68,1979
# define XmFOCUS_IGNORE XmFOCUS_IGNORE78,2214
#define stipple_width stipple_width110,3237
#define stipple_height stipple_height111,3262
static char stipple_bits[] = { 0x0a, 0x05, 0x0a, 0x05 };stipple_bits112,3287
#define STIPPLE_BITMAP	STIPPLE_BITMAP113,3344
static XtActionsRec actionsList[] =actionsList118,3457
static XtResource resources[] =resources124,3543
XmPrimitiveClassExtRec xmEnhancedButtonPrimClassExtRec =xmEnhancedButtonPrimClassExtRec148,4368
XmEnhancedButtonClassRec xmEnhancedButtonClassRec =xmEnhancedButtonClassRec159,4753
WidgetClass xmEnhancedButtonWidgetClass =xmEnhancedButtonWidgetClass228,6695
bump_color(unsigned short value)bump_color236,6888
alloc_color(Display	*display,alloc_color244,7013
static char * blank_xpm[] =blank_xpm265,7467
set_pixmap(XmEnhancedButtonWidget eb)set_pixmap292,7956
#define	BUTTON_MASK BUTTON_MASK482,14609
draw_shadows(XmEnhancedButtonWidget eb)draw_shadows487,14723
draw_highlight(XmEnhancedButtonWidget eb)draw_highlight533,15880
draw_unhighlight(XmEnhancedButtonWidget eb)draw_unhighlight548,16273
draw_pixmap(XmEnhancedButtonWidget eb,draw_pixmap599,17910
draw_label(XmEnhancedButtonWidget eb, XEvent *event, Region region)draw_label657,19389
Enter(Widget wid,Enter736,21441
Leave(Widget wid,Leave825,23858
#define IsNull(IsNull906,25886
set_size(XmEnhancedButtonWidget newtb)set_size909,25953
Initialize(Widget rq, Widget ebw, ArgList args UNUSED, Cardinal *n UNUSED)Initialize985,27949
free_pixmaps(XmEnhancedButtonWidget eb)free_pixmaps1030,29219
Destroy(Widget w)Destroy1054,29964
SetValues(Widget current,SetValues1063,30093
#define NOT_EQUAL(NOT_EQUAL1075,30450
Redisplay(Widget w, XEvent *event, Region region)Redisplay1173,32585
BorderHighlight(Widget w)BorderHighlight1429,39026
BorderUnhighlight(Widget w)BorderUnhighlight1438,39233

src/hardcopy.c,14949
static const long_u  cterm_color_8[8] =cterm_color_878,2573
static const long_u  cterm_color_16[16] =cterm_color_1684,2778
static int		current_syn_id;current_syn_id92,3145
#define PRCOLOR_BLACK	PRCOLOR_BLACK95,3181
#define PRCOLOR_WHITE	PRCOLOR_WHITE96,3213
static int	curr_italic;curr_italic98,3254
static int	curr_bold;curr_bold99,3278
static int	curr_underline;curr_underline100,3300
static long_u	curr_bg;curr_bg101,3327
static long_u	curr_fg;curr_fg102,3350
static int	page_count;page_count103,3373
# define OPT_MBFONT_USECOURIER OPT_MBFONT_USECOURIER106,3426
# define OPT_MBFONT_ASCII OPT_MBFONT_ASCII107,3460
# define OPT_MBFONT_REGULAR OPT_MBFONT_REGULAR108,3494
# define OPT_MBFONT_BOLD	OPT_MBFONT_BOLD109,3528
# define OPT_MBFONT_OBLIQUE OPT_MBFONT_OBLIQUE110,3555
# define OPT_MBFONT_BOLDOBLIQUE OPT_MBFONT_BOLDOBLIQUE111,3589
# define OPT_MBFONT_NUM_OPTIONS OPT_MBFONT_NUM_OPTIONS112,3623
static option_table_T mbfont_opts[OPT_MBFONT_NUM_OPTIONS] =mbfont_opts114,3658
    int		lead_spaces;	    // remaining spaces for a TABlead_spaces130,4033
    int		print_pos;	    // virtual column for computing TABsprint_pos131,4089
    colnr_T	column;		    // byte columncolumn132,4150
    linenr_T	file_line;	    // line nr in the bufferfile_line133,4190
    long_u	bytes_printed;	    // bytes printed so farbytes_printed134,4243
    int		ff;		    // seen form feed characterff135,4297
} prt_pos_T;prt_pos_T136,4343
parse_printoptions(void)parse_printoptions147,4656
parse_printmbfont(void)parse_printmbfont158,4923
parse_list_options(parse_list_options174,5334
darken_rgb(long_u rgb)darken_rgb265,7164
prt_get_term_color(int colorindex)prt_get_term_color273,7305
prt_get_attr(prt_get_attr282,7525
prt_set_fg(long_u fg)prt_set_fg334,8813
prt_set_bg(long_u bg)prt_set_bg344,8929
prt_set_font(int bold, int italic, int underline)prt_set_font354,9045
prt_line_number(prt_line_number371,9390
prt_header_height(void)prt_header_height408,10283
prt_use_number(void)prt_use_number419,10500
prt_get_unit(int idx)prt_get_unit430,10767
prt_header(prt_header450,11099
prt_message(char_u *s)prt_message544,13317
ex_hardcopy(exarg_T *eap)ex_hardcopy552,13498
hardcopy_line(hardcopy_line818,20170
#define NUM_ELEMENTS(NUM_ELEMENTS975,24279
#define PRT_PS_DEFAULT_DPI	PRT_PS_DEFAULT_DPI977,24339
#define PRT_PS_DEFAULT_FONTSIZE PRT_PS_DEFAULT_FONTSIZE978,24411
#define PRT_PS_DEFAULT_BUFFER_SIZE PRT_PS_DEFAULT_BUFFER_SIZE979,24452
struct prt_mediasize_Sprt_mediasize_S981,24494
    char	*name;name983,24519
    float	width;		// width and height in points for portraitwidth984,24535
    float	height;height985,24596
#define PRT_MEDIASIZE_LEN PRT_MEDIASIZE_LEN988,24618
static struct prt_mediasize_S prt_mediasize[] =prt_mediasize990,24703
struct prt_ps_font_Sprt_ps_font_S1009,25296
    int		wx;wx1011,25319
    int		uline_offset;uline_offset1012,25332
    int		uline_width;uline_width1013,25355
    int		bbox_min_y;bbox_min_y1014,25377
    int		bbox_max_y;bbox_max_y1015,25398
    char	*(ps_fontname[4]);ps_fontname1016,25419
#define PRT_PS_FONT_ROMAN	PRT_PS_FONT_ROMAN1019,25451
#define PRT_PS_FONT_BOLD	PRT_PS_FONT_BOLD1020,25481
#define PRT_PS_FONT_OBLIQUE	PRT_PS_FONT_OBLIQUE1021,25510
#define PRT_PS_FONT_BOLDOBLIQUE PRT_PS_FONT_BOLDOBLIQUE1022,25542
static struct prt_ps_font_S prt_ps_courier_font =prt_ps_courier_font1025,25623
static struct prt_ps_font_S prt_ps_mb_font =prt_ps_mb_font1034,25836
static struct prt_ps_font_S* prt_ps_font;prt_ps_font1043,25997
struct prt_ps_encoding_Sprt_ps_encoding_S1047,26141
    char	*encoding;encoding1049,26168
    char	*cmap_encoding;cmap_encoding1050,26188
    int		needs_charset;needs_charset1051,26213
struct prt_ps_charset_Sprt_ps_charset_S1054,26241
    char	*charset;charset1056,26267
    char	*cmap_charset;cmap_charset1057,26286
    int		has_charset;has_charset1058,26310
#define CS_JIS_C_1978 CS_JIS_C_19781062,26337
#define CS_JIS_X_1983 CS_JIS_X_19831063,26368
#define CS_JIS_X_1990 CS_JIS_X_19901064,26399
#define CS_NEC	CS_NEC1065,26430
#define CS_MSWINDOWS	CS_MSWINDOWS1066,26453
#define CS_CP932	CS_CP9321067,26481
#define CS_KANJITALK6	CS_KANJITALK61068,26505
#define CS_KANJITALK7 CS_KANJITALK71069,26534
static struct prt_ps_encoding_S j_encodings[] =j_encodings1072,26601
static struct prt_ps_charset_S j_charsets[] =j_charsets1083,27072
#define CS_GB_2312_80 CS_GB_2312_801095,27490
#define CS_GBT_12345_90 CS_GBT_12345_901096,27525
#define CS_GBK2K	CS_GBK2K1097,27560
#define CS_SC_MAC	CS_SC_MAC1098,27588
#define CS_GBT_90_MAC	CS_GBT_90_MAC1099,27617
#define CS_GBK	CS_GBK1100,27650
#define CS_SC_ISO10646 CS_SC_ISO106461101,27677
static struct prt_ps_encoding_S sc_encodings[] =sc_encodings1104,27758
static struct prt_ps_charset_S sc_charsets[] =sc_charsets1114,28149
#define CS_CNS_PLANE_1 CS_CNS_PLANE_11125,28504
#define CS_CNS_PLANE_2 CS_CNS_PLANE_21126,28539
#define CS_CNS_PLANE_1_2 CS_CNS_PLANE_1_21127,28574
#define CS_B5	CS_B51128,28609
#define CS_ETEN	CS_ETEN1129,28635
#define CS_HK_GCCS	CS_HK_GCCS1130,28663
#define CS_HK_SCS	CS_HK_SCS1131,28693
#define CS_HK_SCS_ETEN	CS_HK_SCS_ETEN1132,28722
#define CS_MTHKL	CS_MTHKL1133,28756
#define CS_MTHKS	CS_MTHKS1134,28785
#define CS_DLHKL	CS_DLHKL1135,28814
#define CS_DLHKS	CS_DLHKS1136,28843
#define CS_TC_ISO10646	CS_TC_ISO106461137,28872
static struct prt_ps_encoding_S tc_encodings[] =tc_encodings1140,28955
static struct prt_ps_charset_S tc_charsets[] =tc_charsets1153,29496
#define CS_KR_X_1992	CS_KR_X_19921171,30145
#define CS_KR_MAC	CS_KR_MAC1172,30177
#define CS_KR_X_1992_MS CS_KR_X_1992_MS1173,30206
#define CS_KR_ISO10646 CS_KR_ISO106461174,30241
static struct prt_ps_encoding_S k_encodings[] =k_encodings1177,30310
static struct prt_ps_charset_S k_charsets[] =k_charsets1188,30751
struct prt_ps_mbfont_Sprt_ps_mbfont_S1200,31197
    int				num_encodings;num_encodings1202,31222
    struct prt_ps_encoding_S	*encodings;encodings1203,31248
    int				num_charsets;num_charsets1204,31289
    struct prt_ps_charset_S	*charsets;charsets1205,31314
    char			*ascii_enc;ascii_enc1206,31353
    char			*defcs;defcs1207,31376
static struct prt_ps_mbfont_S prt_ps_mbfonts[] =prt_ps_mbfonts1210,31399
struct prt_ps_resource_Sprt_ps_resource_S1246,31944
    char_u  name[64];name1248,31971
    char_u  filename[MAXPATHL + 1];filename1249,31993
    int     type;type1250,32029
    char_u  title[256];title1251,32047
    char_u  version[256];version1252,32071
#define PRT_RESOURCE_TYPE_PROCSET PRT_RESOURCE_TYPE_PROCSET1256,32145
#define PRT_RESOURCE_TYPE_ENCODING PRT_RESOURCE_TYPE_ENCODING1257,32185
#define PRT_RESOURCE_TYPE_CMAP PRT_RESOURCE_TYPE_CMAP1258,32225
#define PRT_PROLOG_VERSION PRT_PROLOG_VERSION1269,32615
#define PRT_CID_PROLOG_VERSION PRT_CID_PROLOG_VERSION1270,32661
static char *prt_resource_types[] =prt_resource_types1274,32803
#define PRT_RESOURCE_HEADER	PRT_RESOURCE_HEADER1282,32932
#define PRT_RESOURCE_RESOURCE	PRT_RESOURCE_RESOURCE1283,32978
#define PRT_RESOURCE_PROCSET	PRT_RESOURCE_PROCSET1284,33024
#define PRT_RESOURCE_ENCODING	PRT_RESOURCE_ENCODING1285,33067
#define PRT_RESOURCE_CMAP	PRT_RESOURCE_CMAP1286,33112
#define PRT_DSC_MISC_TYPE	PRT_DSC_MISC_TYPE1291,33254
#define PRT_DSC_TITLE_TYPE	PRT_DSC_TITLE_TYPE1292,33289
#define PRT_DSC_VERSION_TYPE	PRT_DSC_VERSION_TYPE1293,33324
#define PRT_DSC_ENDCOMMENTS_TYPE PRT_DSC_ENDCOMMENTS_TYPE1294,33361
#define PRT_DSC_TITLE	PRT_DSC_TITLE1296,33402
#define PRT_DSC_VERSION	PRT_DSC_VERSION1297,33440
#define PRT_DSC_ENDCOMMENTS	PRT_DSC_ENDCOMMENTS1298,33482
struct prt_dsc_comment_Sprt_dsc_comment_S1300,33532
    char	*string;string1302,33559
    int		len;len1303,33577
    int		type;type1304,33591
struct prt_dsc_line_Sprt_dsc_line_S1307,33610
    int		type;type1309,33634
    char_u	*string;string1310,33649
    int		len;len1311,33669
#define SIZEOF_CSTR(SIZEOF_CSTR1315,33688
static struct prt_dsc_comment_S prt_dsc_table[] =prt_dsc_table1316,33732
static FILE *prt_ps_fd;prt_ps_fd1331,34222
static int prt_file_error;prt_file_error1332,34246
static char_u *prt_ps_file_name = NULL;prt_ps_file_name1333,34273
static float prt_page_width;prt_page_width1339,34440
static float prt_page_height;prt_page_height1340,34469
static float prt_left_margin;prt_left_margin1341,34499
static float prt_right_margin;prt_right_margin1342,34529
static float prt_top_margin;prt_top_margin1343,34560
static float prt_bottom_margin;prt_bottom_margin1344,34589
static float prt_line_height;prt_line_height1345,34621
static float prt_first_line_height;prt_first_line_height1346,34651
static float prt_char_width;prt_char_width1347,34687
static float prt_number_width;prt_number_width1348,34716
static float prt_bgcol_offset;prt_bgcol_offset1349,34747
static float prt_pos_x_moveto = 0.0;prt_pos_x_moveto1350,34778
static float prt_pos_y_moveto = 0.0;prt_pos_y_moveto1351,34815
static int prt_need_moveto;prt_need_moveto1357,34961
static int prt_do_moveto;prt_do_moveto1358,34989
static int prt_need_font;prt_need_font1359,35015
static int prt_font;prt_font1360,35041
static int prt_need_underline;prt_need_underline1361,35062
static int prt_underline;prt_underline1362,35093
static int prt_do_underline;prt_do_underline1363,35119
static int prt_need_fgcol;prt_need_fgcol1364,35148
static int prt_fgcol;prt_fgcol1365,35175
static int prt_need_bgcol;prt_need_bgcol1366,35197
static int prt_do_bgcol;prt_do_bgcol1367,35224
static int prt_bgcol;prt_bgcol1368,35249
static int prt_new_bgcol;prt_new_bgcol1369,35271
static int prt_attribute_change;prt_attribute_change1370,35297
static float prt_text_run;prt_text_run1371,35330
static int prt_page_num;prt_page_num1372,35357
static int prt_bufsiz;prt_bufsiz1373,35382
static int prt_media;prt_media1378,35457
static int prt_portrait;prt_portrait1379,35479
static int prt_num_copies;prt_num_copies1380,35504
static int prt_duplex;prt_duplex1381,35531
static int prt_tumble;prt_tumble1382,35554
static int prt_collate;prt_collate1383,35577
static char_u prt_line_buffer[257];prt_line_buffer1388,35659
static garray_T prt_ps_buffer;prt_ps_buffer1389,35695
static int prt_do_conv;prt_do_conv1391,35727
static vimconv_T prt_conv;prt_conv1392,35751
static int prt_out_mbyte;prt_out_mbyte1394,35779
static int prt_custom_cmap;prt_custom_cmap1395,35805
static char prt_cmap[80];prt_cmap1396,35833
static int prt_use_courier;prt_use_courier1397,35859
static int prt_in_ascii;prt_in_ascii1398,35887
static int prt_half_width;prt_half_width1399,35912
static char *prt_ascii_encoding;prt_ascii_encoding1400,35939
static char_u prt_hexchar[] = "0123456789abcdef";prt_hexchar1401,35972
prt_write_file_raw_len(char_u *buffer, int bytes)prt_write_file_raw_len1404,36039
prt_write_file(char_u *buffer)prt_write_file1416,36316
prt_write_file_len(char_u *buffer, int bytes)prt_write_file_len1422,36421
prt_write_string(char *s)prt_write_string1434,36611
prt_write_int(int i)prt_write_int1444,36808
prt_write_boolean(int b)prt_write_boolean1454,36974
prt_def_font(prt_def_font1464,37180
prt_def_cidfont(char *new_name, int height, char *cidfont)prt_def_cidfont1486,37814
prt_dup_cidfont(char *original_name, char *new_name)prt_dup_cidfont1500,38291
prt_real_bits(prt_real_bits1513,38753
prt_write_real(double val, int prec)prt_write_real1540,39405
prt_def_var(char *name, double value, int prec)prt_def_var1570,40115
#define PRT_PS_FONT_TO_USER(PRT_PS_FONT_TO_USER1581,40478
prt_flush_buffer(void)prt_flush_buffer1584,40567
prt_resource_name(char_u *filename, void *cookie)prt_resource_name1661,42594
prt_find_resource(char *name, struct prt_ps_resource_S *resource)prt_find_resource1672,42817
#define PSLF PSLF1696,43524
#define PSCR PSCR1697,43545
#define PRT_FILE_BUFFER_LEN PRT_FILE_BUFFER_LEN1701,43674
struct prt_resfile_buffer_Sprt_resfile_buffer_S1702,43709
    char_u  buffer[PRT_FILE_BUFFER_LEN];buffer1704,43739
    int     len;len1705,43780
    int     line_start;line_start1706,43797
    int     line_end;line_end1707,43821
static struct prt_resfile_buffer_S prt_resfile;prt_resfile1710,43847
prt_resfile_next_line(void)prt_resfile_next_line1713,43911
prt_resfile_strncmp(int offset, char *string, int len)prt_resfile_strncmp1739,44455
prt_resfile_skip_nonws(int offset)prt_resfile_skip_nonws1750,44777
prt_resfile_skip_ws(int offset)prt_resfile_skip_ws1765,45048
prt_next_dsc(struct prt_dsc_line_S *p_dsc_line)prt_next_dsc1782,45439
prt_open_resource(struct prt_ps_resource_S *resource)prt_open_resource1832,46784
prt_check_resource(struct prt_ps_resource_S *resource, char_u *version)prt_check_resource1957,50186
prt_dsc_start(void)prt_dsc_start1972,50581
prt_dsc_noarg(char *comment)prt_dsc_noarg1978,50664
prt_dsc_textline(char *comment, char *text)prt_dsc_textline1986,50848
prt_dsc_text(char *comment, char *text)prt_dsc_text1994,51061
#define prt_dsc_atend(prt_dsc_atend2002,51319
prt_dsc_ints(char *comment, int count, int *ints)prt_dsc_ints2005,51388
prt_dsc_resources(prt_dsc_resources2023,51765
prt_dsc_font_resource(char *resource, struct prt_ps_font_S *ps_font)prt_dsc_font_resource2042,52286
prt_dsc_requirements(prt_dsc_requirements2054,52651
prt_dsc_docmedia(prt_dsc_docmedia2091,53512
mch_print_cleanup(void)mch_print_cleanup2118,54117
to_device_units(int idx, double physsize, int def_number)to_device_units2150,54792
prt_page_margins(prt_page_margins2189,55494
prt_font_metrics(int font_scale)prt_font_metrics2204,55891
prt_get_cpl(void)prt_get_cpl2212,56064
prt_build_cid_fontname(int font, char_u *name, int name_len)prt_build_cid_fontname2230,56503
prt_get_lpp(void)prt_get_lpp2247,56886
prt_match_encoding(prt_match_encoding2278,57881
prt_match_charset(prt_match_charset2304,58442
mch_print_init(mch_print_init2331,59084
prt_add_resource(struct prt_ps_resource_S *resource)prt_add_resource2671,68657
mch_print_begin(prt_settings_T *psettings)mch_print_begin2718,69753
mch_print_end(prt_settings_T *psettings)mch_print_end3112,82686
mch_print_end_page(void)mch_print_end_page3149,83616
mch_print_begin_page(char_u *str UNUSED)mch_print_begin_page3161,83776
mch_print_blank_page(void)mch_print_blank_page3200,84659
static float prt_pos_x = 0;prt_pos_x3205,84765
static float prt_pos_y = 0;prt_pos_y3206,84793
mch_print_start_line(int margin, int page_line)mch_print_start_line3209,84831
mch_print_text_out(char_u *textp, int len UNUSED)mch_print_text_out3224,85155
mch_print_set_font(int iBold, int iItalic, int iUnderline)mch_print_set_font3433,90586
mch_print_set_bg(long_u bgcol)mch_print_set_bg3457,90987
mch_print_set_fg(long_u fgcol)mch_print_set_fg3465,91120

src/hashtab.c,777
#define PERTURB_SHIFT PERTURB_SHIFT40,1397
hash_init(hashtab_T *ht)hash_init65,1781
hash_clear(hashtab_T *ht)hash_clear78,2157
hash_clear_all(hashtab_T *ht, int off)hash_clear_all91,2530
hash_find(hashtab_T *ht, char_u *key)hash_find118,3172
hash_lookup(hashtab_T *ht, char_u *key, hash_T hash)hash_lookup127,3337
hash_debug_results(void)hash_debug_results190,5114
hash_add(hashtab_T *ht, char_u *key)hash_add207,5612
hash_add_item(hash_add_item228,6116
hash_remove(hashtab_T *ht, hashitem_T *hi)hash_remove271,7217
hash_lock(hashtab_T *ht)hash_lock284,7493
hash_lock_size(hashtab_T *ht, int size)hash_lock_size295,7718
hash_unlock(hashtab_T *ht)hash_unlock307,7984
hash_may_resize(hash_may_resize319,8248
hash_hash(char_u *key)hash_hash464,12421

src/highlight.c,8547
#define SG_TERM	SG_TERM17,360
#define SG_CTERM	SG_CTERM18,400
#define SG_GUI	SG_GUI19,441
#define SG_LINK	SG_LINK20,479
static char *(hl_name_table[]) =hl_name_table26,658
static int hl_attr_table[] =hl_attr_table29,819
#define ATTR_COMBINE(ATTR_COMBINE31,974
    char_u	*sg_name;	// highlight group namesg_name40,1271
    char_u	*sg_name_u;	// uppercase of sg_namesg_name_u41,1316
    int		sg_cleared;	// "hi clear" was usedsg_cleared42,1363
    int		sg_term;	// "term=" highlighting attributessg_term44,1431
    char_u	*sg_start;	// terminal string for start highlsg_start45,1484
    char_u	*sg_stop;	// terminal string for stop highlsg_stop46,1541
    int		sg_term_attr;	// Screen attr for term modesg_term_attr47,1596
    int		sg_cterm;	// "cterm=" highlighting attrsg_cterm49,1671
    int		sg_cterm_bold;	// bold attr was set for light colorsg_cterm_bold50,1720
    int		sg_cterm_fg;	// terminal fg color number + 1sg_cterm_fg51,1781
    int		sg_cterm_bg;	// terminal bg color number + 1sg_cterm_bg52,1835
    int		sg_cterm_attr;	// Screen attr for color term modesg_cterm_attr53,1889
    guicolor_T	sg_gui_fg;	// GUI foreground color handlesg_gui_fg56,2027
    guicolor_T	sg_gui_bg;	// GUI background color handlesg_gui_bg57,2084
    guicolor_T	sg_gui_sp;	// GUI special color handlesg_gui_sp60,2164
    GuiFont	sg_font;	// GUI font handlesg_font61,2218
    GuiFontset	sg_fontset;	// GUI fontset handlesg_fontset63,2279
    char_u	*sg_font_name;  // GUI font or fontset namesg_font_name65,2335
    int		sg_gui_attr;    // Screen attr for GUI modesg_gui_attr66,2390
    int		sg_gui;		// "gui=" highlighting attributessg_gui70,2548
    char_u	*sg_gui_fg_name;// GUI foreground color namesg_gui_fg_name71,2600
    char_u	*sg_gui_bg_name;// GUI background color namesg_gui_bg_name72,2656
    char_u	*sg_gui_sp_name;// GUI special color namesg_gui_sp_name73,2712
    int		sg_link;	// link to this highlight group IDsg_link75,2772
    int		sg_set;		// combination of SG_* flagssg_set76,2825
    sctx_T	sg_script_ctx;	// script in which the group was last setsg_script_ctx78,2889
} hl_group_T;hl_group_T80,2964
static garray_T highlight_ga;highlight_ga83,3022
#define HL_TABLE(HL_TABLE84,3052
#define ATTR_OFF ATTR_OFF89,3185
# define CENT(CENT115,4307
# define CENT(CENT117,4335
static char *(highlight_init_both[]) = {highlight_init_both119,4364
static char *(highlight_init_light[]) = {highlight_init_light159,6096
static char *(highlight_init_dark[]) = {highlight_init_dark250,10806
highlight_num_groups(void)highlight_num_groups344,15479
highlight_group_name(int id)highlight_group_name353,15605
highlight_link_id(int id)highlight_link_id362,15741
init_highlight(init_highlight368,15816
load_colors(char_u *name)load_colors466,18288
static char *(color_names[28]) = {color_names494,19029
static int color_numbers_16[28] = {0, 1, 2, 3,color_numbers_16510,19588
static int color_numbers_88[28] = {0, 4, 2, 6,color_numbers_88518,19781
static int color_numbers_256[28] = {0, 4, 2, 6,color_numbers_256526,19982
static int color_numbers_8[28] = {0, 4, 2, 6,color_numbers_8534,20208
lookup_color(int idx, int foreground, int *boldp)lookup_color549,20610
do_highlight(do_highlight617,22226
free_highlight(void)free_highlight1548,44540
restore_cterm_colors(void)restore_cterm_colors1567,44898
hl_has_settings(int idx, int check_link)hl_has_settings1597,45637
highlight_clear(int idx)highlight_clear1617,46228
set_normal_colors(void)set_normal_colors1669,47876
set_group_colors(set_group_colors1748,49631
hl_get_font_name(void)hl_get_font_name1781,50307
hl_set_font_name(char_u *font_name)hl_set_font_name1801,50654
hl_set_bg_color_name(hl_set_bg_color_name1818,51003
hl_set_fg_color_name(hl_set_fg_color_name1839,51405
font_name2handle(char_u *name)font_name2handle1860,51784
fontset_name2handle(char_u *name, int fixed_width)fontset_name2handle1874,52039
hl_do_font(hl_do_font1887,52290
color_name2handle(char_u *name)color_name2handle1983,54855
static garray_T	term_attr_table = {0, 0, 0, 0, NULL};term_attr_table2028,56069
#define TERM_ATTR_ENTRY(TERM_ATTR_ENTRY2030,56124
static garray_T	cterm_attr_table = {0, 0, 0, 0, NULL};cterm_attr_table2032,56200
#define CTERM_ATTR_ENTRY(CTERM_ATTR_ENTRY2034,56256
static garray_T	gui_attr_table = {0, 0, 0, 0, NULL};gui_attr_table2037,56350
#define GUI_ATTR_ENTRY(GUI_ATTR_ENTRY2039,56404
get_attr_entry(garray_T *table, attrentry_T *aep)get_attr_entry2049,56709
get_cterm_attr_idx(int attr, int fg, int bg)get_cterm_attr_idx2185,60379
get_tgc_attr_idx(int attr, guicolor_T fg, guicolor_T bg)get_tgc_attr_idx2207,60991
get_gui_attr_idx(int attr, guicolor_T fg, guicolor_T bg)get_gui_attr_idx2235,61755
clear_hl_tables(void)clear_hl_tables2251,62090
hl_combine_attr(int char_attr, int prim_attr)hl_combine_attr2279,62780
syn_gui_attr2entry(int attr)syn_gui_attr2entry2418,66741
syn_attr2attr(int attr)syn_attr2attr2432,67045
syn_term_attr2entry(int attr)syn_term_attr2entry2453,67385
syn_cterm_attr2entry(int attr)syn_cterm_attr2entry2462,67578
#define LIST_ATTR LIST_ATTR2470,67752
#define LIST_STRING LIST_STRING2471,67774
#define LIST_INT LIST_INT2472,67796
highlight_list_one(int id)highlight_list_one2475,67835
highlight_list_arg(highlight_list_arg2532,69528
highlight_has_attr(highlight_has_attr2590,70734
highlight_color(highlight_color2621,71344
highlight_gui_color_rgb(highlight_gui_color_rgb2711,73608
syn_list_header(syn_list_header2737,74043
set_hl_attr(set_hl_attr2791,75205
syn_name2id(char_u *name)syn_name2id2902,78206
syn_name2attr(char_u *name)syn_name2attr2924,78774
highlight_exists(char_u *name)highlight_exists2938,79001
syn_id2name(int id)syn_id2name2949,79234
syn_namen2id(char_u *linep, int len)syn_namen2id2962,79456
syn_check_group(char_u *pp, int len)syn_check_group2983,79888
syn_add_group(char_u *name)syn_add_group3006,80323
syn_unadd_group(void)syn_unadd_group3082,82153
syn_id2attr(int hl_id)syn_id2attr3093,82383
syn_id2colors(int hl_id, guicolor_T *fgp, guicolor_T *bgp)syn_id2colors3123,83010
syn_id2cterm_bg(int hl_id, int *fgp, int *bgp)syn_id2cterm_bg3141,83453
syn_get_final_id(int hl_id)syn_get_final_id3156,83780
highlight_gui_started(void)highlight_gui_started3186,84565
gui_do_one_color(gui_do_one_color3201,84861
combine_stl_hlt(combine_stl_hlt3249,86036
highlight_changed(void)highlight_changed3320,88479
set_context_in_highlight_cmd(expand_T *xp, char_u *arg)set_context_in_highlight_cmd3508,92864
highlight_list(void)highlight_list3558,93986
highlight_list_two(int cnt, int attr)highlight_list_two3569,94167
get_highlight_name(expand_T *xp UNUSED, int idx)get_highlight_name3581,94449
get_highlight_name_ext(expand_T *xp UNUSED, int idx, int skip_cleared)get_highlight_name_ext3591,94668
free_highlight_fonts(void)free_highlight_fonts3622,95637
# define SEARCH_HL_PRIORITY SEARCH_HL_PRIORITY3651,96267
match_add(match_add3661,96642
match_delete(win_T *wp, int id, int perr)match_delete3861,100929
clear_matches(win_T *wp)clear_matches3918,102185
get_match(win_T *wp, int id)get_match3938,102598
init_search_hl(win_T *wp, match_T *search_hl)init_search_hl3951,102806
next_search_hl_pos(next_search_hl_pos3985,103603
next_search_hl(next_search_hl4049,105069
prepare_search_hl(win_T *wp, match_T *search_hl, linenr_T lnum)prepare_search_hl4186,108619
prepare_search_hl_line(prepare_search_hl_line4262,110660
update_search_hl(update_search_hl4346,112888
get_prevcol_hl_flag(win_T *wp, match_T *search_hl, long curcol)get_prevcol_hl_flag4478,116212
get_search_match_hl(win_T *wp, match_T *search_hl, long col, int *char_attr)get_search_match_hl4511,116998
matchadd_dict_arg(typval_T *tv, char_u **conceal_char, win_T **win)matchadd_dict_arg4545,117861
f_clearmatches(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_clearmatches4577,118462
f_getmatches(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_getmatches4591,118702
f_setmatches(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_setmatches4659,120227
f_matchadd(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_matchadd4773,122682
f_matchaddpos(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_matchaddpos4817,123765
f_matcharg(typval_T *argvars UNUSED, typval_T *rettv)f_matcharg4875,125004
f_matchdelete(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_matchdelete4905,125625
ex_match(exarg_T *eap)ex_match4926,126160

src/if_cscope.c,3109
static csinfo_T *   csinfo = NULL;csinfo53,1762
static int	    csinfo_size = 0;	// number of items allocated incsinfo_size54,1797
static int	    eap_arg_len;    // length of eap->arg, set ineap_arg_len57,1879
static cscmd_T	    cs_cmds[] =cs_cmds59,1967
cs_usage_msg(csid_e x)cs_usage_msg77,2515
    EXP_CSCOPE_SUBCMD,	// expand ":cscope" sub-commandsEXP_CSCOPE_SUBCMD84,2628
    EXP_SCSCOPE_SUBCMD,	// expand ":scscope" sub-commandsEXP_SCSCOPE_SUBCMD85,2684
    EXP_CSCOPE_FIND,	// expand ":cscope find" argumentsEXP_CSCOPE_FIND86,2742
    EXP_CSCOPE_KILL	// expand ":cscope kill" argumentsEXP_CSCOPE_KILL87,2798
} expand_what;expand_what88,2853
get_cscope_name(expand_T *xp UNUSED, int idx)get_cscope_name95,2969
set_context_in_cscope_cmd(set_context_in_cscope_cmd156,4667
do_cscope_general(do_cscope_general195,5633
ex_cscope(exarg_T *eap)ex_cscope229,6235
ex_scscope(exarg_T *eap)ex_scscope238,6393
ex_cstag(exarg_T *eap)ex_cstag247,6503
cs_fgets(char_u *buf, int size)cs_fgets327,8057
cs_free_tags(void)cs_free_tags343,8323
cs_print_tags(void)cs_print_tags353,8434
cs_connection(int num, char_u *dbpath, char_u *ppath)cs_connection388,9551
cs_add(exarg_T *eap UNUSED)cs_add447,10710
cs_stat_emsg(char *fname)cs_stat_emsg463,11088
cs_add_common(cs_add_common485,11592
cs_check_for_connections(void)cs_check_for_connections614,14375
cs_check_for_tags(void)cs_check_for_tags621,14466
cs_cnt_connections(void)cs_cnt_connections631,14620
cs_reading_emsg(cs_reading_emsg645,14807
#define	CSREAD_BUFSIZE	CSREAD_BUFSIZE651,14925
cs_cnt_matches(int idx)cs_cnt_matches656,15037
cs_create_cmd(char *csoption, char *pattern)cs_create_cmd718,16339
cs_create_connection(int i)cs_create_connection780,17469
#  define OPEN_OH_ARGTYPE OPEN_OH_ARGTYPE797,17905
cs_find(exarg_T *eap)cs_find1019,23588
cs_find_common(cs_find_common1060,24466
cs_help(exarg_T *eap UNUSED)cs_help1273,28777
clear_csinfo(int i)clear_csinfo1311,29811
GetWin32Error(void)GetWin32Error1334,30275
cs_insert_filelist(cs_insert_filelist1354,30691
cs_lookup_cmd(exarg_T *eap)cs_lookup_cmd1492,33929
cs_kill(exarg_T *eap UNUSED)cs_kill1521,34472
cs_kill_execute(cs_kill_execute1575,35603
cs_make_vim_style_matches(cs_make_vim_style_matches1608,36796
cs_manage_matches(cs_manage_matches1665,38429
cs_parse_results(cs_parse_results1730,39459
cs_file_results(FILE *f, int *nummatches_a)cs_file_results1790,40854
cs_fill_results(cs_fill_results1845,42035
cs_pathcomponents(char *path)cs_pathcomponents1924,43642
cs_print_tags_priv(char **matches, char **cntxts, int num_matches)cs_print_tags_priv1953,44053
cs_read_prompt(int i)cs_read_prompt2101,47402
sig_handler SIGDEFARG(sigarg)SIGDEFARG2186,49342
cs_release_csp(int i, int freefnpp)cs_release_csp2198,49581
cs_reset(exarg_T *eap UNUSED)cs_reset2323,52546
cs_resolve_file(int i, char *name)cs_resolve_file2392,54371
cs_show(exarg_T *eap UNUSED)cs_show2454,56090
cs_end(void)cs_end2487,56797
f_cscope_connection(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_cscope_connection2507,57132

src/if_lua.c,17995
#define LUAVIM_CHUNKNAME LUAVIM_CHUNKNAME22,516
#define LUAVIM_NAME LUAVIM_NAME23,553
#define LUAVIM_EVALNAME LUAVIM_EVALNAME24,579
#define LUAVIM_EVALHEADER LUAVIM_EVALHEADER25,613
typedef buf_T *luaV_Buffer;luaV_Buffer27,673
typedef win_T *luaV_Window;luaV_Window28,701
typedef dict_T *luaV_Dict;luaV_Dict29,729
typedef list_T *luaV_List;luaV_List30,756
typedef blob_T *luaV_Blob;luaV_Blob31,783
    char_u	*name;	// funcrefname33,827
    dict_T	*self;	// selfdictself34,856
} luaV_Funcref;luaV_Funcref35,886
typedef void (*msgfunc_T)(char_u *);msgfunc_T36,902
static const char LUAVIM_DICT[] = "dict";LUAVIM_DICT38,940
static const char LUAVIM_LIST[] = "list";LUAVIM_LIST39,982
static const char LUAVIM_BLOB[] = "blob";LUAVIM_BLOB40,1024
static const char LUAVIM_FUNCREF[] = "funcref";LUAVIM_FUNCREF41,1066
static const char LUAVIM_BUFFER[] = "buffer";LUAVIM_BUFFER42,1114
static const char LUAVIM_WINDOW[] = "window";LUAVIM_WINDOW43,1160
static const char LUAVIM_FREE[] = "luaV_free";LUAVIM_FREE44,1206
static const char LUAVIM_LUAEVAL[] = "luaV_luaeval";LUAVIM_LUAEVAL45,1253
static const char LUAVIM_SETREF[] = "luaV_setref";LUAVIM_SETREF46,1306
#define luaV_getudata(luaV_getudata51,1535
#define luaV_setudata(luaV_setudata54,1654
#define luaV_getfield(luaV_getfield58,1803
#define luaV_checksandbox(luaV_checksandbox61,1919
#define luaV_msg(luaV_msg63,2009
#define luaV_emsg(luaV_emsg64,2064
#define luaV_checktypval(luaV_checktypval65,2121
#define luaV_openlib(luaV_openlib77,2563
#define luaL_typeerror luaL_typeerror78,2621
#define luaV_openlib luaV_openlib80,2664
# define HANDLE HANDLE87,2761
# define load_dll(load_dll88,2783
# define symbol_from_dll symbol_from_dll89,2839
# define close_dll close_dll90,2870
# define load_dll load_dll92,2903
# define symbol_from_dll symbol_from_dll93,2932
# define close_dll close_dll94,2972
#define luaL_register luaL_register99,3049
#define luaL_prepbuffer luaL_prepbuffer100,3089
#define luaL_openlib luaL_openlib101,3133
#define luaL_typerror luaL_typerror102,3171
#define luaL_loadfile luaL_loadfile103,3211
#define luaL_loadbuffer luaL_loadbuffer104,3251
#define luaL_prepbuffsize luaL_prepbuffsize106,3301
#define luaL_setfuncs luaL_setfuncs107,3349
#define luaL_loadfilex luaL_loadfilex108,3389
#define luaL_loadbufferx luaL_loadbufferx109,3431
#define luaL_argerror luaL_argerror110,3477
#define luaL_checkany luaL_checkany112,3524
#define luaL_checklstring luaL_checklstring113,3564
#define luaL_checkinteger luaL_checkinteger114,3612
#define luaL_optinteger luaL_optinteger115,3660
#define luaL_checktype luaL_checktype116,3704
#define luaL_error luaL_error117,3746
#define luaL_newstate luaL_newstate118,3780
#define luaL_buffinit luaL_buffinit119,3820
#define luaL_addlstring luaL_addlstring120,3860
#define luaL_pushresult luaL_pushresult121,3904
#define lua_tonumber lua_tonumber124,3982
#define lua_tointeger lua_tointeger125,4020
#define lua_call lua_call126,4060
#define lua_pcall lua_pcall127,4090
#define lua_tonumberx lua_tonumberx129,4128
#define lua_tointegerx lua_tointegerx130,4168
#define lua_callk lua_callk131,4210
#define lua_pcallk lua_pcallk132,4242
#define lua_getglobal lua_getglobal133,4276
#define lua_setglobal lua_setglobal134,4316
#define lua_replace lua_replace137,4390
#define lua_remove lua_remove138,4426
#define lua_rotate lua_rotate141,4494
#define lua_copy lua_copy142,4528
#define lua_typename lua_typename144,4565
#define lua_close lua_close145,4603
#define lua_gettop lua_gettop146,4635
#define lua_settop lua_settop147,4669
#define lua_pushvalue lua_pushvalue148,4703
#define lua_isnumber lua_isnumber149,4743
#define lua_isstring lua_isstring150,4781
#define lua_type lua_type151,4819
#define lua_rawequal lua_rawequal152,4849
#define lua_toboolean lua_toboolean153,4887
#define lua_tolstring lua_tolstring154,4927
#define lua_touserdata lua_touserdata155,4967
#define lua_pushnil lua_pushnil156,5009
#define lua_pushnumber lua_pushnumber157,5045
#define lua_pushinteger lua_pushinteger158,5087
#define lua_pushlstring lua_pushlstring159,5131
#define lua_pushstring lua_pushstring160,5175
#define lua_pushfstring lua_pushfstring161,5217
#define lua_pushcclosure lua_pushcclosure162,5261
#define lua_pushboolean lua_pushboolean163,5307
#define lua_pushlightuserdata lua_pushlightuserdata164,5351
#define lua_getfield lua_getfield165,5407
#define lua_rawget lua_rawget166,5445
#define lua_rawgeti lua_rawgeti167,5479
#define lua_createtable lua_createtable168,5515
 #define lua_newuserdatauv lua_newuserdatauv170,5586
 #define lua_newuserdata lua_newuserdata172,5641
#define lua_getmetatable lua_getmetatable174,5693
#define lua_setfield lua_setfield175,5739
#define lua_rawset lua_rawset176,5777
#define lua_rawseti lua_rawseti177,5811
#define lua_setmetatable lua_setmetatable178,5847
#define lua_next lua_next179,5893
#define luaopen_base luaopen_base181,5931
#define luaopen_table luaopen_table182,5969
#define luaopen_string luaopen_string183,6009
#define luaopen_math luaopen_math184,6051
#define luaopen_io luaopen_io185,6089
#define luaopen_os luaopen_os186,6123
#define luaopen_package luaopen_package187,6157
#define luaopen_debug luaopen_debug188,6201
#define luaL_openlibs luaL_openlibs189,6241
void (*dll_luaL_register) (lua_State *L, const char *libname, const luaL_Reg *l);dll_luaL_register193,6320
char *(*dll_luaL_prepbuffer) (luaL_Buffer *B);dll_luaL_prepbuffer194,6402
void (*dll_luaL_openlib) (lua_State *L, const char *libname, const luaL_Reg *l, int nup);dll_luaL_openlib195,6449
int (*dll_luaL_typerror) (lua_State *L, int narg, const char *tname);dll_luaL_typerror196,6539
int (*dll_luaL_loadfile) (lua_State *L, const char *filename);dll_luaL_loadfile197,6609
int (*dll_luaL_loadbuffer) (lua_State *L, const char *buff, size_t sz, const char *name);dll_luaL_loadbuffer198,6672
char *(*dll_luaL_prepbuffsize) (luaL_Buffer *B, size_t sz);dll_luaL_prepbuffsize200,6768
void (*dll_luaL_setfuncs) (lua_State *L, const luaL_Reg *l, int nup);dll_luaL_setfuncs201,6828
int (*dll_luaL_loadfilex) (lua_State *L, const char *filename, const char *mode);dll_luaL_loadfilex202,6898
int (*dll_luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz, const char *name, const char *mode);dll_luaL_loadbufferx203,6980
int (*dll_luaL_argerror) (lua_State *L, int numarg, const char *extramsg);dll_luaL_argerror204,7089
void (*dll_luaL_checkany) (lua_State *L, int narg);dll_luaL_checkany206,7171
const char *(*dll_luaL_checklstring) (lua_State *L, int numArg, size_t *l);dll_luaL_checklstring207,7223
lua_Integer (*dll_luaL_checkinteger) (lua_State *L, int numArg);dll_luaL_checkinteger208,7299
lua_Integer (*dll_luaL_optinteger) (lua_State *L, int nArg, lua_Integer def);dll_luaL_optinteger209,7364
void (*dll_luaL_checktype) (lua_State *L, int narg, int t);dll_luaL_checktype210,7442
int (*dll_luaL_error) (lua_State *L, const char *fmt, ...);dll_luaL_error211,7502
lua_State *(*dll_luaL_newstate) (void);dll_luaL_newstate212,7562
void (*dll_luaL_buffinit) (lua_State *L, luaL_Buffer *B);dll_luaL_buffinit213,7602
void (*dll_luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l);dll_luaL_addlstring214,7660
void (*dll_luaL_pushresult) (luaL_Buffer *B);dll_luaL_pushresult215,7731
lua_Number (*dll_lua_tonumber) (lua_State *L, int idx);dll_lua_tonumber218,7811
lua_Integer (*dll_lua_tointeger) (lua_State *L, int idx);dll_lua_tointeger219,7867
void (*dll_lua_call) (lua_State *L, int nargs, int nresults);dll_lua_call220,7925
int (*dll_lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);dll_lua_pcall221,7987
lua_Number (*dll_lua_tonumberx) (lua_State *L, int idx, int *isnum);dll_lua_tonumberx223,8068
lua_Integer (*dll_lua_tointegerx) (lua_State *L, int idx, int *isnum);dll_lua_tointegerx224,8137
void (*dll_lua_callk) (lua_State *L, int nargs, int nresults, int ctx,dll_lua_callk225,8208
int (*dll_lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,dll_lua_pcallk227,8298
void (*dll_lua_getglobal) (lua_State *L, const char *var);dll_lua_getglobal229,8401
void (*dll_lua_setglobal) (lua_State *L, const char *var);dll_lua_setglobal230,8460
void (*dll_lua_replace) (lua_State *L, int idx);dll_lua_replace233,8553
void (*dll_lua_remove) (lua_State *L, int idx);dll_lua_remove234,8602
void  (*dll_lua_rotate) (lua_State *L, int idx, int n);dll_lua_rotate237,8684
void (*dll_lua_copy) (lua_State *L, int fromidx, int toidx);dll_lua_copy238,8740
const char *(*dll_lua_typename) (lua_State *L, int tp);dll_lua_typename240,8808
void       (*dll_lua_close) (lua_State *L);dll_lua_close241,8864
int (*dll_lua_gettop) (lua_State *L);dll_lua_gettop242,8908
void (*dll_lua_settop) (lua_State *L, int idx);dll_lua_settop243,8946
void (*dll_lua_pushvalue) (lua_State *L, int idx);dll_lua_pushvalue244,8994
int (*dll_lua_isnumber) (lua_State *L, int idx);dll_lua_isnumber245,9045
int (*dll_lua_isstring) (lua_State *L, int idx);dll_lua_isstring246,9094
int (*dll_lua_type) (lua_State *L, int idx);dll_lua_type247,9143
int (*dll_lua_rawequal) (lua_State *L, int idx1, int idx2);dll_lua_rawequal248,9188
int (*dll_lua_toboolean) (lua_State *L, int idx);dll_lua_toboolean249,9248
const char *(*dll_lua_tolstring) (lua_State *L, int idx, size_t *len);dll_lua_tolstring250,9298
void *(*dll_lua_touserdata) (lua_State *L, int idx);dll_lua_touserdata251,9369
void (*dll_lua_pushnil) (lua_State *L);dll_lua_pushnil252,9422
void (*dll_lua_pushnumber) (lua_State *L, lua_Number n);dll_lua_pushnumber253,9462
void (*dll_lua_pushinteger) (lua_State *L, lua_Integer n);dll_lua_pushinteger254,9519
void (*dll_lua_pushlstring) (lua_State *L, const char *s, size_t l);dll_lua_pushlstring255,9578
void (*dll_lua_pushstring) (lua_State *L, const char *s);dll_lua_pushstring256,9647
const char *(*dll_lua_pushfstring) (lua_State *L, const char *fmt, ...);dll_lua_pushfstring257,9705
void (*dll_lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);dll_lua_pushcclosure258,9778
void (*dll_lua_pushboolean) (lua_State *L, int b);dll_lua_pushboolean259,9848
void (*dll_lua_pushlightuserdata) (lua_State *L, void *p);dll_lua_pushlightuserdata260,9899
void (*dll_lua_getfield) (lua_State *L, int idx, const char *k);dll_lua_getfield261,9958
void (*dll_lua_rawget) (lua_State *L, int idx);dll_lua_rawget263,10050
void (*dll_lua_rawgeti) (lua_State *L, int idx, int n);dll_lua_rawgeti264,10098
int (*dll_lua_rawget) (lua_State *L, int idx);dll_lua_rawget266,10160
int (*dll_lua_rawgeti) (lua_State *L, int idx, lua_Integer n);dll_lua_rawgeti267,10207
void (*dll_lua_createtable) (lua_State *L, int narr, int nrec);dll_lua_createtable269,10277
void *(*dll_lua_newuserdatauv) (lua_State *L, size_t sz, int nuvalue);dll_lua_newuserdatauv271,10368
void *(*dll_lua_newuserdata) (lua_State *L, size_t sz);dll_lua_newuserdata273,10445
int (*dll_lua_getmetatable) (lua_State *L, int objindex);dll_lua_getmetatable275,10508
void (*dll_lua_setfield) (lua_State *L, int idx, const char *k);dll_lua_setfield276,10566
void (*dll_lua_rawset) (lua_State *L, int idx);dll_lua_rawset277,10631
void (*dll_lua_rawseti) (lua_State *L, int idx, int n);dll_lua_rawseti279,10706
void (*dll_lua_rawseti) (lua_State *L, int idx, lua_Integer n);dll_lua_rawseti281,10768
int (*dll_lua_setmetatable) (lua_State *L, int objindex);dll_lua_setmetatable283,10839
int (*dll_lua_next) (lua_State *L, int idx);dll_lua_next284,10897
int (*dll_luaopen_base) (lua_State *L);dll_luaopen_base286,10950
int (*dll_luaopen_table) (lua_State *L);dll_luaopen_table287,10990
int (*dll_luaopen_string) (lua_State *L);dll_luaopen_string288,11031
int (*dll_luaopen_math) (lua_State *L);dll_luaopen_math289,11073
int (*dll_luaopen_io) (lua_State *L);dll_luaopen_io290,11113
int (*dll_luaopen_os) (lua_State *L);dll_luaopen_os291,11151
int (*dll_luaopen_package) (lua_State *L);dll_luaopen_package292,11189
int (*dll_luaopen_debug) (lua_State *L);dll_luaopen_debug293,11232
void (*dll_luaL_openlibs) (lua_State *L);dll_luaL_openlibs294,11273
typedef void **luaV_function;luaV_function296,11316
    const char *name;name298,11363
    luaV_function func;func299,11385
} luaV_Reg;luaV_Reg300,11409
static const luaV_Reg luaV_dll[] = {luaV_dll302,11422
static HANDLE hinstLua = NULL;hinstLua399,16223
end_dynamic_lua(void)end_dynamic_lua402,16271
lua_link_init(char *libname, int verbose)lua_link_init412,16380
lua_enabled(int verbose)lua_enabled440,16940
luaL_typeerror(lua_State *L, int narg, const char *tname)luaL_typeerror448,17077
luaV_newmetatable(lua_State *L, const char *tname)luaV_newmetatable460,17338
luaV_toudata(lua_State *L, int ud, const char *tname)luaV_toudata469,17543
luaV_checkcache(lua_State *L, void *p)luaV_checkcache489,17938
#define luaV_unbox(luaV_unbox497,18099
#define luaV_checkvalid(luaV_checkvalid499,18173
luaV_checkudata(lua_State *L, int ud, const char *tname)luaV_checkudata503,18294
luaV_pushtypval(lua_State *L, typval_T *tv)luaV_pushtypval511,18477
luaV_totypval(lua_State *L, int pos, typval_T *tv)luaV_totypval561,19495
luaV_addlstring(luaL_Buffer *b, const char *s, size_t l, int toline)luaV_addlstring652,21601
luaV_pushline(lua_State *L, buf_T *buf, linenr_T n)luaV_pushline667,21873
luaV_toline(lua_State *L, int pos)luaV_toline677,22124
luaV_msgfunc(lua_State *L, msgfunc_T mf)luaV_msgfunc694,22500
#define luaV_newtype(luaV_newtype716,22944
#define luaV_pushtype(luaV_pushtype728,23272
#define luaV_type_tostring(luaV_type_tostring748,23690
luaV_newlist(lua_State *L, list_T *lis)luaV_newlist759,23943
luaV_list_len(lua_State *L)luaV_list_len774,24338
luaV_list_iter(lua_State *L)luaV_list_iter782,24488
luaV_list_call(lua_State *L)luaV_list_call793,24786
luaV_list_index(lua_State *L)luaV_list_index803,25059
luaV_list_newindex(lua_State *L)luaV_list_newindex832,25643
luaV_list_add(lua_State *L)luaV_list_add858,26177
luaV_list_insert(lua_State *L)luaV_list_insert875,26627
static const luaL_Reg luaV_List_mt[] = {luaV_List_mt899,27266
luaV_newdict(lua_State *L, dict_T *dic)luaV_newdict914,27624
luaV_dict_len(lua_State *L)luaV_dict_len929,28019
luaV_dict_iter(lua_State *L UNUSED)luaV_dict_iter937,28169
luaV_dict_call(lua_State *L)luaV_dict_call959,28761
luaV_dict_index(lua_State *L)luaV_dict_index971,29129
luaV_dict_newindex(lua_State *L)luaV_dict_newindex993,29609
static const luaL_Reg luaV_Dict_mt[] = {luaV_Dict_mt1042,30660
luaV_newblob(lua_State *L, blob_T *blo)luaV_newblob1055,30956
luaV_blob_gc(lua_State *L)luaV_blob_gc1070,31351
luaV_blob_len(lua_State *L)luaV_blob_len1078,31476
luaV_blob_index(lua_State *L)luaV_blob_index1086,31626
luaV_blob_newindex(lua_State *L)luaV_blob_newindex1114,32148
luaV_blob_add(lua_State *L)luaV_blob_add1137,32647
static const luaL_Reg luaV_Blob_mt[] = {luaV_Blob_mt1159,33184
luaV_newfuncref(lua_State *L, char_u *name)luaV_newfuncref1173,33510
luaV_pushfuncref(lua_State *L, char_u *name)luaV_pushfuncref1189,33848
luaV_funcref_gc(lua_State *L)luaV_funcref_gc1198,33996
luaV_funcref_len(lua_State *L)luaV_funcref_len1211,34352
luaV_funcref_call(lua_State *L)luaV_funcref_call1220,34526
static const luaL_Reg luaV_Funcref_mt[] = {luaV_Funcref_mt1252,35278
luaV_buffer_len(lua_State *L)luaV_buffer_len1268,35678
luaV_buffer_call(lua_State *L)luaV_buffer_call1276,35850
luaV_buffer_index(lua_State *L)luaV_buffer_index1285,36030
luaV_buffer_newindex(lua_State *L)luaV_buffer_newindex1320,36940
luaV_buffer_insert(lua_State *L)luaV_buffer_insert1388,38408
luaV_buffer_next(lua_State *L)luaV_buffer_next1423,39246
luaV_buffer_previous(lua_State *L)luaV_buffer_previous1432,39467
luaV_buffer_isvalid(lua_State *L)luaV_buffer_isvalid1441,39692
static const luaL_Reg luaV_Buffer_mt[] = {luaV_Buffer_mt1449,39873
luaV_window_call(lua_State *L)luaV_window_call1470,40462
luaV_window_index(lua_State *L)luaV_window_index1479,40627
luaV_window_newindex(lua_State *L)luaV_window_newindex1507,41407
luaV_window_next(lua_State *L)luaV_window_next1557,42441
luaV_window_previous(lua_State *L)luaV_window_previous1566,42662
luaV_window_isvalid(lua_State *L)luaV_window_isvalid1575,42887
static const luaL_Reg luaV_Window_mt[] = {luaV_Window_mt1583,43068
luaV_print(lua_State *L)luaV_print1598,43447
luaV_debug(lua_State *L)luaV_debug1625,44051
luaV_command(lua_State *L)luaV_command1650,44714
luaV_eval(lua_State *L)luaV_eval1658,44856
luaV_beep(lua_State *L UNUSED)luaV_beep1668,45087
luaV_line(lua_State *L)luaV_line1675,45175
luaV_list(lua_State *L)luaV_list1682,45286
luaV_dict(lua_State *L)luaV_dict1717,45944
luaV_blob(lua_State *L)luaV_blob1766,46932
luaV_funcref(lua_State *L)luaV_funcref1793,47444
luaV_buffer(lua_State *L)luaV_buffer1804,47773
luaV_window(lua_State *L)luaV_window1838,48482
luaV_open(lua_State *L)luaV_open1854,48834
luaV_type(lua_State *L)luaV_type1866,49092
static const luaL_Reg luaV_module[] = {luaV_module1916,50101
luaV_free(lua_State *L)luaV_free1936,50579
luaV_luaeval(lua_State *L)luaV_luaeval1944,50701
luaV_setref(lua_State *L)luaV_setref1973,51459
luaopen_vim(lua_State *L)luaopen_vim2011,52362
luaV_newstate(void)luaV_newstate2069,54210
luaV_setrange(lua_State *L, int line1, int line2)luaV_setrange2079,54405
static lua_State *L = NULL;L2092,54699
lua_isopen(void)lua_isopen2095,54743
lua_init(void)lua_init2101,54802
lua_end(void)lua_end2118,55025
ex_lua(exarg_T *eap)ex_lua2134,55181
ex_luado(exarg_T *eap)ex_luado2151,55590
ex_luafile(exarg_T *eap)ex_luafile2214,57186
#define luaV_freetype(luaV_freetype2226,57414
luaV_freetype(buf_T, buffer)luaV_freetype2236,57632
set_ref_in_lua(int copyID)set_ref_in_lua2251,57973

src/if_mzsch.c,26483
typedef int Scheme_Object;Scheme_Object33,1115
typedef int Scheme_Closed_Prim;Scheme_Closed_Prim34,1142
typedef int Scheme_Env;Scheme_Env35,1174
typedef int Scheme_Hash_Table;Scheme_Hash_Table36,1198
typedef int Scheme_Type;Scheme_Type37,1229
typedef int Scheme_Thread;Scheme_Thread38,1254
typedef int Scheme_Closed_Prim;Scheme_Closed_Prim39,1281
typedef int mzshort;mzshort40,1313
typedef int Scheme_Prim;Scheme_Prim41,1334
typedef int HINSTANCE;HINSTANCE42,1359
# define HAVE_TLS_SPACE HAVE_TLS_SPACE53,1716
# define TRAMPOLINED_MZVIM_STARTUPTRAMPOLINED_MZVIM_STARTUP63,2026
#define SCHEME_VIMBUFFERP(SCHEME_VIMBUFFERP67,2093
#define SCHEME_VIMWINDOWP(SCHEME_VIMWINDOWP68,2169
    Scheme_Object   so;so72,2263
    buf_T	    *buf;buf73,2287
} vim_mz_buffer;vim_mz_buffer74,2307
#define INVALID_BUFFER_VALUE INVALID_BUFFER_VALUE76,2325
    Scheme_Object   so;so80,2388
    win_T	    *win;win81,2412
} vim_mz_window;vim_mz_window82,2432
#define INVALID_WINDOW_VALUE INVALID_WINDOW_VALUE84,2450
    Scheme_Closed_Prim	*prim;prim91,2562
    char	*name;name92,2592
    int		mina;	// arity informationmina93,2608
    int		maxa;maxa94,2644
} Vim_Prim;Vim_Prim95,2659
    char	    *name;name99,2689
    Scheme_Object   *port;port100,2709
} Port_Info;Port_Info101,2736
# define OUTPUT_LEN_TYPE OUTPUT_LEN_TYPE137,4074
# define OUTPUT_LEN_TYPE OUTPUT_LEN_TYPE139,4114
static int buffer_size_proc(void *obj UNUSED)buffer_size_proc175,5694
static int buffer_mark_proc(void *obj)buffer_mark_proc179,5796
static int buffer_fixup_proc(void *obj)buffer_fixup_proc183,5873
static int window_size_proc(void *obj UNUSED)window_size_proc192,6154
static int window_mark_proc(void *obj)window_mark_proc196,6256
static int window_fixup_proc(void *obj)window_fixup_proc200,6333
# define WINDOW_REF(WINDOW_REF212,6785
# define BUFFER_REF(BUFFER_REF213,6853
# define WINDOW_REF(WINDOW_REF215,6927
# define BUFFER_REF(BUFFER_REF216,6993
static Scheme_Object *dll_scheme_eof;dll_scheme_eof220,7115
static Scheme_Object *dll_scheme_false;dll_scheme_false221,7153
static Scheme_Object *dll_scheme_void;dll_scheme_void222,7193
static Scheme_Object *dll_scheme_null;dll_scheme_null223,7232
static Scheme_Object *dll_scheme_true;dll_scheme_true224,7271
static Scheme_Thread **dll_scheme_current_thread_ptr;dll_scheme_current_thread_ptr226,7311
static void (**dll_scheme_console_printf_ptr)(char *str, ...);dll_scheme_console_printf_ptr228,7366
static void (**dll_scheme_console_output_ptr)(char *str, OUTPUT_LEN_TYPE len);dll_scheme_console_output_ptr229,7429
static void (**dll_scheme_notify_multithread_ptr)(int on);dll_scheme_notify_multithread_ptr230,7508
static void *(*dll_GC_malloc)(size_t size_in_bytes);dll_GC_malloc232,7568
static void *(*dll_GC_malloc_atomic)(size_t size_in_bytes);dll_GC_malloc_atomic233,7621
static Scheme_Env *(*dll_scheme_basic_env)(void);dll_scheme_basic_env234,7681
static void (*dll_scheme_check_threads)(void);dll_scheme_check_threads235,7731
static void (*dll_scheme_register_static)(void *ptr, long size);dll_scheme_register_static236,7778
static void (*dll_scheme_set_stack_base)(void *base, int no_auto_statics);dll_scheme_set_stack_base237,7843
static void (*dll_scheme_add_global)(const char *name, Scheme_Object *val,dll_scheme_add_global238,7918
static void (*dll_scheme_add_global_symbol)(Scheme_Object *name,dll_scheme_add_global_symbol240,8012
static Scheme_Object *(*dll_scheme_apply)(Scheme_Object *rator, int num_rands,dll_scheme_apply242,8116
static Scheme_Object *(*dll_scheme_builtin_value)(const char *name);dll_scheme_builtin_value244,8220
static Scheme_Object *(*dll_scheme_byte_string_to_char_string)(Scheme_Object *s);dll_scheme_byte_string_to_char_string246,8324
static Scheme_Object *(*dll_scheme_make_path)(const char *chars);dll_scheme_make_path247,8406
static void (*dll_scheme_close_input_port)(Scheme_Object *port);dll_scheme_close_input_port249,8480
static void (*dll_scheme_count_lines)(Scheme_Object *port);dll_scheme_count_lines250,8545
static Scheme_Object *(*dll_scheme_current_continuation_marks)(void);dll_scheme_current_continuation_marks252,8638
static Scheme_Object *(*dll_scheme_current_continuation_marks)(Scheme_Object *prompt_tag);dll_scheme_current_continuation_marks254,8714
static void (*dll_scheme_display)(Scheme_Object *obj, Scheme_Object *port);dll_scheme_display256,8812
static char *(*dll_scheme_display_to_string)(Scheme_Object *obj, OUTPUT_LEN_TYPE *len);dll_scheme_display_to_string257,8888
static int (*dll_scheme_eq)(Scheme_Object *obj1, Scheme_Object *obj2);dll_scheme_eq258,8976
static Scheme_Object *(*dll_scheme_do_eval)(Scheme_Object *obj,dll_scheme_do_eval259,9047
static void (*dll_scheme_dont_gc_ptr)(void *p);dll_scheme_dont_gc_ptr261,9161
static Scheme_Object *(*dll_scheme_eval)(Scheme_Object *obj, Scheme_Env *env);dll_scheme_eval262,9209
static Scheme_Object *(*dll_scheme_eval_string)(const char *str,dll_scheme_eval_string263,9288
static Scheme_Object *(*dll_scheme_eval_string_all)(const char *str,dll_scheme_eval_string_all265,9372
static void (*dll_scheme_finish_primitive_module)(Scheme_Env *env);dll_scheme_finish_primitive_module267,9469
static char *(*dll_scheme_format)(char *format, int flen, int argc,dll_scheme_format269,9571
static char *(*dll_scheme_format_utf8)(char *format, int flen, int argc,dll_scheme_format_utf8272,9682
static Scheme_Object *(*dll_scheme_get_param)(Scheme_Config *c, int pos);dll_scheme_get_param274,9802
static void (*dll_scheme_gc_ptr_ok)(void *p);dll_scheme_gc_ptr_ok276,9884
static char *(*dll_scheme_get_sized_string_output)(Scheme_Object *,dll_scheme_get_sized_string_output278,9964
static char *(*dll_scheme_get_sized_byte_string_output)(Scheme_Object *,dll_scheme_get_sized_byte_string_output281,10052
static Scheme_Object *(*dll_scheme_intern_symbol)(const char *name);dll_scheme_intern_symbol284,10157
static Scheme_Object *(*dll_scheme_lookup_global)(Scheme_Object *symbol,dll_scheme_lookup_global285,10226
static Scheme_Object *(*dll_scheme_make_closed_prim_w_arity)dll_scheme_make_closed_prim_w_arity287,10318
static Scheme_Object *(*dll_scheme_make_integer_value)(long i);dll_scheme_make_integer_value290,10474
static Scheme_Object *(*dll_scheme_make_pair)(Scheme_Object *car,dll_scheme_make_pair291,10538
static Scheme_Object *(*dll_scheme_make_prim_w_arity)(Scheme_Prim *prim,dll_scheme_make_prim_w_arity293,10626
static Scheme_Object *(*dll_scheme_make_string)(const char *chars);dll_scheme_make_string296,10781
static Scheme_Object *(*dll_scheme_make_string_output_port)();dll_scheme_make_string_output_port297,10849
static Scheme_Object *(*dll_scheme_make_byte_string)(const char *chars);dll_scheme_make_byte_string299,10919
static Scheme_Object *(*dll_scheme_make_byte_string_output_port)();dll_scheme_make_byte_string_output_port300,10992
static Scheme_Object *(*dll_scheme_make_struct_instance)(Scheme_Object *stype,dll_scheme_make_struct_instance302,11068
static Scheme_Object **(*dll_scheme_make_struct_names)(Scheme_Object *base,dll_scheme_make_struct_names304,11181
static Scheme_Object *(*dll_scheme_make_struct_type)(Scheme_Object *base,dll_scheme_make_struct_type306,11314
static Scheme_Object **(*dll_scheme_make_struct_values)(dll_scheme_make_struct_values314,11603
static Scheme_Type (*dll_scheme_make_type)(const char *name);dll_scheme_make_type317,11736
static Scheme_Object *(*dll_scheme_make_vector)(int size,dll_scheme_make_vector318,11798
static void *(*dll_scheme_malloc_fail_ok)(void *(*f)(size_t), size_t);dll_scheme_malloc_fail_ok320,11879
static Scheme_Object *(*dll_scheme_open_input_file)(const char *name,dll_scheme_open_input_file321,11950
static Scheme_Env *(*dll_scheme_primitive_module)(Scheme_Object *name,dll_scheme_primitive_module323,12039
static int (*dll_scheme_proper_list_length)(Scheme_Object *list);dll_scheme_proper_list_length325,12133
static void (*dll_scheme_raise)(Scheme_Object *exn);dll_scheme_raise326,12199
static Scheme_Object *(*dll_scheme_read)(Scheme_Object *port);dll_scheme_read327,12252
static void (*dll_scheme_signal_error)(const char *msg, ...);dll_scheme_signal_error328,12315
static void (*dll_scheme_wrong_type)(const char *name, const char *expected,dll_scheme_wrong_type329,12377
static void (*dll_scheme_set_param)(Scheme_Config *c, int pos,dll_scheme_set_param332,12534
static Scheme_Config *(*dll_scheme_current_config)(void);dll_scheme_current_config334,12617
static Scheme_Object *(*dll_scheme_char_string_to_byte_string)dll_scheme_char_string_to_byte_string335,12675
static Scheme_Object *(*dll_scheme_char_string_to_path)dll_scheme_char_string_to_path337,12762
static void *(*dll_scheme_set_collects_path)(Scheme_Object *p);dll_scheme_set_collects_path339,12842
static Scheme_Hash_Table *(*dll_scheme_make_hash_table)(int type);dll_scheme_make_hash_table341,12914
static void (*dll_scheme_hash_set)(Scheme_Hash_Table *table,dll_scheme_hash_set342,12981
static Scheme_Object *(*dll_scheme_hash_get)(Scheme_Hash_Table *table,dll_scheme_hash_get344,13086
static Scheme_Object *(*dll_scheme_make_double)(double d);dll_scheme_make_double346,13179
static Scheme_Object *(*dll_scheme_make_sized_byte_string)(char *chars,dll_scheme_make_sized_byte_string347,13238
static Scheme_Object *(*dll_scheme_namespace_require)(Scheme_Object *req);dll_scheme_namespace_require349,13332
static Scheme_Object *(*dll_scheme_dynamic_wind)(void (*pre)(void *), Scheme_Object *(* volatile act)(void *), void (* volatile post)(void *), Scheme_Object *(*jmp_handler)(void *), void * volatile data);dll_scheme_dynamic_wind350,13407
static void *(*dll_GC_malloc_one_tagged)(size_t size_in_bytes);dll_GC_malloc_one_tagged352,13634
static void (*dll_GC_register_traversers)(short tag, Size_Proc size, Mark_Proc mark, Fixup_Proc fixup, int is_constant_size, int is_atomic);dll_GC_register_traversers353,13698
static void (*dll_scheme_init_collection_paths)(Scheme_Env *global_env, Scheme_Object *extra_dirs);dll_scheme_init_collection_paths356,13882
static void **(*dll_scheme_malloc_immobile_box)(void *p);dll_scheme_malloc_immobile_box357,13982
static void (*dll_scheme_free_immobile_box)(void **b);dll_scheme_free_immobile_box358,14040
static int (*dll_scheme_main_setup)(int no_auto_statics, Scheme_Env_Main _main, int argc, char **argv);dll_scheme_main_setup362,14173
static void (*dll_scheme_register_tls_space)(void *tls_space, int _tls_index);dll_scheme_register_tls_space364,14361
static Thread_Local_Variables *(*dll_scheme_external_get_thread_local_variables)(void);dll_scheme_external_get_thread_local_variables368,14564
static void (*dll_scheme_embedded_load)(intptr_t len, const char *s, int predefined);dll_scheme_embedded_load372,14704
static void (*dll_scheme_register_embedded_load)(intptr_t len, const char *s);dll_scheme_register_embedded_load373,14790
static void (*dll_scheme_set_config_path)(Scheme_Object *p);dll_scheme_set_config_path374,14869
# define scheme_eof scheme_eof380,15029
# define scheme_false scheme_false381,15064
# define scheme_void scheme_void382,15103
# define scheme_null scheme_null383,15140
# define scheme_true scheme_true384,15177
#  define scheme_current_thread scheme_current_thread388,15342
# define scheme_console_printf scheme_console_printf390,15415
# define scheme_console_output scheme_console_output391,15479
# define scheme_notify_multithread scheme_notify_multithread392,15543
# define GC_malloc GC_malloc395,15648
# define GC_malloc_atomic GC_malloc_atomic396,15681
# define scheme_add_global scheme_add_global398,15729
# define scheme_add_global_symbol scheme_add_global_symbol399,15778
# define scheme_apply scheme_apply400,15841
# define scheme_basic_env scheme_basic_env401,15880
# define scheme_builtin_value scheme_builtin_value402,15927
#  define scheme_byte_string_to_char_string scheme_byte_string_to_char_string404,16017
#  define scheme_make_path scheme_make_path405,16099
# define scheme_check_threads scheme_check_threads407,16155
# define scheme_close_input_port scheme_close_input_port408,16210
# define scheme_count_lines scheme_count_lines409,16271
# define scheme_current_continuation_marks scheme_current_continuation_marks410,16322
# define scheme_display scheme_display412,16409
# define scheme_display_to_string scheme_display_to_string413,16452
# define scheme_do_eval scheme_do_eval414,16515
# define scheme_dont_gc_ptr scheme_dont_gc_ptr415,16558
# define scheme_eq scheme_eq416,16609
# define scheme_eval scheme_eval417,16642
# define scheme_eval_string scheme_eval_string418,16679
# define scheme_eval_string_all scheme_eval_string_all419,16730
# define scheme_finish_primitive_module scheme_finish_primitive_module420,16789
#  define scheme_format scheme_format422,16898
#  define scheme_format_utf8 scheme_format_utf8424,16947
# define scheme_gc_ptr_ok scheme_gc_ptr_ok426,17007
#  define scheme_get_sized_byte_string_output scheme_get_sized_byte_string_output428,17088
#  define scheme_get_sized_byte_string_output scheme_get_sized_byte_string_output430,17176
#  define scheme_get_param scheme_get_param432,17268
# define scheme_intern_symbol scheme_intern_symbol434,17324
# define scheme_lookup_global scheme_lookup_global435,17379
# define scheme_make_closed_prim_w_arity scheme_make_closed_prim_w_arity436,17434
# define scheme_make_integer_value scheme_make_integer_value437,17511
# define scheme_make_pair scheme_make_pair438,17576
# define scheme_make_prim_w_arity scheme_make_prim_w_arity439,17623
#  define scheme_make_byte_string scheme_make_byte_string441,17720
#  define scheme_make_byte_string_output_port scheme_make_byte_string_output_port442,17777
#  define scheme_make_byte_string scheme_make_byte_string444,17865
#  define scheme_make_byte_string_output_port scheme_make_byte_string_output_port445,17927
# define scheme_make_struct_instance scheme_make_struct_instance448,18027
# define scheme_make_struct_names scheme_make_struct_names449,18096
# define scheme_make_struct_type scheme_make_struct_type450,18159
# define scheme_make_struct_values scheme_make_struct_values451,18220
# define scheme_make_type scheme_make_type452,18285
# define scheme_make_vector scheme_make_vector453,18332
# define scheme_malloc_fail_ok scheme_malloc_fail_ok454,18383
# define scheme_open_input_file scheme_open_input_file455,18440
# define scheme_primitive_module scheme_primitive_module456,18499
# define scheme_proper_list_length scheme_proper_list_length457,18560
# define scheme_raise scheme_raise458,18625
# define scheme_read scheme_read459,18664
# define scheme_register_static scheme_register_static460,18701
# define scheme_set_stack_base scheme_set_stack_base461,18760
# define scheme_signal_error scheme_signal_error462,18817
# define scheme_wrong_type scheme_wrong_type463,18870
#  define scheme_set_param scheme_set_param465,18954
#  define scheme_current_config scheme_current_config466,19002
#  define scheme_char_string_to_byte_string scheme_char_string_to_byte_string467,19060
#  define scheme_char_string_to_path scheme_char_string_to_path469,19148
#  define scheme_set_collects_path scheme_set_collects_path471,19222
# define scheme_make_hash_table scheme_make_hash_table473,19294
# define scheme_hash_set scheme_hash_set474,19353
# define scheme_hash_get scheme_hash_get475,19398
# define scheme_make_double scheme_make_double476,19443
# define scheme_make_sized_byte_string scheme_make_sized_byte_string477,19494
# define scheme_namespace_require scheme_namespace_require478,19567
# define scheme_dynamic_wind scheme_dynamic_wind479,19630
#  define GC_malloc_one_tagged GC_malloc_one_tagged481,19705
#  define GC_register_traversers GC_register_traversers482,19761
#   define scheme_main_setup scheme_main_setup486,19899
#    define scheme_register_tls_space scheme_register_tls_space488,20034
#  define scheme_init_collection_paths scheme_init_collection_paths491,20121
#  define scheme_malloc_immobile_box scheme_malloc_immobile_box492,20193
#  define scheme_free_immobile_box scheme_free_immobile_box493,20261
#  define scheme_embedded_load scheme_embedded_load496,20368
#  define scheme_register_embedded_load scheme_register_embedded_load497,20424
#  define scheme_set_config_path scheme_set_config_path498,20498
scheme_external_get_thread_local_variables(void)scheme_external_get_thread_local_variables505,20779
    char    *name;name516,20936
    void    **ptr;ptr517,20955
} Thunk_Info;Thunk_Info518,20974
static Thunk_Info mzgc_imports[] = {mzgc_imports520,20989
static Thunk_Info mzsch_imports[] = {mzsch_imports525,21148
static HINSTANCE hMzGC = 0;hMzGC651,27670
static HINSTANCE hMzSch = 0;hMzSch652,27698
mzscheme_runtime_link_init(char *sch_dll, char *gc_dll, int verbose)mzscheme_runtime_link_init659,27866
mzscheme_enabled(int verbose)mzscheme_enabled714,28898
dynamic_mzscheme_end(void)dynamic_mzscheme_end721,29057
# define GUARANTEED_STRING_ARG(GUARANTEED_STRING_ARG737,29272
guaranteed_byte_string_arg(char *proc, int num, int argc, Scheme_Object **argv)guaranteed_byte_string_arg740,29375
# define GUARANTEED_STRING_ARG(GUARANTEED_STRING_ARG762,29896
static Scheme_Type mz_buffer_type;mz_buffer_type776,30310
static Scheme_Type mz_window_type;mz_window_type777,30345
static int initialized = FALSE;initialized779,30381
static int disabled = FALSE;disabled781,30437
static int load_base_module_failed = FALSE;load_base_module_failed783,30473
static Scheme_Env    *environment = NULL;environment786,30540
static Scheme_Object *curout = NULL;curout788,30607
static Scheme_Object *curerr = NULL;curerr789,30644
static Scheme_Object *exn_catching_apply = NULL;exn_catching_apply791,30702
static Scheme_Object *exn_p = NULL;exn_p792,30751
static Scheme_Object *exn_message = NULL;exn_message793,30787
static Scheme_Object *vim_exn = NULL; // Vim Error exceptionvim_exn794,30829
static void *stack_base = NULL;stack_base797,30951
static long range_start;range_start800,30991
static long range_end;range_end801,31016
static int mz_threads_allow = 0;mz_threads_allow804,31077
static UINT timer_id = 0;timer_id808,31201
static guint timer_id = 0;timer_id811,31293
static XtIntervalId timer_id = (XtIntervalId)0;timer_id814,31429
static EventLoopTimerRef timer_id = NULL;timer_id817,31556
static EventLoopTimerUPP timerUPP;timerUPP818,31598
mzvim_check_threads(void)mzvim_check_threads823,31724
timer_proc(HWND hwnd UNUSED, UINT uMsg UNUSED, UINT_PTR idEvent UNUSED, DWORD dwTime UNUSED)timer_proc848,32234
setup_timer(void)setup_timer872,33004
remove_timer(void)remove_timer888,33590
mzvim_reset_timer(void)mzvim_reset_timer904,33964
notify_multithread(int on)notify_multithread915,34150
mzscheme_end(void)mzscheme_end927,34372
static __thread void *tls_space;tls_space942,34682
static THREAD_LOCAL void *tls_space;tls_space945,34750
static intptr_t _tls_index = 0;_tls_index946,34787
mzscheme_main(void)mzscheme_main956,35028
mzscheme_env_main(Scheme_Env *env, int argc UNUSED, char **argv UNUSED)mzscheme_env_main983,35619
load_base_module(void *data)load_base_module1008,36144
load_base_module_on_error(void *data UNUSED)load_base_module_on_error1015,36295
startup_mzscheme(void)startup_mzscheme1022,36420
mzscheme_init(void)mzscheme_init1252,42238
eval_with_exn_handling(void *data, Scheme_Closed_Prim *what, Scheme_Object **ret)eval_with_exn_handling1302,43474
do_mzscheme_command(exarg_T *eap, void *data, Scheme_Closed_Prim *what)do_mzscheme_command1352,44573
mzscheme_buffer_free(buf_T *buf)mzscheme_buffer_free1367,44866
mzscheme_window_free(win_T *win)mzscheme_window_free1393,45320
ex_mzscheme(exarg_T *eap)ex_mzscheme1418,45751
do_load(void *data, int noargc UNUSED, Scheme_Object **noargv UNUSED)do_load1436,46056
ex_mzfile(exarg_T *eap)ex_mzfile1478,47163
init_exn_catching_apply(void)init_exn_catching_apply1504,47838
_apply_thunk_catch_exceptions(Scheme_Object *f, Scheme_Object **exn)_apply_thunk_catch_exceptions1528,48446
extract_exn_message(Scheme_Object *v)extract_exn_message1545,48792
do_eval(void *s, int noargc UNUSED, Scheme_Object **noargv UNUSED)do_eval1554,49003
do_intrnl_output(char *mesg, int error)do_intrnl_output1565,49343
do_output(char *mesg, OUTPUT_LEN_TYPE len UNUSED)do_output1589,49649
do_err_output(char *mesg)do_err_output1596,49810
do_printf(char *format, ...)do_printf1602,49888
do_flush(void)do_flush1608,49971
vim_command(void *data, int argc, Scheme_Object **argv)vim_command1637,50583
vim_eval(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)vim_eval1659,51097
get_range_start(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)get_range_start1694,51905
get_range_end(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)get_range_end1703,52085
mzscheme_beep(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)mzscheme_beep1712,52256
static Scheme_Object *M_global = NULL;M_global1718,52387
get_option(void *data, int argc, Scheme_Object **argv)get_option1724,52507
set_option(void *data, int argc, Scheme_Object **argv)set_option1804,54227
get_curr_win(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)get_curr_win1867,55716
get_window_count(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)get_window_count1876,55899
get_window_list(void *data, int argc, Scheme_Object **argv)get_window_list1890,56147
window_new(win_T *win)window_new1911,56606
get_window_num(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)get_window_num1950,57710
get_window_by_num(void *data, int argc, Scheme_Object **argv)get_window_by_num1967,58094
get_window_buffer(void *data, int argc, Scheme_Object **argv)get_window_buffer1988,58587
get_window_height(void *data, int argc, Scheme_Object **argv)get_window_height2000,58874
set_window_height(void *data, int argc, Scheme_Object **argv)set_window_height2012,59179
get_window_width(void *data, int argc, Scheme_Object **argv)get_window_width2039,59736
set_window_width(void *data, int argc, Scheme_Object **argv)set_window_width2051,60037
get_cursor(void *data, int argc, Scheme_Object **argv)get_cursor2078,60608
set_cursor(void *data, int argc, Scheme_Object **argv)set_cursor2094,61036
mzscheme_open_buffer(void *data, int argc, Scheme_Object **argv)mzscheme_open_buffer2135,62150
get_buffer_by_num(void *data, int argc, Scheme_Object **argv)get_buffer_by_num2169,62970
get_buffer_by_name(void *data, int argc, Scheme_Object **argv)get_buffer_by_name2188,63345
get_next_buffer(void *data, int argc, Scheme_Object **argv)get_next_buffer2226,64211
get_prev_buffer(void *data, int argc, Scheme_Object **argv)get_prev_buffer2241,64536
get_buffer_num(void *data, int argc, Scheme_Object **argv)get_buffer_num2256,64860
get_buffer_count(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)get_buffer_count2268,65138
get_buffer_name(void *data, int argc, Scheme_Object **argv)get_buffer_name2281,65386
get_curr_buffer(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)get_curr_buffer2293,65678
buffer_new(buf_T *buf)buffer_new2299,65842
get_buffer_size(void *data, int argc, Scheme_Object **argv)get_buffer_size2336,66813
get_buffer_line(void *data, int argc, Scheme_Object **argv)get_buffer_line2352,67269
get_buffer_line_list(void *data, int argc, Scheme_Object **argv)get_buffer_line_list2376,67982
set_buffer_line(void *data, int argc, Scheme_Object **argv)set_buffer_line2432,69333
free_array(char **array)free_array2526,71431
set_buffer_line_list(void *data, int argc, Scheme_Object **argv)set_buffer_line_list2547,72127
insert_buffer_line_list(void *data, int argc, Scheme_Object **argv)insert_buffer_line_list2742,77331
vim_bufferp(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)vim_bufferp2872,80107
vim_windowp(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)vim_windowp2884,80318
vim_buffer_validp(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)vim_buffer_validp2896,80536
vim_window_validp(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)vim_window_validp2909,80823
string_to_line(Scheme_Object *obj)string_to_line2933,81476
vim_to_mzscheme(typval_T *vim_value)vim_to_mzscheme2971,82373
vim_to_mzscheme_impl(typval_T *vim_value, int depth, Scheme_Hash_Table *visited)vim_to_mzscheme_impl2992,82862
mzscheme_to_vim(Scheme_Object *obj, typval_T *tv)mzscheme_to_vim3162,87041
mzscheme_to_vim_impl(Scheme_Object *obj, typval_T *tv, int depth,mzscheme_to_vim_impl3187,87602
vim_funcref(void *name, int argc, Scheme_Object **argv)vim_funcref3393,92412
do_mzeval(char_u *str, typval_T *rettv)do_mzeval3451,93548
vim_error_check(void)vim_error_check3478,94039
register_vim_exn(void)register_vim_exn3487,94150
raise_vim_exn(const char *add_info)raise_vim_exn3545,95510
raise_if_error(void)raise_if_error3602,96875
get_buffer_arg(const char *fname, int argnum, int argc, Scheme_Object **argv)get_buffer_arg3614,97058
get_window_arg(const char *fname, int argnum, int argc, Scheme_Object **argv)get_window_arg3633,97528
buf_T *get_valid_buffer(void *obj)get_valid_buffer3649,97941
win_T *get_valid_window(void *obj)get_valid_window3661,98178
mzthreads_allowed(void)mzthreads_allowed3670,98371
line_in_range(linenr_T lnum, buf_T *buf)line_in_range3676,98444
check_line_range(linenr_T lnum, buf_T *buf)check_line_range3682,98564
mz_fix_cursor(int lo, int hi, int extra)mz_fix_cursor3695,98943
static Vim_Prim prims[]=prims3718,99376
get_vim_curr_buffer(void)get_vim_curr_buffer3776,101334
get_vim_curr_window(void)get_vim_curr_window3788,101559
make_modules(void)make_modules3797,101728
static Scheme_Object *M_write = NULL;M_write3829,102630
static Scheme_Object *M_read = NULL;M_read3830,102668
static Scheme_Object *M_execute = NULL;M_execute3831,102705
static Scheme_Object *M_delete = NULL;M_delete3832,102745
sandbox_check(void)sandbox_check3835,102801
sandbox_file_guard(int argc UNUSED, Scheme_Object **argv)sandbox_file_guard3845,103003
sandbox_network_guard(int argc UNUSED, Scheme_Object **argv UNUSED)sandbox_network_guard3889,104051

src/if_perlsfio.c,234
#define _memory_h	_memory_h13,344
#define IN_PERL_FILE	IN_PERL_FILE14,392
# define Sfio_t Sfio_t21,561
# define Sfdisc_t Sfdisc_t22,581
#define NIL(NIL25,611
sfvimwrite(sfvimwrite28,655
sfdcnewvim(void)sfdcnewvim50,1055

src/if_python3.c,25357
# undef HAVE_FCNTL_HHAVE_FCNTL_H37,1075
# undef _DEBUG_DEBUG41,1118
# undef F_BLANKF_BLANK45,1156
# undef HAVE_STRFTIMEHAVE_STRFTIME49,1201
# undef HAVE_STRING_HHAVE_STRING_H52,1251
# undef HAVE_PUTENVHAVE_PUTENV55,1299
# undef HAVE_STDARG_H HAVE_STDARG_H58,1347
# undef _POSIX_C_SOURCE_POSIX_C_SOURCE61,1467
# undef _XOPEN_SOURCE	_XOPEN_SOURCE64,1519
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN67,1583
#undef main main71,1630
#undef HAVE_FCNTL_H HAVE_FCNTL_H72,1673
# define CODEC_ERROR_HANDLER CODEC_ERROR_HANDLER76,1812
# define CODEC_ERROR_HANDLER CODEC_ERROR_HANDLER78,1865
#define PY_USE_CAPSULEPY_USE_CAPSULE82,1966
#define PyInt PyInt84,1990
# define PyString_Check(PyString_Check86,2038
#define PyString_FromString(PyString_FromString88,2095
#define PyString_FromFormat PyString_FromFormat90,2187
# define PyInt_Check(PyInt_Check92,2256
#define PyInt_FromLong(PyInt_FromLong94,2307
#define PyInt_AsLong(PyInt_AsLong95,2352
#define Py_ssize_t_fmt Py_ssize_t_fmt96,2397
#define Py_bytes_fmt Py_bytes_fmt97,2424
#define PyIntArgFunc	PyIntArgFunc99,2450
#define PyIntObjArgProc	PyIntObjArgProc100,2484
typedef PyObject PySliceObject_T;PySliceObject_T107,2678
typedef PySliceObject PySliceObject_T;PySliceObject_T109,2718
#  define FARPROC FARPROC116,2849
#  define HINSTANCE HINSTANCE117,2873
#   define load_dll(load_dll119,2963
#   define load_dll(load_dll121,3017
#  define close_dll close_dll123,3084
#  define symbol_from_dll symbol_from_dll124,3112
#  define load_dll load_dll126,3151
#  define close_dll close_dll127,3181
#  define symbol_from_dll symbol_from_dll128,3213
# undef PyArg_ParsePyArg_Parse133,3288
# define PyArg_Parse PyArg_Parse134,3308
# undef PyArg_ParseTuplePyArg_ParseTuple135,3345
# define PyArg_ParseTuple PyArg_ParseTuple136,3370
# define PyMem_Free PyMem_Free137,3417
# define PyMem_Malloc PyMem_Malloc138,3452
# define PyDict_SetItemString PyDict_SetItemString139,3491
# define PyErr_BadArgument PyErr_BadArgument140,3546
# define PyErr_Clear PyErr_Clear141,3595
# define PyErr_Format PyErr_Format142,3632
# define PyErr_PrintEx PyErr_PrintEx143,3671
# define PyErr_NoMemory PyErr_NoMemory144,3712
# define PyErr_Occurred PyErr_Occurred145,3755
# define PyErr_SetNone PyErr_SetNone146,3798
# define PyErr_SetString PyErr_SetString147,3839
# define PyErr_SetObject PyErr_SetObject148,3884
# define PyErr_ExceptionMatches PyErr_ExceptionMatches149,3929
# define PyEval_InitThreads PyEval_InitThreads150,3988
# define PyEval_RestoreThread PyEval_RestoreThread151,4039
# define PyEval_SaveThread PyEval_SaveThread152,4094
# define PyGILState_Ensure PyGILState_Ensure153,4143
# define PyGILState_Release PyGILState_Release154,4192
# define PyLong_AsLong PyLong_AsLong155,4243
# define PyLong_FromLong PyLong_FromLong156,4284
# define PyList_GetItem PyList_GetItem157,4329
# define PyList_Append PyList_Append158,4372
# define PyList_Insert PyList_Insert159,4413
# define PyList_New PyList_New160,4454
# define PyList_SetItem PyList_SetItem161,4489
# define PyList_Size PyList_Size162,4532
# define PySequence_Check PySequence_Check163,4569
# define PySequence_Size PySequence_Size164,4616
# define PySequence_GetItem PySequence_GetItem165,4661
# define PySequence_Fast PySequence_Fast166,4712
# define PyTuple_Size PyTuple_Size167,4757
# define PyTuple_GetItem PyTuple_GetItem168,4796
#  define PySlice_AdjustIndices PySlice_AdjustIndices170,4875
#  define PySlice_Unpack PySlice_Unpack171,4933
# undef PySlice_GetIndicesExPySlice_GetIndicesEx173,4985
# define PySlice_GetIndicesEx PySlice_GetIndicesEx174,5014
# define PyImport_ImportModule PyImport_ImportModule175,5069
# define PyObject_Init PyObject_Init176,5126
# define PyDict_New PyDict_New177,5168
# define PyDict_GetItemString PyDict_GetItemString178,5203
# define PyDict_Next PyDict_Next179,5258
# define PyMapping_Check PyMapping_Check180,5295
#  define PyMapping_Keys PyMapping_Keys182,5364
# define PyIter_Next PyIter_Next184,5416
# define PyObject_GetIter PyObject_GetIter185,5453
# define PyObject_Repr PyObject_Repr186,5500
# define PyObject_GetItem PyObject_GetItem187,5541
# define PyObject_IsTrue PyObject_IsTrue188,5588
# define PyModule_GetDict PyModule_GetDict189,5633
#undef PyRun_SimpleStringPyRun_SimpleString190,5680
# define PyRun_SimpleString PyRun_SimpleString191,5706
#undef PyRun_StringPyRun_String192,5757
# define PyRun_String PyRun_String193,5777
# define PyObject_GetAttrString PyObject_GetAttrString194,5816
# define PyObject_HasAttrString PyObject_HasAttrString195,5875
# define PyObject_SetAttrString PyObject_SetAttrString196,5934
# define PyObject_CallFunctionObjArgs PyObject_CallFunctionObjArgs197,5993
# define _PyObject_CallFunction_SizeT _PyObject_CallFunction_SizeT198,6064
# define PyObject_Call PyObject_Call199,6135
# define PyEval_GetLocals PyEval_GetLocals200,6176
# define PyEval_GetGlobals PyEval_GetGlobals201,6223
# define PySys_SetObject PySys_SetObject202,6272
# define PySys_GetObject PySys_GetObject203,6317
# define PySys_SetArgv PySys_SetArgv204,6362
# define PyType_Ready PyType_Ready205,6403
#undef Py_BuildValuePy_BuildValue206,6442
# define Py_BuildValue Py_BuildValue207,6463
# define Py_SetPythonHome Py_SetPythonHome208,6504
# define Py_Initialize Py_Initialize209,6551
# define Py_Finalize Py_Finalize210,6592
# define Py_IsInitialized Py_IsInitialized211,6629
# define _Py_NoneStruct _Py_NoneStruct212,6676
# define _Py_FalseStruct _Py_FalseStruct213,6722
# define _Py_TrueStruct _Py_TrueStruct214,6770
# define _PyObject_NextNotImplemented _PyObject_NextNotImplemented215,6816
# define PyModule_AddObject PyModule_AddObject216,6890
# define PyImport_AppendInittab PyImport_AppendInittab217,6941
# define PyImport_AddModule PyImport_AddModule218,7000
#  undef _PyUnicode_AsString_PyUnicode_AsString220,7085
#  define _PyUnicode_AsString _PyUnicode_AsString221,7114
#  define _PyUnicode_AsString _PyUnicode_AsString223,7172
# undef PyUnicode_AsEncodedStringPyUnicode_AsEncodedString225,7234
# define PyUnicode_AsEncodedString PyUnicode_AsEncodedString226,7268
# undef PyBytes_AsStringPyBytes_AsString227,7333
# define PyBytes_AsString PyBytes_AsString228,7358
#  define PyBytes_AsStringAndSize PyBytes_AsStringAndSize230,7438
# undef PyBytes_FromStringPyBytes_FromString232,7508
# define PyBytes_FromString PyBytes_FromString233,7535
# undef PyBytes_FromStringAndSizePyBytes_FromStringAndSize234,7586
# define PyBytes_FromStringAndSize PyBytes_FromStringAndSize235,7620
# define PyFloat_FromDouble PyFloat_FromDouble236,7685
# define PyFloat_AsDouble PyFloat_AsDouble237,7736
# define PyObject_GenericGetAttr PyObject_GenericGetAttr238,7783
# define PyType_Type PyType_Type239,7844
# define PyStdPrinter_Type PyStdPrinter_Type240,7884
# define PySlice_Type PySlice_Type241,7936
# define PyFloat_Type PyFloat_Type242,7978
# define PyNumber_Check PyNumber_Check243,8020
# define PyNumber_Long PyNumber_Long244,8066
# define PyBool_Type PyBool_Type245,8110
# define PyErr_NewException PyErr_NewException246,8150
#  define _Py_NegativeRefcount _Py_NegativeRefcount248,8218
#  define _Py_RefTotal _Py_RefTotal249,8274
#  define _Py_Dealloc _Py_Dealloc250,8317
#  define PyModule_Create2TraceRefs PyModule_Create2TraceRefs251,8355
#  define PyModule_Create2 PyModule_Create2253,8428
#  define _PyObject_DebugMalloc _PyObject_DebugMalloc256,8541
#  define _PyObject_DebugFree _PyObject_DebugFree257,8599
#  define PyObject_Malloc PyObject_Malloc259,8660
#  define PyObject_Free PyObject_Free260,8706
# define _PyObject_GC_New _PyObject_GC_New262,8756
# define PyObject_GC_Del PyObject_GC_Del263,8803
# define PyObject_GC_UnTrack PyObject_GC_UnTrack264,8848
# define PyType_GenericAlloc PyType_GenericAlloc265,8901
# define PyType_GenericNew PyType_GenericNew266,8954
# undef PyUnicode_FromStringPyUnicode_FromString267,9003
# define PyUnicode_FromString PyUnicode_FromString268,9032
#  define PyUnicode_FromFormat PyUnicode_FromFormat270,9117
#  define Py_UNICODE_USE_UCS_FUNCTIONSPy_UNICODE_USE_UCS_FUNCTIONS272,9180
#   define PyUnicodeUCS4_FromFormat PyUnicodeUCS4_FromFormat274,9244
#   define PyUnicodeUCS2_FromFormat PyUnicodeUCS2_FromFormat276,9317
# undef PyUnicode_DecodePyUnicode_Decode279,9399
# define PyUnicode_Decode PyUnicode_Decode280,9424
# define PyType_IsSubtype PyType_IsSubtype281,9471
# define PyCapsule_New PyCapsule_New282,9518
# define PyCapsule_GetPointer PyCapsule_GetPointer283,9559
#  undef PyObject_NEWPyObject_NEW286,9672
#  define PyObject_NEW(PyObject_NEW287,9694
static int (*py3_PySys_SetArgv)(int, wchar_t **);py3_PySys_SetArgv295,9884
static void (*py3_Py_SetPythonHome)(wchar_t *home);py3_Py_SetPythonHome296,9934
static void (*py3_Py_Initialize)(void);py3_Py_Initialize297,9986
static PyObject* (*py3_PyList_New)(Py_ssize_t size);py3_PyList_New298,10026
static PyGILState_STATE (*py3_PyGILState_Ensure)(void);py3_PyGILState_Ensure299,10079
static void (*py3_PyGILState_Release)(PyGILState_STATE);py3_PyGILState_Release300,10135
static int (*py3_PySys_SetObject)(char *, PyObject *);py3_PySys_SetObject301,10192
static PyObject* (*py3_PySys_GetObject)(char *);py3_PySys_GetObject302,10247
static int (*py3_PyList_Append)(PyObject *, PyObject *);py3_PyList_Append303,10296
static int (*py3_PyList_Insert)(PyObject *, int, PyObject *);py3_PyList_Insert304,10353
static Py_ssize_t (*py3_PyList_Size)(PyObject *);py3_PyList_Size305,10415
static int (*py3_PySequence_Check)(PyObject *);py3_PySequence_Check306,10465
static Py_ssize_t (*py3_PySequence_Size)(PyObject *);py3_PySequence_Size307,10513
static PyObject* (*py3_PySequence_GetItem)(PyObject *, Py_ssize_t);py3_PySequence_GetItem308,10567
static PyObject* (*py3_PySequence_Fast)(PyObject *, const char *);py3_PySequence_Fast309,10635
static Py_ssize_t (*py3_PyTuple_Size)(PyObject *);py3_PyTuple_Size310,10702
static PyObject* (*py3_PyTuple_GetItem)(PyObject *, Py_ssize_t);py3_PyTuple_GetItem311,10753
static int (*py3_PyMapping_Check)(PyObject *);py3_PyMapping_Check312,10818
static PyObject* (*py3_PyMapping_Keys)(PyObject *);py3_PyMapping_Keys313,10865
static int (*py3_PySlice_AdjustIndices)(Py_ssize_t length,py3_PySlice_AdjustIndices315,10951
static int (*py3_PySlice_Unpack)(PyObject *slice,py3_PySlice_Unpack317,11072
static int (*py3_PySlice_GetIndicesEx)(PySliceObject_T *r, Py_ssize_t length,py3_PySlice_GetIndicesEx320,11193
static PyObject* (*py3_PyErr_NoMemory)(void);py3_PyErr_NoMemory323,11363
static void (*py3_Py_Finalize)(void);py3_Py_Finalize324,11409
static void (*py3_PyErr_SetString)(PyObject *, const char *);py3_PyErr_SetString325,11447
static void (*py3_PyErr_SetObject)(PyObject *, PyObject *);py3_PyErr_SetObject326,11509
static int (*py3_PyErr_ExceptionMatches)(PyObject *);py3_PyErr_ExceptionMatches327,11569
static int (*py3_PyRun_SimpleString)(char *);py3_PyRun_SimpleString328,11623
static PyObject* (*py3_PyRun_String)(char *, int, PyObject *, PyObject *);py3_PyRun_String329,11669
static PyObject* (*py3_PyObject_GetAttrString)(PyObject *, const char *);py3_PyObject_GetAttrString330,11744
static int (*py3_PyObject_HasAttrString)(PyObject *, const char *);py3_PyObject_HasAttrString331,11818
static int (*py3_PyObject_SetAttrString)(PyObject *, const char *, PyObject *);py3_PyObject_SetAttrString332,11886
static PyObject* (*py3_PyObject_CallFunctionObjArgs)(PyObject *, ...);py3_PyObject_CallFunctionObjArgs333,11966
static PyObject* (*py3__PyObject_CallFunction_SizeT)(PyObject *, char *, ...);py3__PyObject_CallFunction_SizeT334,12037
static PyObject* (*py3_PyObject_Call)(PyObject *, PyObject *, PyObject *);py3_PyObject_Call335,12116
static PyObject* (*py3_PyEval_GetGlobals)();py3_PyEval_GetGlobals336,12191
static PyObject* (*py3_PyEval_GetLocals)();py3_PyEval_GetLocals337,12236
static PyObject* (*py3_PyList_GetItem)(PyObject *, Py_ssize_t);py3_PyList_GetItem338,12280
static PyObject* (*py3_PyImport_ImportModule)(const char *);py3_PyImport_ImportModule339,12344
static PyObject* (*py3_PyImport_AddModule)(const char *);py3_PyImport_AddModule340,12405
static int (*py3_PyErr_BadArgument)(void);py3_PyErr_BadArgument341,12463
static PyObject* (*py3_PyErr_Occurred)(void);py3_PyErr_Occurred342,12506
static PyObject* (*py3_PyModule_GetDict)(PyObject *);py3_PyModule_GetDict343,12552
static int (*py3_PyList_SetItem)(PyObject *, Py_ssize_t, PyObject *);py3_PyList_SetItem344,12606
static PyObject* (*py3_PyDict_GetItemString)(PyObject *, const char *);py3_PyDict_GetItemString345,12676
static int (*py3_PyDict_Next)(PyObject *, Py_ssize_t *, PyObject **, PyObject **);py3_PyDict_Next346,12748
static PyObject* (*py3_PyLong_FromLong)(long);py3_PyLong_FromLong347,12831
static PyObject* (*py3_PyDict_New)(void);py3_PyDict_New348,12878
static PyObject* (*py3_PyIter_Next)(PyObject *);py3_PyIter_Next349,12920
static PyObject* (*py3_PyObject_GetIter)(PyObject *);py3_PyObject_GetIter350,12969
static PyObject* (*py3_PyObject_Repr)(PyObject *);py3_PyObject_Repr351,13023
static PyObject* (*py3_PyObject_GetItem)(PyObject *, PyObject *);py3_PyObject_GetItem352,13074
static int (*py3_PyObject_IsTrue)(PyObject *);py3_PyObject_IsTrue353,13140
static PyObject* (*py3_Py_BuildValue)(char *, ...);py3_Py_BuildValue354,13187
static int (*py3_PyType_Ready)(PyTypeObject *type);py3_PyType_Ready355,13239
static int (*py3_PyDict_SetItemString)(PyObject *dp, char *key, PyObject *item);py3_PyDict_SetItemString356,13291
static PyObject* (*py3_PyUnicode_FromString)(const char *u);py3_PyUnicode_FromString357,13372
static PyObject* (*py3_PyUnicode_FromFormat)(const char *u, ...);py3_PyUnicode_FromFormat359,13471
static PyObject* (*py3_PyUnicodeUCS4_FromFormat)(const char *u, ...);py3_PyUnicodeUCS4_FromFormat362,13569
static PyObject* (*py3_PyUnicodeUCS2_FromFormat)(const char *u, ...);py3_PyUnicodeUCS2_FromFormat364,13647
static PyObject* (*py3_PyUnicode_Decode)(const char *u, Py_ssize_t size,py3_PyUnicode_Decode367,13734
static long (*py3_PyLong_AsLong)(PyObject *);py3_PyLong_AsLong369,13851
static void (*py3_PyErr_SetNone)(PyObject *);py3_PyErr_SetNone370,13897
static void (*py3_PyEval_InitThreads)(void);py3_PyEval_InitThreads371,13943
static void(*py3_PyEval_RestoreThread)(PyThreadState *);py3_PyEval_RestoreThread372,13988
static PyThreadState*(*py3_PyEval_SaveThread)(void);py3_PyEval_SaveThread373,14045
static int (*py3_PyArg_Parse)(PyObject *, char *, ...);py3_PyArg_Parse374,14098
static int (*py3_PyArg_ParseTuple)(PyObject *, char *, ...);py3_PyArg_ParseTuple375,14154
static int (*py3_PyMem_Free)(void *);py3_PyMem_Free376,14215
static void* (*py3_PyMem_Malloc)(size_t);py3_PyMem_Malloc377,14253
static int (*py3_Py_IsInitialized)(void);py3_Py_IsInitialized378,14295
static void (*py3_PyErr_Clear)(void);py3_PyErr_Clear379,14337
static PyObject* (*py3_PyErr_Format)(PyObject *, const char *, ...);py3_PyErr_Format380,14375
static void (*py3_PyErr_PrintEx)(int);py3_PyErr_PrintEx381,14444
static PyObject*(*py3__PyObject_Init)(PyObject *, PyTypeObject *);py3__PyObject_Init382,14483
static iternextfunc py3__PyObject_NextNotImplemented;py3__PyObject_NextNotImplemented383,14550
static PyObject* py3__Py_NoneStruct;py3__Py_NoneStruct384,14604
static PyObject* py3__Py_FalseStruct;py3__Py_FalseStruct385,14641
static PyObject* py3__Py_TrueStruct;py3__Py_TrueStruct386,14679
static int (*py3_PyModule_AddObject)(PyObject *m, const char *name, PyObject *o);py3_PyModule_AddObject387,14716
static int (*py3_PyImport_AppendInittab)(const char *name, PyObject* (*initfunc)(void));py3_PyImport_AppendInittab388,14798
static char* (*py3_PyUnicode_AsUTF8)(PyObject *unicode);py3_PyUnicode_AsUTF8390,14921
static char* (*py3__PyUnicode_AsString)(PyObject *unicode);py3__PyUnicode_AsString392,14985
static PyObject* (*py3_PyUnicode_AsEncodedString)(PyObject *unicode, const char* encoding, const char* errors);py3_PyUnicode_AsEncodedString394,15053
static char* (*py3_PyBytes_AsString)(PyObject *bytes);py3_PyBytes_AsString395,15165
static int (*py3_PyBytes_AsStringAndSize)(PyObject *bytes, char **buffer, Py_ssize_t *length);py3_PyBytes_AsStringAndSize396,15220
static PyObject* (*py3_PyBytes_FromString)(char *str);py3_PyBytes_FromString397,15315
static PyObject* (*py3_PyBytes_FromStringAndSize)(char *str, Py_ssize_t length);py3_PyBytes_FromStringAndSize398,15370
static PyObject* (*py3_PyFloat_FromDouble)(double num);py3_PyFloat_FromDouble399,15451
static double (*py3_PyFloat_AsDouble)(PyObject *);py3_PyFloat_AsDouble400,15507
static PyObject* (*py3_PyObject_GenericGetAttr)(PyObject *obj, PyObject *name);py3_PyObject_GenericGetAttr401,15558
static PyObject* (*py3_PyType_GenericAlloc)(PyTypeObject *type, Py_ssize_t nitems);py3_PyType_GenericAlloc402,15638
static PyObject* (*py3_PyType_GenericNew)(PyTypeObject *type, PyObject *args, PyObject *kwds);py3_PyType_GenericNew403,15722
static PyTypeObject* py3_PyType_Type;py3_PyType_Type404,15817
static PyTypeObject* py3_PyStdPrinter_Type;py3_PyStdPrinter_Type405,15855
static PyTypeObject* py3_PySlice_Type;py3_PySlice_Type406,15899
static PyTypeObject* py3_PyFloat_Type;py3_PyFloat_Type407,15938
static PyTypeObject* py3_PyBool_Type;py3_PyBool_Type408,15977
static int (*py3_PyNumber_Check)(PyObject *);py3_PyNumber_Check409,16015
static PyObject* (*py3_PyNumber_Long)(PyObject *);py3_PyNumber_Long410,16061
static PyObject* (*py3_PyErr_NewException)(char *name, PyObject *base, PyObject *dict);py3_PyErr_NewException411,16112
static PyObject* (*py3_PyCapsule_New)(void *, char *, PyCapsule_Destructor);py3_PyCapsule_New412,16200
static void* (*py3_PyCapsule_GetPointer)(PyObject *, char *);py3_PyCapsule_GetPointer413,16277
static void (*py3__Py_NegativeRefcount)(const char *fname, int lineno, PyObject *op);py3__Py_NegativeRefcount415,16356
static Py_ssize_t* py3__Py_RefTotal;py3__Py_RefTotal416,16442
static void (*py3__Py_Dealloc)(PyObject *obj);py3__Py_Dealloc417,16479
static PyObject* (*py3_PyModule_Create2TraceRefs)(struct PyModuleDef* module, int module_api_version);py3_PyModule_Create2TraceRefs418,16526
static PyObject* (*py3_PyModule_Create2)(struct PyModuleDef* module, int module_api_version);py3_PyModule_Create2420,16636
static void (*py3__PyObject_DebugFree)(void*);py3__PyObject_DebugFree423,16795
static void* (*py3__PyObject_DebugMalloc)(size_t);py3__PyObject_DebugMalloc424,16842
static void (*py3_PyObject_Free)(void*);py3_PyObject_Free426,16900
static void* (*py3_PyObject_Malloc)(size_t);py3_PyObject_Malloc427,16941
static PyObject*(*py3__PyObject_GC_New)(PyTypeObject *);py3__PyObject_GC_New429,16994
static void(*py3_PyObject_GC_Del)(void *);py3_PyObject_GC_Del430,17051
static void(*py3_PyObject_GC_UnTrack)(void *);py3_PyObject_GC_UnTrack431,17094
static int (*py3_PyType_IsSubtype)(PyTypeObject *, PyTypeObject *);py3_PyType_IsSubtype432,17141
static HINSTANCE hinstPy3 = 0; // Instance of python.dllhinstPy3434,17210
static PyObject *p3imp_PyExc_AttributeError;p3imp_PyExc_AttributeError437,17298
static PyObject *p3imp_PyExc_IndexError;p3imp_PyExc_IndexError438,17343
static PyObject *p3imp_PyExc_KeyError;p3imp_PyExc_KeyError439,17384
static PyObject *p3imp_PyExc_KeyboardInterrupt;p3imp_PyExc_KeyboardInterrupt440,17423
static PyObject *p3imp_PyExc_TypeError;p3imp_PyExc_TypeError441,17471
static PyObject *p3imp_PyExc_ValueError;p3imp_PyExc_ValueError442,17511
static PyObject *p3imp_PyExc_SystemExit;p3imp_PyExc_SystemExit443,17552
static PyObject *p3imp_PyExc_RuntimeError;p3imp_PyExc_RuntimeError444,17593
static PyObject *p3imp_PyExc_ImportError;p3imp_PyExc_ImportError445,17636
static PyObject *p3imp_PyExc_OverflowError;p3imp_PyExc_OverflowError446,17678
# define PyExc_AttributeError PyExc_AttributeError448,17723
# define PyExc_IndexError PyExc_IndexError449,17780
# define PyExc_KeyError PyExc_KeyError450,17829
# define PyExc_KeyboardInterrupt PyExc_KeyboardInterrupt451,17874
# define PyExc_TypeError PyExc_TypeError452,17937
# define PyExc_ValueError PyExc_ValueError453,17984
# define PyExc_SystemExit PyExc_SystemExit454,18033
# define PyExc_RuntimeError PyExc_RuntimeError455,18082
# define PyExc_ImportError PyExc_ImportError456,18135
# define PyExc_OverflowError PyExc_OverflowError457,18186
# define PYTHON_PROC PYTHON_PROC462,18297
    char *name;name465,18342
    PYTHON_PROC *ptr;ptr466,18358
} py3_funcname_table[] =py3_funcname_table467,18380
py3__Py_DECREF(const char *filename UNUSED, int lineno UNUSED, PyObject *op)py3__Py_DECREF604,25965
#  undef Py_DECREFPy_DECREF621,26238
#  define Py_DECREF(Py_DECREF622,26257
py3__Py_XDECREF(PyObject *op)py3__Py_XDECREF625,26360
#  undef Py_XDECREFPy_XDECREF633,26443
#  define Py_XDECREF(Py_XDECREF634,26463
end_dynamic_python3(void)end_dynamic_python3641,26575
py3_runtime_link_init(char *libname, int verbose)py3_runtime_link_init656,26805
python3_enabled(int verbose)python3_enabled742,29364
get_py3_exceptions(void)get_py3_exceptions752,29638
static int py3initialised = 0;py3initialised780,30994
#define PYINITIALISED PYINITIALISED781,31025
static int python_end_called = FALSE;python_end_called782,31062
#define DESTRUCTOR_FINISH(DESTRUCTOR_FINISH784,31101
#define WIN_PYTHON_REF(WIN_PYTHON_REF786,31174
#define BUF_PYTHON_REF(BUF_PYTHON_REF787,31221
#define TAB_PYTHON_REF(TAB_PYTHON_REF788,31268
call_PyObject_Free(void *p)call_PyObject_Free791,31333
call_PyType_GenericNew(PyTypeObject *type, PyObject *args, PyObject *kwds)call_PyType_GenericNew801,31507
call_PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)call_PyType_GenericAlloc807,31655
static struct PyModuleDef vimmodule;vimmodule828,32669
#define PY_CAN_RECURSEPY_CAN_RECURSE830,32707
#define GET_ATTR_STRING(GET_ATTR_STRING838,32887
#define PY3OBJ_DELETED(PY3OBJ_DELETED843,33033
python3_end(void)python3_end854,33322
python3_loaded(void)python3_loaded885,33873
static wchar_t *py_home_buf = NULL;py_home_buf891,33934
Python3_Init(void)Python3_Init894,33986
DoPyCommand(const char *cmd, rangeinitializer init_range, runner run, void *arg)DoPyCommand975,36326
ex_py3(exarg_T *eap)ex_py31040,37931
#define BUFFER_SIZE BUFFER_SIZE1058,38247
ex_py3file(exarg_T *eap)ex_py3file1064,38303
ex_py3do(exarg_T *eap)ex_py3do1123,39742
OutputGetattro(PyObject *self, PyObject *nameobj)OutputGetattro1140,40080
OutputSetattro(PyObject *self, PyObject *nameobj, PyObject *val)OutputSetattro1155,40504
#define WindowType_Check(WindowType_Check1168,40864
#define BufferType_Check(BufferType_Check1173,41020
#define RangeType_Check(RangeType_Check1181,41329
static PySequenceMethods BufferAsSeq = {BufferAsSeq1190,41715
static PyMappingMethods BufferAsMapping = {BufferAsMapping1203,42190
BufferGetattro(PyObject *self, PyObject *nameobj)BufferGetattro1213,42439
BufferSetattro(PyObject *self, PyObject *nameobj, PyObject *val)BufferSetattro1233,42846
BufferSubscript(PyObject *self, PyObject* idx)BufferSubscript1243,43056
BufferAsSubscript(PyObject *self, PyObject* idx, PyObject* val)BufferAsSubscript1271,43710
static PySequenceMethods RangeAsSeq = {RangeAsSeq1302,44514
static PyMappingMethods RangeAsMapping = {RangeAsMapping1315,45000
RangeGetattro(PyObject *self, PyObject *nameobj)RangeGetattro1324,45265
RangeAsItem(PyObject *self, Py_ssize_t n, PyObject *val)RangeAsItem1339,45654
RangeAsSlice(PyObject *self, Py_ssize_t lo, Py_ssize_t hi, PyObject *val)RangeAsSlice1348,45908
RangeSubscript(PyObject *self, PyObject* idx)RangeSubscript1357,46185
RangeAsSubscript(PyObject *self, PyObject *idx, PyObject *val)RangeAsSubscript1382,46759
TabPageGetattro(PyObject *self, PyObject *nameobj)TabPageGetattro1410,47360
WindowGetattro(PyObject *self, PyObject *nameobj)WindowGetattro1432,47816
WindowSetattro(PyObject *self, PyObject *nameobj, PyObject *val)WindowSetattro1452,48223
static PySequenceMethods TabListAsSeq = {TabListAsSeq1461,48430
static PySequenceMethods WinListAsSeq = {WinListAsSeq1476,48972
CurrentGetattro(PyObject *self, PyObject *nameobj)CurrentGetattro1493,49547
CurrentSetattro(PyObject *self, PyObject *nameobj, PyObject *value)CurrentSetattro1503,49776
DictionaryGetattro(PyObject *self, PyObject *nameobj)DictionaryGetattro1512,49989
DictionarySetattro(PyObject *self, PyObject *nameobj, PyObject *val)DictionarySetattro1527,50384
ListGetattro(PyObject *self, PyObject *nameobj)ListGetattro1536,50615
ListSetattro(PyObject *self, PyObject *nameobj, PyObject *val)ListSetattro1547,50874
FunctionGetattro(PyObject *self, PyObject *nameobj)FunctionGetattro1556,51091
python3_buffer_free(buf_T *buf)python3_buffer_free1573,51422
python3_window_free(win_T *win)python3_window_free1584,51620
python3_tabpage_free(tabpage_T *tab)python3_tabpage_free1595,51818
Py3Init_vim(void)Py3Init_vim1606,52036
LineToString(const char *str)LineToString1639,52854
do_py3eval(char_u *str, typval_T *rettv)do_py3eval1672,53313
set_ref_in_python3(int copyID)set_ref_in_python31686,53590

src/if_python.c,24329
# undef _POSIX_THREADS_POSIX_THREADS34,1030
# undef HAVE_FCNTL_HHAVE_FCNTL_H38,1105
# undef _DEBUG_DEBUG42,1148
# undef HAVE_STRFTIMEHAVE_STRFTIME46,1192
# undef HAVE_STRING_HHAVE_STRING_H49,1242
# undef HAVE_PUTENVHAVE_PUTENV52,1290
# undef HAVE_STDARG_H	HAVE_STDARG_H55,1338
# undef _POSIX_C_SOURCE	_POSIX_C_SOURCE58,1431
# undef _XOPEN_SOURCE	_XOPEN_SOURCE61,1517
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN64,1581
# undef PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN69,1688
#undef main main72,1721
#undef HAVE_FCNTL_H HAVE_FCNTL_H73,1764
#define PyBytes_FromString PyBytes_FromString76,1874
#define PyBytes_Check	PyBytes_Check77,1926
#define PyBytes_AsStringAndSize PyBytes_AsStringAndSize78,1964
#define PyBytes_FromStringAndSize PyBytes_FromStringAndSize79,2021
# define PyObject PyObject83,2202
# define PyThreadState PyThreadState84,2231
# define PyTypeObject PyTypeObject85,2265
struct PyMethodDef { Py_ssize_t a; };PyMethodDef86,2298
struct PyMethodDef { Py_ssize_t a; };a86,2298
# define PySequenceMethods PySequenceMethods87,2336
# define PY_USE_CAPSULEPY_USE_CAPSULE91,2442
# define PyInt PyInt95,2534
# define PyInquiry PyInquiry96,2560
# define PyIntArgFunc PyIntArgFunc97,2587
# define PyIntIntArgFunc PyIntIntArgFunc98,2622
# define PyIntObjArgProc PyIntObjArgProc99,2665
# define PyIntIntObjArgProc PyIntIntObjArgProc100,2706
# define Py_ssize_t_fmt Py_ssize_t_fmt101,2755
# define PyInt PyInt103,2789
# define lenfunc lenfunc104,2808
# define PyInquiry PyInquiry105,2833
# define PyIntArgFunc PyIntArgFunc106,2860
# define PyIntIntArgFunc PyIntIntArgFunc107,2893
# define PyIntObjArgProc PyIntObjArgProc108,2932
# define PyIntIntObjArgProc PyIntIntObjArgProc109,2971
# define Py_ssize_t_fmt Py_ssize_t_fmt110,3016
#define Py_bytes_fmt Py_bytes_fmt112,3051
#define single_input	single_input115,3093
#define file_input	file_input116,3118
#define eval_input	eval_input117,3141
# define PY_CAN_RECURSEPY_CAN_RECURSE121,3276
#  define HINSTANCE HINSTANCE126,3378
#  define FARPROC FARPROC131,3480
#  define HINSTANCE HINSTANCE132,3504
#   define load_dll(load_dll134,3594
#   define load_dll(load_dll136,3648
#  define close_dll close_dll138,3715
#  define symbol_from_dll symbol_from_dll139,3743
#  define load_dll load_dll141,3782
#  define close_dll close_dll142,3812
#  define symbol_from_dll symbol_from_dll143,3844
# undef PyRun_SimpleStringPyRun_SimpleString148,3987
# undef PyRun_StringPyRun_String149,4014
# undef PyArg_ParsePyArg_Parse150,4035
# undef PyArg_ParseTuplePyArg_ParseTuple151,4055
# undef Py_BuildValuePy_BuildValue152,4080
# undef Py_InitModule4Py_InitModule4153,4102
# undef Py_InitModule4_64Py_InitModule4_64154,4125
# undef PyObject_CallMethodPyObject_CallMethod155,4151
# undef PyObject_CallFunctionPyObject_CallFunction156,4179
# define PyArg_Parse PyArg_Parse161,4236
# define PyArg_ParseTuple PyArg_ParseTuple162,4273
# define PyMem_Free PyMem_Free163,4320
# define PyMem_Malloc PyMem_Malloc164,4355
# define PyDict_SetItemString PyDict_SetItemString165,4394
# define PyErr_BadArgument PyErr_BadArgument166,4449
# define PyErr_NewException PyErr_NewException167,4498
# define PyErr_Clear PyErr_Clear168,4549
# define PyErr_Format PyErr_Format169,4586
# define PyErr_PrintEx PyErr_PrintEx170,4625
# define PyErr_NoMemory PyErr_NoMemory171,4666
# define PyErr_Occurred PyErr_Occurred172,4709
# define PyErr_SetNone PyErr_SetNone173,4752
# define PyErr_SetString PyErr_SetString174,4793
# define PyErr_SetObject PyErr_SetObject175,4838
# define PyErr_ExceptionMatches PyErr_ExceptionMatches176,4883
# define PyEval_InitThreads PyEval_InitThreads177,4942
# define PyEval_RestoreThread PyEval_RestoreThread178,4993
# define PyEval_SaveThread PyEval_SaveThread179,5048
#  define PyGILState_Ensure PyGILState_Ensure181,5120
#  define PyGILState_Release PyGILState_Release182,5170
# define PyInt_AsLong PyInt_AsLong184,5230
# define PyInt_FromLong PyInt_FromLong185,5269
# define PyLong_AsLong PyLong_AsLong186,5312
# define PyLong_FromLong PyLong_FromLong187,5353
# define PyBool_Type PyBool_Type188,5398
# define PyInt_Type PyInt_Type189,5438
# define PyLong_Type PyLong_Type190,5476
# define PyList_GetItem PyList_GetItem191,5516
# define PyList_Append PyList_Append192,5559
# define PyList_Insert PyList_Insert193,5600
# define PyList_New PyList_New194,5641
# define PyList_SetItem PyList_SetItem195,5676
# define PyList_Size PyList_Size196,5719
# define PyList_Type PyList_Type197,5756
# define PySequence_Check PySequence_Check198,5796
# define PySequence_Size PySequence_Size199,5843
# define PySequence_GetItem PySequence_GetItem200,5888
# define PySequence_Fast PySequence_Fast201,5939
# define PyTuple_Size PyTuple_Size202,5984
# define PyTuple_GetItem PyTuple_GetItem203,6023
# define PyTuple_Type PyTuple_Type204,6068
# define PySlice_GetIndicesEx PySlice_GetIndicesEx205,6110
# define PyImport_ImportModule PyImport_ImportModule206,6165
# define PyDict_New PyDict_New207,6222
# define PyDict_GetItemString PyDict_GetItemString208,6257
# define PyDict_Next PyDict_Next209,6312
# define PyDict_Type PyDict_Type210,6349
#  define PY_NO_MAPPING_KEYSPY_NO_MAPPING_KEYS212,6412
#  define PyMapping_Keys PyMapping_Keys214,6448
# define PyObject_GetItem PyObject_GetItem216,6500
# define PyObject_CallMethod PyObject_CallMethod217,6547
# define PyMapping_Check PyMapping_Check218,6600
# define PyIter_Next PyIter_Next219,6645
# define PyModule_GetDict PyModule_GetDict220,6682
# define PyModule_AddObject PyModule_AddObject221,6729
# define PyRun_SimpleString PyRun_SimpleString222,6780
# define PyRun_String PyRun_String223,6831
# define PyObject_GetAttrString PyObject_GetAttrString224,6870
# define PyObject_HasAttrString PyObject_HasAttrString225,6929
# define PyObject_SetAttrString PyObject_SetAttrString226,6988
# define PyObject_CallFunctionObjArgs PyObject_CallFunctionObjArgs227,7047
# define PyObject_CallFunction PyObject_CallFunction228,7118
# define PyObject_Call PyObject_Call229,7175
# define PyObject_Repr PyObject_Repr230,7216
# define PyString_AsString PyString_AsString231,7257
# define PyString_AsStringAndSize PyString_AsStringAndSize232,7306
# define PyString_FromString PyString_FromString233,7369
# define PyString_FromFormat PyString_FromFormat234,7422
# define PyString_FromStringAndSize PyString_FromStringAndSize235,7475
# define PyString_Size PyString_Size236,7542
# define PyString_Type PyString_Type237,7583
# define PyUnicode_Type PyUnicode_Type238,7627
# undef PyUnicode_AsEncodedStringPyUnicode_AsEncodedString239,7673
# define PyUnicode_AsEncodedString PyUnicode_AsEncodedString240,7707
# define PyFloat_AsDouble PyFloat_AsDouble241,7771
# define PyFloat_FromDouble PyFloat_FromDouble242,7818
# define PyFloat_Type PyFloat_Type243,7869
# define PyNumber_Check PyNumber_Check244,7911
# define PyNumber_Long PyNumber_Long245,7954
# define PyImport_AddModule PyImport_AddModule246,7995
# define PySys_SetObject PySys_SetObject247,8049
# define PySys_GetObject PySys_GetObject248,8094
# define PySys_SetArgv PySys_SetArgv249,8139
# define PyType_Type PyType_Type250,8180
# define PyFile_Type PyFile_Type251,8220
# define PySlice_Type PySlice_Type252,8260
# define PyType_Ready PyType_Ready253,8302
# define PyType_GenericAlloc PyType_GenericAlloc254,8344
# define Py_BuildValue Py_BuildValue255,8397
# define Py_FindMethod Py_FindMethod256,8438
# define Py_InitModule4 Py_InitModule4257,8479
# define Py_SetPythonHome Py_SetPythonHome258,8522
# define Py_Initialize Py_Initialize259,8569
# define Py_Finalize Py_Finalize260,8610
# define Py_IsInitialized Py_IsInitialized261,8647
# define _PyObject_New _PyObject_New262,8694
# define _PyObject_GC_New _PyObject_GC_New263,8735
#  define Py_underscore_GCPy_underscore_GC265,8806
#  define _PyObject_GC_Del _PyObject_GC_Del266,8833
#  define _PyObject_GC_UnTrack _PyObject_GC_UnTrack267,8881
#  define PyObject_GC_Del PyObject_GC_Del269,8944
#  define PyObject_GC_UnTrack PyObject_GC_UnTrack270,8990
#  define _PyObject_NextNotImplemented _PyObject_NextNotImplemented273,9113
# define _Py_NoneStruct _Py_NoneStruct275,9196
# define _Py_ZeroStruct _Py_ZeroStruct276,9242
# define _Py_TrueStruct _Py_TrueStruct277,9288
# define PyObject_Init PyObject_Init278,9334
# define PyObject_GetIter PyObject_GetIter279,9376
# define PyObject_IsTrue PyObject_IsTrue280,9423
#  define PyType_IsSubtype PyType_IsSubtype282,9529
#   define _Py_NegativeRefcount _Py_NegativeRefcount284,9595
#   define _Py_RefTotal _Py_RefTotal285,9652
#   define _Py_Dealloc _Py_Dealloc286,9696
#   define _PyObject_DebugMalloc _PyObject_DebugMalloc291,9871
#   define _PyObject_DebugFree _PyObject_DebugFree292,9930
#   define PyObject_Malloc PyObject_Malloc294,9993
#   define PyObject_Free PyObject_Free295,10040
#  define PyCapsule_New PyCapsule_New299,10123
#  define PyCapsule_GetPointer PyCapsule_GetPointer300,10165
#  define PyCObject_FromVoidPtr PyCObject_FromVoidPtr302,10228
#  define PyCObject_AsVoidPtr PyCObject_AsVoidPtr303,10286
#  define Py_NoSiteFlag Py_NoSiteFlag306,10409
static int(*dll_PyArg_Parse)(PyObject *, char *, ...);dll_PyArg_Parse312,10499
static int(*dll_PyArg_ParseTuple)(PyObject *, char *, ...);dll_PyArg_ParseTuple313,10554
static int(*dll_PyMem_Free)(void *);dll_PyMem_Free314,10614
static void* (*dll_PyMem_Malloc)(size_t);dll_PyMem_Malloc315,10651
static int(*dll_PyDict_SetItemString)(PyObject *dp, char *key, PyObject *item);dll_PyDict_SetItemString316,10693
static int(*dll_PyErr_BadArgument)(void);dll_PyErr_BadArgument317,10773
static PyObject *(*dll_PyErr_NewException)(char *, PyObject *, PyObject *);dll_PyErr_NewException318,10815
static void(*dll_PyErr_Clear)(void);dll_PyErr_Clear319,10891
static PyObject*(*dll_PyErr_Format)(PyObject *, const char *, ...);dll_PyErr_Format320,10928
static void(*dll_PyErr_PrintEx)(int);dll_PyErr_PrintEx321,10996
static PyObject*(*dll_PyErr_NoMemory)(void);dll_PyErr_NoMemory322,11034
static PyObject*(*dll_PyErr_Occurred)(void);dll_PyErr_Occurred323,11079
static void(*dll_PyErr_SetNone)(PyObject *);dll_PyErr_SetNone324,11124
static void(*dll_PyErr_SetString)(PyObject *, const char *);dll_PyErr_SetString325,11169
static void(*dll_PyErr_SetObject)(PyObject *, PyObject *);dll_PyErr_SetObject326,11230
static int(*dll_PyErr_ExceptionMatches)(PyObject *);dll_PyErr_ExceptionMatches327,11289
static void(*dll_PyEval_InitThreads)(void);dll_PyEval_InitThreads328,11342
static void(*dll_PyEval_RestoreThread)(PyThreadState *);dll_PyEval_RestoreThread329,11386
static PyThreadState*(*dll_PyEval_SaveThread)(void);dll_PyEval_SaveThread330,11443
static PyGILState_STATE	(*dll_PyGILState_Ensure)(void);dll_PyGILState_Ensure332,11519
static void (*dll_PyGILState_Release)(PyGILState_STATE);dll_PyGILState_Release333,11575
static long(*dll_PyInt_AsLong)(PyObject *);dll_PyInt_AsLong335,11640
static PyObject*(*dll_PyInt_FromLong)(long);dll_PyInt_FromLong336,11684
static long(*dll_PyLong_AsLong)(PyObject *);dll_PyLong_AsLong337,11729
static PyObject*(*dll_PyLong_FromLong)(long);dll_PyLong_FromLong338,11774
static PyTypeObject* dll_PyBool_Type;dll_PyBool_Type339,11820
static PyTypeObject* dll_PyInt_Type;dll_PyInt_Type340,11858
static PyTypeObject* dll_PyLong_Type;dll_PyLong_Type341,11895
static PyObject*(*dll_PyList_GetItem)(PyObject *, PyInt);dll_PyList_GetItem342,11933
static int(*dll_PyList_Append)(PyObject *, PyObject *);dll_PyList_Append343,11991
static int(*dll_PyList_Insert)(PyObject *, PyInt, PyObject *);dll_PyList_Insert344,12047
static PyObject*(*dll_PyList_New)(PyInt size);dll_PyList_New345,12110
static int(*dll_PyList_SetItem)(PyObject *, PyInt, PyObject *);dll_PyList_SetItem346,12157
static PyInt(*dll_PyList_Size)(PyObject *);dll_PyList_Size347,12221
static PyTypeObject* dll_PyList_Type;dll_PyList_Type348,12265
static int (*dll_PySequence_Check)(PyObject *);dll_PySequence_Check349,12303
static PyInt(*dll_PySequence_Size)(PyObject *);dll_PySequence_Size350,12351
static PyObject*(*dll_PySequence_GetItem)(PyObject *, PyInt);dll_PySequence_GetItem351,12399
static PyObject*(*dll_PySequence_Fast)(PyObject *, const char *);dll_PySequence_Fast352,12461
static PyInt(*dll_PyTuple_Size)(PyObject *);dll_PyTuple_Size353,12527
static PyObject*(*dll_PyTuple_GetItem)(PyObject *, PyInt);dll_PyTuple_GetItem354,12572
static PyTypeObject* dll_PyTuple_Type;dll_PyTuple_Type355,12631
static int (*dll_PySlice_GetIndicesEx)(PySliceObject *r, PyInt length,dll_PySlice_GetIndicesEx356,12670
static PyObject*(*dll_PyImport_ImportModule)(const char *);dll_PyImport_ImportModule359,12813
static PyObject*(*dll_PyDict_New)(void);dll_PyDict_New360,12873
static PyObject*(*dll_PyDict_GetItemString)(PyObject *, const char *);dll_PyDict_GetItemString361,12914
static int (*dll_PyDict_Next)(PyObject *, PyInt *, PyObject **, PyObject **);dll_PyDict_Next362,12985
static PyTypeObject* dll_PyDict_Type;dll_PyDict_Type363,13063
static PyObject* (*dll_PyMapping_Keys)(PyObject *);dll_PyMapping_Keys365,13129
static PyObject* (*dll_PyObject_GetItem)(PyObject *, PyObject *);dll_PyObject_GetItem367,13189
static PyObject* (*dll_PyObject_CallMethod)(PyObject *, char *, PyObject *);dll_PyObject_CallMethod368,13255
static int (*dll_PyMapping_Check)(PyObject *);dll_PyMapping_Check369,13332
static PyObject* (*dll_PyIter_Next)(PyObject *);dll_PyIter_Next370,13379
static PyObject*(*dll_PyModule_GetDict)(PyObject *);dll_PyModule_GetDict371,13428
static int(*dll_PyModule_AddObject)(PyObject *, const char *, PyObject *);dll_PyModule_AddObject372,13481
static int(*dll_PyRun_SimpleString)(char *);dll_PyRun_SimpleString373,13556
static PyObject *(*dll_PyRun_String)(char *, int, PyObject *, PyObject *);dll_PyRun_String374,13601
static PyObject* (*dll_PyObject_GetAttrString)(PyObject *, const char *);dll_PyObject_GetAttrString375,13676
static int (*dll_PyObject_HasAttrString)(PyObject *, const char *);dll_PyObject_HasAttrString376,13750
static int (*dll_PyObject_SetAttrString)(PyObject *, const char *, PyObject *);dll_PyObject_SetAttrString377,13818
static PyObject* (*dll_PyObject_CallFunctionObjArgs)(PyObject *, ...);dll_PyObject_CallFunctionObjArgs378,13898
static PyObject* (*dll_PyObject_CallFunction)(PyObject *, char *, ...);dll_PyObject_CallFunction379,13969
static PyObject* (*dll_PyObject_Call)(PyObject *, PyObject *, PyObject *);dll_PyObject_Call380,14041
static PyObject* (*dll_PyObject_Repr)(PyObject *);dll_PyObject_Repr381,14116
static char*(*dll_PyString_AsString)(PyObject *);dll_PyString_AsString382,14167
static int(*dll_PyString_AsStringAndSize)(PyObject *, char **, PyInt *);dll_PyString_AsStringAndSize383,14217
static PyObject*(*dll_PyString_FromString)(const char *);dll_PyString_FromString384,14290
static PyObject*(*dll_PyString_FromFormat)(const char *, ...);dll_PyString_FromFormat385,14348
static PyObject*(*dll_PyString_FromStringAndSize)(const char *, PyInt);dll_PyString_FromStringAndSize386,14411
static PyInt(*dll_PyString_Size)(PyObject *);dll_PyString_Size387,14483
static PyTypeObject* dll_PyString_Type;dll_PyString_Type388,14529
static PyTypeObject* dll_PyUnicode_Type;dll_PyUnicode_Type389,14569
static PyObject *(*py_PyUnicode_AsEncodedString)(PyObject *, char *, char *);py_PyUnicode_AsEncodedString390,14610
static double(*dll_PyFloat_AsDouble)(PyObject *);dll_PyFloat_AsDouble391,14688
static PyObject*(*dll_PyFloat_FromDouble)(double);dll_PyFloat_FromDouble392,14738
static PyTypeObject* dll_PyFloat_Type;dll_PyFloat_Type393,14789
static int(*dll_PyNumber_Check)(PyObject *);dll_PyNumber_Check394,14828
static PyObject*(*dll_PyNumber_Long)(PyObject *);dll_PyNumber_Long395,14873
static int(*dll_PySys_SetObject)(char *, PyObject *);dll_PySys_SetObject396,14923
static PyObject *(*dll_PySys_GetObject)(char *);dll_PySys_GetObject397,14977
static int(*dll_PySys_SetArgv)(int, char **);dll_PySys_SetArgv398,15026
static PyTypeObject* dll_PyType_Type;dll_PyType_Type399,15072
static PyTypeObject* dll_PyFile_Type;dll_PyFile_Type400,15110
static PyTypeObject* dll_PySlice_Type;dll_PySlice_Type401,15148
static int (*dll_PyType_Ready)(PyTypeObject *type);dll_PyType_Ready402,15187
static PyObject* (*dll_PyType_GenericAlloc)(PyTypeObject *type, PyInt nitems);dll_PyType_GenericAlloc403,15239
static PyObject*(*dll_Py_BuildValue)(char *, ...);dll_Py_BuildValue404,15318
static PyObject*(*dll_Py_FindMethod)(struct PyMethodDef[], PyObject *, char *);dll_Py_FindMethod405,15369
static PyObject*(*dll_Py_InitModule4)(char *, struct PyMethodDef *, char *, PyObject *, int);dll_Py_InitModule4406,15449
static PyObject*(*dll_PyImport_AddModule)(char *);dll_PyImport_AddModule407,15543
static void(*dll_Py_SetPythonHome)(char *home);dll_Py_SetPythonHome408,15594
static void(*dll_Py_Initialize)(void);dll_Py_Initialize409,15642
static void(*dll_Py_Finalize)(void);dll_Py_Finalize410,15681
static int(*dll_Py_IsInitialized)(void);dll_Py_IsInitialized411,15718
static PyObject*(*dll__PyObject_New)(PyTypeObject *, PyObject *);dll__PyObject_New412,15759
static PyObject*(*dll__PyObject_GC_New)(PyTypeObject *);dll__PyObject_GC_New413,15825
static void(*dll__PyObject_GC_Del)(void *);dll__PyObject_GC_Del415,15907
static void(*dll__PyObject_GC_UnTrack)(void *);dll__PyObject_GC_UnTrack416,15951
static void(*dll_PyObject_GC_Del)(void *);dll_PyObject_GC_Del418,16006
static void(*dll_PyObject_GC_UnTrack)(void *);dll_PyObject_GC_UnTrack419,16049
static PyObject*(*dll__PyObject_Init)(PyObject *, PyTypeObject *);dll__PyObject_Init421,16104
static PyObject* (*dll_PyObject_GetIter)(PyObject *);dll_PyObject_GetIter422,16171
static int (*dll_PyObject_IsTrue)(PyObject *);dll_PyObject_IsTrue423,16225
static iternextfunc dll__PyObject_NextNotImplemented;dll__PyObject_NextNotImplemented425,16333
static PyObject* dll__Py_NoneStruct;dll__Py_NoneStruct427,16395
static PyObject* _Py_ZeroStruct;_Py_ZeroStruct428,16432
static PyObject* dll__Py_TrueStruct;dll__Py_TrueStruct429,16465
static int (*dll_PyType_IsSubtype)(PyTypeObject *, PyTypeObject *);dll_PyType_IsSubtype431,16563
static void (*dll__Py_NegativeRefcount)(const char *fname, int lineno, PyObject *op);dll__Py_NegativeRefcount433,16649
static PyInt* dll__Py_RefTotal;dll__Py_RefTotal434,16735
static void (*dll__Py_Dealloc)(PyObject *obj);dll__Py_Dealloc435,16767
static void (*dll__PyObject_DebugFree)(void*);dll__PyObject_DebugFree440,16950
static void* (*dll__PyObject_DebugMalloc)(size_t);dll__PyObject_DebugMalloc441,16997
static void* (*dll_PyObject_Malloc)(size_t);dll_PyObject_Malloc443,17056
static void (*dll_PyObject_Free)(void*);dll_PyObject_Free444,17101
static PyObject* (*dll_PyCapsule_New)(void *, char *, PyCapsule_Destructor);dll_PyCapsule_New448,17182
static void* (*dll_PyCapsule_GetPointer)(PyObject *, char *);dll_PyCapsule_GetPointer449,17259
static PyObject* (*dll_PyCObject_FromVoidPtr)(void *cobj, void (*destr)(void *));dll_PyCObject_FromVoidPtr451,17328
static void* (*dll_PyCObject_AsVoidPtr)(PyObject *);dll_PyCObject_AsVoidPtr452,17410
static int* dll_Py_NoSiteFlag;dll_Py_NoSiteFlag455,17532
static HINSTANCE hinstPython = 0; // Instance of python.dllhinstPython458,17572
static PyObject *imp_PyExc_AttributeError;imp_PyExc_AttributeError461,17663
static PyObject *imp_PyExc_IndexError;imp_PyExc_IndexError462,17706
static PyObject *imp_PyExc_KeyError;imp_PyExc_KeyError463,17745
static PyObject *imp_PyExc_KeyboardInterrupt;imp_PyExc_KeyboardInterrupt464,17782
static PyObject *imp_PyExc_TypeError;imp_PyExc_TypeError465,17828
static PyObject *imp_PyExc_ValueError;imp_PyExc_ValueError466,17866
static PyObject *imp_PyExc_SystemExit;imp_PyExc_SystemExit467,17905
static PyObject *imp_PyExc_RuntimeError;imp_PyExc_RuntimeError468,17944
static PyObject *imp_PyExc_ImportError;imp_PyExc_ImportError469,17985
static PyObject *imp_PyExc_OverflowError;imp_PyExc_OverflowError470,18025
# define PyExc_AttributeError PyExc_AttributeError472,18068
# define PyExc_IndexError PyExc_IndexError473,18123
# define PyExc_KeyError PyExc_KeyError474,18170
# define PyExc_KeyboardInterrupt PyExc_KeyboardInterrupt475,18213
# define PyExc_TypeError PyExc_TypeError476,18274
# define PyExc_ValueError PyExc_ValueError477,18319
# define PyExc_SystemExit PyExc_SystemExit478,18366
# define PyExc_RuntimeError PyExc_RuntimeError479,18413
# define PyExc_ImportError PyExc_ImportError480,18464
# define PyExc_OverflowError PyExc_OverflowError481,18513
# define PYTHON_PROC PYTHON_PROC486,18622
    char *name;name489,18667
    PYTHON_PROC *ptr;ptr490,18683
} python_funcname_table[] =python_funcname_table491,18705
end_dynamic_python(void)end_dynamic_python661,27304
python_runtime_link_init(char *libname, int verbose)python_runtime_link_init676,27537
python_enabled(int verbose)python_enabled741,29296
get_exceptions(void)get_exceptions751,29571
static int initialised = 0;initialised779,30884
#define PYINITIALISED PYINITIALISED780,30912
static int python_end_called = FALSE;python_end_called781,30946
#define DESTRUCTOR_FINISH(DESTRUCTOR_FINISH783,30985
#define WIN_PYTHON_REF(WIN_PYTHON_REF785,31059
#define BUF_PYTHON_REF(BUF_PYTHON_REF786,31105
#define TAB_PYTHON_REF(TAB_PYTHON_REF787,31151
# define Py_VISIT(Py_VISIT799,31636
# define Py_CLEAR(Py_CLEAR802,31699
py_memsave(void *p, size_t len)py_memsave811,31847
# define PY_STRSAVE(PY_STRSAVE821,31988
typedef PySliceObject PySliceObject_T;PySliceObject_T824,32061
typedef PyObject PyThreadState;PyThreadState842,32444
static PyThreadState *saved_python_thread = NULL;saved_python_thread846,32507
Python_SaveThread(void)Python_SaveThread853,32665
Python_RestoreThread(void)Python_RestoreThread863,32848
python_end(void)python_end871,32975
python_loaded(void)python_loaded910,33659
static char *py_home_buf = NULL;py_home_buf916,33722
Python_Init(void)Python_Init919,33771
DoPyCommand(const char *cmd, rangeinitializer init_range, runner run, void *arg)DoPyCommand1020,36481
ex_python(exarg_T *eap)ex_python1103,38135
#define BUFFER_SIZE BUFFER_SIZE1121,38454
ex_pyfile(exarg_T *eap)ex_pyfile1127,38509
ex_pydo(exarg_T *eap)ex_pydo1171,39668
OutputGetattr(PyObject *self, char *name)OutputGetattr1188,40006
#define WindowType_Check(WindowType_Check1207,40647
#define BufferType_Check(BufferType_Check1212,40795
#define RangeType_Check(RangeType_Check1220,41074
static PySequenceMethods BufferAsSeq = {BufferAsSeq1228,41363
BufferGetattr(PyObject *self, char *name)BufferGetattr1244,41942
BufferAssItem(PyObject *self, PyInt n, PyObject *val)BufferAssItem1264,42328
BufferAssSlice(PyObject *self, PyInt lo, PyInt hi, PyObject *val)BufferAssSlice1270,42470
static PySequenceMethods RangeAsSeq = {RangeAsSeq1275,42613
RangeGetattr(PyObject *self, char *name)RangeGetattr1293,43240
RangeAssItem(PyObject *self, PyInt n, PyObject *val)RangeAssItem1308,43686
RangeAssSlice(PyObject *self, PyInt lo, PyInt hi, PyObject *val)RangeAssSlice1317,43934
TabPageGetattr(PyObject *self, char *name)TabPageGetattr1328,44244
WindowGetattr(PyObject *self, char *name)WindowGetattr1348,44658
static PySequenceMethods TabListAsSeq = {TabListAsSeq1367,45046
static PySequenceMethods WinListAsSeq = {WinListAsSeq1384,45588
python_buffer_free(buf_T *buf)python_buffer_free1402,46125
python_window_free(win_T *win)python_window_free1413,46322
python_tabpage_free(tabpage_T *tab)python_tabpage_free1424,46519
PythonMod_Init(void)PythonMod_Init1435,46729
LineToString(const char *str)LineToString1466,47557
DictionaryGetattr(PyObject *self, char *name)DictionaryGetattr1496,48143
ListGetattr(PyObject *self, char *name)ListGetattr1511,48593
FunctionGetattr(PyObject *self, char *name)FunctionGetattr1522,48895
do_pyeval(char_u *str, typval_T *rettv)do_pyeval1535,49129
Py_GetProgramName(void)Py_GetProgramName1553,49579
set_ref_in_python(int copyID)set_ref_in_python1560,49655

src/if_ruby.c,18522
#  define NTNT24,579
#  define IMPORT IMPORT27,622
#  define RUBYEXTERN RUBYEXTERN28,685
# define RUBYEXTERN RUBYEXTERN32,762
# define USE_RUBY_INTEGERUSE_RUBY_INTEGER36,845
# define rb_cFalseClass	rb_cFalseClass45,1077
# define rb_cFixnum	rb_cFixnum46,1124
#  define rb_cInteger	rb_cInteger48,1194
#  define rb_cFloat	rb_cFloat51,1268
# define rb_cNilClass	rb_cNilClass53,1314
# define rb_cString	rb_cString54,1357
# define rb_cSymbol	rb_cSymbol55,1396
# define rb_cTrueClass	rb_cTrueClass56,1435
#  define RUBY_EXPORTRUBY_EXPORT64,1777
# undef _WIN32_WINNT_WIN32_WINNT71,1893
# define rb_num2long rb_num2long77,2059
# define rb_int2big rb_int2big78,2097
# define rb_fix2int rb_fix2int85,2360
# define rb_num2int rb_num2int86,2396
# define rb_gc_writebarrier_unprotect_promoted rb_gc_writebarrier_unprotect_promoted92,2601
# define rb_gc_writebarrier_unprotect rb_gc_writebarrier_unprotect95,2746
# define rb_ary_detransient rb_ary_detransient99,2874
#undef off_t	off_t110,3090
#undef EXTERNEXTERN111,3152
#undef __112,3166
# define __OPENTRANSPORT____OPENTRANSPORT__116,3268
# define __OPENTRANSPORTPROTOCOL____OPENTRANSPORTPROTOCOL__117,3295
# define __OPENTRANSPORTPROVIDERS____OPENTRANSPORTPROVIDERS__118,3330
# define USE_TYPEDDATA	USE_TYPEDDATA128,3671
# define StringValuePtr(StringValuePtr138,3974
# define RARRAY_LEN(RARRAY_LEN141,4039
# define RARRAY_PTR(RARRAY_PTR144,4103
# define RSTRING_LEN(RSTRING_LEN147,4168
# define RSTRING_PTR(RSTRING_PTR150,4235
# undef HAVE_DUPHAVE_DUP154,4299
#  define HINSTANCE HINSTANCE163,4482
#  define RUBY_PROC RUBY_PROC164,4508
#  define load_dll(load_dll165,4534
#  define symbol_from_dll symbol_from_dll166,4591
#  define close_dll close_dll167,4623
#  define RUBY_PROC RUBY_PROC169,4658
#  define load_dll load_dll170,4686
#  define symbol_from_dll symbol_from_dll171,4716
#  define close_dll close_dll172,4757
# define VALUE VALUE178,4911
# define RUBY_DATA_FUNC RUBY_DATA_FUNC179,4930
static int ruby_initialized = 0;ruby_initialized182,4966
static void *ruby_stack_start;ruby_stack_start183,4999
static VALUE objtbl;objtbl184,5030
static VALUE mVIM;mVIM186,5052
static VALUE cBuffer;cBuffer187,5071
static VALUE cVimWindow;cVimWindow188,5093
static VALUE eDeletedBufferError;eDeletedBufferError189,5118
static VALUE eDeletedWindowError;eDeletedWindowError190,5152
#  define ruby_init_stack(ruby_init_stack200,5494
#  define HINSTANCE HINSTANCE206,5668
#  undef rb_define_global_functionrb_define_global_function214,5842
#  undef rb_define_methodrb_define_method215,5877
#  undef rb_define_module_functionrb_define_module_function216,5903
#  undef rb_define_singleton_methodrb_define_singleton_method217,5938
# define rb_assoc_new	rb_assoc_new220,5983
# define rb_cObject	rb_cObject221,6024
# define rb_class_new_instance	rb_class_new_instance222,6064
# define rb_check_type	rb_check_type223,6122
#  define rb_check_typeddata	rb_check_typeddata225,6187
# define rb_class_path	rb_class_path227,6248
#   define rb_data_typed_object_wrap	rb_data_typed_object_wrap230,6338
#   define rb_data_typed_object_alloc	rb_data_typed_object_alloc232,6413
#  define rb_data_object_alloc	rb_data_object_alloc235,6498
# define rb_define_class_under	rb_define_class_under237,6563
# define rb_define_const	rb_define_const238,6621
# define rb_define_global_function	rb_define_global_function239,6668
# define rb_define_method	rb_define_method240,6733
# define rb_define_module	rb_define_module241,6781
# define rb_define_module_function	rb_define_module_function242,6829
# define rb_define_singleton_method	rb_define_singleton_method243,6894
# define rb_define_virtual_variable	rb_define_virtual_variable244,6961
# define rb_stdout	rb_stdout245,7028
# define rb_stderr	rb_stderr246,7066
# define rb_eArgError	rb_eArgError247,7104
# define rb_eIndexError	rb_eIndexError248,7148
# define rb_eRuntimeError	rb_eRuntimeError249,7196
# define rb_eStandardError	rb_eStandardError250,7247
# define rb_eval_string_protect	rb_eval_string_protect251,7300
#  define rb_funcallv	rb_funcallv253,7384
#  define rb_funcall2	rb_funcall2255,7431
# define rb_global_variable	rb_global_variable257,7479
# define rb_hash_aset	rb_hash_aset258,7531
# define rb_hash_foreach	rb_hash_foreach259,7572
# define rb_hash_new	rb_hash_new260,7618
# define rb_inspect	rb_inspect261,7657
# define rb_int2inum	rb_int2inum262,7694
# undef rb_internrb_intern266,7875
# define rb_intern	rb_intern267,7893
#   define rb_fix2int	rb_fix2int271,8008
#   define rb_num2int	rb_num2int272,8047
#  define rb_num2uint	rb_num2uint274,8095
# define rb_num2dbl	rb_num2dbl276,8143
# define rb_lastline_get	rb_lastline_get277,8180
# define rb_lastline_set	rb_lastline_set278,8227
# define rb_protect	rb_protect279,8274
# define rb_load	rb_load280,8311
#  define rb_num2long	rb_num2long282,8366
#  define rb_num2ulong	rb_num2ulong285,8438
# define rb_obj_alloc	rb_obj_alloc287,8488
# define rb_obj_as_string	rb_obj_as_string288,8529
# define rb_obj_id	rb_obj_id289,8577
# define rb_raise	rb_raise290,8612
# define rb_str_cat	rb_str_cat291,8645
# define rb_str_concat	rb_str_concat292,8682
# undef rb_str_newrb_str_new293,8725
# define rb_str_new	rb_str_new294,8744
#  define need_rb_str_new_cstr need_rb_str_new_cstr297,8857
#  undef rb_str_new_cstrrb_str_new_cstr300,8988
#  define rb_str_new_cstr	rb_str_new_cstr301,9013
#  define rb_str_new2	rb_str_new2303,9067
#  define rb_string_value	rb_string_value306,9139
#  define rb_string_value_ptr	rb_string_value_ptr307,9186
#  define rb_float_new	rb_float_new308,9241
#  define rb_ary_new	rb_ary_new309,9283
#   define RB_ARY_NEW4_MACRO RB_ARY_NEW4_MACRO311,9342
#   undef rb_ary_new4rb_ary_new4312,9373
#  define rb_ary_new4	rb_ary_new4314,9404
#  define rb_ary_push	rb_ary_push315,9444
#    define rb_ia64_bsp	rb_ia64_bsp318,9556
#    undef ruby_init_stackruby_init_stack319,9598
#    define ruby_init_stack(ruby_init_stack320,9625
#    define ruby_init_stack	ruby_init_stack322,9711
#  define rb_str2cstr	rb_str2cstr326,9786
#  define rb_errinfo	rb_errinfo329,9858
#  define ruby_errinfo	ruby_errinfo331,9903
# define ruby_init	ruby_init333,9956
# define ruby_init_loadpath	ruby_init_loadpath334,9991
#   define ruby_sysinit	ruby_sysinit337,10082
#   define NtInitialize	NtInitialize339,10133
#   define rb_w32_snprintf	rb_w32_snprintf342,10210
#  define ruby_script	ruby_script347,10300
#  define rb_enc_find_index	rb_enc_find_index348,10340
#  define rb_enc_find	rb_enc_find349,10391
#  undef rb_enc_str_newrb_enc_str_new350,10431
#  define rb_enc_str_new	rb_enc_str_new351,10455
#  define rb_sprintf	rb_sprintf352,10500
#  define rb_require	rb_require353,10538
#  define ruby_options	ruby_options354,10576
static VALUE (*dll_rb_assoc_new) (VALUE, VALUE);dll_rb_assoc_new360,10663
VALUE *dll_rb_cFalseClass;dll_rb_cFalseClass361,10712
VALUE *dll_rb_cFixnum;dll_rb_cFixnum362,10739
VALUE *dll_rb_cInteger;dll_rb_cInteger364,10793
VALUE *dll_rb_cFloat;dll_rb_cFloat367,10849
VALUE *dll_rb_cNilClass;dll_rb_cNilClass369,10879
static VALUE *dll_rb_cObject;dll_rb_cObject370,10904
VALUE *dll_rb_cString;dll_rb_cString371,10934
VALUE *dll_rb_cSymbol;dll_rb_cSymbol372,10957
VALUE *dll_rb_cTrueClass;dll_rb_cTrueClass373,10980
static VALUE (*dll_rb_class_new_instance) (int,VALUE*,VALUE);dll_rb_class_new_instance374,11006
static void (*dll_rb_check_type) (VALUE,int);dll_rb_check_type375,11068
static void *(*dll_rb_check_typeddata) (VALUE,const rb_data_type_t *);dll_rb_check_typeddata377,11136
static VALUE (*dll_rb_class_path) (VALUE);dll_rb_class_path379,11215
static VALUE (*dll_rb_data_typed_object_wrap) (VALUE, void*, const rb_data_type_t *);dll_rb_data_typed_object_wrap382,11305
static VALUE (*dll_rb_data_typed_object_alloc) (VALUE, void*, const rb_data_type_t *);dll_rb_data_typed_object_alloc384,11399
static VALUE (*dll_rb_data_object_alloc) (VALUE, void*, RUBY_DATA_FUNC, RUBY_DATA_FUNC);dll_rb_data_object_alloc387,11502
static VALUE (*dll_rb_define_class_under) (VALUE, const char*, VALUE);dll_rb_define_class_under389,11599
static void (*dll_rb_define_const) (VALUE,const char*,VALUE);dll_rb_define_const390,11670
static void (*dll_rb_define_global_function) (const char*,VALUE(*)(),int);dll_rb_define_global_function391,11732
static void (*dll_rb_define_method) (VALUE,const char*,VALUE(*)(),int);dll_rb_define_method392,11807
static VALUE (*dll_rb_define_module) (const char*);dll_rb_define_module393,11879
static void (*dll_rb_define_module_function) (VALUE,const char*,VALUE(*)(),int);dll_rb_define_module_function394,11931
static void (*dll_rb_define_singleton_method) (VALUE,const char*,VALUE(*)(),int);dll_rb_define_singleton_method395,12012
static void (*dll_rb_define_virtual_variable) (const char*,VALUE(*)(),void(*)());dll_rb_define_virtual_variable396,12094
static VALUE *dll_rb_stdout;dll_rb_stdout397,12176
static VALUE *dll_rb_stderr;dll_rb_stderr398,12205
static VALUE *dll_rb_eArgError;dll_rb_eArgError399,12234
static VALUE *dll_rb_eIndexError;dll_rb_eIndexError400,12266
static VALUE *dll_rb_eRuntimeError;dll_rb_eRuntimeError401,12300
static VALUE *dll_rb_eStandardError;dll_rb_eStandardError402,12336
static VALUE (*dll_rb_eval_string_protect) (const char*, int*);dll_rb_eval_string_protect403,12373
static VALUE (*dll_rb_funcallv) (VALUE, ID, int, const VALUE*);dll_rb_funcallv405,12461
static VALUE (*dll_rb_funcall2) (VALUE, ID, int, const VALUE*);dll_rb_funcall2407,12532
static void (*dll_rb_global_variable) (VALUE*);dll_rb_global_variable409,12604
static VALUE (*dll_rb_hash_aset) (VALUE, VALUE, VALUE);dll_rb_hash_aset410,12652
static VALUE (*dll_rb_hash_foreach) (VALUE, int (*)(VALUE, VALUE, VALUE), VALUE);dll_rb_hash_foreach411,12708
static VALUE (*dll_rb_hash_new) (void);dll_rb_hash_new412,12790
static VALUE (*dll_rb_inspect) (VALUE);dll_rb_inspect413,12830
static VALUE (*dll_rb_int2inum) (long);dll_rb_int2inum414,12870
static ID (*dll_rb_intern) (const char*);dll_rb_intern415,12910
static long (*dll_rb_fix2int) (VALUE);dll_rb_fix2int417,13006
static long (*dll_rb_num2int) (VALUE);dll_rb_num2int418,13045
static unsigned long (*dll_rb_num2uint) (VALUE);dll_rb_num2uint419,13084
static double (*dll_rb_num2dbl) (VALUE);dll_rb_num2dbl421,13141
static VALUE (*dll_rb_lastline_get) (void);dll_rb_lastline_get422,13182
static void (*dll_rb_lastline_set) (VALUE);dll_rb_lastline_set423,13226
static VALUE (*dll_rb_protect) (VALUE (*)(VALUE), VALUE, int*);dll_rb_protect424,13270
static void (*dll_rb_load) (VALUE, int);dll_rb_load425,13334
static long (*dll_rb_num2long) (VALUE);dll_rb_num2long426,13375
static unsigned long (*dll_rb_num2ulong) (VALUE);dll_rb_num2ulong427,13415
static VALUE (*dll_rb_obj_alloc) (VALUE);dll_rb_obj_alloc428,13465
static VALUE (*dll_rb_obj_as_string) (VALUE);dll_rb_obj_as_string429,13507
static VALUE (*dll_rb_obj_id) (VALUE);dll_rb_obj_id430,13553
static void (*dll_rb_raise) (VALUE, const char*, ...);dll_rb_raise431,13592
static VALUE (*dll_rb_string_value) (volatile VALUE*);dll_rb_string_value433,13671
static char *(*dll_rb_str2cstr) (VALUE,int*);dll_rb_str2cstr435,13733
static VALUE (*dll_rb_str_cat) (VALUE, const char*, long);dll_rb_str_cat437,13787
static VALUE (*dll_rb_str_concat) (VALUE, VALUE);dll_rb_str_concat438,13846
static VALUE (*dll_rb_str_new) (const char*, long);dll_rb_str_new439,13896
static VALUE (*dll_rb_str_new_cstr) (const char*);dll_rb_str_new_cstr442,14033
static VALUE (*dll_rb_str_new2) (const char*);dll_rb_str_new2444,14091
static VALUE (*dll_rb_errinfo) (void);dll_rb_errinfo447,14170
static VALUE *dll_ruby_errinfo;dll_ruby_errinfo449,14216
static void (*dll_ruby_init) (void);dll_ruby_init451,14256
static void (*dll_ruby_init_loadpath) (void);dll_ruby_init_loadpath452,14293
static void (*dll_ruby_sysinit) (int*, char***);dll_ruby_sysinit455,14378
static void (*dll_NtInitialize) (int*, char***);dll_NtInitialize457,14435
static int (*dll_rb_w32_snprintf)(char*, size_t, const char*, ...);dll_rb_w32_snprintf460,14518
static char * (*dll_rb_string_value_ptr) (volatile VALUE*);dll_rb_string_value_ptr464,14627
static VALUE (*dll_rb_float_new) (double);dll_rb_float_new465,14687
static VALUE (*dll_rb_ary_new) (void);dll_rb_ary_new466,14730
static VALUE (*dll_rb_ary_new4) (long n, const VALUE *elts);dll_rb_ary_new4467,14769
static VALUE (*dll_rb_ary_push) (VALUE, VALUE);dll_rb_ary_push468,14830
static void (*dll_rb_ary_detransient) (VALUE);dll_rb_ary_detransient470,14903
static void * (*dll_rb_ia64_bsp) (void);dll_rb_ia64_bsp474,15031
static void (*dll_ruby_init_stack)(VALUE*, void*);dll_ruby_init_stack475,15072
static void (*dll_ruby_init_stack)(VALUE*);dll_ruby_init_stack477,15132
static VALUE (*dll_rb_int2big)(SIGNED_VALUE);dll_rb_int2big482,15227
static void (*dll_ruby_script) (const char*);dll_ruby_script486,15306
static int (*dll_rb_enc_find_index) (const char*);dll_rb_enc_find_index487,15352
static rb_encoding* (*dll_rb_enc_find) (const char*);dll_rb_enc_find488,15403
static VALUE (*dll_rb_enc_str_new) (const char*, long, rb_encoding*);dll_rb_enc_str_new489,15457
static VALUE (*dll_rb_sprintf) (const char*, ...);dll_rb_sprintf490,15527
static VALUE (*dll_rb_require) (const char*);dll_rb_require491,15578
static void* (*ruby_options)(int, char**);ruby_options492,15624
static void (*dll_rb_gc_writebarrier_unprotect_promoted)(VALUE);dll_rb_gc_writebarrier_unprotect_promoted497,15740
static void (*dll_rb_gc_writebarrier_unprotect)(VALUE obj);dll_rb_gc_writebarrier_unprotect499,15813
rb_num2long_stub(VALUE x)rb_num2long_stub506,15970
rb_int2big_stub(intptr_t x)rb_int2big_stub516,16126
rb_fix2int_stub(VALUE x)rb_fix2int_stub526,16321
rb_num2int_stub(VALUE x)rb_num2int_stub531,16389
rb_float_new_in_heap(double d)rb_float_new_in_heap538,16492
rb_num2ulong(VALUE x)rb_num2ulong544,16603
rb_gc_writebarrier_unprotect_promoted_stub(VALUE obj)rb_gc_writebarrier_unprotect_promoted_stub559,16904
rb_gc_writebarrier_unprotect_stub(VALUE obj)rb_gc_writebarrier_unprotect_stub565,17031
rb_ary_detransient_stub(VALUE x)rb_ary_detransient_stub574,17174
static HINSTANCE hinstRuby = NULL; // Instance of ruby.dllhinstRuby580,17251
    char *name;name587,17380
    RUBY_PROC *ptr;ptr588,17396
} ruby_funcname_table[] =ruby_funcname_table589,17416
end_dynamic_ruby(void)end_dynamic_ruby742,23458
ruby_runtime_link_init(char *libname, int verbose)ruby_runtime_link_init757,23686
ruby_enabled(int verbose)ruby_enabled791,24344
ruby_end(void)ruby_end798,24503
ex_ruby(exarg_T *eap)ex_ruby806,24583
vim_str2rb_enc_str(const char *s)vim_str2rb_enc_str830,25118
eval_enc_string_protect(const char *str, int *state)eval_enc_string_protect851,25512
ex_rubydo(exarg_T *eap)ex_rubydo876,26035
rb_load_wrap(VALUE file_to_load)rb_load_wrap923,26980
ex_rubyfile(exarg_T *eap)ex_rubyfile930,27074
ruby_buffer_free(buf_T *buf)ruby_buffer_free944,27322
ruby_window_free(win_T *win)ruby_window_free954,27505
ensure_ruby_initialized(void)ensure_ruby_initialized964,27694
error_print(int state)error_print1015,28672
#define TAG_RETURN	TAG_RETURN1028,28906
#define TAG_BREAK	TAG_BREAK1029,28929
#define TAG_NEXT	TAG_NEXT1030,28951
#define TAG_RETRY	TAG_RETRY1031,28972
#define TAG_REDO	TAG_REDO1032,28994
#define TAG_RAISE	TAG_RAISE1033,29015
#define TAG_THROW	TAG_THROW1034,29037
#define TAG_FATAL	TAG_FATAL1035,29059
#define TAG_MASK	TAG_MASK1036,29081
vim_message(VALUE self UNUSED, VALUE str)vim_message1100,30567
vim_set_option(VALUE self UNUSED, VALUE str)vim_set_option1122,30981
vim_command(VALUE self UNUSED, VALUE str)vim_command1130,31141
vim_to_ruby(typval_T *tv)vim_to_ruby1138,31290
vim_evaluate(VALUE self UNUSED, VALUE str)vim_evaluate1213,32856
static const rb_data_type_t buffer_type = {buffer_type1235,33223
buffer_dsize(const void *buf UNUSED)buffer_dsize1251,33455
buffer_new(buf_T *buf)buffer_new1258,33547
get_buf(VALUE obj)get_buf1278,33924
vim_blob(VALUE self UNUSED, VALUE str)vim_blob1293,34218
buffer_s_current(void)buffer_s_current1307,34527
buffer_s_count(void)buffer_s_count1313,34603
buffer_s_aref(VALUE self UNUSED, VALUE num)buffer_s_aref1330,34832
buffer_name(VALUE self)buffer_name1351,35142
buffer_number(VALUE self)buffer_number1359,35291
buffer_count(VALUE self)buffer_count1367,35405
get_buffer_line(buf_T *buf, linenr_T n)get_buffer_line1375,35530
buffer_aref(VALUE self, VALUE num)buffer_aref1383,35773
set_buffer_line(buf_T *buf, linenr_T n, VALUE str)set_buffer_line1393,35976
buffer_aset(VALUE self, VALUE num, VALUE str)buffer_aset1426,36696
buffer_delete(VALUE self, VALUE num)buffer_delete1436,36894
buffer_append(VALUE self, VALUE num, VALUE str)buffer_append1472,37628
static const rb_data_type_t window_type = {window_type1515,38584
window_dsize(const void *win UNUSED)window_dsize1531,38816
window_new(win_T *win)window_new1538,38908
get_win(VALUE obj)get_win1558,39291
window_s_current(void)window_s_current1573,39585
line_s_current(void)line_s_current1583,39732
set_current_line(VALUE self UNUSED, VALUE str)set_current_line1589,39834
current_line_number(void)current_line_number1595,39967
window_s_count(void)window_s_count1601,40063
window_s_aref(VALUE self UNUSED, VALUE num)window_s_aref1612,40188
window_buffer(VALUE self)window_buffer1624,40406
window_height(VALUE self)window_height1632,40525
window_set_height(VALUE self, VALUE height)window_set_height1640,40641
window_width(VALUE self UNUSED)window_width1652,40864
window_set_width(VALUE self UNUSED, VALUE width)window_set_width1658,40962
window_cursor(VALUE self)window_cursor1670,41187
window_set_cursor(VALUE self, VALUE pos)window_set_cursor1678,41350
f_nop(VALUE self UNUSED)f_nop1697,41857
f_p(int argc, VALUE *argv, VALUE self UNUSED)f_p1703,41921
ruby_io_init(void)ruby_io_init1724,42314
ruby_vim_init(void)ruby_vim_init1741,42836
vim_ruby_init(void *stack_start)vim_ruby_init1806,46124
convert_hash2dict(VALUE key, VALUE val, VALUE arg)convert_hash2dict1813,46282
ruby_convert_to_vim_value(VALUE val, typval_T *rettv)ruby_convert_to_vim_value1829,46678
do_rubyeval(char_u *str, typval_T *rettv)do_rubyeval1920,48383

src/if_tcl.c,4555
#undef EXTERN	EXTERN70,3143
# define USE_TCL_STUBS USE_TCL_STUBS73,3203
    Tcl_Interp *interp;interp81,3318
    int exitvalue;exitvalue82,3342
    int range_start, range_end;range_start83,3361
    int range_start, range_end;range_end83,3361
    int lbase;lbase84,3393
    char *curbuf, *curwin;curbuf85,3408
    char *curbuf, *curwin;curwin85,3408
} tcl_info;tcl_info86,3435
static tcl_info tclinfo = { NULL, 0, 0, 0, 0, NULL, NULL };tclinfo88,3448
#define VAR_RANGE1	VAR_RANGE190,3509
#define VAR_RANGE2	VAR_RANGE291,3550
#define VAR_RANGE3	VAR_RANGE392,3591
#define VAR_CURBUF	VAR_CURBUF93,3630
#define VAR_CURWIN	VAR_CURWIN94,3674
#define VAR_LBASE	VAR_LBASE95,3718
#define VAR_CURLINE	VAR_CURLINE96,3751
#define VAR_CURLNUM	VAR_CURLNUM97,3778
#define VARNAME_SIZE	VARNAME_SIZE98,3805
#define row2tcl(row2tcl100,3830
#define row2vim(row2vim101,3877
#define col2tcl(col2tcl102,3924
#define col2vim(col2vim103,3971
#define VIMOUT	VIMOUT106,4020
#define VIMERR	VIMERR107,4051
# define CONST84CONST84111,4137
struct refref121,4478
    struct ref	*next;next123,4491
    Tcl_Interp	*interp;interp125,4514
    Tcl_Command cmd;	    // Tcl command that represents this objectcmd126,4538
    Tcl_Obj	*delcmd;    // Tcl command to call when object is being del.delcmd127,4606
    void	*vimobj;    // Vim window or buffer (win_T* or buf_T*)vimobj128,4679
static struct ref refsdeleted;	// dummy object for deleted ref listrefsdeleted145,5717
#  define DYNAMIC_TCL_DLL DYNAMIC_TCL_DLL153,6036
#  define DYNAMIC_TCL_VER DYNAMIC_TCL_VER156,6107
typedef int HANDLE;HANDLE160,6200
#  define HANDLE HANDLE165,6265
#  define TCL_PROC TCL_PROC166,6288
#  define load_dll(load_dll167,6313
#  define symbol_from_dll symbol_from_dll168,6370
#  define close_dll close_dll169,6402
#  define TCL_PROC TCL_PROC171,6437
#  define load_dll load_dll172,6464
#  define symbol_from_dll symbol_from_dll173,6494
#  define close_dll close_dll174,6535
static HANDLE hTclLib = NULL;hTclLib180,6636
Tcl_Interp* (*dll_Tcl_CreateInterp)();dll_Tcl_CreateInterp181,6666
void (*dll_Tcl_FindExecutable)(const void *);dll_Tcl_FindExecutable182,6705
    char* name;name188,6820
    TCL_PROC* ptr;ptr189,6836
} tcl_funcname_table[] = {tcl_funcname_table190,6855
tcl_runtime_link_init(char *libname, int verbose)tcl_runtime_link_init207,7309
static char *find_executable_arg = NULL;find_executable_arg236,7897
vim_tcl_init(char *arg)vim_tcl_init240,7955
static int stubs_initialized = FALSE;stubs_initialized251,8121
tcl_enabled(int verbose)tcl_enabled257,8224
tcl_end(void)tcl_end281,8746
exitcmd(exitcmd311,9790
beepcmd(beepcmd340,10289
buffercmd(buffercmd362,10798
windowcmd(windowcmd458,12724
#define FL_UPDATE_SCREEN	FL_UPDATE_SCREEN491,13399
#define FL_UPDATE_CURBUF	FL_UPDATE_CURBUF492,13431
#define FL_ADJUST_CURSOR	FL_ADJUST_CURSOR493,13463
bufselfcmd(bufselfcmd499,13567
winselfcmd(winselfcmd936,23195
commandcmd(commandcmd1111,26895
optioncmd(optioncmd1125,27128
exprcmd(exprcmd1139,27358
tclgetlinenum(tclgetlinenum1156,27792
tclfindwin(buf_T *buf)tclfindwin1209,28849
tcldoexcommand(tcldoexcommand1225,29127
tclsetoption(tclsetoption1283,30328
tclvimexpr(tclvimexpr1364,32039
vimerror(Tcl_Interp *interp)vimerror1404,32815
delref(ClientData cref)delref1428,33445
tclgetref(tclgetref1441,33645
tclgetwindow(Tcl_Interp *interp, win_T *win)tclgetwindow1501,35053
tclgetbuffer(Tcl_Interp *interp, buf_T *buf)tclgetbuffer1507,35202
tclsetdelcmd(tclsetdelcmd1513,35348
tcl_channel_close(ClientData instance, Tcl_Interp *interp UNUSED)tcl_channel_close1549,36320
tcl_channel_input(tcl_channel_input1564,36570
tcl_channel_output(tcl_channel_output1580,36823
tcl_channel_watch(ClientData instance UNUSED, int mask UNUSED)tcl_channel_watch1619,37556
tcl_channel_gethandle(tcl_channel_gethandle1625,37665
static Tcl_ChannelType tcl_channel_type =tcl_channel_type1635,37832
tclupdatevars(void)tclupdatevars1671,38742
tclinit(exarg_T *eap)tclinit1699,39519
tclerrmsg(char *text)tclerrmsg1808,43065
tclmsg(char *text)tclmsg1823,43247
tcldelthisinterp(void)tcldelthisinterp1838,43424
tclexit(int error)tclexit1859,44293
ex_tcl(exarg_T *eap)ex_tcl1907,45087
ex_tclfile(exarg_T *eap)ex_tclfile1933,45519
ex_tcldo(exarg_T *eap)ex_tcldo1951,45783
tcldelallrefs(struct ref *ref)tcldelallrefs2029,47841
tcl_buffer_free(buf_T *buf)tcl_buffer_free2066,48489
tcl_window_free(win_T *win)tcl_window_free2085,48834

src/if_xcmdsrv.c,3137
typedef struct PendingCommandPendingCommand65,2393
    int	    serial;	// Serial number expected in result.serial67,2425
    int	    code;	// Result Code. 0 is OKcode68,2482
    char_u  *result;	// String result for command (malloc'ed).result69,2524
    struct PendingCommand *nextPtr;nextPtr71,2627
} PendingCommand;PendingCommand74,2741
static PendingCommand *pendingCommands = NULL;pendingCommands76,2760
#define MAX_PROP_WORDS MAX_PROP_WORDS160,5872
struct ServerReplyServerReply162,5903
    Window  id;id164,5924
    garray_T strings;strings165,5940
static garray_T serverReply = { 0, 0, 0, 0, 0 };serverReply167,5965
enum ServerReplyOp { SROP_Find, SROP_Add, SROP_Delete };ServerReplyOp168,6014
enum ServerReplyOp { SROP_Find, SROP_Add, SROP_Delete };SROP_Find168,6014
enum ServerReplyOp { SROP_Find, SROP_Add, SROP_Delete };SROP_Add168,6014
enum ServerReplyOp { SROP_Find, SROP_Add, SROP_Delete };SROP_Delete168,6014
typedef int (*EndCond)(void *);EndCond170,6072
struct x_cmdqueuex_cmdqueue172,6105
    char_u		*propInfo;propInfo174,6125
    long_u		len;len175,6148
    struct x_cmdqueue	*next;next176,6165
    struct x_cmdqueue	*prev;prev177,6194
typedef struct x_cmdqueue x_queue_T;x_queue_T180,6227
static x_queue_T head = {NULL, 0, NULL, NULL};head183,6306
static Atom	registryProperty = None;registryProperty204,7331
static Atom	vimProperty = None;vimProperty205,7368
static int	got_x_error = FALSE;got_x_error206,7400
static char_u	*empty_prop = (char_u *)"";	// empty GetRegProp() resultempty_prop208,7433
serverRegisterName(serverRegisterName215,7616
DoRegisterName(Display *dpy, char_u *name)DoRegisterName253,8287
#define MAX_NAME_LENGTH MAX_NAME_LENGTH257,8377
serverChangeRegisteredWindow(serverChangeRegisteredWindow331,10422
serverSendToVim(serverSendToVim367,11412
WaitForPend(void *p)WaitForPend508,15276
WindowValid(Display *dpy, Window w)WindowValid518,15480
ServerWait(ServerWait547,16085
#define UI_MSEC_DELAY UI_MSEC_DELAY559,16274
#define SEND_MSEC_POLL SEND_MSEC_POLL560,16299
serverGetVimNames(Display *dpy)serverGetVimNames624,17513
ServerReplyFind(Window w, enum ServerReplyOp op)ServerReplyFind677,18509
serverStrToWin(char_u *str)serverStrToWin719,19458
serverSendReply(char_u *name, char_u *str)serverSendReply735,19769
WaitForReply(void *p)WaitForReply766,20505
serverReadReply(serverReadReply780,20846
serverPeekReply(Display *dpy, Window win, char_u **str)serverPeekReply820,21706
SendInit(Display *dpy)SendInit841,22117
LookupName(LookupName897,23803
DeleteAnyLingerer(DeleteAnyLingerer991,26231
GetRegProp(GetRegProp1053,27523
serverEventProc(serverEventProc1110,29100
save_in_queue(char_u *propInfo, long_u len)save_in_queue1155,30227
server_parse_messages(void)server_parse_messages1182,30741
server_waiting(void)server_waiting1203,31165
server_parse_message(server_parse_message1214,31387
AppendPropCarefully(AppendPropCarefully1486,37448
x_error_check(Display *dpy UNUSED, XErrorEvent *error_event UNUSED)x_error_check1509,38116
IsSerialName(char_u *str)IsSerialName1520,38364

src/iid_ole.c,681
#  define __IID_DEFINED____IID_DEFINED__23,588
# define __IID_DEFINED____IID_DEFINED__28,654
typedef struct _IID_IID30,680
    unsigned long x;x32,702
    unsigned short s1;s133,723
    unsigned short s2;s234,746
    unsigned char  c[8];c35,769
} IID;IID36,794
# define CLSID_DEFINEDCLSID_DEFINED41,832
typedef IID CLSID;CLSID42,855
const IID IID_IVim = {0x0F0BFAE2,0x4C90,0x11d1,{0x82,0xD7,0x00,0x04,0xAC,0x36,0x85,0x19}};IID_IVim45,882
const IID LIBID_Vim = {0x0F0BFAE0,0x4C90,0x11d1,{0x82,0xD7,0x00,0x04,0xAC,0x36,0x85,0x19}};LIBID_Vim48,975
const CLSID CLSID_Vim = {0x0F0BFAE1,0x4C90,0x11d1,{0x82,0xD7,0x00,0x04,0xAC,0x36,0x85,0x19}};CLSID_Vim51,1069

src/indent.c,1986
tabstop_set(char_u *var, int **array)tabstop_set23,540
tabstop_padding(colnr_T col, int ts_arg, int *vts)tabstop_padding86,1651
tabstop_at(colnr_T col, int ts, int *vts)tabstop_at118,2236
tabstop_start(colnr_T col, int ts, int *vts)tabstop_start148,2691
tabstop_fromto(tabstop_fromto175,3231
tabstop_eq(int *ts1, int *ts2)tabstop_eq255,4698
tabstop_copy(int *oldts)tabstop_copy278,5101
tabstop_count(int *ts)tabstop_count297,5409
tabstop_first(int *ts)tabstop_first306,5555
get_sw_value(buf_T *buf)get_sw_value318,5759
get_sw_value_pos(buf_T *buf, pos_T *pos)get_sw_value_pos327,5871
get_sw_value_indent(buf_T *buf)get_sw_value_indent342,6197
get_sw_value_col(buf_T *buf, colnr_T col UNUSED)get_sw_value_col354,6400
get_sts_value(void)get_sts_value369,6737
get_indent(void)get_indent378,6921
get_indent_lnum(linenr_T lnum)get_indent_lnum392,7238
get_indent_buf(buf_T *buf, linenr_T lnum)get_indent_buf408,7624
get_indent_str(get_indent_str424,8022
get_indent_str_vtab(char_u *ptr, int ts, int *vts, int list)get_indent_str_vtab457,8721
set_indent(set_indent492,9581
get_number_indent(linenr_T lnum)get_number_indent802,16990
briopt_check(win_T *wp)briopt_check846,18143
get_breakindent_win(get_breakindent_win891,19043
inindent(int extra)inindent959,21191
op_reindent(oparg_T *oap, int (*how)(void))op_reindent977,21546
preprocs_left(void)preprocs_left1062,23917
ins_try_si(int c)ins_try_si1086,24343
change_indent(change_indent1170,26877
copy_indent(int size, char_u *src)copy_indent1385,33033
ex_retab(exarg_T *eap)ex_retab1528,35750
get_expr_indent(void)get_expr_indent1744,41188
lisp_match(char_u *p)lisp_match1800,42633
get_lisp_indent(void)get_lisp_indent1833,43710
fixthisline(int (*get_the_indent)(void))fixthisline2025,47925
fix_indent(void)fix_indent2038,48205
f_indent(typval_T *argvars, typval_T *rettv)f_indent2061,48580
f_lispindent(typval_T *argvars UNUSED, typval_T *rettv)f_lispindent2076,48871

src/insexpand.c,10504
# define CTRL_X_WANT_IDENT	CTRL_X_WANT_IDENT21,513
# define CTRL_X_NORMAL	CTRL_X_NORMAL23,547
# define CTRL_X_NOT_DEFINED_YET	CTRL_X_NOT_DEFINED_YET24,611
# define CTRL_X_SCROLL	CTRL_X_SCROLL25,645
# define CTRL_X_WHOLE_LINE	CTRL_X_WHOLE_LINE26,671
# define CTRL_X_FILES	CTRL_X_FILES27,700
# define CTRL_X_TAGS	CTRL_X_TAGS28,725
# define CTRL_X_PATH_PATTERNS	CTRL_X_PATH_PATTERNS29,771
# define CTRL_X_PATH_DEFINES	CTRL_X_PATH_DEFINES30,825
# define CTRL_X_FINISHED	CTRL_X_FINISHED31,878
# define CTRL_X_DICTIONARY	CTRL_X_DICTIONARY32,906
# define CTRL_X_THESAURUS	CTRL_X_THESAURUS33,957
# define CTRL_X_CMDLINE	CTRL_X_CMDLINE34,1008
# define CTRL_X_FUNCTION	CTRL_X_FUNCTION35,1036
# define CTRL_X_OMNI	CTRL_X_OMNI36,1064
# define CTRL_X_SPELL	CTRL_X_SPELL37,1089
# define CTRL_X_LOCAL_MSG	CTRL_X_LOCAL_MSG38,1115
# define CTRL_X_EVAL	CTRL_X_EVAL39,1174
# define CTRL_X_MSG(CTRL_X_MSG41,1235
static char *ctrl_x_msgs[] =ctrl_x_msgs44,1347
static char *ctrl_x_mode_names[] = {ctrl_x_mode_names66,2173
#define CPT_ABBR	CPT_ABBR90,2565
#define CPT_MENU	CPT_MENU91,2594
#define CPT_KIND	CPT_KIND92,2623
#define CPT_INFO	CPT_INFO93,2652
#define CPT_COUNT	CPT_COUNT94,2681
typedef struct compl_S compl_T;compl_T99,2790
struct compl_Scompl_S100,2822
    compl_T	*cp_next;cp_next102,2839
    compl_T	*cp_prev;cp_prev103,2861
    char_u	*cp_str;	// matched textcp_str104,2883
    char_u	*(cp_text[CPT_COUNT]);	// text for the menucp_text105,2919
    typval_T	cp_user_data;cp_user_data107,2991
    char_u	*cp_fname;	// file containing the match, allocated whencp_fname109,3025
    int		cp_flags;	// CP_ valuescp_flags111,3126
    int		cp_number;	// sequence numbercp_number112,3159
# define CP_ORIGINAL_TEXT CP_ORIGINAL_TEXT116,3225
# define CP_FREE_FNAME	CP_FREE_FNAME117,3301
# define CP_CONT_S_IPOS	CP_CONT_S_IPOS118,3355
# define CP_EQUAL	CP_EQUAL119,3426
# define CP_ICASE	CP_ICASE120,3491
static char e_hitend[] = N_("Hit end of paragraph");e_hitend122,3551
static char e_complwin[] = N_("E839: Completion function changed window");e_complwin124,3628
static char e_compldel[] = N_("E840: Completion function deleted text");e_compldel125,3703
static compl_T    *compl_first_match = NULL;compl_first_match135,4048
static compl_T    *compl_curr_match = NULL;compl_curr_match136,4093
static compl_T    *compl_shown_match = NULL;compl_shown_match137,4137
static compl_T    *compl_old_match = NULL;compl_old_match138,4182
static int	  compl_enter_selects = FALSE;compl_enter_selects142,4335
static char_u	  *compl_leader = NULL;compl_leader146,4467
static int	  compl_get_longest = FALSE;	// put longest common stringcompl_get_longest148,4506
static int	  compl_no_insert = FALSE;	// FALSE: select & insertcompl_no_insert151,4601
static int	  compl_no_select = FALSE;	// FALSE: select & insertcompl_no_select153,4689
static int	  compl_used_match;compl_used_match158,4882
static int	  compl_was_interrupted = FALSE;compl_was_interrupted161,4952
static int	  compl_interrupted = FALSE;compl_interrupted165,5103
static int	  compl_restarting = FALSE;	// don't insert matchcompl_restarting167,5144
static int	  compl_started = FALSE;compl_started171,5329
static int	  ctrl_x_mode = CTRL_X_NORMAL;ctrl_x_mode174,5398
static int	  compl_matches = 0;compl_matches176,5441
static char_u	  *compl_pattern = NULL;compl_pattern177,5473
static int	  compl_direction = FORWARD;compl_direction178,5512
static int	  compl_shows_dir = FORWARD;compl_shows_dir179,5552
static int	  compl_pending = 0;	    // > 1 for postponed CTRL-Ncompl_pending180,5592
static pos_T	  compl_startpos;compl_startpos181,5656
static colnr_T	  compl_col = 0;	    // column where the text startscompl_col182,5687
static char_u	  *compl_orig_text = NULL;  // text as it was beforecompl_orig_text184,5791
static int	  compl_cont_mode = 0;compl_cont_mode186,5889
static expand_T	  compl_xp;compl_xp187,5923
static int	  compl_opt_refresh_always = FALSE;compl_opt_refresh_always189,5952
static int	  compl_opt_suppress_empty = FALSE;compl_opt_suppress_empty190,5999
static int  spell_bad_len = 0;	// length of located bad wordspell_bad_len216,7191
ins_ctrl_x(void)ins_ctrl_x223,7310
int ctrl_x_mode_none(void) { return ctrl_x_mode == 0; }ctrl_x_mode_none246,7907
int ctrl_x_mode_normal(void) { return ctrl_x_mode == CTRL_X_NORMAL; }ctrl_x_mode_normal247,7963
int ctrl_x_mode_scroll(void) { return ctrl_x_mode == CTRL_X_SCROLL; }ctrl_x_mode_scroll248,8033
int ctrl_x_mode_whole_line(void) { return ctrl_x_mode == CTRL_X_WHOLE_LINE; }ctrl_x_mode_whole_line249,8103
int ctrl_x_mode_files(void) { return ctrl_x_mode == CTRL_X_FILES; }ctrl_x_mode_files250,8181
int ctrl_x_mode_tags(void) { return ctrl_x_mode == CTRL_X_TAGS; }ctrl_x_mode_tags251,8249
int ctrl_x_mode_path_patterns(void) {ctrl_x_mode_path_patterns252,8315
int ctrl_x_mode_path_defines(void) {ctrl_x_mode_path_defines254,8405
int ctrl_x_mode_dictionary(void) { return ctrl_x_mode == CTRL_X_DICTIONARY; }ctrl_x_mode_dictionary256,8494
int ctrl_x_mode_thesaurus(void) { return ctrl_x_mode == CTRL_X_THESAURUS; }ctrl_x_mode_thesaurus257,8572
int ctrl_x_mode_cmdline(void) { return ctrl_x_mode == CTRL_X_CMDLINE; }ctrl_x_mode_cmdline258,8648
int ctrl_x_mode_function(void) { return ctrl_x_mode == CTRL_X_FUNCTION; }ctrl_x_mode_function259,8720
int ctrl_x_mode_omni(void) { return ctrl_x_mode == CTRL_X_OMNI; }ctrl_x_mode_omni260,8794
int ctrl_x_mode_spell(void) { return ctrl_x_mode == CTRL_X_SPELL; }ctrl_x_mode_spell261,8860
int ctrl_x_mode_line_or_eval(void) {ctrl_x_mode_line_or_eval262,8928
ctrl_x_mode_not_default(void)ctrl_x_mode_not_default269,9121
ctrl_x_mode_not_defined_yet(void)ctrl_x_mode_not_defined_yet278,9271
has_compl_option(int dict_opt)has_compl_option287,9433
vim_is_ctrl_x_key(int c)vim_is_ctrl_x_key321,10168
ins_compl_accept_char(int c)ins_compl_accept_char384,12203
ins_compl_add_infercase(ins_compl_add_infercase418,13293
ins_compl_add(ins_compl_add575,16940
ins_compl_equal(compl_T *match, char_u *str, int len)ins_compl_equal690,19966
ins_compl_longest_match(compl_T *match)ins_compl_longest_match703,20303
ins_compl_add_matches(ins_compl_add_matches783,21893
ins_compl_make_cyclic(void)ins_compl_make_cyclic805,22438
ins_compl_has_shown_match(void)ins_compl_has_shown_match830,22970
ins_compl_long_shown_match(void)ins_compl_long_shown_match840,23162
completeopt_was_set(void)completeopt_was_set851,23403
static pumitem_T *compl_match_array = NULL;compl_match_array864,23778
static int compl_match_arraysize;compl_match_arraysize865,23822
ins_compl_upd_pum(void)ins_compl_upd_pum871,23956
ins_compl_del_pum(void)ins_compl_del_pum889,24278
pum_wanted(void)pum_wanted902,24472
pum_enough_matches(void)pum_enough_matches923,24898
ins_compl_dict_alloc(compl_T *match)ins_compl_dict_alloc951,25515
trigger_complete_changed_event(int cur)trigger_complete_changed_event971,26119
ins_compl_show_pum(void)ins_compl_show_pum1007,26931
#define DICT_FIRST	DICT_FIRST1150,31015
#define DICT_EXACT	DICT_EXACT1151,31074
ins_compl_dictionaries(ins_compl_dictionaries1158,31287
ins_compl_files(ins_compl_files1282,34217
find_word_start(char_u *ptr)find_word_start1385,36686
find_word_end(char_u *ptr)find_word_end1401,37058
find_line_end(char_u *ptr)find_line_end1427,37517
ins_compl_free(void)ins_compl_free1441,37720
ins_compl_clear(void)ins_compl_clear1477,38557
ins_compl_active(void)ins_compl_active1497,39003
ins_compl_used_match(void)ins_compl_used_match1507,39176
ins_compl_init_get_longest(void)ins_compl_init_get_longest1516,39294
ins_compl_interrupted(void)ins_compl_interrupted1525,39433
ins_compl_enter_selects(void)ins_compl_enter_selects1535,39595
ins_compl_col(void)ins_compl_col1544,39748
ins_compl_bs(void)ins_compl_bs1556,40047
ins_compl_need_restart(void)ins_compl_need_restart1599,41344
ins_compl_new_leader(void)ins_compl_new_leader1614,41857
ins_compl_len(void)ins_compl_len1661,43137
ins_compl_addleader(int c)ins_compl_addleader1675,43364
ins_compl_restart(void)ins_compl_restart1720,44459
ins_compl_set_original_text(char_u *str)ins_compl_set_original_text1733,44678
ins_compl_addfrommatch(void)ins_compl_addfrommatch1766,45520
ins_compl_prep(int c)ins_compl_prep1809,46507
ins_compl_fixRedoBufForLeader(char_u *ptr_arg)ins_compl_fixRedoBufForLeader2121,55598
ins_compl_next_buf(buf_T *buf, int flag)ins_compl_next_buf2159,56569
expand_by_function(expand_by_function2192,57453
ins_compl_add_tv(typval_T *tv, int dir)ins_compl_add_tv2280,59668
ins_compl_add_list(list_T *list)ins_compl_add_list2327,61327
ins_compl_add_dict(dict_T *dict)ins_compl_add_dict2348,61791
set_completion(colnr_T startcol, list_T *list)set_completion2376,62630
f_complete(typval_T *argvars, typval_T *rettv UNUSED)f_complete2431,64109
f_complete_add(typval_T *argvars, typval_T *rettv)f_complete_add2463,64798
f_complete_check(typval_T *argvars UNUSED, typval_T *rettv)f_complete_check2472,64962
ins_compl_mode(void)ins_compl_mode2486,65281
get_complete_info(list_T *what_list, dict_T *retdict)get_complete_info2498,65519
#define CI_WHAT_MODE	CI_WHAT_MODE2502,65616
#define CI_WHAT_PUM_VISIBLE	CI_WHAT_PUM_VISIBLE2503,65643
#define CI_WHAT_ITEMS	CI_WHAT_ITEMS2504,65676
#define CI_WHAT_SELECTED	CI_WHAT_SELECTED2505,65704
#define CI_WHAT_INSERTED	CI_WHAT_INSERTED2506,65734
#define CI_WHAT_ALL	CI_WHAT_ALL2507,65764
f_complete_info(typval_T *argvars, typval_T *rettv)f_complete_info2591,68057
ins_compl_get_exp(pos_T *ini)ins_compl_get_exp2621,68828
ins_compl_delete(void)ins_compl_delete3082,81865
ins_compl_insert(int in_compl_func)ins_compl_insert3110,82604
ins_compl_next(ins_compl_next3145,83835
ins_compl_check_keys(int frequency, int in_compl_func)ins_compl_check_keys3385,90832
ins_compl_key2dir(int c)ins_compl_key2dir3443,92425
ins_compl_pum_key(int c)ins_compl_pum_key3456,92712
ins_compl_key2count(int c)ins_compl_key2count3468,93069
ins_compl_use_match(int c)ins_compl_use_match3487,93425
ins_complete(int c, int enable_pum)ins_complete3510,93844
#define	MIN_SPACE MIN_SPACE3588,96501
show_pum(int prev_w_wrow, int prev_w_leftcol)show_pum4111,111457
quote_meta(char_u *dest, char_u *src, int len)quote_meta4136,112178
free_insexpand_stuff(void)free_insexpand_stuff4193,113278
spell_back_to_badword(void)spell_back_to_badword4205,113502

src/iscygpty.c,761
#  define __out__out40,1530
#  define __in__in41,1546
#  define __in_opt__in_opt42,1561
#   define STUB_IMPLSTUB_IMPL52,1838
typedef BOOL (WINAPI *pfnGetFileInformationByHandleEx)(pfnGetFileInformationByHandleEx64,2049
static pfnGetFileInformationByHandleEx pGetFileInformationByHandleEx = NULL;pGetFileInformationByHandleEx69,2237
static BOOL WINAPI stub_GetFileInformationByHandleEx(stub_GetFileInformationByHandleEx72,2337
static void setup_fileid_api(void)setup_fileid_api82,2550
# define pGetFileInformationByHandleEx	pGetFileInformationByHandleEx99,3032
# define setup_fileid_api(setup_fileid_api100,3100
#define is_wprefix(is_wprefix104,3137
int is_cygpty(int fd)is_cygpty108,3280
int is_cygpty_used(void)is_cygpty_used171,4670

src/json.c,1822
#define USING_FLOAT_STUFFUSING_FLOAT_STUFF15,393
json_encode_gap(garray_T *gap, typval_T *val, int options)json_encode_gap29,719
json_encode(typval_T *val, int options)json_encode47,1155
json_encode_nr_expr(int nr, typval_T *val, int options)json_encode_nr_expr65,1606
write_string(garray_T *gap, char_u *str)write_string92,2251
is_simple_key(char_u *key)is_simple_key168,3980
json_encode_item(garray_T *gap, typval_T *val, int copyID, int options)json_encode_item185,4277
fill_numbuflen(js_read_T *reader)fill_numbuflen366,8289
json_skip_white(js_read_T *reader)json_skip_white382,8695
json_decode_string(js_read_T *reader, typval_T *res, int quote)json_decode_string405,9079
    JSON_ARRAY,		// parsing items in an arrayJSON_ARRAY571,12695
    JSON_OBJECT_KEY,	// parsing key of an objectJSON_OBJECT_KEY572,12741
    JSON_OBJECT		// parsing item in an object, after the keyJSON_OBJECT573,12790
} json_decode_T;json_decode_T574,12851
    json_decode_T jd_type;jd_type577,12886
    typval_T	  jd_tv;	// the list or dictjd_tv578,12913
    typval_T	  jd_key_tv;jd_key_tv579,12955
    char_u	  *jd_key;jd_key580,12981
} json_dec_item_T;json_dec_item_T581,13003
json_decode_item(js_read_T *reader, typval_T *res, int options)json_decode_item591,13262
json_decode_all(js_read_T *reader, typval_T *res, int options)json_decode_all1070,23475
json_decode(js_read_T *reader, typval_T *res, int options)json_decode1102,24269
json_find_end(js_read_T *reader, int options)json_find_end1127,25036
f_js_decode(typval_T *argvars, typval_T *rettv)f_js_decode1144,25438
f_js_encode(typval_T *argvars, typval_T *rettv)f_js_encode1159,25731
f_json_decode(typval_T *argvars, typval_T *rettv)f_json_decode1169,25922
f_json_encode(typval_T *argvars, typval_T *rettv)f_json_encode1183,26183

src/json_test.c,351
#undef NDEBUGNDEBUG14,322
#define NO_VIM_MAINNO_VIM_MAIN18,427
test_decode_find_end(void)test_decode_find_end29,650
fill_from_cookie(js_read_T *reader)fill_from_cookie148,5171
test_fill_called_on_find_end(void)test_fill_called_on_find_end158,5367
test_fill_called_on_string(void)test_fill_called_on_string181,6103
main(void)main195,6445

src/kword_test.c,150
#undef NDEBUGNDEBUG14,349
#define NO_VIM_MAINNO_VIM_MAIN18,454
test_isword_funcs_utf8(void)test_isword_funcs_utf828,678
main(void)main77,1711

src/libvterm/src/encoding.c,1133
#define UNICODE_INVALID UNICODE_INVALID3,29
# define DEBUG_PRINT_UTF8DEBUG_PRINT_UTF86,93
struct UTF8DecoderData {UTF8DecoderData9,127
  int bytes_remaining;bytes_remaining11,201
  int bytes_total;bytes_total15,320
  int this_cp;this_cp17,340
static void init_utf8(VTermEncoding *enc UNUSED, void *data_)init_utf820,359
static void decode_utf8(VTermEncoding *enc UNUSED, void *data_,decode_utf828,525
static VTermEncoding encoding_utf8 = {encoding_utf8159,3859
static void decode_usascii(VTermEncoding *enc UNUSED, void *data UNUSED,decode_usascii164,3950
static VTermEncoding encoding_usascii = {encoding_usascii180,4382
struct StaticTableEncoding {StaticTableEncoding185,4482
  const VTermEncoding enc;enc186,4511
  const uint32_t chars[128];chars187,4538
static void decode_table(VTermEncoding *enc, void *data UNUSED,decode_table190,4571
  VTermEncodingType type;type214,5215
  char designation;designation215,5241
  VTermEncoding *enc;enc216,5261
encodings[] = {encodings218,5285
VTermEncoding *vterm_lookup_encoding(VTermEncodingType type, char designation)vterm_lookup_encoding227,5603

src/libvterm/src/keyboard.c,1078
int vterm_is_modify_other_keys(VTerm *vt)vterm_is_modify_other_keys7,68
void vterm_keyboard_unichar(VTerm *vt, uint32_t c, VTermModifier mod)vterm_keyboard_unichar13,160
    KEYCODE_NONE,KEYCODE_NONE67,1543
    KEYCODE_LITERAL,KEYCODE_LITERAL68,1561
    KEYCODE_TAB,KEYCODE_TAB69,1582
    KEYCODE_ENTER,KEYCODE_ENTER70,1599
    KEYCODE_SS3,KEYCODE_SS371,1618
    KEYCODE_CSI,KEYCODE_CSI72,1635
    KEYCODE_CSI_CURSOR,KEYCODE_CSI_CURSOR73,1652
    KEYCODE_CSINUM,KEYCODE_CSINUM74,1676
    KEYCODE_KEYPAD,KEYCODE_KEYPAD75,1696
  } type;type76,1716
  char literal;literal77,1726
  int csinum;csinum78,1742
} keycodes_s;keycodes_s79,1756
static keycodes_s keycodes[] = {keycodes82,1828
static keycodes_s keycodes_fn[] = {keycodes_fn103,2527
static keycodes_s keycodes_kp[] = {keycodes_kp119,3117
void vterm_keyboard_key(VTerm *vt, VTermKey key, VTermModifier mod)vterm_keyboard_key140,3910
void vterm_keyboard_start_paste(VTerm *vt)vterm_keyboard_start_paste229,6261
void vterm_keyboard_end_paste(VTerm *vt)vterm_keyboard_end_paste235,6400

src/libvterm/src/mouse.c,319
static void output_mouse(VTermState *state, int code, int pressed, int modifiers, int col, int row)output_mouse5,48
void vterm_mouse_move(VTerm *vt, int row, int col, VTermModifier mod)vterm_mouse_move54,1214
void vterm_mouse_button(VTerm *vt, int button, int pressed, VTermModifier mod)vterm_mouse_button73,1826

src/libvterm/src/parser.c,1092
#undef DEBUG_PARSERDEBUG_PARSER6,69
static int is_intermed(unsigned char c)is_intermed8,90
static void do_control(VTerm *vt, unsigned char control)do_control13,168
static void do_csi(VTerm *vt, char command)do_csi22,437
static void do_escape(VTerm *vt, char command)do_escape48,1258
static void append_strbuffer(VTerm *vt, const char *str, size_t len)append_strbuffer64,1672
static void start_string(VTerm *vt, VTermParserStringType type)start_string77,2078
static void more_string(VTerm *vt, const char *str, size_t len)more_string84,2212
static void done_string(VTerm *vt, const char *str, size_t len)done_string89,2315
size_t vterm_input_write(VTerm *vt, const char *bytes, size_t len)vterm_input_write125,3223
#define ENTER_STRING_STATE(ENTER_STRING_STATE147,3702
#define ENTER_STATE(ENTER_STATE148,3808
#define ENTER_NORMAL_STATE(ENTER_NORMAL_STATE149,3899
void vterm_parser_set_callbacks(VTerm *vt, const VTermParserCallbacks *callbacks, void *user)vterm_parser_set_callbacks347,9562
void *vterm_parser_get_cbdata(VTerm *vt)vterm_parser_get_cbdata353,9725

src/libvterm/src/pen.c,2316
static const VTermColor ansi_colors[] = {ansi_colors5,49
static int ramp6[] = {ramp627,706
static int ramp24[] = {ramp2432,841
static int lookup_colour_ansi(const VTermState *state, long index, VTermColor *col)lookup_colour_ansi37,1017
static int lookup_colour_palette(const VTermState *state, long index, VTermColor *col)lookup_colour_palette47,1210
static int lookup_colour(const VTermState *state, int palette, const long args[], int argcount, VTermColor *col, int *index)lookup_colour79,1978
static void setpenattr(VTermState *state, VTermAttr attr, VTermValueType type UNUSED, VTermValue *val)setpenattr109,2741
static void setpenattr_bool(VTermState *state, VTermAttr attr, int boolean)setpenattr_bool122,3163
static void setpenattr_int(VTermState *state, VTermAttr attr, int number)setpenattr_int129,3342
static void setpenattr_col(VTermState *state, VTermAttr attr, VTermColor color)setpenattr_col136,3516
static void set_pen_col_ansi(VTermState *state, VTermAttr attr, long col)set_pen_col_ansi143,3696
INTERNAL void vterm_state_newpen(VTermState *state)vterm_state_newpen152,3943
INTERNAL void vterm_state_resetpen(VTermState *state)vterm_state_resetpen166,4413
INTERNAL void vterm_state_savepen(VTermState *state, int save)vterm_state_savepen182,5244
void vterm_state_get_default_colors(const VTermState *state, VTermColor *default_fg, VTermColor *default_bg)vterm_state_get_default_colors202,6034
void vterm_state_get_palette_color(const VTermState *state, int index, VTermColor *col)vterm_state_get_palette_color208,6218
void vterm_state_set_default_colors(VTermState *state, const VTermColor *default_fg, const VTermColor *default_bg)vterm_state_set_default_colors213,6355
void vterm_state_set_palette_color(VTermState *state, int index, const VTermColor *col)vterm_state_set_palette_color219,6545
void vterm_state_set_bold_highbright(VTermState *state, int bold_is_highbright)vterm_state_set_bold_highbright228,6778
INTERNAL void vterm_state_setpen(VTermState *state, const long args[], int argcount)vterm_state_setpen233,6913
INTERNAL int vterm_state_getpen(VTermState *state, long args[], int argcount UNUSED)vterm_state_getpen398,11821
int vterm_state_get_penattr(const VTermState *state, VTermAttr attr, VTermValue *val)vterm_state_get_penattr473,14152

src/libvterm/src/screen.c,5363
#define UNICODE_SPACE UNICODE_SPACE10,125
#define UNICODE_LINEFEED UNICODE_LINEFEED11,152
  VTermColor   fg, bg;fg17,288
  VTermColor   fg, bg;bg17,288
  unsigned int bold      : 1;bold19,312
  unsigned int underline : 2;underline20,342
  unsigned int italic    : 1;italic21,372
  unsigned int blink     : 1;blink22,402
  unsigned int reverse   : 1;reverse23,432
  unsigned int strike    : 1;strike24,462
  unsigned int font      : 4; // 0 to 9font25,492
  unsigned int protected_cell : 1;protected_cell28,590
  unsigned int dwl            : 1; // on a DECDWL or DECDHL linedwl29,625
  unsigned int dhl            : 2; // on a DECDHL line (1=top 2=bottom)dhl30,690
} ScreenPen;ScreenPen31,762
  uint32_t chars[VTERM_MAX_CHARS_PER_CELL];chars36,837
  ScreenPen pen;pen37,881
} ScreenCell;ScreenCell38,898
struct VTermScreenVTermScreen42,1012
  VTerm *vt;vt44,1033
  VTermState *state;state45,1046
  const VTermScreenCallbacks *callbacks;callbacks47,1068
  void *cbdata;cbdata48,1109
  VTermDamageSize damage_merge;damage_merge50,1126
  VTermRect damaged;damaged52,1192
  VTermRect pending_scrollrect;pending_scrollrect53,1213
  int pending_scroll_downward, pending_scroll_rightward;pending_scroll_downward54,1245
  int pending_scroll_downward, pending_scroll_rightward;pending_scroll_rightward54,1245
  int rows;rows56,1303
  int cols;cols57,1315
  int global_reverse;global_reverse58,1327
  ScreenCell *buffers[2];buffers61,1419
  ScreenCell *buffer;buffer64,1515
  VTermScreenCell *sb_buffer;sb_buffer67,1611
  ScreenPen pen;pen69,1642
static ScreenCell *getcell(const VTermScreen *screen, int row, int col)getcell72,1663
static ScreenCell *realloc_buffer(VTermScreen *screen, ScreenCell *buffer, int new_rows, int new_cols)realloc_buffer83,1949
static void damagerect(VTermScreen *screen, VTermRect rect)damagerect108,2649
static void damagescreen(VTermScreen *screen)damagescreen165,4175
static int putglyph(VTermGlyphInfo *info, VTermPos pos, void *user)putglyph174,4347
static int moverect_internal(VTermRect dest, VTermRect src, void *user)moverect_internal210,5183
static int moverect_user(VTermRect dest, VTermRect src, void *user)moverect_user253,6470
static int erase_internal(VTermRect rect, int selective, void *user)erase_internal271,6885
static int erase_user(VTermRect rect, int selective UNUSED, void *user)erase_user295,7513
static int erase(VTermRect rect, int selective, void *user)erase304,7662
static int scrollrect(VTermRect rect, int downward, int rightward, void *user)scrollrect310,7804
static int movecursor(VTermPos pos, VTermPos oldpos, int visible, void *user)movecursor393,10676
static int setpenattr(VTermAttr attr, VTermValue *val, void *user)setpenattr403,10943
static int settermprop(VTermProp prop, VTermValue *val, void *user)settermprop443,11820
static int bell(void *user)bell472,12569
static int resize(int new_rows, int new_cols, VTermPos *delta, void *user)resize482,12752
static int setlineinfo(int row, const VTermLineInfo *newinfo, const VTermLineInfo *oldinfo, void *user)setlineinfo578,15594
static VTermStateCallbacks state_cbs = {state_cbs609,16423
static VTermScreen *screen_new(VTerm *vt)screen_new627,16819
INTERNAL void vterm_screen_free(VTermScreen *screen)vterm_screen_free668,17794
void vterm_screen_reset(VTermScreen *screen, int hard)vterm_screen_reset676,18063
static size_t _get_chars(const VTermScreen *screen, const int utf8, void *buffer, size_t len, const VTermRect rect)_get_chars684,18281
#define PUT(PUT690,18456
size_t vterm_screen_get_chars(const VTermScreen *screen, uint32_t *chars, size_t len, const VTermRect rect)vterm_screen_get_chars736,19979
size_t vterm_screen_get_text(const VTermScreen *screen, char *str, size_t len, const VTermRect rect)vterm_screen_get_text741,20142
int vterm_screen_get_cell(const VTermScreen *screen, VTermPos pos, VTermScreenCell *cell)vterm_screen_get_cell747,20357
static int vterm_screen_set_cell(VTermScreen *screen, VTermPos pos, const VTermScreenCell *cell)vterm_screen_set_cell805,22099
int vterm_screen_is_eol(const VTermScreen *screen, VTermPos pos)vterm_screen_is_eol836,22923
VTermScreen *vterm_obtain_screen(VTerm *vt)vterm_obtain_screen848,23224
void vterm_screen_enable_altscreen(VTermScreen *screen, int altscreen)vterm_screen_enable_altscreen855,23345
void vterm_screen_set_callbacks(VTermScreen *screen, const VTermScreenCallbacks *callbacks, void *user)vterm_screen_set_callbacks866,23601
void *vterm_screen_get_cbdata(VTermScreen *screen)vterm_screen_get_cbdata872,23768
void vterm_screen_set_unrecognised_fallbacks(VTermScreen *screen, const VTermParserCallbacks *fallbacks, void *user)vterm_screen_set_unrecognised_fallbacks877,23849
void *vterm_screen_get_unrecognised_fbdata(VTermScreen *screen)vterm_screen_get_unrecognised_fbdata882,24045
void vterm_screen_flush_damage(VTermScreen *screen)vterm_screen_flush_damage887,24175
void vterm_screen_set_damage_merge(VTermScreen *screen, VTermDamageSize size)vterm_screen_set_damage_merge904,24702
static int attrs_differ(VTermAttrMask attrs, ScreenCell *a, ScreenCell *b)attrs_differ910,24853
int vterm_screen_get_attrs_extent(const VTermScreen *screen, VTermRect *extent, VTermPos pos, VTermAttrMask attrs)vterm_screen_get_attrs_extent934,25797

src/libvterm/src/state.c,4378
#define strneq(strneq6,69
# define DEBUG_GLYPH_COMBINEDEBUG_GLYPH_COMBINE9,144
static void putglyph(VTermState *state, const uint32_t chars[], int width, VTermPos pos)putglyph16,299
static void updatecursor(VTermState *state, VTermPos *oldpos, int cancel_phantom)updatecursor32,838
static void erase(VTermState *state, VTermRect rect, int selective)erase45,1229
static VTermState *vterm_state_new(VTerm *vt)vterm_state_new52,1433
INTERNAL void vterm_state_free(VTermState *state)vterm_state_free79,1923
static void scroll(VTermState *state, VTermRect rect, int downward, int rightward)scroll87,2181
static void linefeed(VTermState *state)linefeed129,3438
static void grow_combine_buffer(VTermState *state)grow_combine_buffer144,3850
static void set_col_tabstop(VTermState *state, int col)set_col_tabstop157,4281
static void clear_col_tabstop(VTermState *state, int col)clear_col_tabstop163,4418
static int is_col_tabstop(VTermState *state, int col)is_col_tabstop169,4558
static int is_cursor_in_scrollregion(const VTermState *state)is_cursor_in_scrollregion175,4699
static void tab(VTermState *state, int count, int direction)tab187,5007
#define NO_FORCE NO_FORCE208,5386
#define FORCE FORCE209,5405
#define DWL_OFF DWL_OFF211,5425
#define DWL_ON DWL_ON212,5443
#define DHL_OFF DHL_OFF214,5462
#define DHL_TOP DHL_TOP215,5483
#define DHL_BOTTOM DHL_BOTTOM216,5504
static void set_lineinfo(VTermState *state, int row, int force, int dwl, int dhl)set_lineinfo218,5526
static int on_text(const char bytes[], size_t len, void *user)on_text242,6175
static int on_control(unsigned char control, void *user)on_control427,11986
static int settermprop_bool(VTermState *state, VTermProp prop, int v)settermprop_bool537,14557
static int settermprop_int(VTermState *state, VTermProp prop, int v)settermprop_int544,14723
static int settermprop_string(VTermState *state, VTermProp prop, const char *str, size_t len)settermprop_string551,14887
static void savecursor(VTermState *state, int save)savecursor566,15289
static int on_escape(const char *bytes, size_t len, void *user)on_escape591,16052
static void set_mode(VTermState *state, int num, int val)set_mode731,19078
static void set_dec_mode(VTermState *state, int num, int val)set_dec_mode748,19390
static void request_dec_mode(VTermState *state, int num)request_dec_mode843,21513
static int on_csi(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user)on_csi920,22976
#define LBOUND(LBOUND966,23839
#define UBOUND(UBOUND967,23889
#define LEADER(LEADER969,23940
#define INTERMED(INTERMED970,23975
static int on_osc(const char *command, size_t cmdlen, void *user)on_osc1552,40297
static void request_status_string(VTermState *state, const char *command, size_t cmdlen)request_status_string1599,41890
static int on_dcs(const char *command, size_t cmdlen, void *user)on_dcs1649,43723
static int on_resize(int rows, int cols, void *user)on_resize1664,44091
static const VTermParserCallbacks parser_callbacks = {parser_callbacks1745,46205
VTermState *vterm_obtain_state(VTerm *vt)vterm_obtain_state1759,46497
void vterm_state_reset(VTermState *state, int hard)vterm_state_reset1786,47306
void vterm_state_get_cursorpos(const VTermState *state, VTermPos *cursorpos)vterm_state_get_cursorpos1865,49201
void vterm_state_get_mousestate(const VTermState *state, VTermMouseState *mousestate)vterm_state_get_mousestate1870,49310
void vterm_state_set_callbacks(VTermState *state, const VTermStateCallbacks *callbacks, void *user)vterm_state_set_callbacks1878,49573
void *vterm_state_get_cbdata(VTermState *state)vterm_state_get_cbdata1893,49934
void vterm_state_set_unrecognised_fallbacks(VTermState *state, const VTermParserCallbacks *fallbacks, void *user)vterm_state_set_unrecognised_fallbacks1898,50011
void *vterm_state_get_unrecognised_fbdata(VTermState *state)vterm_state_get_unrecognised_fbdata1910,50280
int vterm_state_set_termprop(VTermState *state, VTermProp prop, VTermValue *val)vterm_state_set_termprop1915,50370
void vterm_state_focus_in(VTermState *state)vterm_state_focus_in1967,51887
void vterm_state_focus_out(VTermState *state)vterm_state_focus_out1973,52028
const VTermLineInfo *vterm_state_get_lineinfo(const VTermState *state, int row)vterm_state_get_lineinfo1979,52170

src/libvterm/src/unicode.c,1087
struct interval {interval71,3554
  int first;first72,3572
  int last;last73,3585
static const struct interval combining[] = {combining81,3857
static int bisearch(uint32_t ucs, const struct interval *table, int max) {bisearch366,9478
# define WCWIDTH_FUNCTION WCWIDTH_FUNCTION421,11142
static int mk_wcwidth(uint32_t ucs)mk_wcwidth423,11180
  static const struct interval ambiguous[] = {ambiguous484,13174
INTERNAL int vterm_unicode_is_ambiguous(uint32_t codepoint)vterm_unicode_is_ambiguous562,16988
# define IS_COMBINING_FUNCTION IS_COMBINING_FUNCTION572,17293
vterm_is_combining(uint32_t codepoint)vterm_is_combining574,17355
# define GET_SPECIAL_PTY_TYPE_FUNCTION GET_SPECIAL_PTY_TYPE_FUNCTION583,17580
vterm_get_special_pty_type_placeholder(void)vterm_get_special_pty_type_placeholder585,17670
INTERNAL int vterm_unicode_width(uint32_t codepoint)vterm_unicode_width594,17812
INTERNAL int vterm_unicode_is_combining(uint32_t codepoint)vterm_unicode_is_combining599,17908
INTERNAL int vterm_get_special_pty_type(void)vterm_get_special_pty_type604,18016

src/libvterm/src/vterm.c,2399
#define DEFINE_INLINESDEFINE_INLINES1,0
static void *default_malloc(size_t size, void *allocdata UNUSED)default_malloc17,232
static void default_free(void *ptr, void *allocdata UNUSED)default_free25,380
static VTermAllocatorFunctions default_allocator = {default_allocator30,458
VTerm *vterm_new(int rows, int cols)vterm_new35,568
VTerm *vterm_new_with_allocator(int rows, int cols, VTermAllocatorFunctions *funcs, void *allocdata)vterm_new_with_allocator40,683
void vterm_free(VTerm *vt)vterm_free80,1683
INTERNAL void *vterm_allocator_malloc(VTerm *vt, size_t size)vterm_allocator_malloc94,1944
INTERNAL void vterm_allocator_free(VTerm *vt, void *ptr)vterm_allocator_free102,2107
void vterm_get_size(const VTerm *vt, int *rowsp, int *colsp)vterm_get_size108,2228
void vterm_set_size(VTerm *vt, int rows, int cols)vterm_set_size116,2364
int vterm_get_utf8(const VTerm *vt)vterm_get_utf8125,2586
void vterm_set_utf8(VTerm *vt, int is_utf8)vterm_set_utf8130,2651
INTERNAL void vterm_push_output_bytes(VTerm *vt, const char *bytes, size_t len)vterm_push_output_bytes135,2727
static int outbuffer_is_full(VTerm *vt)outbuffer_is_full146,3079
# undef VSNPRINTFVSNPRINTF153,3284
# define VSNPRINTF VSNPRINTF154,3302
INTERNAL void vterm_push_output_vsprintf(VTerm *vt, const char *format, va_list args)vterm_push_output_vsprintf163,3481
INTERNAL void vterm_push_output_sprintf(VTerm *vt, const char *format, ...)vterm_push_output_sprintf202,4539
INTERNAL void vterm_push_output_sprintf_ctrl(VTerm *vt, unsigned char ctrl, const char *fmt, ...)vterm_push_output_sprintf_ctrl210,4726
INTERNAL void vterm_push_output_sprintf_dcs(VTerm *vt, const char *fmt, ...)vterm_push_output_sprintf_dcs228,5188
size_t vterm_output_get_buffer_size(const VTerm *vt)vterm_output_get_buffer_size248,5667
size_t vterm_output_get_buffer_current(const VTerm *vt)vterm_output_get_buffer_current253,5753
size_t vterm_output_get_buffer_remaining(const VTerm *vt)vterm_output_get_buffer_remaining258,5842
size_t vterm_output_read(VTerm *vt, char *buffer, size_t len)vterm_output_read263,5953
VTermValueType vterm_get_attr_type(VTermAttr attr)vterm_get_attr_type278,6267
VTermValueType vterm_get_prop_type(VTermProp prop)vterm_get_prop_type296,6955
void vterm_scroll_rect(VTermRect rect,vterm_scroll_rect314,7674
void vterm_copy_cells(VTermRect dest,vterm_copy_cells381,9514

src/libvterm/t/harness.c,3278
#define streq(streq7,132
#define strstartswith(strstartswith8,166
static size_t inplace_hex2bytes(char *s)inplace_hex2bytes10,220
static VTermModifier strpe_modifiers(char **strp)strpe_modifiers24,442
static VTermKey strp_key(char *str)strp_key40,779
static VTerm *vt;vt62,1188
static VTermState *state;state63,1206
static VTermScreen *screen;screen64,1232
static VTermEncodingInstance encoding;encoding66,1261
static int parser_text(const char bytes[], size_t len, void *user)parser_text68,1301
static int parser_control(unsigned char control, void *user)parser_control84,1599
static int parser_escape(const char bytes[], size_t len, void *user)parser_escape91,1715
static int parser_csi(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user)parser_csi112,2029
static int parser_osc(const char *command, size_t cmdlen, void *user)parser_osc143,2693
static int parser_dcs(const char *command, size_t cmdlen, void *user)parser_dcs154,2886
static VTermParserCallbacks parser_cbs = {parser_cbs165,3079
static int want_movecursor = 0;want_movecursor177,3336
static VTermPos state_pos;state_pos178,3368
static int movecursor(VTermPos pos, VTermPos oldpos, int visible, void *user)movecursor179,3395
static int want_scrollrect = 0;want_scrollrect189,3585
static int scrollrect(VTermRect rect, int downward, int rightward, void *user)scrollrect190,3617
static int want_moverect = 0;want_moverect202,3896
static int moverect(VTermRect dest, VTermRect src, void *user)moverect203,3926
static int want_settermprop = 0;want_settermprop215,4229
static int settermprop(VTermProp prop, VTermValue *val, void *user)settermprop216,4262
static int want_state_putglyph = 0;want_state_putglyph246,5006
static int state_putglyph(VTermGlyphInfo *info, VTermPos pos, void *user)state_putglyph247,5042
static int want_state_erase = 0;want_state_erase268,5540
static int state_erase(VTermRect rect, int selective, void *user)state_erase269,5573
  int bold;bold282,5852
  int underline;underline283,5864
  int italic;italic284,5881
  int blink;blink285,5895
  int reverse;reverse286,5908
  int strike;strike287,5923
  int font;font288,5937
  VTermColor foreground;foreground289,5949
  VTermColor background;background290,5974
} state_pen;state_pen291,5999
static int state_setpenattr(VTermAttr attr, VTermValue *val, void *user)state_setpenattr292,6012
static int state_setlineinfo(int row, const VTermLineInfo *newinfo, const VTermLineInfo *oldinfo, void *user)state_setlineinfo330,6835
VTermStateCallbacks state_cbs = {state_cbs335,6962
static int want_screen_damage = 0;want_screen_damage349,7287
static int want_screen_damage_cells = 0;want_screen_damage_cells350,7322
static int screen_damage(VTermRect rect, void *user)screen_damage351,7363
static int want_screen_scrollback = 0;want_screen_scrollback402,8421
static int screen_sb_pushline(int cols, const VTermScreenCell *cells, void *user)screen_sb_pushline403,8460
static int screen_sb_popline(int cols, VTermScreenCell *cells, void *user)screen_sb_popline423,8810
VTermScreenCallbacks screen_cbs = {screen_cbs444,9202
int main(int argc, char **argv)main455,9456
#define BOOLSTR(BOOLSTR735,16919

src/list.c,5234
static char *e_listblobarg = N_("E899: Argument of %s must be a List or Blob");e_listblobarg18,413
static list_T		*first_list = NULL;	// list of all listsfirst_list21,532
list_add_watch(list_T *l, listwatch_T *lw)list_add_watch27,633
list_rem_watch(list_T *l, listwatch_T *lwrem)list_rem_watch38,820
list_fix_watch(list_T *l, listitem_T *item)list_fix_watch59,1181
list_init(list_T *l)list_init69,1385
list_alloc(void)list_alloc84,1732
list_alloc_id(alloc_id_T id UNUSED)list_alloc_id98,1917
list_alloc_with_items(int count)list_alloc_with_items112,2211
list_set_item(list_T *l, int idx, typval_T *tv)list_set_item153,3005
rettv_list_alloc(typval_T *rettv)rettv_list_alloc165,3240
rettv_list_alloc_id(typval_T *rettv, alloc_id_T id UNUSED)rettv_list_alloc_id181,3496
rettv_list_set(typval_T *rettv, list_T *l)rettv_list_set195,3783
list_unref(list_T *l)list_unref208,4033
list_free_contents(list_T *l)list_free_contents219,4238
list_free_nonref(int copyID)list_free_nonref239,4726
list_free_list(list_T  *l)list_free_list258,5226
list_free_items(int copyID)list_free_items272,5561
list_free(list_T *l)list_free291,6021
listitem_alloc(void)listitem_alloc305,6236
list_free_item(list_T *l, listitem_T *item)list_free_item315,6444
listitem_free(list_T *l, listitem_T *item)listitem_free327,6770
listitem_remove(list_T *l, listitem_T *item)listitem_remove337,6962
list_len(list_T *l)list_len347,7129
list_equal(list_equal358,7282
list_find(list_T *l, long n)list_find390,8114
list_find_nr(list_find_nr470,9502
list_find_str(list_T *l, long idx)list_find_str511,10302
list_idx_of_item(list_T *l, listitem_T *item)list_idx_of_item529,10616
list_append(list_T *l, listitem_T *item)list_append549,10970
list_append_tv(list_T *l, typval_T *tv)list_append_tv574,11468
list_append_tv_move(list_T *l, typval_T *tv)list_append_tv_move590,11770
list_append_dict(list_T *list, dict_T *dict)list_append_dict606,12057
list_append_list(list_T *list1, list_T *list2)list_append_list625,12417
list_append_string(list_T *l, char_u *str, int len)list_append_string645,12854
list_append_number(list_T *l, varnumber_T n)list_append_number667,13343
list_insert_tv(list_T *l, typval_T *tv, listitem_T *item)list_insert_tv687,13749
list_insert(list_T *l, listitem_T *ni, listitem_T *item)list_insert699,13969
list_extend(list_T *l1, list_T *l2, listitem_T *bef)list_extend731,14608
list_concat(list_T *l1, list_T *l2, typval_T *tv)list_concat752,15209
list_copy(list_T *orig, int deep, int copyID)list_copy777,15762
vimlist_remove(list_T *l, listitem_T *item, listitem_T *item2)vimlist_remove833,16849
list2string(typval_T *tv, int copyID, int restore_copyID)list2string864,17506
typedef struct join_S {join_S884,17985
    char_u	*s;s885,18009
    char_u	*tofree;tofree886,18024
} join_T;join_T887,18044
list_join_inner(list_join_inner890,18070
list_join(list_join968,19860
f_join(typval_T *argvars, typval_T *rettv)f_join1006,20538
get_list_tv(char_u **arg, typval_T *rettv, int evaluate, int do_error)get_list_tv1041,21234
write_list(FILE *fd, list_T *list, int binary)write_list1104,22291
init_static_list(staticList10_T *sl)init_static_list1145,22943
f_list2str(typval_T *argvars, typval_T *rettv)f_list2str1176,23512
list_remove(typval_T *argvars, typval_T *rettv, char_u *arg_errmsg)list_remove1229,24677
    listitem_T	*item;item1300,26300
    int		idx;idx1301,26322
} sortItem_T;sortItem_T1302,26336
    int		item_compare_ic;item_compare_ic1307,26417
    int		item_compare_numeric;item_compare_numeric1308,26443
    int		item_compare_numbers;item_compare_numbers1309,26474
    int		item_compare_float;item_compare_float1311,26523
    char_u	*item_compare_func;item_compare_func1313,26559
    partial_T	*item_compare_partial;item_compare_partial1314,26590
    dict_T	*item_compare_selfdict;item_compare_selfdict1315,26627
    int		item_compare_func_err;item_compare_func_err1316,26662
    int		item_compare_keep_zero;item_compare_keep_zero1317,26694
} sortinfo_T;sortinfo_T1318,26727
static sortinfo_T	*sortinfo = NULL;sortinfo1319,26741
#define ITEM_COMPARE_FAIL ITEM_COMPARE_FAIL1320,26777
item_compare(const void *s1, const void *s2)item_compare1326,26884
item_compare2(const void *s1, const void *s2)item_compare21410,28904
do_sort_uniq(typval_T *argvars, typval_T *rettv, int sort)do_sort_uniq1466,30511
f_sort(typval_T *argvars, typval_T *rettv)f_sort1667,35605
f_uniq(typval_T *argvars, typval_T *rettv)f_uniq1676,35736
filter_map_one(typval_T *tv, typval_T *expr, int map, int *remp)filter_map_one1685,35890
filter_map(typval_T *argvars, typval_T *rettv, int map)filter_map1725,36801
f_filter(typval_T *argvars, typval_T *rettv)f_filter1900,40892
f_map(typval_T *argvars, typval_T *rettv)f_map1909,41017
f_add(typval_T *argvars, typval_T *rettv)f_add1918,41148
f_count(typval_T *argvars, typval_T *rettv)f_count1956,41957
f_extend(typval_T *argvars, typval_T *rettv)f_extend2065,44025
f_insert(typval_T *argvars, typval_T *rettv)f_insert2150,45784
f_remove(typval_T *argvars, typval_T *rettv)f_remove2226,47481
f_reverse(typval_T *argvars, typval_T *rettv)f_reverse2244,47930

src/main.c,3270
#define EXTERNEXTERN10,277
#define EDIT_NONE EDIT_NONE27,628
#define EDIT_FILE EDIT_FILE28,674
#define EDIT_STDIN EDIT_STDIN29,750
#define EDIT_TAG EDIT_TAG30,800
#define EDIT_QF	EDIT_QF31,866
#define ME_UNKNOWN_OPTION	ME_UNKNOWN_OPTION72,2200
#define ME_TOO_MANY_ARGS	ME_TOO_MANY_ARGS74,2263
#define ME_ARG_MISSING	ME_ARG_MISSING76,2324
#define ME_GARBAGE	ME_GARBAGE78,2391
#define ME_EXTRA_CMD	ME_EXTRA_CMD80,2493
#define ME_INVALID_ARG	ME_INVALID_ARG82,2549
static char *(main_errors[]) =main_errors69,2132
static mparm_T	params;params88,2697
static char_u *start_dir = NULL;	// current working dir on startupstart_dir92,2769
static int has_dash_c_arg = FALSE;has_dash_c_arg94,2837
__declspec(dllexport)__declspec97,2888
vim_main2(void)vim_main2456,12601
common_init(mparm_T *paramp)common_init916,24432
is_not_a_term()is_not_a_term1033,27486
static int	was_safe = FALSE;was_safe1040,27606
static oparg_T	*current_oap = NULL;current_oap1041,27635
op_pending(void)op_pending1048,27798
is_safe_now(void)is_safe_now1063,28153
may_trigger_safestate(int safe)may_trigger_safestate1076,28395
state_no_longer_safe(char *reason UNUSED)state_no_longer_safe1098,29013
get_was_safe_state(void)get_was_safe_state1108,29186
may_trigger_safestateagain(void)may_trigger_safestateagain1118,29393
main_loop(main_loop1163,30629
getout_preserve_modified(int exitval)getout_preserve_modified1530,40651
getout(int exitval)getout1551,41223
init_locale(void)init_locale1720,44737
early_arg_scan(mparm_T *parmp UNUSED)early_arg_scan1772,46025
get_number_arg(get_number_arg1864,48136
parse_command_name(mparm_T *parmp)parse_command_name1889,48940
command_line_scan(mparm_T *parmp)command_line_scan1985,51217
check_tty(mparm_T *parmp)check_tty2711,69462
read_stdin(void)read_stdin2785,71675
create_windows(mparm_T *parmp UNUSED)create_windows2817,72480
edit_buffers(edit_buffers2952,75741
exe_pre_commands(mparm_T *parmp)exe_pre_commands3088,78947
exe_commands(mparm_T *parmp)exe_commands3118,79565
source_startup_scripts(mparm_T *parmp)source_startup_scripts3166,80719
main_start_gui(void)main_start_gui3332,85497
process_env(process_env3350,85847
file_owned(char *fname)file_owned3392,86772
mainerr(mainerr3413,87152
mainerr_arg_missing(char_u *str)mainerr_arg_missing3445,87860
main_msg(char *s)main_msg3455,88041
usage(void)usage3466,88199
check_swap_exists_action(void)check_swap_exists_action3663,96373
set_progpath(char_u *argv0)set_progpath3674,96578
exec_on_server(mparm_T *parmp)exec_on_server3730,97784
prepare_server(mparm_T *parmp)prepare_server3770,98841
cmdsrv_main(cmdsrv_main3818,100052
#define ARGTYPE_OTHER	ARGTYPE_OTHER3834,100348
#define ARGTYPE_EDIT	ARGTYPE_EDIT3835,100373
#define ARGTYPE_EDIT_WAIT	ARGTYPE_EDIT_WAIT3836,100397
#define ARGTYPE_SEND	ARGTYPE_SEND3837,100425
build_drop_cmd(build_drop_cmd4093,106025
serverMakeName(char_u *arg, char *cmd)serverMakeName4212,109495
server_to_input_buf(char_u *str)server_to_input_buf4234,109985
eval_client_expr_to_string(char_u *expr)eval_client_expr_to_string4274,111353
sendToLocalVim(char_u *cmd, int asExpr, char_u **result)sendToLocalVim4320,112524
serverConvert(serverConvert4357,113293

src/map.c,2853
static mapblock_T	*first_abbr = NULL; // first entry in abbrlistfirst_abbr19,389
static mapblock_T	*(maphash[256]);maphash24,539
static int		maphash_valid = FALSE;maphash_valid25,574
#define MAP_HASH(MAP_HASH34,893
get_maphash_list(int state, int c)get_maphash_list40,1113
get_buf_maphash_list(int state, int c)get_buf_maphash_list49,1294
is_maphash_valid(void)is_maphash_valid55,1396
validate_maphash(void)validate_maphash64,1512
map_free(mapblock_T **mpp)map_free78,1781
map_mode_to_chars(int mode)map_mode_to_chars95,2105
showmap(showmap136,3184
do_map(do_map247,6074
get_map_mode(char_u **cmdp, int forceit)get_map_mode827,20003
map_clear(map_clear871,20985
map_clear_int(map_clear_int895,21361
mode_str2flags(char_u *modechars)mode_str2flags961,22629
map_to_exists(char_u *str, char_u *modechars, int abbr)map_to_exists991,23401
map_to_exists_mode(char_u *rhs, int mode, int abbr)map_to_exists_mode1011,23835
static int	expand_mapmodes = 0;expand_mapmodes1055,24654
static int	expand_isabbrev = 0;expand_isabbrev1056,24686
static int	expand_buffer = FALSE;expand_buffer1057,24718
translate_mapping(char_u *str)translate_mapping1074,25278
set_context_in_map_cmd(set_context_in_map_cmd1139,26651
ExpandMappings(ExpandMappings1217,28309
check_abbr(check_abbr1362,31289
eval_map_expr(eval_map_expr1553,35786
vim_strsave_escape_csi(vim_strsave_escape_csi1604,37064
vim_unescape_csi(char_u *p)vim_unescape_csi1644,37940
makemap(makemap1672,38433
put_escstr(FILE *fd, char_u *strstart, int what)put_escstr1882,42926
check_map_keycodes(void)check_map_keycodes1987,45254
check_map(check_map2069,46970
get_maparg(typval_T *argvars, typval_T *rettv, int exact)get_maparg2138,48462
# define VIS_SEL	VIS_SEL2219,50588
struct initmapinitmap2224,50695
    char_u	*arg;arg2226,50712
    int		mode;mode2227,50729
static struct initmap initmappings[] =initmappings2232,50815
static struct initmap cinitmappings[] =cinitmappings2248,51354
static struct initmap initmappings[] =initmappings2276,52505
# undef VIS_SELVIS_SEL2289,52852
init_mappings(void)init_mappings2296,52920
add_map(char_u *map, int mode)add_map2325,53695
    int	    from;from2358,54637
    int     to;to2359,54655
} langmap_entry_T;langmap_entry_T2360,54671
static garray_T langmap_mapga;langmap_mapga2362,54691
langmap_set_entry(int from, int to)langmap_set_entry2369,54895
langmap_adjust_mb(int c)langmap_adjust_mb2408,55744
langmap_init(void)langmap_init2430,56159
langmap_set(void)langmap_set2444,56444
do_exmap(exarg_T *eap, int isabbrev)do_exmap2533,57968
ex_abbreviate(exarg_T *eap)ex_abbreviate2555,58379
ex_map(exarg_T *eap)ex_map2564,58506
ex_unmap(exarg_T *eap)ex_unmap2581,58799
ex_mapclear(exarg_T *eap)ex_mapclear2590,58897
ex_abclear(exarg_T *eap)ex_abclear2599,59027

src/mark.c,1868
static xfmark_T namedfm[NMARKS + EXTRA_MARKS];		// marks with file nrnamedfm27,730
setmark(int c)setmark41,1270
setmark_pos(int c, pos_T *pos, int fnum)setmark_pos52,1501
setpcmark(void)setpcmark137,3056
checkpcmark(void)checkpcmark200,4891
movemark(int count)movemark216,5291
movechangelist(int count)movechangelist275,6766
getmark_buf(buf_T *buf, int c, int changefile)getmark_buf314,7797
getmark(int c, int changefile)getmark320,7916
getmark_buf_fnum(getmark_buf_fnum326,8022
getnextmark(getnextmark466,11471
fname2fnum(xfmark_T *fm)fname2fnum514,12679
fmarks_check_names(buf_T *buf)fmarks_check_names554,13638
fmarks_check_one(xfmark_T *fm, char_u *name, buf_T *buf)fmarks_check_one584,14158
check_mark(pos_T *pos)check_mark600,14492
clrallmarks(buf_T *buf)clrallmarks629,15054
fm_getname(fmark_T *fmark, int lead_len)fm_getname663,15905
mark_line(pos_T *mp, int lead_len)mark_line675,16243
ex_marks(exarg_T *eap)ex_marks702,16819
show_one_mark(show_one_mark740,18035
ex_delmarks(exarg_T *eap)ex_delmarks802,19239
ex_jumps(exarg_T *eap UNUSED)ex_jumps888,21063
ex_clearjumps(exarg_T *eap UNUSED)ex_clearjumps936,22210
ex_changes(exarg_T *eap UNUSED)ex_changes947,22379
#define one_adjust(one_adjust983,23268
#define one_adjust_nodel(one_adjust_nodel998,23569
mark_adjust(mark_adjust1024,24404
mark_adjust_nofold(mark_adjust_nofold1034,24579
mark_adjust_internal(mark_adjust_internal1044,24769
#define col_adjust(col_adjust1207,28902
mark_col_adjust(mark_col_adjust1230,29536
cleanup_jumplist(win_T *wp, int loadfiles)cleanup_jumplist1317,31702
copy_jumplist(win_T *from, win_T *to)copy_jumplist1361,32872
free_jumplist(win_T *wp)free_jumplist1379,33291
set_last_cursor(win_T *win)set_last_cursor1389,33447
free_all_marks(void)free_all_marks1397,33607
get_namedfm(void)get_namedfm1411,33838

src/mbyte.c,14372
#  define WIN32_LEAN_AND_MEANWIN32_LEAN_AND_MEAN84,3530
#  define WINBYTE WINBYTE88,3647
#  define WINBYTE WINBYTE91,3701
#  undef WIN32	WIN3294,3746
# define WINBYTE WINBYTE97,3836
#  define mblen mblen110,4105
static char utf8len_tab[256] =utf8len_tab155,5271
static char utf8len_tab_zero[256] =utf8len_tab_zero170,5935
xim_log(char *s, ...)xim_log189,6693
{   char *name;		int prop;		int codepage;}name219,7174
{   char *name;		int prop;		int codepage;}prop219,7174
{   char *name;		int prop;		int codepage;}codepage219,7174
#define IDX_LATIN_1	IDX_LATIN_1222,7239
#define IDX_ISO_2	IDX_ISO_2224,7307
#define IDX_ISO_3	IDX_ISO_3226,7361
#define IDX_ISO_4	IDX_ISO_4228,7415
#define IDX_ISO_5	IDX_ISO_5230,7469
#define IDX_ISO_6	IDX_ISO_6232,7523
#define IDX_ISO_7	IDX_ISO_7234,7577
#define IDX_ISO_8	IDX_ISO_8236,7631
#define IDX_ISO_9	IDX_ISO_9238,7685
#define IDX_ISO_10	IDX_ISO_10240,7739
#define IDX_ISO_11	IDX_ISO_11242,7795
#define IDX_ISO_13	IDX_ISO_13244,7852
#define IDX_ISO_14	IDX_ISO_14246,7909
#define IDX_ISO_15	IDX_ISO_15248,7966
#define IDX_KOI8_R	IDX_KOI8_R250,8035
#define IDX_KOI8_U	IDX_KOI8_U252,8088
#define IDX_UTF8	IDX_UTF8254,8141
#define IDX_UCS2	IDX_UCS2256,8194
#define IDX_UCS2LE	IDX_UCS2LE258,8273
#define IDX_UTF16	IDX_UTF16260,8356
#define IDX_UTF16LE	IDX_UTF16LE262,8437
#define IDX_UCS4	IDX_UCS4264,8521
#define IDX_UCS4LE	IDX_UCS4LE266,8600
#define IDX_DEBUG	IDX_DEBUG270,8728
#define IDX_EUC_JP	IDX_EUC_JP272,8788
#define IDX_SJIS	IDX_SJIS274,8849
#define IDX_EUC_KR	IDX_EUC_KR276,8905
#define IDX_EUC_CN	IDX_EUC_CN278,8966
#define IDX_EUC_TW	IDX_EUC_TW280,9027
#define IDX_BIG5	IDX_BIG5282,9088
#define IDX_CP437	IDX_CP437288,9330
#define IDX_CP737	IDX_CP737290,9402
#define IDX_CP775	IDX_CP775292,9474
#define IDX_CP850	IDX_CP850294,9537
#define IDX_CP852	IDX_CP852296,9609
#define IDX_CP855	IDX_CP855298,9681
#define IDX_CP857	IDX_CP857300,9753
#define IDX_CP860	IDX_CP860302,9825
#define IDX_CP861	IDX_CP861304,9897
#define IDX_CP862	IDX_CP862306,9969
#define IDX_CP863	IDX_CP863308,10041
#define IDX_CP865	IDX_CP865310,10113
#define IDX_CP866	IDX_CP866312,10185
#define IDX_CP869	IDX_CP869314,10257
#define IDX_CP874	IDX_CP874316,10329
#define IDX_CP932	IDX_CP932318,10390
#define IDX_CP936	IDX_CP936320,10448
#define IDX_CP949	IDX_CP949322,10506
#define IDX_CP950	IDX_CP950324,10564
#define IDX_CP1250	IDX_CP1250326,10622
#define IDX_CP1251	IDX_CP1251328,10701
#define IDX_CP1253	IDX_CP1253331,10819
#define IDX_CP1254	IDX_CP1254333,10884
#define IDX_CP1255	IDX_CP1255335,10951
#define IDX_CP1256	IDX_CP1256337,11017
#define IDX_CP1257	IDX_CP1257339,11083
#define IDX_CP1258	IDX_CP1258341,11149
#define IDX_MACROMAN	IDX_MACROMAN344,11220
#define IDX_DECMCS	IDX_DECMCS346,11300
#define IDX_HPROMAN8	IDX_HPROMAN8348,11365
#define IDX_COUNT	IDX_COUNT350,11435
enc_canon_table[] =enc_canon_table220,7217
{   char *name;		int canon;}name357,11512
{   char *name;		int canon;}canon357,11512
enc_alias_table[] =enc_alias_table358,11541
# define CP_UTF8 CP_UTF8438,13631
enc_canon_search(char_u *name)enc_canon_search446,13807
enc_canon_props(char_u *name)enc_canon_props462,14087
mb_init(void)mb_init507,15390
# define LEN_FROM_CONVLEN_FROM_CONV515,15566
bomb_size(void)bomb_size814,23077
remove_bom(char_u *s)remove_bom846,23680
mb_get_class(char_u *p)mb_get_class871,24038
mb_get_class_buf(char_u *p, buf_T *buf)mb_get_class_buf877,24115
dbcs_class(unsigned lead, unsigned trail)dbcs_class899,24611
latin_char2len(int c UNUSED)latin_char2len1072,28194
dbcs_char2len(dbcs_char2len1078,28257
latin_char2bytes(int c, char_u *buf)latin_char2bytes1092,28455
dbcs_char2bytes(int c, char_u *buf)dbcs_char2bytes1099,28542
latin_ptr2len(char_u *p)latin_ptr2len1122,29025
dbcs_ptr2len(dbcs_ptr2len1128,29095
latin_ptr2len_len(char_u *p, int size)latin_ptr2len_len1147,29480
dbcs_ptr2len_len(char_u *p, int size)dbcs_ptr2len_len1155,29595
struct intervalinterval1170,29857
    long first;first1172,29875
    long last;last1173,29891
intable(struct interval *table, size_t size, int c)intable1180,30001
static struct interval ambiguous[] =ambiguous1206,30601
utf_uint2cells(UINT32_T c)utf_uint2cells1394,34724
utf_char2cells(int c)utf_char2cells1410,35141
latin_ptr2cells(char_u *p UNUSED)latin_ptr2cells1616,39660
utf_ptr2cells(utf_ptr2cells1622,39721
dbcs_ptr2cells(char_u *p)dbcs_ptr2cells1643,40111
latin_ptr2cells_len(char_u *p UNUSED, int size UNUSED)latin_ptr2cells_len1658,40503
utf_ptr2cells_len(char_u *p, int size)utf_ptr2cells_len1664,40592
dbcs_ptr2cells_len(char_u *p, int size)dbcs_ptr2cells_len1686,41088
latin_char2cells(int c UNUSED)latin_char2cells1701,41511
dbcs_char2cells(int c)dbcs_char2cells1707,41576
mb_string2cells(char_u *p, int len)mb_string2cells1722,41992
latin_off2cells(unsigned off UNUSED, unsigned max_off UNUSED)latin_off2cells1738,42369
dbcs_off2cells(unsigned off, unsigned max_off)dbcs_off2cells1744,42458
utf_off2cells(unsigned off, unsigned max_off)utf_off2cells1758,42814
latin_ptr2char(char_u *p)latin_ptr2char1768,43029
dbcs_ptr2char(char_u *p)dbcs_ptr2char1774,43090
utf_ptr2char(char_u *p)utf_ptr2char1789,43462
utf_safe_read_char_adv(char_u **s, size_t *n)utf_safe_read_char_adv1846,45053
mb_ptr2char_adv(char_u **pp)mb_ptr2char_adv1892,46198
mb_cptr2char_adv(char_u **pp)mb_cptr2char_adv1906,46465
utf_composinglike(char_u *p1, char_u *p2)utf_composinglike1925,46888
utfc_ptr2char(utfc_ptr2char1943,47238
utfc_ptr2char_len(utfc_ptr2char_len1983,48054
utfc_char2bytes(int off, char_u *buf)utfc_char2bytes2029,49098
utf_ptr2len(char_u *p)utf_ptr2len2051,49561
utf_byte2len(int b)utf_byte2len2071,49924
utf_ptr2len_len(char_u *p, int size)utf_ptr2len_len2085,50278
utfc_ptr2len(char_u *p)utfc_ptr2len2109,50760
utfc_ptr2len_len(char_u *p, int size)utfc_ptr2len_len2156,51783
utf_char2len(int c)utf_char2len2214,53055
utf_char2bytes(int c, char_u *buf)utf_char2bytes2234,53360
utf_iscomposing_uint(UINT32_T c)utf_iscomposing_uint2286,54661
utf_iscomposing(int c)utf_iscomposing2298,54913
utf_printable(int c)utf_printable2594,60782
static struct interval emoji_all[] =emoji_all2617,61477
utf_class(int c)utf_class2770,64893
utf_class_buf(int c, buf_T *buf)utf_class_buf2776,64960
utf_ambiguous_width(int c)utf_ambiguous_width2894,68547
    int rangeStart;rangeStart2916,69255
    int rangeEnd;rangeEnd2917,69275
    int step;step2918,69293
    int offset;offset2919,69307
} convertStruct;convertStruct2920,69323
static convertStruct foldCase[] =foldCase2922,69341
utf_convert(utf_convert3124,74064
utf_fold(int a)utf_fold3157,74774
static convertStruct toLower[] =toLower3165,74940
static convertStruct toUpper[] =toUpper3341,78952
utf_toupper(int a)utf_toupper3537,83464
utf_islower(int a)utf_islower3558,84049
utf_tolower(int a)utf_tolower3569,84306
utf_isupper(int a)utf_isupper3590,84891
utf_strnicmp(utf_strnicmp3596,84964
mb_strnicmp(char_u *s1, char_u *s2, size_t nn)mb_strnicmp3680,86829
show_utf8(void)show_utf83727,87701
latin_head_off(char_u *base UNUSED, char_u *p UNUSED)latin_head_off3776,88710
dbcs_head_off(char_u *base, char_u *p)dbcs_head_off3782,88798
dbcs_screen_head_off(char_u *base, char_u *p)dbcs_screen_head_off3804,89449
utf_head_off(char_u *base, char_u *p)utf_head_off3834,90319
mb_copy_char(char_u **fp, char_u **tp)mb_copy_char3893,91518
mb_off_next(char_u *base, char_u *p)mb_off_next3908,91892
mb_tail_off(char_u *base, char_u *p)mb_tail_off3943,92645
utf_find_illegal(void)utf_find_illegal3978,93418
utf_valid_string(char_u *s, char_u *end)utf_valid_string4055,95231
dbcs_screen_tail_off(char_u *base, char_u *p)dbcs_screen_tail_off4081,95761
mb_adjust_cursor(void)mb_adjust_cursor4103,96456
mb_adjustpos(buf_T *buf, pos_T *lp)mb_adjustpos4113,96694
mb_prevptr(mb_prevptr4138,97283
mb_charlen(char_u *str)mb_charlen4152,97550
mb_charlen_len(char_u *str, int len)mb_charlen_len4171,97849
mb_unescape(char_u **pp)mb_unescape4191,98324
mb_lefthalve(int row, int col)mb_lefthalve4252,99586
mb_fix_col(int col, int row)mb_fix_col4263,99873
enc_skip(char_u *p)enc_skip4287,100424
enc_canonize(char_u *enc)enc_canonize4303,100814
enc_alias_search(char_u *name)enc_alias_search4379,102320
enc_locale_env(char *locale)enc_locale_env4401,102851
enc_locale(void)enc_locale4458,104326
encname2codepage(char_u *name)encname2codepage4495,105148
my_iconv_open(char_u *to, char_u *from)my_iconv_open4527,105823
#define ICONV_TESTLEN ICONV_TESTLEN4530,105881
iconv_string(iconv_string4580,107263
#    define HINSTANCE HINSTANCE4682,109835
static HINSTANCE hIconvDLL = 0;hIconvDLL4684,109871
static HINSTANCE hMsvcrtDLL = 0;hMsvcrtDLL4685,109903
#    define DYNAMIC_ICONV_DLL DYNAMIC_ICONV_DLL4688,109966
#    define DYNAMIC_ICONV_DLL_ALT1 DYNAMIC_ICONV_DLL_ALT14689,110008
#    define DYNAMIC_ICONV_DLL_ALT2 DYNAMIC_ICONV_DLL_ALT24690,110058
#    define DYNAMIC_ICONV_DLL_ALT3 DYNAMIC_ICONV_DLL_ALT34691,110109
#    define DYNAMIC_MSVCRT_DLL DYNAMIC_MSVCRT_DLL4694,110201
iconv_enabled(int verbose)iconv_enabled4701,110340
iconv_end(void)iconv_end4763,112104
# define USE_IMACTIVATEFUNC USE_IMACTIVATEFUNC4783,112563
# define USE_IMSTATUSFUNC USE_IMSTATUSFUNC4784,112623
# define USE_IMACTIVATEFUNC USE_IMACTIVATEFUNC4786,112687
# define USE_IMSTATUSFUNC USE_IMSTATUSFUNC4787,112732
call_imactivatefunc(int active)call_imactivatefunc4793,112898
call_imstatusfunc(void)call_imstatusfunc4804,113128
static int xim_has_preediting INIT(= FALSE);  // IM current statusxim_has_preediting4823,113591
init_preedit_start_col(void)init_preedit_start_col4829,113739
static int im_is_active	       = FALSE;	// IM is enabled for current modeim_is_active4839,114085
static int preedit_is_active   = FALSE;preedit_is_active4840,114159
static int im_preedit_cursor   = 0;	// cursor offset in charactersim_preedit_cursor4841,114199
static int im_preedit_trailing = 0;	// number of characters after cursorim_preedit_trailing4842,114266
static unsigned long im_commit_handler_id  = 0;im_commit_handler_id4844,114340
static unsigned int  im_activatekey_keyval = GDK_VoidSymbol;im_activatekey_keyval4845,114388
static unsigned int  im_activatekey_state  = 0;im_activatekey_state4846,114449
static GtkWidget *preedit_window = NULL;preedit_window4848,114498
static GtkWidget *preedit_label = NULL;preedit_label4849,114539
im_set_active(int active)im_set_active4854,114640
xim_set_focus(int focus)xim_set_focus4866,114833
im_set_position(int row, int col)im_set_position4878,114994
im_add_to_input(char_u *str, int len)im_add_to_input4905,115517
im_preedit_window_set_position(void)im_preedit_window_set_position4924,115949
im_preedit_window_open()im_preedit_window_open4946,116669
im_preedit_window_close()im_preedit_window_close5068,120383
im_show_preedit()im_show_preedit5075,120496
im_delete_preedit(void)im_delete_preedit5084,120644
im_correct_cursor(int num_move_back)im_correct_cursor5117,121354
static int xim_expected_char = NUL;xim_expected_char5131,121687
static int xim_ignored_char = FALSE;xim_ignored_char5132,121723
im_show_info(void)im_show_info5138,121839
im_commit_cb(GtkIMContext *context UNUSED,im_commit_cb5156,122199
im_preedit_start_cb(GtkIMContext *context UNUSED, gpointer data UNUSED)im_preedit_start_cb5251,124811
im_preedit_end_cb(GtkIMContext *context UNUSED, gpointer data UNUSED)im_preedit_end_cb5267,125133
im_preedit_changed_cb(GtkIMContext *context, gpointer data UNUSED)im_preedit_changed_cb5328,127774
translate_pango_attributes(PangoAttrIterator *iter)translate_pango_attributes5443,130868
im_get_feedback_attr(int col)im_get_feedback_attr5480,131993
xim_init(void)xim_init5529,133110
im_shutdown(void)im_shutdown5554,133862
im_string_to_keyval(const char *str, unsigned int *keyval, unsigned int *state)im_string_to_keyval5580,134391
im_xim_isvalid_imactivate(void)im_xim_isvalid_imactivate5629,135947
im_synthesize_keypress(unsigned int keyval, unsigned int state)im_synthesize_keypress5644,136243
xim_reset(void)xim_reset5672,137112
xim_queue_key_press_event(GdkEventKey *event, int down)xim_queue_key_press_event5714,137862
im_get_status(void)im_get_status5851,142412
preedit_get_status(void)preedit_get_status5861,142553
im_is_preediting(void)im_is_preediting5867,142621
static int	xim_is_active = FALSE;  // XIM should be active in the currentxim_is_active5874,142705
static int	xim_has_focus = FALSE;	// XIM is really being used for Vimxim_has_focus5876,142792
static XIMStyle	input_style;input_style5878,142884
static int	status_area_enabled = TRUE;status_area_enabled5879,142913
im_set_active(int active_arg)im_set_active5887,143117
xim_set_focus(int focus)xim_set_focus5925,143985
im_set_position(int row UNUSED, int col UNUSED)im_set_position5953,144414
xim_set_preedit(void)xim_set_preedit5962,144553
static char e_xim[] = N_("E285: Failed to create input context");e_xim6016,145838
#    define USE_X11R6_XIMUSE_X11R6_XIM6021,146054
xim_instantiate_cb(xim_instantiate_cb6029,146199
xim_destroy_cb(xim_destroy_cb6053,146752
xim_init(void)xim_init6077,147243
xim_real_init(Window x11_window, Display *x11_display)xim_real_init6102,147696
#  define IMLEN_MAX IMLEN_MAX6110,147812
im_get_status(void)im_get_status6328,153230
xim_set_status_area(void)xim_set_status_area6349,153721
xim_get_status_area_height(void)xim_get_status_area_height6446,156347
static int im_was_set_active = FALSE;im_was_set_active6457,156539
mbyte_im_get_status(void)mbyte_im_get_status6461,156602
mbyte_im_set_active(int active_arg)mbyte_im_set_active6475,156814
im_set_position(int row UNUSED, int col UNUSED)im_set_position6493,157195
f_getimstatus(typval_T *argvars UNUSED, typval_T *rettv)f_getimstatus6506,157370
convert_setup(vimconv_T *vcp, char_u *from, char_u *to)convert_setup6524,157933
convert_setup_ext(convert_setup_ext6534,158205
convert_input(char_u *ptr, int len, int maxlen)convert_input6651,161305
convert_input_safe(convert_input_safe6663,161646
string_convert(string_convert6707,162743
string_convert_ext(string_convert_ext6721,163086

src/memfile.c,2771
# define STATFS STATFS41,1659
# define F_BSIZE F_BSIZE42,1680
# define fstatfs(fstatfs43,1708
#  define STATFS STATFS47,1825
#  define F_BSIZE F_BSIZE48,1849
#   define fstatfs(fstatfs50,1920
#define MEMFILE_PAGE_SIZE MEMFILE_PAGE_SIZE68,2222
static long_u	total_mem_used = 0;	// total memory used for memfilestotal_mem_used70,2276
mf_open(char_u *fname, int flags)mf_open124,4483
# define USE_FSTATFSUSE_FSTATFS129,4636
mf_open_file(memfile_T *mfp, char_u *fname)mf_open_file224,7267
mf_close(memfile_T *mfp, int del_file)mf_close239,7565
mf_close_file(mf_close_file272,8427
mf_new_page_size(memfile_T *mfp, unsigned new_size)mf_new_page_size310,9349
mf_new(memfile_T *mfp, int negative, int page_count)mf_new324,9717
mf_get(memfile_T *mfp, blocknr_T nr, int page_count)mf_get414,12293
mf_put(mf_put472,13633
mf_free(memfile_T *mfp, bhdr_T *hp)mf_free499,14135
fdtofh(int filedescriptor)fdtofh518,14676
mf_sync(memfile_T *mfp, int flags)mf_sync538,15186
mf_set_dirty(memfile_T *mfp)mf_set_dirty684,18566
mf_ins_hash(memfile_T *mfp, bhdr_T *hp)mf_ins_hash698,18839
mf_rem_hash(memfile_T *mfp, bhdr_T *hp)mf_rem_hash707,19020
mf_find_hash(memfile_T *mfp, blocknr_T nr)mf_find_hash716,19222
mf_ins_used(memfile_T *mfp, bhdr_T *hp)mf_ins_used725,19405
mf_rem_used(memfile_T *mfp, bhdr_T *hp)mf_rem_used742,19855
mf_release(memfile_T *mfp, int page_count)mf_release766,20604
mf_release_all(void)mf_release_all848,22584
mf_alloc_bhdr(memfile_T *mfp, int page_count)mf_alloc_bhdr892,23418
mf_free_bhdr(bhdr_T *hp)mf_free_bhdr912,23801
mf_ins_free(memfile_T *mfp, bhdr_T *hp)mf_ins_free922,23936
mf_rem_free(memfile_T *mfp)mf_rem_free933,24211
mf_read(memfile_T *mfp, bhdr_T *hp)mf_read948,24435
mf_write(memfile_T *mfp, bhdr_T *hp)mf_write987,25352
mf_write_block(mf_write_block1087,28171
mf_trans_add(memfile_T *mfp, bhdr_T *hp)mf_trans_add1123,28860
mf_trans_del(memfile_T *mfp, blocknr_T old_nr)mf_trans_del1186,30403
mf_set_ffname(memfile_T *mfp)mf_set_ffname1213,31020
mf_fullname(memfile_T *mfp)mf_fullname1223,31219
mf_need_trans(memfile_T *mfp)mf_need_trans1237,31497
mf_do_open(mf_do_open1248,31743
#define MHT_LOG_LOAD_FACTOR MHT_LOG_LOAD_FACTOR1331,33788
#define MHT_GROWTH_FACTOR MHT_GROWTH_FACTOR1332,33818
mf_hash_init(mf_hashtab_T *mht)mf_hash_init1338,33935
mf_hash_free(mf_hashtab_T *mht)mf_hash_free1350,34278
mf_hash_free_all(mf_hashtab_T *mht)mf_hash_free_all1360,34484
mf_hash_find(mf_hashtab_T *mht, blocknr_T key)mf_hash_find1381,34926
mf_hash_add_item(mf_hashtab_T *mht, mf_hashitem_T *mhi)mf_hash_add_item1397,35228
mf_hash_rem_item(mf_hashtab_T *mht, mf_hashitem_T *mhi)mf_hash_rem_item1430,36020
mf_hash_grow(mf_hashtab_T *mht)mf_hash_grow1452,36572

src/memfile_test.c,211
#undef NDEBUGNDEBUG15,359
#define NO_VIM_MAINNO_VIM_MAIN19,464
#define index_to_key(index_to_key25,597
#define TEST_COUNT TEST_COUNT26,635
test_mf_hash(void)test_mf_hash32,715
main(void)main139,3030

src/memline.c,8266
#define CHECK(CHECK12,352
typedef struct block0		ZERO_BL;    // contents of the first blockZERO_BL55,2028
typedef struct pointer_block	PTR_BL;	    // contents of a pointer blockPTR_BL56,2094
typedef struct data_block	DATA_BL;    // contents of a data blockDATA_BL57,2166
typedef struct pointer_entry	PTR_EN;	    // block/line-count pairPTR_EN58,2232
#define DATA_ID	DATA_ID60,2299
#define PTR_ID	PTR_ID61,2360
#define BLOCK0_ID0 BLOCK0_ID062,2423
#define BLOCK0_ID1 BLOCK0_ID163,2471
#define BLOCK0_ID1_C0 BLOCK0_ID1_C064,2519
#define BLOCK0_ID1_C1 BLOCK0_ID1_C165,2574
#define BLOCK0_ID1_C2 BLOCK0_ID1_C266,2629
static int id1_codes[] = {id1_codes69,2709
struct pointer_entrypointer_entry79,2905
    blocknr_T	pe_bnum;	// block numberpe_bnum81,2928
    linenr_T	pe_line_count;	// number of lines in this branchpe_line_count82,2967
    linenr_T	pe_old_lnum;	// lnum for this block (for recovery)pe_old_lnum83,3029
    int		pe_page_count;	// number of pages in block pe_bnumpe_page_count84,3093
struct pointer_blockpointer_block90,3224
    short_u	pb_id;		// ID for pointer block: PTR_IDpb_id92,3247
    short_u	pb_count;	// number of pointers in this blockpb_count93,3299
    short_u	pb_count_max;	// maximum value for pb_countpb_count_max94,3357
    PTR_EN	pb_pointer[1];	// list of pointers to blocks (actually longer)pb_pointer95,3413
struct data_blockdata_block106,3820
    short_u	db_id;		// ID for data block: DATA_IDdb_id108,3840
    unsigned	db_free;	// free space availabledb_free109,3890
    unsigned	db_txt_start;	// byte where text startsdb_txt_start110,3936
    unsigned	db_txt_end;	// byte just after data blockdb_txt_end111,3989
    linenr_T	db_line_count;	// number of lines in this blockdb_line_count112,4044
    unsigned	db_index[1];	// index for start of line (actually bigger)db_index113,4105
#define DB_MARKED	DB_MARKED127,4650
#define DB_INDEX_MASK	DB_INDEX_MASK128,4714
#define INDEX_SIZE INDEX_SIZE130,4750
#define HEADER_SIZE HEADER_SIZE131,4823
#define B0_FNAME_SIZE_ORG	B0_FNAME_SIZE_ORG133,4905
#define B0_FNAME_SIZE_NOCRYPT	B0_FNAME_SIZE_NOCRYPT134,4968
#define B0_FNAME_SIZE_CRYPT	B0_FNAME_SIZE_CRYPT135,5035
#define B0_UNAME_SIZE	B0_UNAME_SIZE136,5101
#define B0_HNAME_SIZE	B0_HNAME_SIZE137,5127
#define B0_MAGIC_LONG	B0_MAGIC_LONG143,5346
#define B0_MAGIC_INT	B0_MAGIC_INT144,5380
#define B0_MAGIC_SHORT	B0_MAGIC_SHORT145,5413
#define B0_MAGIC_CHAR	B0_MAGIC_CHAR146,5448
struct block0block0160,5930
    char_u	b0_id[2];	// id for block 0: BLOCK0_ID0 and BLOCK0_ID1,b0_id162,5946
    char_u	b0_version[10];	// Vim version stringb0_version164,6055
    char_u	b0_page_size[4];// number of bytes per pageb0_page_size165,6104
    char_u	b0_mtime[4];	// last modification time of fileb0_mtime166,6159
    char_u	b0_ino[4];	// inode of b0_fnameb0_ino167,6217
    char_u	b0_pid[4];	// process id of creator (or 0)b0_pid168,6260
    char_u	b0_uname[B0_UNAME_SIZE]; // name of user (uid if no name)b0_uname169,6314
    char_u	b0_hname[B0_HNAME_SIZE]; // host name (if it has a name)b0_hname170,6383
    char_u	b0_fname[B0_FNAME_SIZE_ORG]; // name of file being editedb0_fname171,6451
    long	b0_magic_long;	// check for byte order of longb0_magic_long172,6520
    int		b0_magic_int;	// check for byte order of intb0_magic_int173,6576
    short	b0_magic_short;	// check for byte order of shortb0_magic_short174,6630
    char_u	b0_magic_char;	// check for last charb0_magic_char175,6689
#define B0_DIRTY	B0_DIRTY184,7027
#define b0_dirty	b0_dirty185,7049
#define b0_flags	b0_flags190,7147
#define b0_seed	b0_seed196,7313
#define B0_FF_MASK	B0_FF_MASK201,7539
#define B0_SAME_DIR	B0_SAME_DIR205,7661
#define B0_HAS_FENC	B0_HAS_FENC209,7799
#define STACK_INCR	STACK_INCR211,7822
static linenr_T	lowest_marked = 0;lowest_marked219,8108
#define ML_DELETE	ML_DELETE224,8183
#define ML_INSERT	ML_INSERT225,8225
#define ML_FIND	ML_FIND226,8267
#define ML_FLUSH	ML_FLUSH227,8315
#define ML_SIMPLE(ML_SIMPLE228,8363
      UB_FNAME = 0	// update timestamp and filenameUB_FNAME232,8464
    , UB_SAME_DIR       // update the B0_SAME_DIR flagUB_SAME_DIR233,8516
    , UB_CRYPT		// update crypt keyUB_CRYPT234,8571
} upd_block0_T;upd_block0_T235,8607
ml_open(buf_T *buf)ml_open273,9879
ml_set_mfp_crypt(buf_T *buf)ml_set_mfp_crypt424,13701
ml_set_b0_crypt(buf_T *buf, ZERO_BL *b0p)ml_set_b0_crypt442,14050
ml_set_crypt_key(ml_set_crypt_key469,14820
ml_setname(buf_T *buf)ml_setname622,18561
ml_open_files(void)ml_open_files729,21101
ml_open_file(buf_T *buf)ml_open_file744,21449
check_need_swap(check_need_swap825,23626
ml_close(buf_T *buf, int del_file)ml_close840,23992
ml_close_all(int del_file)ml_close_all865,24750
ml_close_notmod(void)ml_close_notmod885,25204
ml_timestamp(buf_T *buf)ml_timestamp899,25459
ml_check_b0_id(ZERO_BL *b0p)ml_check_b0_id908,25591
ml_upd_block0(buf_T *buf, upd_block0_T what)ml_upd_block0924,25932
set_b0_fname(ZERO_BL *b0p, buf_T *buf)set_b0_fname967,26844
set_b0_dir_flag(ZERO_BL *b0p, buf_T *buf)set_b0_dir_flag1044,29066
add_b0_fenc(add_b0_fenc1056,29336
ml_recover(int checkext)ml_recover1090,30151
recover_names(recover_names1745,48446
make_percent_swname(char_u *dir, char_u *name)make_percent_swname2010,54808
# define HAVE_PROCESS_STILL_RUNNINGHAVE_PROCESS_STILL_RUNNING2035,55335
static int process_still_running;process_still_running2036,55371
get_b0_dict(char_u *fname, dict_T *d)get_b0_dict2045,55581
swapfile_info(char_u *fname)swapfile_info2088,56817
swapfile_unchanged(char_u *fname)swapfile_unchanged2200,59286
recov_file_names(char_u **names, char_u *path, int prepend_dot)recov_file_names2247,60329
ml_sync_all(int check_file, int check_char)ml_sync_all2345,62735
ml_preserve(buf_T *buf, int message)ml_preserve2395,64124
ml_get(linenr_T lnum)ml_get2479,66540
ml_get_pos(pos_T *pos)ml_get_pos2488,66668
ml_get_curline(void)ml_get_curline2497,66812
ml_get_cursor(void)ml_get_cursor2506,66957
ml_get_buf(ml_get_buf2519,67237
ml_line_alloced(void)ml_line_alloced2615,69625
add_text_props_for_append(add_text_props_for_append2622,69743
ml_append_int(ml_append_int2681,71106
ml_append_flush(ml_append_flush3205,86451
ml_append(ml_append3243,87657
ml_append_buf(ml_append_buf3261,88266
ml_replace(linenr_T lnum, char_u *line, int copy)ml_replace3286,88975
ml_replace_len(ml_replace_len3302,89417
adjust_text_props_for_delete(adjust_text_props_for_delete3397,91838
ml_delete(linenr_T lnum, int message)ml_delete3498,94634
ml_delete_int(buf_T *buf, linenr_T lnum, int message)ml_delete_int3514,95014
ml_setmarked(linenr_T lnum)ml_setmarked3705,100252
ml_firstmarked(void)ml_firstmarked3734,101068
ml_clearmarked(void)ml_clearmarked3778,102125
ml_flush_line(buf_T *buf)ml_flush_line3820,103052
ml_new_data(memfile_T *mfp, int negative, int page_count)ml_new_data3925,105877
ml_new_ptr(memfile_T *mfp)ml_new_ptr3946,106337
ml_find_line(buf_T *buf, linenr_T lnum, int action)ml_find_line3979,107311
ml_add_stack(buf_T *buf)ml_add_stack4181,112223
ml_lineadd(buf_T *buf, int count)ml_lineadd4219,113254
resolve_symlink(char_u *fname, char_u *buf)resolve_symlink4254,114160
makeswapname(makeswapname4328,115864
get_file_in_dir(get_file_in_dir4395,117598
attention_message(attention_message4444,118614
do_swapexists(buf_T *buf, char_u *fname)do_swapexists4498,120405
findswapname(findswapname4537,121470
# define CREATE_DUMMY_FILECREATE_DUMMY_FILE4552,121776
b0_magic_wrong(ZERO_BL *b0p)b0_magic_wrong5025,134427
fnamecmp_ino(fnamecmp_ino5084,136548
long_to_char(long n, char_u *s)long_to_char5138,138263
char_to_long(char_u *s)char_to_long5150,138518
ml_setflags(buf_T *buf)ml_setflags5172,138874
ml_encrypt_data(ml_encrypt_data5202,139605
ml_decrypt_data(ml_decrypt_data5247,140659
ml_crypt_prepare(memfile_T *mfp, off_T offset, int reading)ml_crypt_prepare5284,141540
#define MLCS_MAXL MLCS_MAXL5328,142645
#define MLCS_MINL MLCS_MINL5329,142695
ml_updatechunk(ml_updatechunk5339,143127
ml_find_line_or_offset(buf_T *buf, linenr_T lnum, long *offp)ml_find_line_or_offset5594,150309
goto_byte(long cnt)goto_byte5760,154460

src/menu.c,4456
#define MENUDEPTH MENUDEPTH19,438
static int s_tearoffs = FALSE;s_tearoffs43,1634
static char *menu_mode_chars[] = {"n", "v", "s", "o", "i", "c", "tl", "t"};menu_mode_chars60,2091
static char_u e_notsubmenu[] = N_("E327: Part of menu-item path is not sub-menu");e_notsubmenu62,2168
static char_u e_nomenu[] = N_("E329: No menu \"%s\"");e_nomenu63,2251
static const char *toolbar_names[] =toolbar_names66,2327
# define TOOLBAR_NAME_COUNT TOOLBAR_NAME_COUNT76,2788
menu_is_winbar(char_u *name)menu_is_winbar83,2943
winbar_height(win_T *wp)winbar_height89,3031
get_root_menu(char_u *name)get_root_menu97,3174
ex_menu(ex_menu108,3342
add_menu_path(add_menu_path452,10630
menu_nable_recurse(menu_nable_recurse851,19922
remove_menu(remove_menu916,21258
remove_winbar(win_T *wp)remove_winbar1036,24196
free_menu(vimmenu_T **menup)free_menu1046,24420
free_menu_string(vimmenu_T *menu, int idx)free_menu_string1090,25427
show_menus(char_u *path_name, int modes)show_menus1107,25784
show_menus_recursive(vimmenu_T *menu, int modes, int depth)show_menus_recursive1168,27013
static vimmenu_T	*expand_menu = NULL;expand_menu1244,28712
static vimmenu_T	*expand_menu_alt = NULL;expand_menu_alt1245,28750
static int		expand_modes = 0x0;expand_modes1246,28792
static int		expand_emenu;	// TRUE for ":emenu" commandexpand_emenu1247,28824
set_context_in_menu_cmd(set_context_in_menu_cmd1253,28979
get_menu_name(expand_T *xp UNUSED, int idx)get_menu_name1384,31982
get_menu_names(expand_T *xp UNUSED, int idx)get_menu_names1460,33426
#define TBUFFER_LEN TBUFFER_LEN1464,33546
menu_name_skip(char_u *name)menu_name_skip1567,35663
menu_name_equal(char_u *name, vimmenu_T *menu)menu_name_equal1590,36088
menu_namecmp(char_u *name, char_u *mname)menu_namecmp1602,36392
get_menu_cmd_modes(get_menu_cmd_modes1622,37020
get_menu_mode_str(int modes)get_menu_mode_str1692,38686
popup_mode_name(char_u *name, int idx)popup_mode_name1735,40133
get_menu_index(vimmenu_T *menu, int state)get_menu_index1760,40815
menu_text(char_u *str, int *mnemonic, char_u **actext)menu_text1802,41903
menu_is_menubar(char_u *name)menu_is_menubar1853,42971
menu_is_popup(char_u *name)menu_is_popup1865,43197
menu_is_child_of_popup(vimmenu_T *menu)menu_is_child_of_popup1875,43411
menu_is_toolbar(char_u *name)menu_is_toolbar1887,43620
menu_is_separator(char_u *name)menu_is_separator1897,43804
menu_is_hidden(char_u *name)menu_is_hidden1906,43980
menu_is_tearoff(char_u *name UNUSED)menu_is_tearoff1915,44156
get_menu_mode(void)get_menu_mode1927,44379
get_menu_mode_flag(void)get_menu_mode_flag1953,44982
show_popupmenu(void)show_popupmenu1968,45285
check_menu_pointer(vimmenu_T *root, vimmenu_T *menu_to_check)check_menu_pointer2018,46520
gui_create_initial_menus(vimmenu_T *menu)gui_create_initial_menus2038,47148
gui_update_menus_recurse(vimmenu_T *menu, int mode)gui_update_menus_recurse2064,47613
gui_update_menus(int modes)gui_update_menus2104,48676
gui_is_menu_shortcut(int key)gui_is_menu_shortcut2130,49261
gui_mch_toggle_tearoffs(int enable)gui_mch_toggle_tearoffs2153,49789
gui_create_tearoffs_recurse(gui_create_tearoffs_recurse2174,50185
gui_add_tearoff(char_u *tearpath, int *pri_tab, int pri_idx)gui_add_tearoff2232,51536
gui_destroy_tearoffs_recurse(vimmenu_T *menu)gui_destroy_tearoffs_recurse2278,52520
execute_menu(exarg_T *eap, vimmenu_T *menu, int mode_idx)execute_menu2306,53175
menu_getbyname(char_u *name_arg)menu_getbyname2443,56431
ex_emenu(exarg_T *eap)ex_emenu2502,57531
winbar_click(win_T *wp, int col)winbar_click2537,58380
gui_find_menu(char_u *path_name)gui_find_menu2593,59904
    char_u	*from;		// English namefrom2655,61079
    char_u	*from_noamp;	// same, without '&'from_noamp2656,61114
    char_u	*to;		// translated nameto2657,61159
} menutrans_T;menutrans_T2658,61195
static garray_T menutrans_ga = {0, 0, 0, 0, NULL};menutrans_ga2660,61211
ex_menutranslate(exarg_T *eap UNUSED)ex_menutranslate2669,61412
menu_skip_part(char_u *p)menu_skip_part2747,63173
menutrans_lookup(char_u *name, int len)menutrans_lookup2765,63520
menu_unescape_name(char_u *name)menu_unescape_name2798,64242
menu_translate_tab_and_shift(char_u *arg_start)menu_translate_tab_and_shift2813,64528
menuitem_getinfo(vimmenu_T *menu, int modes, dict_T *dict)menuitem_getinfo2839,64993
f_menu_info(typval_T *argvars, typval_T *rettv)f_menu_info2930,67485

src/message.c,8472
#define MESSAGE_FILE	MESSAGE_FILE14,353
#define USING_FLOAT_STUFFUSING_FLOAT_STUFF15,413
static int	confirm_msg_used = FALSE;	// displaying confirm_msgconfirm_msg_used36,1353
static char_u	*confirm_msg = NULL;		// ":confirm" messageconfirm_msg37,1416
static char_u	*confirm_msg_tail;		// tail of confirm_msgconfirm_msg_tail38,1474
static int emsg_to_channel_log = FALSE;emsg_to_channel_log42,1601
struct msg_histmsg_hist45,1649
    struct msg_hist	*next;next47,1667
    char_u		*msg;msg48,1694
    int			attr;attr49,1712
static struct msg_hist *first_msg_hist = NULL;first_msg_hist52,1732
static struct msg_hist *last_msg_hist = NULL;last_msg_hist53,1779
static int msg_hist_len = 0;msg_hist_len54,1825
static FILE *verbose_fd = NULL;verbose_fd56,1855
static int  verbose_did_open = FALSE;verbose_did_open57,1887
msg(char *s)msg101,4071
verb_msg(char *s)verb_msg110,4203
msg_attr(char *s, int attr)msg_attr122,4340
msg_attr_keep(msg_attr_keep128,4423
msg_strtrunc(msg_strtrunc195,6150
trunc_string(trunc_string238,7202
smsg(const char *s, ...)smsg358,9602
smsg_attr(int attr, const char *s, ...)smsg_attr378,9988
smsg_attr_keep(int attr, const char *s, ...)smsg_attr_keep398,10411
static int	last_sourcing_lnum = 0;last_sourcing_lnum423,10995
static char_u   *last_sourcing_name = NULL;last_sourcing_name424,11030
reset_last_sourcing(void)reset_last_sourcing431,11199
other_sourcing_name(void)other_sourcing_name441,11384
get_emsg_source(void)get_emsg_source458,11790
get_emsg_lnum(void)get_emsg_lnum486,12445
msg_source(int attr)msg_source511,13107
emsg_not_now(void)emsg_not_now549,14011
static garray_T ignore_error_list = GA_EMPTY;ignore_error_list562,14263
ignore_error_for_testing(char_u *error)ignore_error_for_testing565,14319
ignore_error(char_u *msg)ignore_error577,14604
do_perror(char *msg)do_perror595,15033
emsg_core(char_u *s)emsg_core614,15451
emsg(char *s)emsg744,18452
semsg(const char *s, ...)semsg758,18832
iemsg(char *s)iemsg789,19557
siemsg(const char *s, ...)siemsg806,19972
internal_error(char *where)internal_error836,20488
internal_error_no_abort(char *where)internal_error_no_abort846,20696
emsg_invreg(int name)emsg_invreg854,20857
emsg_namelen(char *msg, char_u *name, int len)emsg_namelen863,21028
msg_trunc_attr(char *s, int force, int attr)msg_trunc_attr877,21490
msg_may_trunc(int force, char_u *s)msg_may_trunc902,22050
add_msg_hist(add_msg_hist933,22623
delete_first_msg(void)delete_first_msg978,23583
ex_messages(exarg_T *eap)ex_messages998,23921
msg_end_prompt(void)msg_end_prompt1062,25372
wait_return(int redraw)wait_return1080,25761
hit_return_msg(void)hit_return_msg1322,32213
set_keep_msg(char_u *s, int attr)set_keep_msg1342,32692
set_keep_msg_from_hist(void)set_keep_msg_from_hist1359,33092
msg_start(void)msg_start1371,33364
msg_starthere(void)msg_starthere1421,34369
msg_putchar(int c)msg_putchar1428,34457
msg_putchar_attr(int c, int attr)msg_putchar_attr1434,34518
msg_outnum(long n)msg_outnum1451,34801
msg_home_replace(char_u *fname)msg_home_replace1460,34900
msg_home_replace_hl(char_u *fname)msg_home_replace_hl1467,35027
msg_home_replace_attr(char_u *fname, int attr)msg_home_replace_attr1474,35140
msg_outtrans(char_u *str)msg_outtrans1491,35547
msg_outtrans_attr(char_u *str, int attr)msg_outtrans_attr1497,35624
msg_outtrans_len(char_u *str, int len)msg_outtrans_len1503,35741
msg_outtrans_one(char_u *p, int attr)msg_outtrans_one1513,35957
msg_outtrans_len_attr(char_u *msgstr, int len, int attr)msg_outtrans_len_attr1527,36204
msg_make(char_u *arg)msg_make1611,38381
msg_outtrans_special(msg_outtrans_special1644,39386
str2special_save(str2special_save1683,40314
str2special(str2special1704,40787
str2specialbuf(char_u *sp, char_u *buf, int len)str2specialbuf1775,42319
msg_prt_line(char_u *s, int list)msg_prt_line1792,42585
screen_puts_mbyte(char_u *s, int l, int attr)screen_puts_mbyte1932,45398
msg_puts(char *s)msg_puts1978,46222
msg_puts_title(char *s)msg_puts_title1984,46279
msg_outtrans_long_len_attr(char_u *longstr, int len, int attr)msg_outtrans_long_len_attr1995,46551
msg_outtrans_long_attr(char_u *longstr, int attr)msg_outtrans_long_attr2011,46910
msg_puts_attr(char *s, int attr)msg_puts_attr2020,47117
msg_puts_attr_len(char *str, int maxlen, int attr)msg_puts_attr_len2031,47401
msg_puts_display(msg_puts_display2078,48907
message_filtered(char_u *msg)message_filtered2293,54038
msg_scroll_up(void)msg_scroll_up2307,54362
inc_msg_scrolled(void)inc_msg_scrolled2339,55294
typedef struct msgchunk_S msgchunk_T;msgchunk_T2376,56114
struct msgchunk_Smsgchunk_S2377,56152
    msgchunk_T	*sb_next;sb_next2379,56172
    msgchunk_T	*sb_prev;sb_prev2380,56197
    char	sb_eol;		// TRUE when line ends after this textsb_eol2381,56222
    int		sb_msg_col;	// column in which text startssb_msg_col2382,56279
    int		sb_attr;	// text attributessb_attr2383,56331
    char_u	sb_text[1];	// text to be displayed, actually longersb_text2384,56368
static msgchunk_T *last_msgchunk = NULL; // last displayed textlast_msgchunk2387,56436
    SB_CLEAR_NONE = 0,SB_CLEAR_NONE2392,56567
    SB_CLEAR_ALL,SB_CLEAR_ALL2393,56590
    SB_CLEAR_CMDLINE_BUSY,SB_CLEAR_CMDLINE_BUSY2394,56608
    SB_CLEAR_CMDLINE_DONESB_CLEAR_CMDLINE_DONE2395,56635
} sb_clear_T;sb_clear_T2396,56661
static sb_clear_T do_clear_sb_text = SB_CLEAR_NONE;do_clear_sb_text2399,56711
store_sb_text(store_sb_text2405,56858
may_clear_sb_text(void)may_clear_sb_text2456,57900
sb_text_start_cmdline(void)sb_text_start_cmdline2465,58047
sb_text_end_cmdline(void)sb_text_end_cmdline2475,58237
clear_sb_text(int all)clear_sb_text2486,58459
show_sb_text(void)show_sb_text2512,58797
msg_sb_start(msgchunk_T *mps)msg_sb_start2532,59246
msg_sb_eol(void)msg_sb_eol2545,59482
disp_sb_line(int row, msgchunk_T *smp)disp_sb_line2556,59733
t_puts(t_puts2580,60185
msg_use_printf(void)msg_use_printf2611,61082
msg_puts_printf(char_u *str, int maxlen)msg_puts_printf2629,61441
do_more_prompt(int typed_char)do_more_prompt2719,63252
# undef mch_errmsgmch_errmsg2988,69293
# undef mch_msgmch_msg2991,69334
mch_errmsg_c(char *str)mch_errmsg_c2996,69442
mch_errmsg(char *str)mch_errmsg3024,70100
mch_msg_c(char *str)mch_msg_c3102,71727
mch_msg(char *str)mch_msg3131,72352
msg_screen_putchar(int c, int attr)msg_screen_putchar3179,73435
msg_moremsg(int full)msg_moremsg3204,73813
repeat_message(void)repeat_message3222,74220
msg_check_screen(void)msg_check_screen3263,75302
msg_clr_eos(void)msg_clr_eos3280,75652
msg_clr_eos_force(void)msg_clr_eos_force3292,75886
msg_clr_cmdline(void)msg_clr_cmdline3326,76561
msg_end(void)msg_end3339,76824
msg_check(void)msg_check3361,77363
redir_write(char_u *str, int maxlen)redir_write3375,77645
redirecting(void)redirecting3446,79226
verbose_enter(void)verbose_enter3460,79487
verbose_leave(void)verbose_leave3471,79655
verbose_enter_scroll(void)verbose_enter_scroll3482,79837
verbose_leave_scroll(void)verbose_leave_scroll3495,80065
verbose_stop(void)verbose_stop3510,80290
verbose_open(void)verbose_open3525,80494
give_warning(char_u *message, int hl)give_warning3547,80916
give_warning2(char_u *message, char_u *a1, int hl)give_warning23575,81583
msg_advance(int col)msg_advance3595,82009
do_dialog(do_dialog3634,83166
copy_char(copy_char3754,85757
msg_show_console_dialog(msg_show_console_dialog3796,86621
#define HOTK_LEN HOTK_LEN3802,86729
#define HAS_HOTKEY_LEN HAS_HOTKEY_LEN3809,86935
display_confirm_msg(void)display_confirm_msg3950,89984
vim_dialog_yesno(vim_dialog_yesno3964,90306
vim_dialog_yesnocancel(vim_dialog_yesnocancel3979,90582
vim_dialog_yesnoallcancel(vim_dialog_yesnoallcancel3997,90920
static char *e_printf = N_("E766: Insufficient arguments for printf()");e_printf4020,91411
tv_nr(typval_T *tvs, int *idxp)tv_nr4026,91585
tv_str(typval_T *tvs, int *idxp, char_u **tofree)tv_str4053,92253
tv_float(typval_T *tvs, int *idxp)tv_float4077,92765
infinity_str(int positive,infinity_str4105,93365
vim_snprintf_add(char *str, size_t str_m, const char *fmt, ...)vim_snprintf_add4171,95810
vim_snprintf(char *str, size_t str_m, const char *fmt, ...)vim_snprintf4189,96144
vim_vsnprintf(vim_vsnprintf4201,96355
vim_vsnprintf_typval(vim_vsnprintf_typval4211,96513
#  define TMP_LEN TMP_LEN4256,97556

src/message_test.c,485
#undef NDEBUGNDEBUG14,328
#define NO_VIM_MAINNO_VIM_MAIN18,433
# define MIN(MIN26,590
char *fmt_012p = "%012p";fmt_012p39,1148
char *fmt_5S   = "%5S";fmt_5S40,1174
char *fmt_06b  = "%06b";fmt_06b41,1198
test_trunc_string(void)test_trunc_string47,1271
test_vim_snprintf(void)test_vim_snprintf125,3440
# define PREFIX_LEN PREFIX_LEN245,7668
# define PREFIX_STR1 PREFIX_STR1246,7691
# define PREFIX_STR2 PREFIX_STR2247,7715
main(int argc, char **argv)main270,8274

src/misc1.c,3216
#define URL_SLASH	URL_SLASH25,491
#define URL_BACKSLASH	URL_BACKSLASH26,545
static garray_T	ga_users;ga_users29,663
get_leader_len(get_leader_len42,1111
get_last_leader_offset(char_u *line, char_u **flags)get_last_leader_offset187,5211
plines(linenr_T lnum)plines335,9020
plines_win(plines_win341,9098
plines_nofill(linenr_T lnum)plines_nofill353,9438
plines_win_nofill(plines_win_nofill359,9530
plines_win_nofold(win_T *wp, linenr_T lnum)plines_win_nofold391,10218
plines_win_col(win_T *wp, linenr_T lnum, long column)plines_win_col427,11070
plines_m_win(win_T *wp, linenr_T first, linenr_T last)plines_m_win480,12443
gchar_pos(pos_T *pos)gchar_pos513,13042
gchar_cursor(void)gchar_cursor527,13302
pchar_cursor(int c)pchar_cursor539,13531
skip_to_option_part(char_u *p)skip_to_option_part549,13733
check_status(buf_T *buf)check_status563,13942
ask_yesno(char_u *str, int direct)ask_yesno586,14483
f_mode(typval_T *argvars, typval_T *rettv)f_mode630,15445
may_add_state_char(garray_T *gap, char_u *include, int c)may_add_state_char718,17193
f_state(typval_T *argvars, typval_T *rettv)f_state728,17373
get_keystroke(void)get_keystroke773,18674
get_number(get_number893,21434
prompt_for_number(int *mouse_used)prompt_for_number962,22833
msgmore(long n)msgmore1004,23867
beep_flush(void)beep_flush1046,24880
vim_beep(vim_beep1059,25040
init_homedir(void)init_homedir1134,26793
free_homedir(void)free_homedir1246,29478
free_users(void)free_users1252,29534
expand_env_save(char_u *src)expand_env_save1264,29771
expand_env_save_opt(char_u *src, int one)expand_env_save_opt1274,29970
expand_env(expand_env1291,30397
expand_env_esc(expand_env_esc1300,30631
remove_tail(char_u *p, char_u *pend, char_u *name)remove_tail1588,37190
vim_version_dir(char_u *vimdir)vim_version_dir1605,37638
vim_getenv(char_u *name, int *mustfree)vim_getenv1630,38277
vim_unsetenv(char_u *var)vim_unsetenv1861,43219
vim_setenv_ext(char_u *name, char_u *val)vim_setenv_ext1876,43436
vim_setenv(char_u *name, char_u *val)vim_setenv1892,43790
get_env_name(get_env_name1932,44680
add_user(char_u *user, int need_copy)add_user1971,45384
init_users(void)init_users1990,45827
get_users(expand_T *xp UNUSED, int idx)get_users2062,47426
match_user(char_u *name)match_user2077,47791
concat_str(char_u *str1, char_u *str2)concat_str2099,48285
prepare_to_exit(void)prepare_to_exit2118,48643
preserve_exit(void)preserve_exit2155,49463
# define BREAKCHECK_SKIP BREAKCHECK_SKIP2198,50559
static int	breakcheck_count = 0;breakcheck_count2201,50597
line_breakcheck(void)line_breakcheck2204,50640
fast_breakcheck(void)fast_breakcheck2217,50840
# define SEEK_SET SEEK_SET2231,51111
# define SEEK_END SEEK_END2234,51155
get_cmd_output(get_cmd_output2244,51407
get_cmd_output_as_rettv(get_cmd_output_as_rettv2337,53395
f_system(typval_T *argvars, typval_T *rettv)f_system2521,56785
f_systemlist(typval_T *argvars, typval_T *rettv)f_systemlist2530,56930
goto_im(void)goto_im2544,57263
get_isolated_shell_name(void)get_isolated_shell_name2558,57710
path_is_url(char_u *p)path_is_url2593,58397
path_with_url(char_u *fname)path_with_url2608,58727

src/misc2.c,8184
static char_u	*username = NULL; // cached result of mch_get_user_name()username15,333
virtual_active(void)virtual_active23,563
getviscol(void)getviscol39,1026
coladvance_force(colnr_T wcol)coladvance_force53,1311
getviscol2(colnr_T col, colnr_T coladd UNUSED)getviscol272,1684
coladvance(colnr_T wcol)coladvance94,2266
getvpos(pos_T *pos, colnr_T wcol)getvpos114,2734
coladvance2(coladvance2120,2848
inc_cursor(void)inc_cursor319,7192
inc(pos_T *lp)inc332,7508
incl(pos_T *lp)incl368,8174
dec_cursor(void)dec_cursor384,8452
dec(pos_T *lp)dec390,8517
decl(pos_T *lp)decl436,9271
get_cursor_rel_lnum(get_cursor_rel_lnum451,9593
check_pos(buf_T *buf, pos_T *pos)check_pos500,10544
check_cursor_lnum(void)check_cursor_lnum521,10913
check_cursor_col(void)check_cursor_col541,11425
check_cursor_col_win(win_T *win)check_cursor_col_win550,11544
check_cursor(void)check_cursor614,13364
adjust_cursor_col(void)adjust_cursor_col626,13631
leftcol_changed(void)leftcol_changed640,13920
# define MEM_SIZES MEM_SIZES699,15411
static long_u mem_allocs[MEM_SIZES];mem_allocs700,15436
static long_u mem_frees[MEM_SIZES];mem_frees701,15473
static long_u mem_allocated;mem_allocated702,15509
static long_u mem_freed;mem_freed703,15538
static long_u mem_peak;mem_peak704,15563
static long_u num_alloc;num_alloc705,15587
static long_u num_freed;num_freed706,15612
mem_pre_alloc_s(size_t *sizep)mem_pre_alloc_s709,15654
mem_pre_alloc_l(size_t *sizep)mem_pre_alloc_l715,15736
mem_post_alloc(mem_post_alloc721,15818
mem_pre_free(void **pp)mem_pre_free741,16240
vim_mem_profile_dump(void)vim_mem_profile_dump759,16538
alloc_does_fail(size_t size)alloc_does_fail800,17421
#define KEEP_ROOM KEEP_ROOM818,17793
#define KEEP_ROOM_KB KEEP_ROOM_KB819,17823
alloc(size_t size)alloc826,18032
alloc_id(size_t size, alloc_id_T id UNUSED)alloc_id835,18145
alloc_clear(size_t size)alloc_clear848,18381
alloc_clear_id(size_t size, alloc_id_T id UNUSED)alloc_clear_id862,18595
lalloc_clear(size_t size, int message)lalloc_clear875,18850
lalloc(size_t size, int message)lalloc890,19099
lalloc_id(size_t size, int message, alloc_id_T id UNUSED)lalloc_id979,21247
mem_realloc(void *ptr, size_t size)mem_realloc994,21542
do_outofmem_msg(size_t size)do_outofmem_msg1014,21874
free_all_mem(void)free_all_mem1044,22717
vim_strsave(char_u *string)vim_strsave1271,27532
vim_strnsave(char_u *string, int len)vim_strnsave1290,27910
vim_memsave(char_u *p, size_t len)vim_memsave1308,28200
vim_strsave_escaped(char_u *string, char_u *esc_chars)vim_strsave_escaped1322,28451
vim_strsave_escaped_ext(vim_strsave_escaped_ext1333,28768
csh_like_shell(void)csh_like_shell1388,29944
vim_strsave_shellescape(char_u *string, int do_special, int do_newline)vim_strsave_shellescape1404,30543
vim_strsave_up(char_u *string)vim_strsave_up1523,32973
vim_strnsave_up(char_u *string, int len)vim_strnsave_up1537,33243
vim_strup(vim_strup1550,33456
strup_save(char_u *orig)strup_save1575,33950
strlow_save(char_u *orig)strlow_save1642,35192
del_trailing_spaces(char_u *ptr)del_trailing_spaces1708,36319
vim_strncpy(char_u *to, char_u *from, size_t len)vim_strncpy1722,36603
vim_strcat(char_u *to, char_u *from, size_t tosize)vim_strcat1733,36849
copy_option_part(copy_option_part1755,37365
vim_free(void *x)vim_free1796,38362
vim_memset(void *ptr, int c, size_t size)vim_memset1809,38521
vim_stricmp(char *s1, char *s2)vim_stricmp1826,38895
vim_strnicmp(char *s1, char *s2, size_t len)vim_strnicmp1851,39475
vim_strchr(char_u *string, int c)vim_strchr1876,40025
vim_strbyte(char_u *string, int c)vim_strbyte1933,40987
vim_strrchr(char_u *string, int c)vim_strrchr1952,41282
#   undef vim_strpbrkvim_strpbrk1973,41660
vim_strpbrk(char_u *s, char_u *charset)vim_strpbrk1976,41704
vim_isspace(int x)vim_isspace1994,42004
ga_clear(garray_T *gap)ga_clear2007,42248
ga_clear_strings(garray_T *gap)ga_clear_strings2017,42397
ga_init(garray_T *gap)ga_init2031,42666
ga_init2(garray_T *gap, int itemsize, int growsize)ga_init22039,42773
ga_grow(garray_T *gap, int n)ga_grow2051,43031
ga_concat_strings(garray_T *gap, char *sep)ga_concat_strings2087,44018
ga_add_string(garray_T *gap, char_u *p)ga_add_string2124,44708
ga_concat(garray_T *gap, char_u *s)ga_concat2144,45095
ga_append(garray_T *gap, int c)ga_append2162,45424
append_ga_line(garray_T *gap)append_ga_line2177,45730
static struct modmasktablemodmasktable2199,46241
    short	mod_mask;	// Bit-mask for particular key modifiermod_mask2201,46270
    short	mod_flag;	// Bit(s) for particular key modifiermod_flag2202,46330
    char_u	name;		// Single letter name of modifiername2203,46388
} mod_mask_table[] =mod_mask_table2204,46440
#define MOD_KEYS_ENTRY_SIZE MOD_KEYS_ENTRY_SIZE2226,47202
static char_u modifier_keys_table[] =modifier_keys_table2228,47233
static struct key_name_entrykey_name_entry2318,51564
    int	    key;	// Special key code or ascii valuekey2320,51595
    char_u  *name;	// Name of keyname2321,51647
} key_names_table[] =key_names_table2322,51681
#define KEY_NAMES_TABLE_LEN KEY_NAMES_TABLE_LEN2493,57135
name_to_mod_mask(int c)name_to_mod_mask2500,57372
simplify_key(int key, int *modifiers)simplify_key2516,57693
handle_x_keys(int key)handle_x_keys2549,58491
get_special_key_name(int c, int modifiers)get_special_key_name2578,59140
trans_special(trans_special2694,62001
special_to_buf(int key, int modifiers, int keycode, char_u *dst)special_to_buf2721,62799
find_special_key(find_special_key2755,63551
extract_modifiers(int key, int *modp, int simplify, int *did_simplify)extract_modifiers2915,67119
find_special_key_in_table(int c)find_special_key_in_table2979,68757
get_special_key_code(char_u *name)get_special_key_code2999,69280
get_key_name(int i)get_key_name3030,70064
get_fileformat(buf_T *buf)get_fileformat3041,70264
get_fileformat_force(get_fileformat_force3057,70536
set_fileformat(set_fileformat3085,71125
default_fileformat(void)default_fileformat3122,71826
call_shell(char_u *cmd, int opt)call_shell3136,72045
get_real_state(void)get_real_state3232,74031
after_pathsep(char_u *b, char_u *p)after_pathsep3254,74411
same_directory(char_u *f1, char_u *f2)same_directory3265,74691
vim_chdirfile(char_u *fname, char *trigger_autocmd)vim_chdirfile3292,75370
illegal_slash(const char *name)illegal_slash3326,76258
vim_stat(const char *name, stat_T *stp)vim_stat3341,76621
cursorentry_T shape_table[SHAPE_IDX_COUNT] =shape_table3355,76976
static char * mshape_names[] =mshape_names3384,78420
parse_shape_opt(int what)parse_shape_opt3412,78933
get_shape_idx(int mouse)get_shape_idx3659,84859
static int old_mouse_shape = 0;old_mouse_shape3707,85851
update_mouseshape(int shape_idx)update_mouseshape3717,86153
vim_chdir(char_u *new_dir)vim_chdir3766,87420
get_user_name(char_u *buf, int len)get_user_name3792,88007
qsort(qsort3811,88372
sort_compare(const void *s1, const void *s2)sort_compare3852,89195
sort_strings(sort_strings3858,89301
#define EXTRASIZE EXTRASIZE3893,90322
static int  envsize = -1;	// current size of environmentenvsize3895,90377
putenv(const char *string)putenv3903,90672
findenv(char *name)findenv3942,91445
newenv(void)newenv3963,91859
moreenv(void)moreenv3992,92313
vimpty_getenv(const char_u *string)vimpty_getenv4011,92631
filewritable(char_u *fname)filewritable4037,93113
get2c(FILE *fd)get2c4072,93761
get3c(FILE *fd)get3c4088,94033
get4c(FILE *fd)get4c4107,94374
read_string(FILE *fd, int cnt)read_string4134,95007
put_bytes(FILE *fd, long_u nr, int len)put_bytes4164,95460
has_non_ascii(char_u *s)has_non_ascii4182,95840
elapsed(struct timeval *start_tv)elapsed4200,96119
elapsed(DWORD start_tick)elapsed4215,96417
mch_parse_cmd(char_u *cmd, int use_shcf, char ***argv, int *argc)mch_parse_cmd4234,96872
build_argv_from_string(char_u *cmd, char ***argv, int *argc)build_argv_from_string4315,98328
build_argv_from_list(list_T *l, char ***argv, int *argc)build_argv_from_list4341,98919
get_special_pty_type(void)get_special_pty_type4381,99805

src/mouse.c,2214
time_diff_ms(struct timeval *t1, struct timeval *t2)time_diff_ms21,443
get_mouse_class(char_u *p)get_mouse_class40,1037
find_start_of_word(pos_T *pos)find_start_of_word67,1679
find_end_of_word(pos_T *pos)find_end_of_word91,2166
# define USE_POPUP_SETPOSUSE_POPUP_SETPOS121,2875
# define NEED_VCOL2COLNEED_VCOL2COL122,2901
get_fpos_of_mouse(pos_T *mpos)get_fpos_of_mouse128,3023
do_mouse(do_mouse200,5434
ins_mouse(int c)ins_mouse1026,27480
ins_mousescroll(int dir)ins_mousescroll1072,28557
is_mouse_key(int c)is_mouse_key1155,30299
static struct mousetablemousetable1181,30803
    int	    pseudo_code;	// Code for pseudo mouse eventpseudo_code1183,30830
    int	    button;		// Which mouse button is it?button1184,30886
    int	    is_click;		// Is it a mouse button click event?is_click1185,30936
    int	    is_drag;		// Is it a mouse drag event?is_drag1186,30996
} mouse_table[] =mouse_table1187,31047
get_mouse_button(int code, int *is_click, int *is_drag)get_mouse_button1222,32327
get_pseudo_mouse_code(get_pseudo_mouse_code1242,32869
# define HMT_NORMAL	HMT_NORMAL1275,33780
# define HMT_NETTERM	HMT_NETTERM1276,33802
# define HMT_DEC	HMT_DEC1277,33825
# define HMT_JSBTERM	HMT_JSBTERM1278,33844
# define HMT_PTERM	HMT_PTERM1279,33867
# define HMT_URXVT	HMT_URXVT1280,33889
# define HMT_GPM	HMT_GPM1281,33911
# define HMT_SGR	HMT_SGR1282,33931
# define HMT_SGR_REL	HMT_SGR_REL1283,33952
static int has_mouse_termcode = 0;has_mouse_termcode1284,33977
set_mouse_termcode(set_mouse_termcode1287,34022
del_mouse_termcode(del_mouse_termcode1336,35104
setmouse(void)setmouse1387,36206
mouse_has(int c)mouse_has1439,37458
mouse_model_popup(void)mouse_model_popup1461,37886
jump_to_mouse(jump_to_mouse1493,39152
nv_mousescroll(cmdarg_T *cap)nv_mousescroll2007,52665
nv_mouse(cmdarg_T *cap)nv_mouse2095,54533
check_termcode_mouse(check_termcode_mouse2105,54765
mouse_comp_pos(mouse_comp_pos2826,73909
mouse_find_win(int *rowp, int *colp, mouse_find_T popup UNUSED)mouse_find_win2928,76118
vcol2col(win_T *wp, linenr_T lnum, int vcol)vcol2col3002,77668
f_getmousepos(typval_T *argvars UNUSED, typval_T *rettv)f_getmousepos3021,78092

src/move.c,3131
    linenr_T	    lnum;	// line numberlnum28,767
    int		    fill;	// filler linesfill30,822
    int		    height;	// height of added lineheight32,864
} lineoff_T;lineoff_T33,909
comp_botline(win_T *wp)comp_botline43,1132
reset_cursorline(void)reset_cursorline120,2579
redraw_for_cursorline(win_T *wp)redraw_for_cursorline131,2748
update_topline_redraw(void)update_topline_redraw167,3575
update_topline(void)update_topline178,3750
scrolljump_value(void)scrolljump_value426,10174
check_top_offset(void)check_top_offset438,10403
update_curswant(void)update_curswant477,11164
check_cursor_moved(win_T *wp)check_cursor_moved491,11415
changed_window_setting(void)changed_window_setting517,12292
changed_window_setting_win(win_T *wp)changed_window_setting_win523,12375
set_topline(win_T *wp, linenr_T lnum)set_topline535,12643
changed_cline_bef_curs(void)changed_cline_bef_curs559,13363
changed_cline_bef_curs_win(win_T *wp)changed_cline_bef_curs_win566,13504
changed_line_abv_curs(void)changed_line_abv_curs578,13808
changed_line_abv_curs_win(win_T *wp)changed_line_abv_curs_win585,13959
validate_botline(void)validate_botline595,14176
invalidate_botline(void)invalidate_botline605,14364
invalidate_botline_win(win_T *wp)invalidate_botline_win611,14461
approximate_botline_win(approximate_botline_win617,14563
cursor_valid(void)cursor_valid627,14721
validate_cursor(void)validate_cursor639,15033
validate_cline_row(void)validate_cline_row651,15274
curs_rows(win_T *wp)curs_rows668,15637
validate_virtcol(void)validate_virtcol793,18570
validate_virtcol_win(win_T *wp)validate_virtcol_win802,18680
validate_cheight(void)validate_cheight820,19046
validate_cursor_col(void)validate_cursor_col843,19589
win_col_off(win_T *wp)win_col_off878,20420
curwin_col_off(void)curwin_col_off894,20714
win_col_off2(win_T *wp)win_col_off2905,20954
curwin_col_off2(void)curwin_col_off2913,21113
curs_columns(curs_columns924,21329
textpos2screenpos(textpos2screenpos1197,29126
f_screenpos(typval_T *argvars UNUSED, typval_T *rettv)f_screenpos1255,30481
scrolldown(scrolldown1287,31235
scrollup(scrollup1390,33751
check_topfill(check_topfill1472,35631
max_topfill(void)max_topfill1503,36194
scrolldown_clamp(void)scrolldown_clamp1524,36629
scrollup_clamp(void)scrollup_clamp1591,38118
topline_back(lineoff_T *lp)topline_back1645,39536
botline_forw(lineoff_T *lp)botline_forw1681,40268
botline_topline(lineoff_T *lp)botline_topline1717,41001
topline_botline(lineoff_T *lp)topline_botline1732,41362
scroll_cursor_top(int min_scroll, int always)scroll_cursor_top1748,41689
set_empty_rows(win_T *wp, int used)set_empty_rows1884,45123
scroll_cursor_bot(int min_scroll, int set_topbot)scroll_cursor_bot1917,45893
scroll_cursor_halfway(int atend)scroll_cursor_halfway2132,51379
cursor_correct(void)cursor_correct2216,53306
onepage(int dir, long count)onepage2339,56519
get_scroll_overlap(lineoff_T *lp, int dir)get_scroll_overlap2595,63065
halfpage(int flag, linenr_T Prenum)halfpage2654,64158
do_check_cursorbind(void)do_check_cursorbind2836,67883

src/nbdebug.c,297
FILE		*nb_debug = NULL;nb_debug32,1108
u_int		 nb_dlevel = 0;		// nb_debug verbosity levelnb_dlevel33,1132
nbdebug_wait(nbdebug_wait50,1639
nbdebug_log_init(nbdebug_log_init75,2236
nbdbg(char *fmt, ...)nbdbg102,2823
lookup(char *file)lookup116,3017
errorHandler(errorHandler132,3254

src/netbeans.c,5705
#define GUARDED	GUARDED39,1211
#define GUARDEDOFFSET GUARDEDOFFSET40,1269
#define MAX_COLOR_LENGTH MAX_COLOR_LENGTH41,1331
static char *ExtEdProtocolVersion = "2.5";ExtEdProtocolVersion45,1534
#define NETBEANS_OPEN NETBEANS_OPEN64,2194
static channel_T *nb_channel = NULL;nb_channel65,2251
static int r_cmdno;			// current command number for replyr_cmdno67,2289
static int dosetvisible = FALSE;dosetvisible68,2347
static int needupdate = 0;needupdate77,2474
static int inAtomic = 0;inAtomic78,2501
nb_channel_closed(void)nb_channel_closed84,2598
netbeans_close(void)netbeans_close94,2763
#define NB_DEF_HOST NB_DEF_HOST125,3377
#define NB_DEF_ADDR NB_DEF_ADDR126,3409
#define NB_DEF_PASS NB_DEF_PASS127,3436
netbeans_connect(char *params, int doabort)netbeans_connect130,3483
getConnInfo(char *file, char **host, char **port, char **auth)getConnInfo243,6425
struct keyqueuekeyqueue302,7821
    char_u	    *keystr;keystr304,7839
    struct keyqueue *next;next305,7863
    struct keyqueue *prev;prev306,7890
typedef struct keyqueue keyQ_T;keyQ_T309,7921
static keyQ_T keyHead; // dummy node, header for circular queuekeyHead311,7954
postpone_keycommand(char_u *keystr)postpone_keycommand320,8198
handle_key_queue(void)handle_key_queue347,8747
netbeans_parse_messages(void)netbeans_parse_messages374,9341
nb_parse_cmd(char_u *cmd)nb_parse_cmd446,11031
struct nbbuf_structnbbuf_struct526,12552
    buf_T		*bufp;bufp528,12574
    unsigned int	 fireChanges:1;fireChanges529,12592
    unsigned int	 initDone:1;initDone530,12625
    unsigned int	 insertDone:1;insertDone531,12655
    unsigned int	 modified:1;modified532,12687
    int			 nbbuf_number;nbbuf_number533,12717
    char		*displayname;displayname534,12742
    int			*signmap;signmap535,12766
    short_u		 signmaplen;signmaplen536,12786
    short_u		 signmapused;signmapused537,12812
typedef struct nbbuf_struct nbbuf_T;nbbuf_T540,12843
static nbbuf_T *buf_list = NULL;buf_list542,12881
static int buf_list_size = 0;	// size of buf_listbuf_list_size543,12914
static int buf_list_used = 0;	// nr of entries in buf_list actually in usebuf_list_used544,12964
static char **globalsignmap = NULL;globalsignmap546,13040
static int globalsignmaplen = 0;globalsignmaplen547,13076
static int globalsignmapused = 0;globalsignmapused548,13109
static int curPCtype = -1;curPCtype557,13437
nb_free(void)nb_free563,13516
nb_getbufno(buf_T *bufp)nb_getbufno609,14429
isNetbeansBuffer(buf_T *bufp)isNetbeansBuffer623,14623
isNetbeansModified(buf_T *bufp)isNetbeansModified638,15110
nb_get_buf(int bufno)nb_get_buf659,15525
count_changed_buffers(void)count_changed_buffers707,16489
netbeans_end(void)netbeans_end723,16680
nb_send(char *buf, char *fun)nb_send754,17345
nb_reply_nil(int cmdno)nb_reply_nil766,17663
nb_reply_text(int cmdno, char_u *result)nb_reply_text786,18026
nb_reply_nr(int cmdno, long result)nb_reply_nr804,18386
nb_quote(char_u *txt)nb_quote819,18684
nb_unquote(char_u *p, char_u **endp)nb_unquote858,19399
nb_partialremove(linenr_T lnum, colnr_T first, colnr_T last)nb_partialremove919,20525
nb_joinlines(linenr_T first, linenr_T other)nb_joinlines946,21271
#define SKIP_STOP SKIP_STOP962,21675
#define streq(streq963,21695
nb_do_cmd(nb_do_cmd972,22002
nb_set_curbuf(buf_T *buf)nb_set_curbuf2244,55618
coloncmd(char *cmd, ...)coloncmd2259,55893
special_keys(char_u *args)special_keys2281,56345
#define KEYBUFLEN KEYBUFLEN2286,56473
ex_nbclose(exarg_T *eap UNUSED)ex_nbclose2327,57128
ex_nbkey(exarg_T *eap)ex_nbkey2333,57196
ex_nbstart(ex_nbstart2339,57273
nb_init_graphics(void)nb_init_graphics2359,57667
netbeans_keyname(int key, char *buf)netbeans_keyname2377,58025
netbeans_beval_cb(netbeans_beval_cb2451,59966
netbeans_active(void)netbeans_active2497,60937
netbeans_open(char *params, int doabort)netbeans_open2506,61071
netbeans_send_disconnect(void)netbeans_send_disconnect2535,61665
set_ref_in_nb_channel(int copyID)set_ref_in_nb_channel2549,61916
netbeans_frame_moved(int new_x, int new_y)netbeans_frame_moved2569,62313
netbeans_file_activated(buf_T *bufp)netbeans_file_activated2587,62708
netbeans_file_opened(buf_T *bufp)netbeans_file_opened2618,63350
netbeans_file_killed(buf_T *bufp)netbeans_file_killed2656,64111
nb_bufp2nbbuf_fire(buf_T *bufp, int *bufnop)nb_bufp2nbbuf_fire2684,64795
netbeans_inserted(netbeans_inserted2708,65318
netbeans_removed(netbeans_removed2759,66294
netbeans_unmodified(buf_T *bufp UNUSED)netbeans_unmodified2800,66999
netbeans_button_release(int button)netbeans_button_release2811,67300
netbeans_keycommand(int key)netbeans_keycommand2847,68287
netbeans_keystring(char_u *keyName)netbeans_keystring2863,68679
netbeans_save_buffer(buf_T *bufp)netbeans_save_buffer2923,70309
netbeans_deleted_all_lines(buf_T *bufp)netbeans_deleted_all_lines2948,70771
netbeans_is_guarded(linenr_T top, linenr_T bot)netbeans_is_guarded2977,71416
netbeans_draw_multisign_indicator(int row)netbeans_draw_multisign_indicator3000,71934
netbeans_draw_multisign_indicator(int row)netbeans_draw_multisign_indicator3031,72800
netbeans_gutter_click(linenr_T lnum)netbeans_gutter_click3091,74339
addsigntype(addsigntype3145,76015
mapsigntype(nbbuf_T *buf, int localsigntype)mapsigntype3280,79474
get_buf_size(buf_T *bufp)get_buf_size3293,79717
off2pos(buf_T *buf, long offset)off2pos3333,80577
get_off_or_lnum(buf_T *buf, char_u **argp)get_off_or_lnum3361,81207
pos2off(buf_T *buf, pos_T *pos)pos2off3383,81615
print_read_msg(nbbuf_T *buf)print_read_msg3404,82049
print_save_msg(nbbuf_T *buf, off_T nchars)print_save_msg3440,82912

src/normal.c,7928
static int	VIsual_mode_orig = NUL;		// saved Visual modeVIsual_mode_orig17,462
static int	restart_VIsual_select = 0;restart_VIsual_select18,519
static char *e_noident = N_("E349: No identifier under cursor");e_noident132,4489
typedef void (*nv_func_T)(cmdarg_T *cap);nv_func_T138,4655
#define NV_NCH	NV_NCH141,4723
#define NV_NCH_NOP NV_NCH_NOP142,4782
#define NV_NCH_ALW NV_NCH_ALW143,4860
#define NV_LANG	NV_LANG144,4922
#define NV_SS	NV_SS146,4989
#define NV_SSS	NV_SSS147,5035
#define NV_STS	NV_STS148,5102
#define NV_RL	NV_RL149,5169
#define NV_KEEPREG NV_KEEPREG150,5224
#define NV_NCW	NV_NCW151,5273
static const struct nv_cmdnv_cmd168,5935
    int		cmd_char;	// (first) command charactercmd_char170,5964
    nv_func_T   cmd_func;	// function for this commandcmd_func171,6012
    short_u	cmd_flags;	// NV_ flagscmd_flags172,6067
    short	cmd_arg;	// value for ca.argcmd_arg173,6103
} nv_cmds[] =nv_cmds174,6142
#define NV_CMDS_SIZE NV_CMDS_SIZE381,13385
static short nv_cmd_idx[NV_CMDS_SIZE];nv_cmd_idx384,13491
static int nv_max_linear;nv_max_linear388,13624
nv_compare(const void *s1, const void *s2)nv_compare395,13785
init_normal_cmds(void)init_normal_cmds413,14123
find_command(int cmdchar)find_command436,14724
normal_cmd(normal_cmd484,15658
set_vcount_ca(cmdarg_T *cap, int *set_prevcount)set_vcount_ca1270,36309
check_visual_highlight(void)check_visual_highlight1287,36760
end_visual_mode(void)end_visual_mode1305,37111
reset_VIsual_and_resel(void)reset_VIsual_and_resel1341,38076
reset_VIsual(void)reset_VIsual1355,38328
restore_visual_mode(void)restore_visual_mode1366,38504
find_is_eval_item(find_is_eval_item1384,39054
find_ident_under_cursor(char_u **text, int find_type)find_ident_under_cursor1436,40596
find_ident_at_pos(find_ident_at_pos1447,40907
prep_redo_cmd(cmdarg_T *cap)prep_redo_cmd1606,44768
prep_redo(prep_redo1617,45013
checkclearop(oparg_T *oap)checkclearop1653,45701
checkclearopq(oparg_T *oap)checkclearopq1667,45957
clearop(oparg_T *oap)clearop1676,46103
clearopbeep(oparg_T *oap)clearopbeep1685,46247
unshift_special(cmdarg_T *cap)unshift_special1695,46386
may_clear_cmdline(void)may_clear_cmdline1714,46903
#define SHOWCMD_BUFLEN SHOWCMD_BUFLEN1729,47169
static char_u	showcmd_buf[SHOWCMD_BUFLEN];showcmd_buf1730,47214
static char_u	old_showcmd_buf[SHOWCMD_BUFLEN];  // For push_showcmd()old_showcmd_buf1731,47257
static int	showcmd_is_clear = TRUE;showcmd_is_clear1732,47327
static int	showcmd_visual = FALSE;showcmd_visual1733,47363
clear_showcmd(void)clear_showcmd1738,47444
add_to_showcmd(int c)add_to_showcmd1844,49658
add_to_showcmd_c(int c)add_to_showcmd_c1902,50910
del_from_showcmd(int len)del_from_showcmd1912,51066
push_showcmd(void)push_showcmd1933,51445
pop_showcmd(void)pop_showcmd1940,51531
display_showcmd(void)display_showcmd1951,51661
do_check_scrollbind(int check)do_check_scrollbind1982,52365
check_scrollbind(linenr_T topline_diff, long leftcol_diff)check_scrollbind2052,54446
nv_ignore(cmdarg_T *cap)nv_ignore2141,56486
nv_nop(cmdarg_T *cap UNUSED)nv_nop2151,56744
nv_error(cmdarg_T *cap)nv_error2159,56837
nv_help(cmdarg_T *cap)nv_help2168,56945
nv_addsub(cmdarg_T *cap)nv_addsub2178,57120
nv_page(cmdarg_T *cap)nv_page2202,57649
nv_gd(nv_gd2223,58051
is_ident(char_u *line, int offset)is_ident2246,58585
find_decl(find_decl2295,59525
nv_screengo(oparg_T *oap, int dir, long dist)nv_screengo2449,63446
nv_scroll_line(cmdarg_T *cap)nv_scroll_line2607,67729
scroll_redraw(int up, long count)scroll_redraw2617,67900
nv_zet(cmdarg_T *cap)nv_zet2674,69325
nv_ver_scrollbar(cmdarg_T *cap)nv_ver_scrollbar3171,81104
nv_hor_scrollbar(cmdarg_T *cap)nv_hor_scrollbar3184,81345
nv_tabline(cmdarg_T *cap)nv_tabline3199,81656
nv_tabmenu(cmdarg_T *cap)nv_tabmenu3212,81906
handle_tabmenu(void)handle_tabmenu3226,82194
nv_exmode(cmdarg_T *cap)nv_exmode3270,83022
nv_colon(cmdarg_T *cap)nv_colon3285,83265
nv_ctrlg(cmdarg_T *cap)nv_ctrlg3348,84672
nv_ctrlh(cmdarg_T *cap)nv_ctrlh3364,85002
nv_clear(cmdarg_T *cap)nv_clear3379,85244
nv_ctrlo(cmdarg_T *cap)nv_ctrlo3418,86081
nv_hat(cmdarg_T *cap)nv_hat3438,86438
nv_Zet(cmdarg_T *cap)nv_Zet3449,86630
do_nv_ident(int c1, int c2)do_nv_ident3472,87051
nv_ident(cmdarg_T *cap)nv_ident3494,87554
get_visual_text(get_visual_text3751,93296
nv_tagpop(cmdarg_T *cap)nv_tagpop3793,94196
nv_scroll(cmdarg_T *cap)nv_scroll3803,94391
nv_right(cmdarg_T *cap)nv_right3906,96832
nv_left(cmdarg_T *cap)nv_left4007,99284
nv_up(cmdarg_T *cap)nv_up4081,101243
nv_down(cmdarg_T *cap)nv_down4104,101693
nv_gotofile(cmdarg_T *cap)nv_gotofile4151,102785
nv_end(cmdarg_T *cap)nv_end4195,103610
nv_dollar(cmdarg_T *cap)nv_dollar4210,103874
nv_search(cmdarg_T *cap)nv_search4234,104639
nv_next(cmdarg_T *cap)nv_next4268,105413
normal_search(normal_search4291,106156
nv_csearch(cmdarg_T *cap)nv_csearch4337,107274
nv_brackets(cmdarg_T *cap)nv_brackets4376,108168
nv_percent(cmdarg_T *cap)nv_percent4693,115933
nv_brace(cmdarg_T *cap)nv_brace4751,117436
nv_mark(cmdarg_T *cap)nv_mark4777,118066
nv_findpar(cmdarg_T *cap)nv_findpar4791,118302
nv_undo(cmdarg_T *cap)nv_undo4813,118807
nv_kundo(cmdarg_T *cap)nv_kundo4830,119091
nv_replace(cmdarg_T *cap)nv_replace4850,119377
v_swap_corners(int cmdchar)v_swap_corners5061,124825
nv_Replace(cmdarg_T *cap)nv_Replace5109,126030
nv_vreplace(cmdarg_T *cap)nv_vreplace5136,126524
n_swapchar(cmdarg_T *cap)n_swapchar5165,127169
nv_cursormark(cmdarg_T *cap, int flag, pos_T *pos)nv_cursormark5260,129099
v_visop(cmdarg_T *cap)v_visop5288,129728
nv_subst(cmdarg_T *cap)nv_subst5312,130291
nv_abbrev(cmdarg_T *cap)nv_abbrev5344,130872
nv_optrans(cmdarg_T *cap)nv_optrans5360,131194
nv_gomark(cmdarg_T *cap)nv_gomark5400,132216
nv_pcmark(cmdarg_T *cap)nv_pcmark5445,133190
nv_regname(cmdarg_T *cap)nv_regname5495,134298
nv_visual(cmdarg_T *cap)nv_visual5522,134903
start_selection(void)start_selection5628,137776
may_start_select(int c)may_start_select5639,138011
n_start_visual_mode(int c)n_start_visual_mode5650,138234
nv_window(cmdarg_T *cap)nv_window5702,139558
nv_suspend(cmdarg_T *cap)nv_suspend5719,139904
nv_g_cmd(cmdarg_T *cap)nv_g_cmd5731,140112
n_opencmd(cmdarg_T *cap)n_opencmd6327,153445
nv_dot(cmdarg_T *cap)nv_dot6375,154753
nv_redo(cmdarg_T *cap)nv_redo6393,155145
nv_Undo(cmdarg_T *cap)nv_Undo6406,155324
nv_tilde(cmdarg_T *cap)nv_tilde6428,155789
nv_operator(cmdarg_T *cap)nv_operator6450,156180
set_op_var(int optype)set_op_var6480,156791
nv_lineop(cmdarg_T *cap)nv_lineop6506,157489
nv_home(cmdarg_T *cap)nv_home6525,158057
nv_pipe(cmdarg_T *cap)nv_pipe6543,158367
nv_bck_word(cmdarg_T *cap)nv_bck_word6565,158882
nv_wordcmd(cmdarg_T *cap)nv_wordcmd6583,159336
adjust_cursor(oparg_T *oap)adjust_cursor6672,161637
nv_beginline(cmdarg_T *cap)nv_beginline6695,162248
adjust_for_sel(cmdarg_T *cap)adjust_for_sel6712,162688
unadjust_for_sel(void)unadjust_for_sel6731,163161
nv_select(cmdarg_T *cap)nv_select6763,163714
nv_goto(cmdarg_T *cap)nv_goto6781,163998
nv_normal(cmdarg_T *cap)nv_normal6811,164637
nv_esc(cmdarg_T *cap)nv_esc6841,165328
set_cursor_for_append_to_line(void)set_cursor_for_append_to_line6901,166678
nv_edit(cmdarg_T *cap)nv_edit6923,167170
invoke_edit(invoke_edit7056,170571
nv_object(nv_object7087,171324
nv_record(cmdarg_T *cap)nv_record7174,173673
nv_at(cmdarg_T *cap)nv_at7204,174305
nv_halfpage(cmdarg_T *cap)nv_halfpage7230,174720
nv_join(cmdarg_T *cap)nv_join7244,175070
nv_put(cmdarg_T *cap)nv_put7275,175809
nv_put_opt(cmdarg_T *cap, int fix_indent)nv_put_opt7285,175979
nv_open(cmdarg_T *cap)nv_open7434,180063
nv_nbcmd(cmdarg_T *cap)nv_nbcmd7457,180526
nv_drop(cmdarg_T *cap UNUSED)nv_drop7465,180631
nv_cursorhold(cmdarg_T *cap)nv_cursorhold7477,180910

src/ops.c,2107
#define OPF_LINES OPF_LINES24,744
#define OPF_CHANGE OPF_CHANGE25,799
static char opchars[][3] =opchars32,978
get_op_type(int char1, int char2)get_op_type71,2470
op_on_lines(int op)op_on_lines100,3113
op_is_change(int op)op_is_change110,3286
get_op_char(int optype)get_op_char121,3476
get_extra_op_char(int optype)get_extra_op_char130,3593
op_shift(oparg_T *oap, int curs_top, int amount)op_shift139,3714
shift_line(shift_line225,6064
shift_block(oparg_T *oap, int amount)shift_block277,7117
block_insert(block_insert476,13276
stuffescaped(char_u *arg, int literally)stuffescaped598,16254
op_delete(oparg_T *oap)op_delete639,17111
mb_adjust_opend(oparg_T *oap)mb_adjust_opend1002,27338
replace_character(int c)replace_character1018,27624
op_replace(oparg_T *oap, int c)op_replace1033,27845
op_tilde(oparg_T *oap)op_tilde1271,34138
swapchars(int op_type, pos_T *pos, int length)swapchars1388,37183
swapchar(int op_type, pos_T *pos)swapchar1418,37832
op_insert(oparg_T *oap, long count1)op_insert1483,39190
op_change(oparg_T *oap)op_change1684,45012
adjust_cursor_eol(void)adjust_cursor_eol1821,48627
skip_comment(skip_comment1855,49668
do_join(do_join1921,51355
same_leader(same_leader2179,58609
op_format(op_format2253,60373
op_formatexpr(oparg_T *oap)op_formatexpr2328,62443
fex_format(fex_format2341,62786
format_lines(format_lines2387,63867
ends_in_white(linenr_T lnum)ends_in_white2628,70642
fmt_check_par(fmt_check_par2650,71357
paragraph_start(linenr_T lnum)paragraph_start2685,72150
block_prep(block_prep2735,73836
op_addsub(op_addsub2880,77800
do_addsub(do_addsub3014,80997
x11_export_final_selection(void)x11_export_final_selection3442,90690
clear_oparg(oparg_T *oap)clear_oparg3520,92243
line_count_info(line_count_info3540,92919
cursor_pos_info(dict_T *dict)cursor_pos_info3589,93924
op_colon(oparg_T *oap)op_colon3855,101130
op_function(oparg_T *oap UNUSED)op_function3913,102517
get_op_vcol(get_op_vcol3963,103736
do_pending_operator(cmdarg_T *cap, int old_col, int gui_yank)do_pending_operator4033,105600

src/option.c,6619
#define IN_OPTION_CIN_OPTION_C34,1545
# define insecure_flag(insecure_flag46,1958
set_init_1(int clean_arg)set_init_174,3324
set_option_default(set_option_default527,15424
set_options_default(set_options_default610,17944
set_string_default_esc(char *name, char_u *val, int escape)set_string_default_esc642,18730
set_string_default(char *name, char_u *val)set_string_default665,19276
set_number_default(char *name, long val)set_number_default675,19470
set_local_options_default(win_T *wp, int do_buffer)set_local_options_default690,19859
free_all_options(void)free_all_options721,20542
set_init_2(void)set_init_2749,21232
set_init_3(void)set_init_3803,22835
set_helplang_default(char_u *lang)set_helplang_default988,27641
set_title_defaults(void)set_title_defaults1032,28761
ex_set(exarg_T *eap)ex_set1070,29644
do_set(do_set1106,30503
did_set_option(did_set_option2097,55513
string_to_key(char_u *arg, int multi_byte)string_to_key2128,56412
did_set_title(void)did_set_title2147,56869
set_options_bin(set_options_bin2162,57067
option_expand(int opt_idx, char_u *val)option_expand2233,58764
didset_options(void)didset_options2270,59850
didset_options2(void)didset_options22298,60411
check_options(void)check_options2326,61099
get_term_opt_idx(char_u **p)get_term_opt_idx2340,61462
set_term_option_alloced(char_u **p)set_term_option_alloced2355,61836
was_set_insecurely(char_u *opt, int opt_flags)was_set_insecurely2371,62198
insecure_flag(int opt_idx, int opt_flags)insecure_flag2390,62634
void redraw_titles(void)redraw_titles2425,63477
valid_name(char_u *val, char *allowed)valid_name2437,63702
set_option_sctx_idx(int opt_idx, int opt_flags, sctx_T script_ctx)set_option_sctx_idx2453,64057
set_term_option_sctx_idx(char *name, int opt_idx)set_term_option_sctx_idx2480,64942
apply_optionset_autocmd(apply_optionset_autocmd2506,65359
set_bool_option(set_bool_option2561,67222
set_num_option(set_num_option3149,81369
check_redraw(long_u flags)check_redraw3706,93088
findoption(char_u *arg)findoption3732,93738
get_option_value(get_option_value3808,95566
get_option_value_strict(get_option_value_strict3906,98047
option_iter_next(void **option, int opt_type)option_iter_next4041,100904
get_option_flags(int opt_idx)get_option_flags4094,101853
set_option_flag(int opt_idx, long_u flag)set_option_flag4103,101982
clear_option_flag(int opt_idx, long_u flag)clear_option_flag4112,102126
is_global_option(int opt_idx)is_global_option4121,102289
is_global_local_option(int opt_idx)is_global_local_option4131,102480
is_window_local_option(int opt_idx)is_window_local_option4140,102649
is_hidden_option(int opt_idx)is_hidden_option4149,102811
is_crypt_key_option(int opt_idx)is_crypt_key_option4159,103009
set_option_value(set_option_value4172,103277
get_term_code(char_u *tname)get_term_code4265,105299
get_highlight_default(void)get_highlight_default4284,105685
get_encoding_default(void)get_encoding_default4295,105862
find_key_option(char_u *arg_arg, int has_lt)find_key_option4311,106226
showoptions(showoptions4340,106945
#define INC INC4356,107235
#define GAP GAP4357,107250
optval_default(struct vimoption *p, char_u *varp, int compatible)optval_default4455,109537
showoneopt(showoneopt4477,110217
makeset(FILE *fd, int opt_flags, int local_only)makeset4533,111988
makefoldset(FILE *fd)makefoldset4651,115126
put_setstring(put_setstring4674,115851
put_setnum(put_setnum4760,117858
put_setbool(put_setbool4784,118331
clear_termoptions(void)clear_termoptions4804,118757
free_termoptions(void)free_termoptions4827,119467
free_one_termoption(char_u *var)free_one_termoption4855,120225
set_term_defaults(void)set_term_defaults4875,120642
istermoption(struct vimoption *p)istermoption4902,121208
istermoption_idx(int opt_idx)istermoption_idx4911,121383
unset_global_local_option(char_u *name, void *from)unset_global_local_option4921,121599
get_varp_scope(struct vimoption *p, int opt_flags)get_varp_scope5031,123929
get_option_varp_scope(int opt_idx, int opt_flags)get_option_varp_scope5092,125982
get_varp(struct vimoption *p)get_varp5101,126158
get_option_var(int opt_idx)get_option_var5354,135374
get_option_fullname(int opt_idx)get_option_fullname5363,135511
get_equalprg(void)get_equalprg5372,135696
win_copy_options(win_T *wp_from, win_T *wp_to)win_copy_options5384,135886
after_copy_winopt(win_T *wp UNUSED)after_copy_winopt5395,136182
copy_winopt(winopt_T *from, winopt_T *to)copy_winopt5413,136659
check_win_options(win_T *win)check_win_options5504,139202
check_winopt(winopt_T *wop UNUSED)check_winopt5514,139413
clear_winopt(winopt_T *wop UNUSED)clear_winopt5559,140464
static int buf_opt_idx[BV_COUNT];buf_opt_idx5602,141532
# define COPY_OPT_SCTX(COPY_OPT_SCTX5603,141566
init_buf_opt_idx(void)init_buf_opt_idx5609,141733
# define COPY_OPT_SCTX(COPY_OPT_SCTX5622,142020
buf_copy_options(buf_T *buf, int flags)buf_copy_options5635,142410
reset_modifiable(void)reset_modifiable5971,152220
set_iminsert_global(void)set_iminsert_global5986,152499
set_imsearch_global(void)set_imsearch_global5995,152644
static int expand_option_idx = -1;expand_option_idx6000,152714
static char_u expand_option_name[5] = {'t', '_', NUL, NUL, NUL};expand_option_name6001,152749
static int expand_option_flags = 0;expand_option_flags6002,152814
set_context_in_set_cmd(set_context_in_set_cmd6005,152860
ExpandSettings(ExpandSettings6212,157218
ExpandOldSetting(int *num_file, char_u ***file)ExpandOldSetting6373,160887
option_value2string(option_value2string6434,162417
wc_use_keyname(char_u *varp, long *wcp)wc_use_keyname6479,163630
has_format_option(int x)has_format_option6495,163991
shortmess(int x)shortmess6507,164236
paste_option_changed(void)paste_option_changed6519,164501
vimrc_found(char_u *fname, char_u *envname)vimrc_found6690,168787
change_compatible(int on)change_compatible6728,169552
option_was_set(char_u *name)option_was_set6747,169877
reset_option_was_set(char_u *name)reset_option_was_set6763,170142
compatible_set(void)compatible_set6784,170652
fill_breakat_flags(void)fill_breakat_flags6802,171089
can_bs(can_bs6820,171366
get_scrolloff_value(void)get_scrolloff_value6841,171811
get_sidescrolloff_value(void)get_sidescrolloff_value6851,172027
get_bkc_value(buf_T *buf)get_bkc_value6860,172197
get_showbreak_value(win_T *win)get_showbreak_value6870,172403
get_winbuf_options(int bufopt)get_winbuf_options6885,172706
fill_culopt_flags(char_u *val, win_T *wp)fill_culopt_flags6924,173473

src/optionstr.c,4539
static char *(p_ambw_values[]) = {"single", "double", NULL};p_ambw_values16,355
static char *(p_bg_values[]) = {"light", "dark", NULL};p_bg_values17,416
static char *(p_bkc_values[]) = {"yes", "auto", "no", "breaksymlink", "breakhardlink", NULL};p_bkc_values18,472
static char *(p_bo_values[]) = {"all", "backspace", "cursor", "complete",p_bo_values19,566
static char *(p_nf_values[]) = {"bin", "octal", "hex", "alpha", NULL};p_nf_values24,813
static char *(p_ff_values[]) = {FF_UNIX, FF_DOS, FF_MAC, NULL};p_ff_values25,884
static char *(p_cm_values[]) = {"zip", "blowfish", "blowfish2", NULL};p_cm_values27,966
static char *(p_cmp_values[]) = {"internal", "keepascii", NULL};p_cmp_values29,1044
static char *(p_dy_values[]) = {"lastline", "truncate", "uhex", NULL};p_dy_values30,1109
static char *(p_fdo_values[]) = {"all", "block", "hor", "mark", "percent",p_fdo_values32,1200
static char *(p_ssop_values[]) = {"buffers", "winpos", "resize", "winsize",p_ssop_values38,1406
static char *(p_swb_values[]) = {"useopen", "usetab", "split", "newtab", "vsplit", "uselast", NULL};p_swb_values43,1683
static char *(p_tc_values[]) = {"followic", "ignore", "match", "followscs", "smart", NULL};p_tc_values44,1784
static char *(p_toolbar_values[]) = {"text", "icons", "tooltips", "horiz", NULL};p_toolbar_values46,1930
static char *(p_tbis_values[]) = {"tiny", "small", "medium", "large", "huge", "giant", NULL};p_tbis_values49,2070
static char *(p_ttym_values[]) = {"xterm", "xterm2", "dec", "netterm", "jsbterm", "pterm", "urxvt", "sgr", NULL};p_ttym_values52,2205
static char *(p_ve_values[]) = {"block", "insert", "all", "onemore", NULL};p_ve_values54,2326
static char *(p_wop_values[]) = {"tagfile", NULL};p_wop_values55,2402
static char *(p_wak_values[]) = {"yes", "menu", "no", NULL};p_wak_values57,2469
static char *(p_mousem_values[]) = {"extend", "popup", "popup_setpos", "mac", NULL};p_mousem_values59,2537
static char *(p_sel_values[]) = {"inclusive", "exclusive", "old", NULL};p_sel_values60,2622
static char *(p_slm_values[]) = {"mouse", "key", "cmd", NULL};p_slm_values61,2695
static char *(p_km_values[]) = {"startsel", "stopsel", NULL};p_km_values62,2758
static char *(p_bsdir_values[]) = {"current", "last", "buffer", NULL};p_bsdir_values64,2839
static char *(p_scbopt_values[]) = {"ver", "hor", "jump", NULL};p_scbopt_values66,2917
static char *(p_debug_values[]) = {"msg", "throw", "beep", NULL};p_debug_values67,2982
static char *(p_ead_values[]) = {"both", "ver", "hor", NULL};p_ead_values68,3048
static char *(p_buftype_values[]) = {"nofile", "nowrite", "quickfix", "help", "terminal", "acwrite", "prompt", "popup", NULL};p_buftype_values69,3110
static char *(p_bufhidden_values[]) = {"hide", "unload", "delete", "wipe", NULL};p_bufhidden_values70,3237
static char *(p_bs_values[]) = {"indent", "eol", "start", NULL};p_bs_values71,3319
static char *(p_fdm_values[]) = {"manual", "expr", "marker", "indent", "syntax",p_fdm_values73,3404
static char *(p_fcl_values[]) = {"all", NULL};p_fcl_values78,3534
static char *(p_cot_values[]) = {"menu", "menuone", "longest", "preview", "popup", "popuphidden", "noinsert", "noselect", NULL};p_cot_values80,3588
static char *(p_csl_values[]) = {"slash", "backslash", NULL};p_csl_values82,3746
static char *(p_scl_values[]) = {"yes", "no", "auto", "number", NULL};p_scl_values85,3833
static char *(p_twt_values[]) = {"winpty", "conpty", "", NULL};p_twt_values88,3956
didset_string_options(void)didset_string_options99,4291
trigger_optionsset_string(trigger_optionsset_string138,5765
illegal_char(char *errbuf, int c)illegal_char187,7185
check_buf_options(buf_T *buf)check_buf_options200,7440
free_string_option(char_u *p)free_string_option305,10499
clear_string_option(char_u **pp)clear_string_option312,10584
check_string_option(char_u **pp)check_string_option320,10700
set_string_option_global(set_string_option_global330,10867
set_string_option_direct(set_string_option_direct359,11680
set_string_option_direct_in_win(set_string_option_direct_in_win432,13405
set_string_option_direct_in_buf(set_string_option_direct_in_buf456,13946
set_string_option(set_string_option481,14470
valid_filetype(char_u *val)valid_filetype560,16485
check_stl_option(char_u *s)check_stl_option571,16690
did_set_string_option(did_set_string_option642,17941
check_opt_strings(check_opt_strings2430,59222
opt_strings_flags(opt_strings_flags2446,59599
check_ff_value(char_u *p)check_ff_value2483,60351

src/os_amiga.c,3849
# undef Window	Window20,391
#undef TRUE	TRUE23,453
#undef FALSEFALSE24,503
# define	free_fib(free_fib51,1169
# define	free_fib(free_fib53,1222
static const char* __attribute__((used)) stackcookie = "$STACK: 1048576";stackcookie68,1617
unsigned long __stack = 1048576;__stack70,1739
#undef	TRUETRUE76,1866
#define TRUE TRUE77,1878
#undef	FALSEFALSE78,1895
#define FALSE FALSE79,1908
# define	dos_packet(dos_packet82,1947
static BPTR		raw_in = (BPTR)NULL;raw_in91,2298
static BPTR		raw_out = (BPTR)NULL;raw_out92,2332
static int		close_win = FALSE;  // set if Vim opened the windowclose_win93,2367
struct IntuitionBase	*IntuitionBase = NULL;IntuitionBase97,2556
struct ArpBase		*ArpBase = NULL;ArpBase100,2623
static struct Window	*wb_window;wb_window103,2664
static char_u		*oldwindowtitle = NULL;oldwindowtitle104,2697
int			dos2 = FALSE;	    // Amiga DOS 2.0x or higherdos2107,2753
int			size_set = FALSE;   // set to TRUE if window size was setsize_set109,2812
static char version[] __attribute__((used)) =version112,2893
win_resize_on(void)win_resize_on123,3083
win_resize_off(void)win_resize_off129,3145
mch_write(char_u *p, int len)mch_write135,3208
mch_inchar(mch_inchar150,3562
mch_char_avail(void)mch_char_avail205,4770
mch_avail_mem(int special)mch_avail_mem214,4912
mch_delay(long msec, int ignoreinput)mch_delay228,5258
mch_suspend(void)mch_suspend247,5622
# define DOS_LIBRARY	DOS_LIBRARY253,5686
mch_init(void)mch_init257,5749
#define BUF2SIZE BUF2SIZE317,7390
mch_check_win(int argc, char **argv)mch_check_win320,7476
mch_input_isatty(void)mch_input_isatty557,13234
fname_case(fname_case569,13491
get_fib(char_u *fname)get_fib597,14141
mch_settitle(char_u *title, char_u *icon)mch_settitle629,14757
mch_restore_title(int which)mch_restore_title643,15153
mch_can_restore_title(void)mch_can_restore_title650,15268
mch_can_restore_icon(void)mch_can_restore_icon656,15341
mch_setmouse(int on UNUSED)mch_setmouse663,15407
mch_get_user_name(char_u *s, int len)mch_get_user_name672,15509
mch_get_host_name(char_u *s, int len)mch_get_host_name691,15892
mch_get_pid(void)mch_get_pid704,16096
mch_dirname(char_u *buf, int len)mch_dirname720,16490
mch_FullName(mch_FullName731,16710
mch_isFullName(char_u *fname)mch_isFullName780,17906
lock2name(BPTR lock, char_u *buf, long len)lock2name792,18208
mch_getperm(char_u *name)mch_getperm809,18598
mch_setperm(char_u *name, long perm)mch_setperm829,18918
mch_hide(char_u *name)mch_hide839,19124
mch_isdir(char_u *name)mch_isdir850,19305
mch_mkdir(char_u *name)mch_mkdir872,19672
mch_can_exe(char_u *name, char_u **path, int use_path)mch_can_exe891,19971
mch_nodetype(char_u *name)mch_nodetype904,20240
mch_early_init(void)mch_early_init911,20317
mch_exit(int r)mch_exit919,20415
#define MP(MP965,21437
mch_settmode(int tmode)mch_settmode980,22046
mch_get_shellsize(void)mch_get_shellsize1012,22708
mch_set_shellsize(void)mch_set_shellsize1086,24511
mch_new_shellsize(void)mch_new_shellsize1105,24769
out_num(long n)out_num1114,24883
dos_packet(dos_packet1144,25689
mch_call_shell(mch_call_shell1196,27074
mch_breakcheck(int force)mch_breakcheck1405,31184
#define Chk_Abort Chk_Abort1416,31562
void __regargs __chkabort(void)__chkabort1422,31646
Chk_Abort(void)Chk_Abort1427,31697
# define	ANCHOR_BUF_SIZE	ANCHOR_BUF_SIZE1447,32150
# define ANCHOR_BUF_SIZE ANCHOR_BUF_SIZE1449,32186
# define ANCHOR_SIZE ANCHOR_SIZE1450,32217
mch_expandpath(mch_expandpath1454,32300
sortcmp(const void *a, const void *b)sortcmp1575,34747
mch_has_exp_wildcard(char_u *p)mch_has_exp_wildcard1587,34968
mch_has_wildcard(char_u *p)mch_has_wildcard1600,35187
mch_getenv(char_u *var)mch_getenv1628,35776
mch_setenv(char *var, char *value, int x)mch_setenv1670,36562

src/os_beos.c,516
#define sem_id sem_id25,584
#define thread_id thread_id26,603
char_u charbuf;charbuf29,633
signed char charcount;charcount30,649
sem_id character_present;character_present31,672
sem_id character_wanted;character_wanted32,698
thread_id read_thread_id;read_thread_id33,723
#define TRY_ABORT	TRY_ABORT35,750
mostly_ignore(int sig)mostly_ignore39,844
read_thread(void *dummy)read_thread45,895
beos_cleanup_read_thread(void)beos_cleanup_read_thread64,1227
beos_select(int nbits,beos_select83,1647

src/os_mac_conv.c,845
#define NO_X11_INCLUDESNO_X11_INCLUDES16,489
typedef int UniChar;UniChar29,752
typedef int *TECObjectRef;TECObjectRef30,773
typedef int CFStringRef;CFStringRef31,800
static TECObjectRef gPathConverter;gPathConverter38,1065
static TECObjectRef gUTF16ToUTF8Converter;gUTF16ToUTF8Converter40,1140
mac_string_convert(mac_string_convert46,1264
macroman2enc(macroman2enc182,4495
enc2macroman(enc2macroman228,5571
mac_conv_init(void)mac_conv_init276,6612
mac_conv_cleanup(void)mac_conv_cleanup311,7809
mac_utf16_to_enc(mac_utf16_to_enc332,8267
mac_enc_to_utf16(mac_enc_to_utf16386,9603
mac_enc_to_cfstring(mac_enc_to_cfstring445,10873
mac_precompose_path(mac_precompose_path467,11325
mac_utf16_to_utf8(mac_utf16_to_utf8497,11854
mac_utf8_to_utf16(mac_utf8_to_utf16534,12595
mac_lang_init(void)mac_lang_init569,13326

src/os_mswin.c,11386
#undef chdirchdir25,450
#  define FROM_LEFT_1ST_BUTTON_PRESSED FROM_LEFT_1ST_BUTTON_PRESSED49,871
#  define RIGHTMOST_BUTTON_PRESSED	RIGHTMOST_BUTTON_PRESSED52,962
#  define FROM_LEFT_2ND_BUTTON_PRESSED FROM_LEFT_2ND_BUTTON_PRESSED55,1052
#  define FROM_LEFT_3RD_BUTTON_PRESSED FROM_LEFT_3RD_BUTTON_PRESSED58,1147
#  define FROM_LEFT_4TH_BUTTON_PRESSED FROM_LEFT_4TH_BUTTON_PRESSED61,1242
#  define MOUSE_MOVED MOUSE_MOVED68,1342
#  define DOUBLE_CLICK DOUBLE_CLICK71,1403
# define WINAPIWINAPI80,1601
# define WINBASEAPIWINBASEAPI81,1617
typedef int BOOL;BOOL82,1637
typedef int CALLBACK;CALLBACK83,1655
typedef int COLORREF;COLORREF84,1677
typedef int CONSOLE_CURSOR_INFO;CONSOLE_CURSOR_INFO85,1699
typedef int COORD;COORD86,1732
typedef int DWORD;DWORD87,1751
typedef int ENUMLOGFONTW;ENUMLOGFONTW88,1770
typedef int HANDLE;HANDLE89,1796
typedef int HDC;HDC90,1816
typedef int HFONT;HFONT91,1833
typedef int HICON;HICON92,1852
typedef int HWND;HWND93,1871
typedef int INPUT_RECORD;INPUT_RECORD94,1889
typedef int KEY_EVENT_RECORD;KEY_EVENT_RECORD95,1915
typedef int LOGFONTW;LOGFONTW96,1945
typedef int LPARAM;LPARAM97,1967
typedef int LPBOOL;LPBOOL98,1987
typedef int LPCSTR;LPCSTR99,2007
typedef int LPCWSTR;LPCWSTR100,2027
typedef int LPDWORD;LPDWORD101,2048
typedef int LPSTR;LPSTR102,2069
typedef int LPTSTR;LPTSTR103,2088
typedef int LPVOID;LPVOID104,2108
typedef int LPWSTR;LPWSTR105,2128
typedef int LRESULT;LRESULT106,2148
typedef int MOUSE_EVENT_RECORD;MOUSE_EVENT_RECORD107,2169
typedef int NEWTEXTMETRICW;NEWTEXTMETRICW108,2201
typedef int PACL;PACL109,2229
typedef int PRINTDLGW;PRINTDLGW110,2247
typedef int PSECURITY_DESCRIPTOR;PSECURITY_DESCRIPTOR111,2270
typedef int PSID;PSID112,2304
typedef int SECURITY_INFORMATION;SECURITY_INFORMATION113,2322
typedef int SHORT;SHORT114,2356
typedef int SMALL_RECT;SMALL_RECT115,2375
typedef int TEXTMETRIC;TEXTMETRIC116,2399
typedef int UINT;UINT117,2423
typedef int WCHAR;WCHAR118,2441
typedef int WNDENUMPROC;WNDENUMPROC119,2460
typedef int WORD;WORD120,2485
typedef int WPARAM;WPARAM121,2503
typedef void VOID;VOID122,2523
FILE* fdDump = NULL;fdDump129,2651
static HWND s_hwnd = 0;	    // console window handle, set by GetConsoleHwnd()s_hwnd139,2807
int WSInitialized = FALSE; // WinSock is initializedWSInitialized143,2917
int _stricoll(char *a, char *b)_stricoll150,3124
char * _fullpath(char *buf, char *fname, int len)_fullpath159,3386
int _chdrive(int drive)_chdrive168,3572
SaveInst(HINSTANCE hInst)SaveInst183,3787
mch_exit_g(int r)mch_exit_g196,4032
mch_early_init(void)mch_early_init235,4538
mch_input_isatty(void)mch_input_isatty253,4887
mch_settitle(mch_settitle273,5225
mch_restore_title(int which UNUSED)mch_restore_title310,5875
mch_can_restore_title(void)mch_can_restore_title325,6120
mch_can_restore_icon(void)mch_can_restore_icon335,6245
mch_FullName(mch_FullName350,6616
mch_isFullName(char_u *fname)mch_isFullName388,7285
slash_adjust(char_u *p)slash_adjust418,8471
# undef statstat442,8842
# undef _stat_stat443,8855
# undef _wstat_wstat444,8869
# undef _fstat_fstat445,8884
# define stat stat446,8899
# define _stat _stat447,8921
# define _wstat _wstat448,8944
# define _fstat _fstat449,8969
# define OPEN_OH_ARGTYPE OPEN_OH_ARGTYPE453,9072
# define OPEN_OH_ARGTYPE OPEN_OH_ARGTYPE455,9112
wstat_symlink_aware(const WCHAR *name, stat_T *stp)wstat_symlink_aware459,9165
vim_stat(const char *name, stat_T *stp)vim_stat514,10847
mch_settmode(int tmode UNUSED)mch_settmode556,11895
mch_get_shellsize(void)mch_get_shellsize562,11960
mch_set_shellsize(void)mch_set_shellsize569,12031
mch_new_shellsize(void)mch_new_shellsize578,12130
mch_suspend(void)mch_suspend589,12264
#  undef display_errorsdisplay_errors597,12378
display_errors(void)display_errors604,12466
mch_has_exp_wildcard(char_u *p)mch_has_exp_wildcard645,13265
mch_has_wildcard(char_u *p)mch_has_wildcard661,13576
mch_chdir(char *path)mch_chdir684,13974
mch_char_avail(void)mch_char_avail725,14792
mch_check_messages(void)mch_check_messages736,14958
typedef LPTSTR (*MYSTRPROCSTR)(LPTSTR);MYSTRPROCSTR751,15243
typedef LPTSTR (*MYINTPROCSTR)(int);MYINTPROCSTR752,15283
typedef int (*MYSTRPROCINT)(LPTSTR);MYSTRPROCINT753,15320
typedef int (*MYINTPROCINT)(int);MYINTPROCINT754,15357
check_str_len(char_u *str)check_str_len762,15603
mch_icon_load_cb(char_u *fname, void *cookie)mch_icon_load_cb800,16501
mch_icon_load(HANDLE *iconp)mch_icon_load816,16773
mch_libcall(mch_libcall823,16910
DumpPutS(const char *psz UNUSED)DumpPutS915,19035
Trace(Trace931,19257
GetConsoleHwnd(void)GetConsoleHwnd958,19815
mch_get_winpos(int *x, int *y)mch_get_winpos980,20153
mch_set_winpos(int x, int y)mch_set_winpos995,20376
static HFONT		prt_font_handles[2][2][2];prt_font_handles1008,20698
static PRINTDLGW	prt_dlg;prt_dlg1009,20739
static const int	boldface[2] = {FW_REGULAR, FW_BOLD};boldface1010,20765
static TEXTMETRIC	prt_tm;prt_tm1011,20819
static int		prt_line_height;prt_line_height1012,20845
static int		prt_number_width;prt_number_width1013,20874
static int		prt_left_margin;prt_left_margin1014,20904
static int		prt_right_margin;prt_right_margin1015,20933
static int		prt_top_margin;prt_top_margin1016,20963
static char_u		szAppName[] = TEXT("VIM");szAppName1017,20991
static HWND		hDlgPrint;hDlgPrint1018,21033
static int		*bUserAbort = NULL;bUserAbort1019,21057
static char_u		*prt_name = NULL;prt_name1020,21089
# define IDC_BOX1	IDC_BOX11023,21160
# define IDC_PRINTTEXT1	IDC_PRINTTEXT11024,21183
# define IDC_PRINTTEXT2	IDC_PRINTTEXT21025,21212
# define IDC_PROGRESS	IDC_PROGRESS1026,21241
vimSetDlgItemText(HWND hDlg, int nIDDlgItem, char_u *s)vimSetDlgItemText1029,21285
swap_me(COLORREF colorref)swap_me1047,21603
#  define PDP_RETVAL PDP_RETVAL1060,21895
#  define PDP_RETVAL PDP_RETVAL1062,21928
PrintDlgProc(PrintDlgProc1066,21997
AbortProc(HDC hdcPrn UNUSED, int iCode UNUSED)AbortProc1134,23579
PrintHookProc(PrintHookProc1152,23944
mch_print_cleanup(void)mch_print_cleanup1206,25331
to_device_units(int idx, int dpi, int physsize, int offset, int def_number)to_device_units1224,25781
prt_get_cpl(void)prt_get_cpl1262,26416
prt_get_lpp(void)prt_get_lpp1296,27329
mch_print_init(prt_settings_T *psettings, char_u *jobname, int forceit)mch_print_init1324,28063
mch_print_begin(prt_settings_T *psettings)mch_print_begin1548,34126
mch_print_end(prt_settings_T *psettings UNUSED)mch_print_end1584,34929
mch_print_end_page(void)mch_print_end_page1592,35080
mch_print_begin_page(char_u *msg)mch_print_begin_page1598,35157
mch_print_blank_page(void)mch_print_blank_page1606,35316
static int prt_pos_x = 0;prt_pos_x1611,35422
static int prt_pos_y = 0;prt_pos_y1612,35448
mch_print_start_line(int margin, int page_line)mch_print_start_line1615,35484
mch_print_text_out(char_u *p, int len)mch_print_text_out1626,35713
mch_print_set_font(int iBold, int iItalic, int iUnderline)mch_print_set_font1658,36458
mch_print_set_bg(long_u bgcol)mch_print_set_bg1664,36608
mch_print_set_fg(long_u fgcol)mch_print_set_fg1679,37017
typedef BOOL (WINAPI *pfnGetFinalPathNameByHandleW)(pfnGetFinalPathNameByHandleW1694,37286
static pfnGetFinalPathNameByHandleW pGetFinalPathNameByHandleW = NULL;pGetFinalPathNameByHandleW1699,37413
# define is_path_sep(is_path_sep1701,37485
is_reparse_point_included(LPCWSTR fname)is_reparse_point_included1704,37559
resolve_reparse_point(char_u *fname)resolve_reparse_point1735,38220
resolve_shortcut(char_u *fname)resolve_shortcut1810,39823
mch_resolve_path(char_u *fname, int reparse_point)mch_resolve_path1881,41694
win32_set_foreground(void)win32_set_foreground1896,42076
HWND message_window = 0;	    // window that's handling messagesmessage_window1917,42664
# define VIM_CLASSNAME VIM_CLASSNAME1919,42729
# define VIM_CLASSNAME_LEN VIM_CLASSNAME_LEN1920,42772
# define COPYDATA_KEYS	COPYDATA_KEYS1924,42952
# define COPYDATA_REPLY	COPYDATA_REPLY1925,42978
# define COPYDATA_EXPR	COPYDATA_EXPR1926,43005
# define COPYDATA_RESULT	COPYDATA_RESULT1927,43032
# define COPYDATA_ERROR_RESULT	COPYDATA_ERROR_RESULT1928,43060
# define COPYDATA_ENCODING	COPYDATA_ENCODING1929,43094
struct server_idserver_id1932,43187
    HWND hwnd;hwnd1934,43206
    char_u *name;name1935,43221
static char_u	*client_enc = NULL;client_enc1939,43293
serverSendEnc(HWND target)serverSendEnc1946,43425
CleanUpMessaging(void)CleanUpMessaging1961,43771
Messaging_WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)Messaging_WndProc1983,44511
serverInitMessaging(void)serverInitMessaging2126,48473
static char_u *altname_buf_ptr = NULL;altname_buf_ptr2158,49437
getVimServerName(HWND hwnd, char *name, int namelen)getVimServerName2166,49667
enumWindowsGetServer(HWND hwnd, LPARAM lparam)enumWindowsGetServer2181,50080
enumWindowsGetNames(HWND hwnd, LPARAM lparam)enumWindowsGetNames2211,50858
struct enum_windows_senum_windows_s2226,51208
    WNDENUMPROC lpEnumFunc;lpEnumFunc2228,51232
    LPARAM      lParam;lParam2229,51260
enum_windows_child(HWND hwnd, LPARAM lParam)enum_windows_child2233,51313
enum_windows_toplevel(HWND hwnd, LPARAM lParam)enum_windows_toplevel2241,51501
enum_windows(WNDENUMPROC lpEnumFunc, LPARAM lParam)enum_windows2254,51809
findServer(char_u *name)findServer2264,52029
serverSetName(char_u *name)serverSetName2277,52208
serverGetVimNames(void)serverGetVimNames2327,53201
serverSendReply(serverSendReply2340,53387
serverSendToVim(serverSendToVim2372,54150
serverForeground(char_u *name)serverForeground2436,55898
    HWND	server;		// server windowserver2453,56447
    char_u	*reply;		// reply stringreply2454,56482
    int		expr_result;	// 0 for REPLY, 1 for RESULT 2 for errorexpr_result2455,56518
} reply_T;reply_T2456,56581
static garray_T reply_list = {0, 0, sizeof(reply_T), 5, 0};reply_list2458,56593
# define REPLY_ITEM(REPLY_ITEM2460,56654
# define REPLY_COUNT REPLY_COUNT2461,56717
static int reply_received = 0;reply_received2464,56801
save_reply(HWND server, char_u *reply, int expr)save_reply2470,56918
serverGetReply(HWND server, int *expr_res, int remove, int wait, int timeout)serverGetReply2498,57634
serverProcessPendingMessages(void)serverProcessPendingMessages2589,59871
struct charset_paircharset_pair2605,60170
    char	*name;name2607,60192
    BYTE	charset;charset2608,60208
charset_pairs[] =charset_pairs2612,60257
struct quality_pairquality_pair2638,60968
    char	*name;name2640,60990
    DWORD	quality;quality2641,61006
quality_pairs[] = {quality_pairs2645,61056
charset_id2name(int id)charset_id2name2670,61578
quality_id2name(DWORD id)quality_id2name2685,61842
static const LOGFONTW s_lfDefault =s_lfDefault2695,62013
int current_font_height = -12;		// also used in gui_w32.ccurrent_font_height2707,62503
points_to_pixels(WCHAR *str, WCHAR **end, int vertical, long_i pprinter_dc)points_to_pixels2717,62964
font_enumproc(font_enumproc2768,63833
init_logfont(LOGFONTW *lf)init_logfont2806,64910
utf16ascncmp(const WCHAR *w, const char *p, size_t n)utf16ascncmp2842,65748
get_logfont(get_logfont2859,66043
channel_init_winsock(void)channel_init_winsock3035,69725

src/os_qnx.c,523
int is_photon_available;is_photon_available19,320
void qnx_init(void)qnx_init22,353
#define CLIP_TYPE_VIM CLIP_TYPE_VIM36,671
#define CLIP_TYPE_TEXT CLIP_TYPE_TEXT37,703
void qnx_clip_init(void)qnx_clip_init40,800
clip_mch_own_selection(Clipboard_T *cbd)clip_mch_own_selection51,1035
clip_mch_lose_selection(Clipboard_T *cbd)clip_mch_lose_selection57,1104
clip_mch_request_selection(Clipboard_T *cbd)clip_mch_request_selection62,1156
clip_mch_set_selection(Clipboard_T *cbd)clip_mch_set_selection105,2256

src/os_unix.c,15350
static int selinux_enabled = -1;selinux_enabled35,872
#  define SMACK_LABEL_LEN SMACK_LABEL_LEN42,1007
# undef selectselect47,1070
# define select	select48,1085
#   define WIN32_LEAN_AND_MEANWIN32_LEAN_AND_MEAN57,1319
# define KG_SHIFT	KG_SHIFT70,1705
# define KG_CTRL	KG_CTRL71,1725
# define KG_ALT	KG_ALT72,1744
# define KG_ALTGR	KG_ALTGR73,1763
# define KG_SHIFTL	KG_SHIFTL74,1783
# define KG_SHIFTR	KG_SHIFTR75,1804
# define KG_CTRLL	KG_CTRLL76,1825
# define KG_CTRLR	KG_CTRLR77,1845
# define KG_CAPSSHIFT	KG_CAPSSHIFT78,1865
static RETSIGTYPE sig_sysmouse SIGPROTOARG;SIGPROTOARG91,2124
#  undef SIGWINCHSIGWINCH102,2373
#  undef TIOCGWINSZTIOCGWINSZ105,2418
# define SIGWINCH SIGWINCH110,2519
static Widget	xterm_Shell = (Widget)0;xterm_Shell121,2750
Window	    x11_window = 0;x11_window127,2914
Display	    *x11_display = NULL;x11_display129,2949
static char_u	*oldtitle = NULL;oldtitle135,3040
static volatile sig_atomic_t oldtitle_outdated = FALSE;oldtitle_outdated136,3072
static int	unix_did_set_title = FALSE;unix_did_set_title137,3128
static char_u	*oldicon = NULL;oldicon138,3167
static int	did_set_icon = FALSE;did_set_icon139,3198
typedef union wait waitstatus;waitstatus145,3296
typedef int waitstatus;waitstatus147,3333
# define XT_TRACE_DELAY	XT_TRACE_DELAY159,3746
static RETSIGTYPE sig_winch SIGPROTOARG;SIGPROTOARG165,3864
static RETSIGTYPE catch_sigint SIGPROTOARG;SIGPROTOARG168,3932
static RETSIGTYPE catch_sigpwr SIGPROTOARG;SIGPROTOARG171,4003
# define SET_SIG_ALARMSET_SIG_ALARM175,4148
static RETSIGTYPE sig_alarm SIGPROTOARG;SIGPROTOARG176,4171
static volatile sig_atomic_t sig_alarm_called;sig_alarm_called178,4274
static RETSIGTYPE deathtrap SIGPROTOARG;SIGPROTOARG180,4328
# define SIGSET_DECL(SIGSET_DECL186,4545
# define BLOCK_SIGNALS(BLOCK_SIGNALS187,4585
# define UNBLOCK_SIGNALS(UNBLOCK_SIGNALS188,4632
# define SIGSET_DECL(SIGSET_DECL190,4689
# define BLOCK_SIGNALS(BLOCK_SIGNALS191,4715
# define UNBLOCK_SIGNALS(UNBLOCK_SIGNALS192,4765
# define SIG_ERR	SIG_ERR200,5011
static volatile sig_atomic_t do_resize = FALSE;do_resize204,5121
static char_u	*extra_shell_arg = NULL;extra_shell_arg205,5169
static int	show_shell_mess = TRUE;show_shell_mess206,5208
static volatile sig_atomic_t deadly_signal = 0;	   // The signal we caughtdeadly_signal208,5305
static volatile sig_atomic_t in_mch_delay = FALSE; // sleeping in mch_delay()in_mch_delay210,5442
static int dont_check_job_ended = 0;dont_check_job_ended213,5575
static int curr_tmode = TMODE_COOK;	// contains current terminal modecurr_tmode216,5620
    SmcConn smcconn;	    // The SM connection IDsmcconn221,5724
    IceConn iceconn;	    // The ICE connection IDiceconn222,5773
    char *clientid;	    // The client ID for the current smc sessionclientid223,5823
    Bool save_yourself;     // If we're in the middle of a save_yourselfsave_yourself224,5892
    Bool shutdown;	    // If we're in shutdown modeshutdown225,5965
} xsmp_config_T;xsmp_config_T226,6017
static xsmp_config_T xsmp;xsmp228,6035
static struct signalinfosignalinfo243,6499
    int	    sig;	// Signal number, eg. SIGSEGV etcsig245,6526
    char    *name;	// Signal name (not char_u!).name246,6577
    char    deadly;	// Catch as a deadly signal?deadly247,6626
} signal_info[] =signal_info248,6675
mch_chdir(char *path)mch_chdir324,8360
# define NEW_TTY_SYSTEMNEW_TTY_SYSTEM343,8758
mch_write(char_u *s, int len)mch_write350,8846
resize_func(int check_only)resize_func363,9243
mch_inchar(mch_inchar381,9668
handle_resize(void)handle_resize392,9916
mch_char_avail(void)mch_char_avail402,10048
mch_check_messages(void)mch_check_messages412,10219
mch_total_mem(int special UNUSED)mch_total_mem438,10795
mch_delay(long msec, int ignoreinput)mch_delay580,14034
# define HAVE_CHECK_STACK_GROWTHHAVE_CHECK_STACK_GROWTH660,15772
static int stack_grows_downwards;stack_grows_downwards669,15985
check_stack_growth(char *p)check_stack_growth676,16152
static char *stack_limit = NULL;stack_limit685,16299
get_stack_limit(void)get_stack_limit698,16627
mch_stackcheck(char *p)mch_stackcheck752,18066
# define SIGSTKSZ SIGSTKSZ777,18569
static stack_t sigstk;			// for sigaltstack()sigstk781,18675
static struct sigstack sigstk;		// for sigstack()sigstk783,18728
static char *signal_stack;signal_stack786,18787
init_signal_stack(void)init_signal_stack789,18831
sig_winch SIGDEFARG(sigarg)SIGDEFARG820,19546
catch_sigint SIGDEFARG(sigarg)SIGDEFARG831,19788
catch_sigpwr SIGDEFARG(sigarg)SIGDEFARG842,20032
sig_alarm SIGDEFARG(sigarg)SIGDEFARG861,20548
# define USING_SETJMP USING_SETJMP873,20829
static JMP_BUF lc_jump_env;lc_jump_env876,20878
static volatile sig_atomic_t lc_signal;lc_signal881,21054
static volatile sig_atomic_t lc_active INIT(= FALSE);lc_active886,21200
mch_startjmp(void)mch_startjmp911,21860
mch_endjmp(void)mch_endjmp920,21967
mch_didjmp(void)mch_didjmp926,22028
deathtrap SIGDEFARG(sigarg)SIGDEFARG944,22524
after_sigcont(void)after_sigcont1112,26690
static RETSIGTYPE sigcont_handler SIGPROTOARG;SIGPROTOARG1125,26982
static volatile sig_atomic_t in_mch_suspend = FALSE;in_mch_suspend1126,27029
static volatile sig_atomic_t sigcont_received;sigcont_received1139,27511
static RETSIGTYPE sigcont_handler SIGPROTOARG;SIGPROTOARG1140,27558
sigcont_handler SIGDEFARG(sigarg)SIGDEFARG1146,27665
static void *clip_star_save = NULL;clip_star_save1170,28208
static void *clip_plus_save = NULL;clip_plus_save1171,28244
loose_clipboard(void)loose_clipboard1180,28528
save_clipboard(void)save_clipboard1199,28897
restore_clipboard(void)restore_clipboard1211,29139
mch_suspend(void)mch_suspend1238,29693
mch_init(void)mch_init1283,30991
set_signals(void)set_signals1300,31210
catch_int_signal(void)catch_int_signal1365,32528
reset_signals(void)reset_signals1372,32624
catch_signals(catch_signals1382,32831
block_signals(sigset_t *set)block_signals1428,34181
unblock_signals(sigset_t *set)unblock_signals1447,34558
vim_handle_signal(int sig)vim_handle_signal1463,34991
mch_check_win(int argc UNUSED, char **argv UNUSED)mch_check_win1497,35607
mch_input_isatty(void)mch_input_isatty1508,35794
xopen_message(long elapsed_msec)xopen_message1524,36077
static int	got_x_error = FALSE;got_x_error1536,36338
x_error_handler(Display *dpy, XErrorEvent *error_event)x_error_handler1542,36458
x_error_check(Display *dpy UNUSED, XErrorEvent *error_event UNUSED)x_error_check1559,36977
x_connect_to_server(void)x_connect_to_server1569,37169
x_IOerror_check(Display *dpy UNUSED)x_IOerror_check1603,38039
static int xterm_dpy_retry_count = 0;xterm_dpy_retry_count1616,38384
x_IOerror_handler(Display *dpy UNUSED)x_IOerror_handler1619,38438
may_restore_clipboard(void)may_restore_clipboard1640,39047
ex_xrestore(exarg_T *eap)ex_xrestore1663,39590
test_x11_window(Display *dpy)test_x11_window1690,40504
get_x11_windis(void)get_x11_windis1721,41146
#define XD_NONE	XD_NONE1725,41222
#define XD_HERE	XD_HERE1726,41269
#define XD_GUI	XD_GUI1727,41315
#define XD_XTERM XD_XTERM1728,41366
get_x11_title(int test_only)get_x11_title1884,45214
get_x11_icon(int test_only)get_x11_icon1893,45351
get_x11_thing(get_x11_thing1912,45716
#  define USE_UTF8_STRINGUSE_UTF8_STRING2015,48414
set_x11_title(char_u *title)set_x11_title2025,48574
set_x11_icon(char_u *icon)set_x11_icon2063,49672
get_x11_title(int test_only UNUSED)get_x11_title2095,50464
get_x11_icon(int test_only)get_x11_icon2101,50538
mch_can_restore_title(void)mch_can_restore_title2116,50773
mch_can_restore_icon(void)mch_can_restore_icon2122,50846
mch_settitle(char_u *title, char_u *icon)mch_settitle2131,50959
mch_restore_title(int which)mch_restore_title2232,53266
vim_is_xterm(char_u *name)vim_is_xterm2256,53875
use_xterm_like_mouse(char_u *name)use_xterm_like_mouse2276,54462
use_xterm_mouse(void)use_xterm_mouse2296,54922
vim_is_iris(char_u *name)vim_is_iris2310,55150
vim_is_vt300(char_u *name)vim_is_vt3002319,55323
vim_is_fastterm(char_u *name)vim_is_fastterm2334,55763
mch_get_user_name(char_u *s, int len)mch_get_user_name2352,56209
mch_get_uname(uid_t uid, char_u *s, int len)mch_get_uname2367,56475
mch_get_host_name(char_u *s, int len)mch_get_host_name2389,56967
#  define gethostname(gethostname2401,57203
mch_get_host_name(char_u *s, int len)mch_get_host_name2405,57284
mch_get_pid(void)mch_get_pid2420,57543
mch_process_running(long pid)mch_process_running2429,57657
strerror(int err)strerror2437,57841
mch_dirname(char_u *buf, int len)mch_dirname2456,58246
mch_FullName(mch_FullName2476,58593
mch_isFullName(char_u *fname)mch_isFullName2625,62077
fname_case(fname_case2644,62689
mch_getperm(char_u *name)mch_getperm2707,64011
mch_setperm(char_u *name, long perm)mch_setperm2732,64570
mch_fsetperm(int fd, long perm)mch_fsetperm2749,64896
typedef struct vim_acl_solaris_T {vim_acl_solaris_T2764,65176
    int acl_cnt;acl_cnt2765,65211
    aclent_t *acl_entry;acl_entry2766,65228
} vim_acl_solaris_T;vim_acl_solaris_T2767,65253
mch_copy_sec(char_u *from_file, char_u *to_file)mch_copy_sec2775,65396
mch_copy_sec(char_u *from_file, char_u *to_file)mch_copy_sec2829,66687
mch_get_acl(char_u *fname UNUSED)mch_get_acl2905,68657
mch_set_acl(char_u *fname UNUSED, vim_acl_T aclent)mch_set_acl2972,70124
mch_free_acl(vim_acl_T aclent)mch_free_acl2995,70737
mch_hide(char_u *name UNUSED)mch_hide3022,71226
mch_isdir(char_u *name)mch_isdir3033,71440
mch_isrealdir(char_u *name)mch_isrealdir3050,71836
executable_file(char_u *name)executable_file3065,72182
mch_can_exe(char_u *name, char_u **path, int use_path)mch_can_exe3098,73258
mch_nodetype(char_u *name)mch_nodetype3177,74885
mch_early_init(void)mch_early_init3192,75216
mch_free_mem(void)mch_free_mem3219,75776
exit_scroll(void)exit_scroll3266,76882
mch_exit(int r)mch_exit3291,77312
may_core_dump(void)may_core_dump3365,78919
get_tty_fd(int fd)get_tty_fd3380,79172
mch_tcgetattr(int fd, void *term)mch_tcgetattr3404,79630
mch_settmode(int tmode)mch_settmode3429,80104
get_stty(void)get_stty3539,82607
get_tty_info(int fd, ttyinfo_T *info)get_tty_info3564,83127
static int	mouse_ison = FALSE;mouse_ison3605,83869
mch_setmouse(int on)mch_setmouse3611,83948
mch_bevalterm_changed(void)mch_bevalterm_changed3785,87908
check_mouse_termcode(void)check_mouse_termcode3795,88069
mch_get_shellsize(void)mch_get_shellsize3952,91679
mch_report_winsize(int fd, int rows, int cols)mch_report_winsize4034,93462
mch_set_shellsize(void)mch_set_shellsize4072,94244
mch_new_shellsize(void)mch_new_shellsize4093,94667
wait4pid(pid_t child, waitstatus *status)wait4pid4103,94834
set_child_environment(set_child_environment4142,95746
set_default_child_environment(int is_terminal)set_default_child_environment4223,98132
open_pty(int *pty_master_fd, int *pty_slave_fd, char_u **name1, char_u **name2)open_pty4237,98564
may_send_sigint(int c UNUSED, pid_t pid UNUSED, pid_t wpid UNUSED)may_send_sigint4277,99501
unix_build_argv(unix_build_argv4301,100035
mch_call_shell_terminal(mch_call_shell_terminal4354,101117
mch_call_shell_system(mch_call_shell_system4420,102640
# define EXEC_FAILED EXEC_FAILED4506,104366
# define OPEN_NULL_FAILED OPEN_NULL_FAILED4508,104489
mch_call_shell_fork(mch_call_shell_fork4514,104626
# define BUFLEN BUFLEN4795,111882
mch_call_shell(mch_call_shell5338,125048
mch_job_start(char **argv, job_T *job, jobopt_T *options, int is_terminal)mch_job_start5355,125471
get_signal_name(int sig)get_signal_name5689,133926
mch_job_status(job_T *job)mch_job_status5706,134298
mch_detect_ended_job(job_T *job_list)mch_detect_ended_job5756,135515
mch_signal_job(job_T *job, char_u *how)mch_signal_job5810,136750
mch_clear_job(job_T *job)mch_clear_job5848,137509
mch_create_pty_channel(job_T *job, jobopt_T *options)mch_create_pty_channel5861,137804
mch_breakcheck(int force)mch_breakcheck5895,138774
WaitForChar(long msec, int *interrupted, int ignore_input)WaitForChar5915,139447
WaitForCharOrMouse(long msec, int *interrupted, int ignore_input)WaitForCharOrMouse5935,140092
RealWaitForChar(int fd, long msec, int *check_for_gpm UNUSED, int *interrupted)RealWaitForChar6035,142483
# define MAY_LOOPMAY_LOOP6043,142766
mch_expandpath(mch_expandpath6385,150622
# define SEEK_SET SEEK_SET6407,151195
# define SEEK_END SEEK_END6410,151239
#define SHELL_SPECIAL SHELL_SPECIAL6413,151267
mch_expand_wildcards(mch_expand_wildcards6416,151327
#define STYLE_ECHO	STYLE_ECHO6437,151701
#define STYLE_GLOB	STYLE_GLOB6438,151749
#define STYLE_VIMGLOB	STYLE_VIMGLOB6439,151793
#define STYLE_PRINT	STYLE_PRINT6440,151848
#define STYLE_BT	STYLE_BT6441,151897
save_patterns(save_patterns6914,164387
mch_has_exp_wildcard(char_u *p)mch_has_exp_wildcard6944,164953
mch_has_wildcard(char_u *p)mch_has_wildcard6968,165341
have_wildcard(int num, char_u **file)have_wildcard6989,165657
have_dollars(int num, char_u **file)have_dollars7000,165822
mch_rename(const char *src, const char *dest)mch_rename7017,166195
gpm_open(void)gpm_open7037,166729
gpm_enabled(void)gpm_enabled7070,167616
gpm_close(void)gpm_close7079,167726
mch_gpm_process(void)mch_gpm_process7091,167963
sysmouse_open(void)sysmouse_open7179,170396
sysmouse_close(void)sysmouse_close7201,170898
sig_sysmouse SIGDEFARG(sigarg)SIGDEFARG7216,171226
typedef char_u * (*STRPROCSTR)(char_u *);STRPROCSTR7279,172571
typedef char_u * (*INTPROCSTR)(int);INTPROCSTR7280,172613
typedef int (*STRPROCINT)(char_u *);STRPROCINT7281,172650
typedef int (*INTPROCINT)(int);INTPROCINT7282,172687
mch_libcall(mch_libcall7289,172834
static int	xterm_trace = -1;	// default: disabledxterm_trace7449,176409
static int	xterm_button;xterm_button7450,176459
setup_term_clip(void)setup_term_clip7456,176557
start_xterm_trace(int button)start_xterm_trace7567,178962
stop_xterm_trace(void)stop_xterm_trace7578,179158
do_xterm_trace(void)do_xterm_trace7590,179381
clear_xterm_clip(void)clear_xterm_clip7673,181819
clip_update(void)clip_update7705,182430
xterm_update(void)xterm_update7723,182836
clip_xterm_own_selection(Clipboard_T *cbd)clip_xterm_own_selection7758,183533
clip_xterm_lose_selection(Clipboard_T *cbd)clip_xterm_lose_selection7766,183691
clip_xterm_request_selection(Clipboard_T *cbd)clip_xterm_request_selection7773,183827
clip_xterm_set_selection(Clipboard_T *cbd)clip_xterm_set_selection7780,183980
xsmp_handle_interaction(SmcConn smc_conn, SmPointer client_data UNUSED)xsmp_handle_interaction7798,184319
xsmp_handle_save_yourself(xsmp_handle_save_yourself7831,185133
xsmp_die(SmcConn smc_conn UNUSED, SmPointer client_data UNUSED)xsmp_die7872,186161
xsmp_save_complete(xsmp_save_complete7885,186429
xsmp_shutdown_cancelled(xsmp_shutdown_cancelled7898,186660
xsmp_ice_connection(xsmp_ice_connection7913,186966
xsmp_handle_requests(void)xsmp_handle_requests7930,187351
static int dummy;dummy7947,187629
xsmp_init(void)xsmp_init7951,187697
xsmp_close(void)xsmp_close8029,189757
char CtrlTable[] =CtrlTable8045,190032
char MetaCharTable[]=MetaCharTable8132,191638
char CtrlCharTable[]=CtrlCharTable8142,192047

src/os_vms.c,2817
typedef struct _generic_64 {_generic_6419,534
    } gen64$r_quad_overlay;gen64$r_quad_overlay27,875
} GENERIC_64;GENERIC_6428,903
    char	class;class33,942
    char	type;type34,958
    short	width;width35,973
	    char	_basic[3];_basic40,1017
	    char	length;length41,1038
	}	y;y42,1056
	int	basic;basic43,1062
    }	x;x44,1074
    int		extended;extended45,1083
}	TT_MODE;TT_MODE46,1102
    short	buflen;buflen50,1131
    short	itemcode;itemcode51,1149
    char	*bufadrs;bufadrs52,1169
    int		*retlen;retlen53,1188
}	ITEM;ITEM54,1206
    ITEM	equ;equ58,1232
    int		nul;nul59,1246
}	ITMLST1;ITMLST160,1260
    ITEM	index;index64,1289
    ITEM	string;string65,1305
    int	nul;nul66,1322
}	ITMLST2;ITMLST267,1335
static TT_MODE	orgmode;orgmode69,1347
static short	iochan;			// TTY I/O channeliochan70,1371
static short	iosb[4];		// IO status blockiosb71,1413
static int vms_match_num = 0;vms_match_num73,1456
static int vms_match_free = 0;vms_match_free74,1486
static char_u **vms_fmatch = NULL;vms_fmatch75,1517
static char *Fspec_Rms;		       // rms file spec, passed implicitly between routinesFspec_Rms76,1552
#define EXPL_ALLOC_INC EXPL_ALLOC_INC83,1710
#define EQN(EQN85,1737
#define SKIP_FOLLOWING_SLASHES(SKIP_FOLLOWING_SLASHES86,1784
vul_desc(DESC *des, char *str)vul_desc94,1966
vul_item(ITEM *itm, short len, short cod, char *adr, int *ret)vul_item106,2227
mch_settmode(int tmode)mch_settmode115,2404
set_tty(int row, int col)set_tty139,2923
get_tty(void)get_tty165,3569
mch_get_shellsize(void)mch_get_shellsize194,4161
mch_set_shellsize(void)mch_set_shellsize208,4398
mch_getenv(char_u *lognam)mch_getenv222,4668
mch_setenv(char *var, char *value, int x)mch_setenv261,5628
vms_sys(char *cmd, char *out, char *inp)vms_sys279,6106
vms_tolower( char *name )vms_tolower302,6578
vms_sys_status(int status)vms_sys_status314,6812
vms_read(char *inbuf, size_t nbytes)vms_read328,7051
vms_wproc(char *name, int val)vms_wproc373,8498
mch_expand_wildcards(int num_pat, char_u **pat, int *num_file, char_u ***file, int flags)mch_expand_wildcards440,10185
mch_expandpath(garray_T *gap, char_u *path, int flags)mch_expandpath518,12135
vms_unix_mixed_filespec(char *in, char *out)vms_unix_mixed_filespec546,12923
vms_fspec_proc(char *fil, int val)vms_fspec_proc637,14983
vms_fixfilename(void *instring)vms_fixfilename647,15125
vms_remove_version(void * fname)vms_remove_version694,16264
struct typeahead_st {typeahead_st714,16698
    unsigned short numchars;numchars715,16720
    unsigned char  firstchar;firstchar716,16749
    unsigned char  reserved0;reserved0717,16779
    unsigned long  reserved1;reserved1718,16809
} typeahead;typeahead719,16839
RealWaitForChar(RealWaitForChar727,17052

src/os_vms_mms.c,43
int main(int argc, char *argv[])main6,96

src/os_w32dll.c,148
# define WIN32_LEAN_AND_MEANWIN32_LEAN_AND_MEAN16,461
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)DllMain22,552

src/os_w32exe.c,74
void SaveInst(HINSTANCE hInst);SaveInst24,620
wWinMain(wWinMain30,706

src/os_win32.c,21162
#undef chdirchdir38,999
#  define FROM_LEFT_1ST_BUTTON_PRESSED FROM_LEFT_1ST_BUTTON_PRESSED59,1333
#  define RIGHTMOST_BUTTON_PRESSED	RIGHTMOST_BUTTON_PRESSED62,1424
#  define FROM_LEFT_2ND_BUTTON_PRESSED FROM_LEFT_2ND_BUTTON_PRESSED65,1514
#  define FROM_LEFT_3RD_BUTTON_PRESSED FROM_LEFT_3RD_BUTTON_PRESSED68,1609
#  define FROM_LEFT_4TH_BUTTON_PRESSED FROM_LEFT_4TH_BUTTON_PRESSED71,1704
#  define MOUSE_MOVED MOUSE_MOVED78,1804
#  define DOUBLE_CLICK DOUBLE_CLICK81,1865
FILE* fdDump = NULL;fdDump89,2013
# define WINAPIWINAPI97,2193
typedef char * LPCSTR;LPCSTR98,2209
typedef char * LPWSTR;LPWSTR99,2232
typedef int ACCESS_MASK;ACCESS_MASK100,2255
typedef int BOOL;BOOL101,2280
typedef int COLORREF;COLORREF102,2298
typedef int CONSOLE_CURSOR_INFO;CONSOLE_CURSOR_INFO103,2320
typedef int COORD;COORD104,2353
typedef int DWORD;DWORD105,2372
typedef int HANDLE;HANDLE106,2391
typedef int LPHANDLE;LPHANDLE107,2411
typedef int HDC;HDC108,2433
typedef int HFONT;HFONT109,2450
typedef int HICON;HICON110,2469
typedef int HINSTANCE;HINSTANCE111,2488
typedef int HWND;HWND112,2511
typedef int INPUT_RECORD;INPUT_RECORD113,2529
typedef int INT;INT114,2555
typedef int KEY_EVENT_RECORD;KEY_EVENT_RECORD115,2572
typedef int LOGFONT;LOGFONT116,2602
typedef int LPBOOL;LPBOOL117,2623
typedef int LPCTSTR;LPCTSTR118,2643
typedef int LPDWORD;LPDWORD119,2664
typedef int LPSTR;LPSTR120,2685
typedef int LPTSTR;LPTSTR121,2704
typedef int LPVOID;LPVOID122,2724
typedef int MOUSE_EVENT_RECORD;MOUSE_EVENT_RECORD123,2744
typedef int PACL;PACL124,2776
typedef int PDWORD;PDWORD125,2794
typedef int PHANDLE;PHANDLE126,2814
typedef int PRINTDLG;PRINTDLG127,2835
typedef int PSECURITY_DESCRIPTOR;PSECURITY_DESCRIPTOR128,2857
typedef int PSID;PSID129,2891
typedef int SECURITY_INFORMATION;SECURITY_INFORMATION130,2909
typedef int SHORT;SHORT131,2943
typedef int SMALL_RECT;SMALL_RECT132,2962
typedef int TEXTMETRIC;TEXTMETRIC133,2986
typedef int TOKEN_INFORMATION_CLASS;TOKEN_INFORMATION_CLASS134,3010
typedef int TRUSTEE;TRUSTEE135,3047
typedef int WORD;WORD136,3068
typedef int WCHAR;WCHAR137,3086
typedef void VOID;VOID138,3105
typedef int BY_HANDLE_FILE_INFORMATION;BY_HANDLE_FILE_INFORMATION139,3124
typedef int SE_OBJECT_TYPE;SE_OBJECT_TYPE140,3164
typedef int PSNSECINFO;PSNSECINFO141,3192
typedef int PSNSECINFOW;PSNSECINFOW142,3216
typedef int STARTUPINFO;STARTUPINFO143,3241
typedef int PROCESS_INFORMATION;PROCESS_INFORMATION144,3266
typedef int LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES145,3299
# define __stdcall __stdcall146,3334
static HANDLE g_hConIn  = INVALID_HANDLE_VALUE;g_hConIn151,3464
static HANDLE g_hConOut = INVALID_HANDLE_VALUE;g_hConOut152,3512
static SMALL_RECT g_srScrollRegion;g_srScrollRegion155,3619
static COORD	  g_coord;  // 0-based, but external coords are 1-basedg_coord156,3655
static WORD  g_attrDefault = 7;  // lightgray text on black backgroundg_attrDefault159,3784
static WORD  g_attrCurrent;g_attrCurrent160,3855
static int g_fCBrkPressed = FALSE;  // set by ctrl-break interruptg_fCBrkPressed162,3884
static int g_fCtrlCPressed = FALSE; // set when ctrl-C or ctrl-break detectedg_fCtrlCPressed163,3951
static int g_fForceExit = FALSE;    // set when forcefully exitingg_fForceExit164,4029
static int s_cursor_visible = TRUE;s_cursor_visible175,4524
static int did_create_conin = FALSE;did_create_conin176,4560
static int s_dont_use_vimrun = TRUE;s_dont_use_vimrun179,4626
static int need_vimrun_warning = FALSE;need_vimrun_warning180,4663
static char *vimrun_path = "vimrun ";vimrun_path181,4703
static int conpty_working = 0;conpty_working188,4887
static int conpty_type = 0;conpty_type189,4918
static int conpty_stable = 0;conpty_stable190,4946
static int vtp_working = 0;vtp_working194,5054
static guicolor_T save_console_bg_rgb;save_console_bg_rgb201,5256
static guicolor_T save_console_fg_rgb;save_console_fg_rgb202,5295
static guicolor_T store_console_bg_rgb;store_console_bg_rgb203,5334
static guicolor_T store_console_fg_rgb;store_console_fg_rgb204,5374
static int g_color_index_bg = 0;g_color_index_bg206,5415
static int g_color_index_fg = 7;g_color_index_fg207,5448
static int default_console_color_bg = 0x000000; // blackdefault_console_color_bg210,5509
static int default_console_color_fg = 0xc0c0c0; // whitedefault_console_color_fg211,5566
#  define USE_VTP	USE_VTP215,5659
#  define USE_VTP	USE_VTP217,5760
# define ENABLE_VIRTUAL_TERMINAL_PROCESSING ENABLE_VIRTUAL_TERMINAL_PROCESSING227,6016
static int suppress_winsize = 1;	// don't fiddle with consolesuppress_winsize231,6123
static char_u *exe_path = NULL;exe_path234,6193
static BOOL win8_or_later = FALSE;win8_or_later236,6226
typedef struct _DYN_CONSOLE_SCREEN_BUFFER_INFOEX_DYN_CONSOLE_SCREEN_BUFFER_INFOEX240,6345
    ULONG cbSize;cbSize242,6396
    COORD dwSize;dwSize243,6414
    COORD dwCursorPosition;dwCursorPosition244,6432
    WORD wAttributes;wAttributes245,6460
    SMALL_RECT srWindow;srWindow246,6482
    COORD dwMaximumWindowSize;dwMaximumWindowSize247,6507
    WORD wPopupAttributes;wPopupAttributes248,6538
    BOOL bFullscreenSupported;bFullscreenSupported249,6565
    COLORREF ColorTable[16];ColorTable250,6596
} DYN_CONSOLE_SCREEN_BUFFER_INFOEX, *PDYN_CONSOLE_SCREEN_BUFFER_INFOEX;DYN_CONSOLE_SCREEN_BUFFER_INFOEX251,6625
} DYN_CONSOLE_SCREEN_BUFFER_INFOEX, *PDYN_CONSOLE_SCREEN_BUFFER_INFOEX;PDYN_CONSOLE_SCREEN_BUFFER_INFOEX251,6625
typedef BOOL (WINAPI *PfnGetConsoleScreenBufferInfoEx)(HANDLE, PDYN_CONSOLE_SCREEN_BUFFER_INFOEX);PfnGetConsoleScreenBufferInfoEx252,6697
static PfnGetConsoleScreenBufferInfoEx pGetConsoleScreenBufferInfoEx;pGetConsoleScreenBufferInfoEx253,6796
typedef BOOL (WINAPI *PfnSetConsoleScreenBufferInfoEx)(HANDLE, PDYN_CONSOLE_SCREEN_BUFFER_INFOEX);PfnSetConsoleScreenBufferInfoEx254,6866
static PfnSetConsoleScreenBufferInfoEx pSetConsoleScreenBufferInfoEx;pSetConsoleScreenBufferInfoEx255,6965
static BOOL has_csbiex = FALSE;has_csbiex256,7035
typedef BOOL (WINAPI *PfnRtlGetVersion)(LPOSVERSIONINFOW);PfnRtlGetVersion262,7127
#define MAKE_VER(MAKE_VER263,7186
get_build_number(void)get_build_number267,7294
read_console_input(read_console_input293,7968
peek_console_input(peek_console_input368,9503
msg_wait_for_multiple_objects(msg_wait_for_multiple_objects379,9744
wait_for_single_object(wait_for_single_object395,10129
get_exe_name(void)get_exe_name407,10365
#define MAX_ENV_PATH_LEN MAX_ENV_PATH_LEN411,10524
unescape_shellxquote(char_u *p, char_u *escaped)unescape_shellxquote454,11573
vimLoadLib(char *name)vimLoadLib473,11881
mch_is_gui_executable(void)mch_is_gui_executable504,12670
get_imported_func_info(HINSTANCE hInst, const char *funcname, int info)get_imported_func_info528,13423
find_imported_module_by_funcname(HINSTANCE hInst, const char *funcname)find_imported_module_by_funcname579,14913
get_dll_import_func(HINSTANCE hInst, const char *funcname)get_dll_import_func593,15253
#  define GETTEXT_DLL GETTEXT_DLL601,15447
#  define GETTEXT_DLL_ALT1 GETTEXT_DLL_ALT1602,15483
#  define GETTEXT_DLL_ALT2 GETTEXT_DLL_ALT2603,15526
static HINSTANCE hLibintlDLL = NULL;hLibintlDLL613,15973
char *(*dyn_libintl_gettext)(const char *) = null_libintl_gettext;dyn_libintl_gettext614,16010
char *(*dyn_libintl_ngettext)(const char *, const char *, unsigned long n)dyn_libintl_ngettext615,16077
char *(*dyn_libintl_textdomain)(const char *) = null_libintl_textdomain;dyn_libintl_textdomain617,16183
char *(*dyn_libintl_bindtextdomain)(const char *, const char *)dyn_libintl_bindtextdomain618,16256
char *(*dyn_libintl_bind_textdomain_codeset)(const char *, const char *)dyn_libintl_bind_textdomain_codeset620,16357
int (*dyn_libintl_wputenv)(const wchar_t *) = null_libintl_wputenv;dyn_libintl_wputenv622,16481
dyn_libintl_init(void)dyn_libintl_init625,16558
dyn_libintl_end(void)dyn_libintl_end700,18528
null_libintl_gettext(const char *msgid)null_libintl_gettext714,18991
null_libintl_ngettext(null_libintl_ngettext720,19079
null_libintl_bindtextdomain(null_libintl_bindtextdomain729,19242
null_libintl_bind_textdomain_codeset(null_libintl_bind_textdomain_codeset737,19372
null_libintl_textdomain(const char *domainname UNUSED)null_libintl_textdomain745,19511
null_libintl_wputenv(const wchar_t *envstring UNUSED)null_libintl_wputenv751,19603
# define VER_PLATFORM_WIN32_WINDOWS VER_PLATFORM_WIN32_WINDOWS761,19812
#  define PROTECTED_DACL_SECURITY_INFORMATION	PROTECTED_DACL_SECURITY_INFORMATION769,19964
win32_enable_privilege(LPTSTR lpszPrivilege, BOOL bEnable)win32_enable_privilege778,20125
PlatformId(void)PlatformId813,20969
# define SHIFT SHIFT841,21549
# define CTRL CTRL842,21581
# define ALT ALT843,21638
# define ALT_GR ALT_GR844,21694
    WORD    wVirtKey;wVirtKey856,22172
    BOOL    fAnsiKey;fAnsiKey857,22194
    int	    chAlone;chAlone858,22216
    int	    chShift;chShift859,22237
    int	    chCtrl;chCtrl860,22258
    int	    chAlt;chAlt861,22278
} VirtKeyMap[] =VirtKeyMap862,22297
#  define UChar UChar925,25224
#  define UChar UChar927,25259
win32_kbd_patch_key(win32_kbd_patch_key934,25368
static BOOL g_fJustGotFocus = FALSE;g_fJustGotFocus978,26341
decode_key_event(decode_key_event984,26451
mch_setmouse(int on UNUSED)mch_setmouse1111,29211
static int g_fMouseAvail = FALSE;   // mouse presentg_fMouseAvail1115,29249
static int g_fMouseActive = FALSE;  // mouse enabledg_fMouseActive1116,29302
static int g_nMouseClick = -1;	    // mouse statusg_nMouseClick1117,29355
static int g_xMouse;		    // mouse x coordinateg_xMouse1118,29406
static int g_yMouse;		    // mouse y coordinateg_yMouse1119,29454
mch_setmouse(int on)mch_setmouse1125,29552
mch_bevalterm_changed(void)mch_bevalterm_changed1153,29995
decode_mouse_event(decode_mouse_event1187,31517
mch_set_cursor_shape(int thickness)mch_set_cursor_shape1433,37572
mch_update_cursor(void)mch_update_cursor1445,37889
handle_focus_event(INPUT_RECORD ir)handle_focus_event1473,38394
WaitForChar(long msec, int ignore_input)WaitForChar1488,38824
mch_char_avail(void)mch_char_avail1681,43708
mch_check_messages(void)mch_check_messages1695,43931
create_conin(void)create_conin1709,44153
tgetch(int *pmodifiers, WCHAR *pch2)tgetch1722,44458
mch_inchar(mch_inchar1775,45605
#  define TYPEAHEADSPACE TYPEAHEADSPACE1787,45886
# define TYPEAHEADLEN	TYPEAHEADLEN1791,45961
executable_exists(char *name, char_u **path, int use_path)executable_exists2040,51565
bad_param_handler(const wchar_t *expression,bad_param_handler2101,53281
# define SET_INVALID_PARAM_HANDLER SET_INVALID_PARAM_HANDLER2109,53433
# define SET_INVALID_PARAM_HANDLERSET_INVALID_PARAM_HANDLER2112,53535
mch_init_g(void)mch_init_g2121,53654
# define SRWIDTH(SRWIDTH2192,55563
# define SRHEIGHT(SRHEIGHT2193,55613
ClearConsoleBuffer(WORD wAttribute)ClearConsoleBuffer2204,55856
FitConsoleWindow(FitConsoleWindow2235,56573
typedef struct ConsoleBufferStructConsoleBufferStruct2279,57748
    BOOL			IsValid;IsValid2281,57785
    CONSOLE_SCREEN_BUFFER_INFO	Info;Info2282,57805
    PCHAR_INFO			Buffer;Buffer2283,57842
    COORD			BufferSize;BufferSize2284,57867
    PSMALL_RECT			Regions;Regions2285,57891
    int				NumRegions;NumRegions2286,57918
} ConsoleBuffer;ConsoleBuffer2287,57941
SaveConsoleBuffer(SaveConsoleBuffer2300,58351
RestoreConsoleBuffer(RestoreConsoleBuffer2404,61360
# define FEAT_RESTORE_ORIG_SCREENFEAT_RESTORE_ORIG_SCREEN2464,62873
static ConsoleBuffer g_cbOrig = { 0 };g_cbOrig2466,62940
static ConsoleBuffer g_cbNonTermcap = { 0 };g_cbNonTermcap2468,62987
static ConsoleBuffer g_cbTermcap = { 0 };g_cbTermcap2469,63032
char g_szOrigTitle[256] = { 0 };g_szOrigTitle2472,63094
HWND g_hWnd = NULL;	// also used in os_mswin.cg_hWnd2473,63127
static HICON g_hOrigIconSmall = NULL;g_hOrigIconSmall2474,63174
static HICON g_hOrigIcon = NULL;g_hOrigIcon2475,63212
static HICON g_hVimIcon = NULL;g_hVimIcon2476,63245
static BOOL g_fCanChangeIcon = FALSE;g_fCanChangeIcon2477,63277
#   define ICON_SMALL ICON_SMALL2481,63374
#   define ICON_BIG ICON_BIG2484,63426
GetConsoleIcon(GetConsoleIcon2495,63648
SetConsoleIcon(SetConsoleIcon2521,64206
SaveConsoleTitleAndIcon(void)SaveConsoleTitleAndIcon2549,65046
static int g_fWindInitCalled = FALSE;g_fWindInitCalled2579,66013
static int g_fTermcapMode = FALSE;g_fTermcapMode2580,66051
static CONSOLE_CURSOR_INFO g_cci;g_cci2581,66086
static DWORD g_cmodein = 0;g_cmodein2582,66120
static DWORD g_cmodeout = 0;g_cmodeout2583,66148
mch_init_c(void)mch_init_c2589,66235
mch_exit_c(int r)mch_exit_c2684,68724
mch_init(void)mch_init2735,69668
mch_exit(int r)mch_exit2750,69851
mch_check_win(mch_check_win2768,70096
fname_case(fname_case2792,70520
mch_get_user_name(mch_get_user_name2829,71079
mch_get_host_name(mch_get_host_name2856,71511
mch_get_pid(void)mch_get_pid2881,71881
mch_process_running(long pid)mch_process_running2890,72008
mch_dirname(mch_dirname2909,72493
mch_getperm(char_u *name)mch_getperm2954,73386
mch_setperm(char_u *name, long perm)mch_setperm2970,73648
mch_hide(char_u *name)mch_hide2993,73952
mch_ishidden(char_u *name)mch_ishidden3007,74185
mch_isdir(char_u *name)mch_isdir3022,74479
mch_isrealdir(char_u *name)mch_isrealdir3038,74815
mch_mkdir(char_u *name)mch_mkdir3048,74987
mch_rmdir(char_u *name)mch_rmdir3066,75259
mch_is_hard_link(char_u *fname)mch_is_hard_link3083,75521
mch_is_symbolic_link(char_u *name)mch_is_symbolic_link3095,75764
mch_is_linked(char_u *fname)mch_is_linked3129,76495
win32_fileinfo(char_u *fname, BY_HANDLE_FILE_INFORMATION *info)win32_fileinfo3144,76908
win32_getattrs(char_u *name)win32_getattrs3181,77765
win32_setattrs(char_u *name, int attrs)win32_setattrs3202,78093
win32_set_archive(char_u *name)win32_set_archive3221,78375
mch_writable(char_u *name)mch_writable3237,78782
mch_can_exe(char_u *name, char_u **path, int use_path)mch_can_exe3252,79199
mch_nodetype(char_u *name)mch_nodetype3326,80987
struct my_aclmy_acl3363,81935
    PSECURITY_DESCRIPTOR    pSecurityDescriptor;pSecurityDescriptor3365,81951
    PSID		    pSidOwner;pSidOwner3366,82000
    PSID		    pSidGroup;pSidGroup3367,82025
    PACL		    pDacl;pDacl3368,82050
    PACL		    pSacl;pSacl3369,82071
mch_get_acl(char_u *fname)mch_get_acl3378,82256
is_acl_inherited(PACL acl)is_acl_inherited3439,83510
mch_set_acl(char_u *fname, vim_acl_T acl)mch_set_acl3463,84084
mch_free_acl(vim_acl_T acl)mch_free_acl3507,85155
handler_routine(handler_routine3526,85515
mch_settmode(int tmode)mch_settmode3584,86820
mch_get_shellsize(void)mch_get_shellsize3642,88236
ResizeConBuf(ResizeConBuf3678,89030
ResizeWindow(ResizeWindow3699,89398
ResizeConBufAndWindow(ResizeConBufAndWindow3720,89766
mch_set_shellsize(void)mch_set_shellsize3799,91768
mch_new_shellsize(void)mch_new_shellsize3832,92360
mch_set_winsize_now(void)mch_set_winsize_now3846,92574
vim_create_process(vim_create_process3859,92778
vim_shell_execute(vim_shell_execute3900,93675
mch_system_classic(char *cmd, int options)mch_system_classic3928,94395
sub_process_writer(LPVOID param)sub_process_writer4006,96389
# define BUFLEN BUFLEN4065,97660
dump_pipe(int	    options,dump_pipe4072,97862
mch_system_piped(char *cmd, int options)mch_system_piped4183,100263
mch_system_g(char *cmd, int options)mch_system_g4440,106920
mch_system_c(char *cmd, int options UNUSED)mch_system_c4452,107194
mch_system(char *cmd, int options)mch_system4486,107830
mch_call_shell_terminal(mch_call_shell_terminal4505,108244
mch_call_shell(mch_call_shell4588,110138
job_io_file_open(job_io_file_open4917,118706
win32_build_env(dict_T *env, garray_T *gap, int is_terminal)win32_build_env4944,119324
create_pipe_pair(HANDLE handles[2])create_pipe_pair5058,122096
mch_job_start(char *cmd, job_T *job, jobopt_T *options)mch_job_start5097,122962
mch_job_status(job_T *job)mch_job_status5282,127797
mch_detect_ended_job(job_T *job_list)mch_detect_ended_job5301,128170
terminate_all(HANDLE process, int code)terminate_all5337,128929
mch_signal_job(job_T *job, char_u *how)mch_signal_job5379,129723
mch_clear_job(job_T *job)mch_clear_job5409,130478
termcap_mode_start(void)termcap_mode_start5427,130774
termcap_mode_end(void)termcap_mode_end5483,132107
mch_write(mch_write5540,133604
clear_chars(clear_chars5553,133757
clear_screen(void)clear_screen5576,134141
clear_to_end_of_display(void)clear_to_end_of_display5595,134391
clear_to_end_of_line(void)clear_to_end_of_line5618,134769
scroll(unsigned cLines)scroll5640,135124
set_scroll_region(set_scroll_region5655,135349
set_scroll_region_tb(set_scroll_region_tb5674,135744
set_scroll_region_lr(set_scroll_region_lr5686,135960
insert_lines(unsigned cLines)insert_lines5702,136242
delete_lines(unsigned cLines)delete_lines5759,137713
gotoxy(gotoxy5815,138944
textattr(WORD wAttr)textattr5849,139722
textcolor(WORD wAttr)textcolor5858,139847
textbackground(WORD wAttr)textbackground5870,140054
normvideo(void)normvideo5885,140345
static WORD g_attrPreStandout = 0;g_attrPreStandout5894,140438
standout(void)standout5900,140542
standend(void)standend5912,140732
mch_set_normal_colors(void)mch_set_normal_colors5925,140928
visual_bell(void)visual_bell5957,141549
cursor_visible(BOOL fVisible)cursor_visible5984,142213
write_chars(write_chars5998,142482
mch_write(mch_write6072,144308
mch_delay(mch_delay6375,149646
mch_remove(char_u *name)mch_remove6420,150522
mch_breakcheck(int force UNUSED)mch_breakcheck6448,151076
#define WINNT_RESERVE_BYTES WINNT_RESERVE_BYTES6464,151409
mch_total_mem(int special UNUSED)mch_total_mem6470,151532
mch_wrename(WCHAR *wold, WCHAR *wnew)mch_wrename6512,153224
mch_rename(mch_rename6588,155709
default_shell(void)default_shell6609,156168
mch_access(char *n, int p)mch_access6619,156383
mch_open(const char *name, int flags, int mode)mch_open6693,158224
mch_fopen(const char *name, const char *mode)mch_fopen6711,158516
copy_substream(HANDLE sh, void *context, WCHAR *to, WCHAR *substream, long len)copy_substream6764,160120
copy_infostreams(char_u *from, char_u *to)copy_infostreams6805,161184
mch_copy_file_attribute(char_u *from, char_u *to)mch_copy_file_attribute6891,163779
# define MIN_STACK_WINNT MIN_STACK_WINNT6905,164125
myresetstkoflw(void)myresetstkoflw6913,164322
static int	nArgsW = 0;nArgsW6984,166031
static LPWSTR	*ArglistW = NULL;ArglistW6985,166054
static int	global_argc = 0;global_argc6986,166086
static char	**global_argv;global_argv6987,166114
static int	used_file_argc = 0;	// last argument in global_argv[] usedused_file_argc6989,166142
static int	*used_file_indexes = NULL; // indexes in global_argv[] forused_file_indexes6991,166243
static int	used_file_count = 0;	// nr of entries in used_file_indexesused_file_count6994,166385
static int	used_file_literal = FALSE;  // take file names literallyused_file_literal6995,166455
static int	used_file_full_path = FALSE;  // file name was full pathused_file_full_path6996,166523
static int	used_file_diff_mode = FALSE;  // file name was with diff modeused_file_diff_mode6997,166591
static int	used_alist_count = 0;used_alist_count6998,166664
get_cmd_argsW(char ***argvp)get_cmd_argsW7006,166812
free_cmd_argsW(void)free_cmd_argsW7057,167805
used_file_arg(char *name, int literal, int full_path, int diff_mode)used_file_arg7072,168088
set_alist_count(void)set_alist_count7095,168647
fix_arg_enc(void)fix_arg_enc7106,168912
mch_setenv(char *var, char *value, int x UNUSED)mch_setenv7208,172090
#define VTP_FIRST_SUPPORT_BUILD VTP_FIRST_SUPPORT_BUILD7238,172690
#define CONPTY_FIRST_SUPPORT_BUILD CONPTY_FIRST_SUPPORT_BUILD7244,172855
#define CONPTY_1903_BUILD	CONPTY_1903_BUILD7250,173019
#define CONPTY_1909_BUILD	CONPTY_1909_BUILD7255,173120
#define CONPTY_INSIDER_BUILD	CONPTY_INSIDER_BUILD7261,173257
#define CONPTY_STABLE_BUILD	CONPTY_STABLE_BUILD7266,173340
vtp_flag_init(void)vtp_flag_init7269,173423
vtp_init(void)vtp_init7308,174316
vtp_exit(void)vtp_exit7352,175712
vtp_printf(vtp_printf7358,175780
vtp_sgr_bulk(vtp_sgr_bulk7374,176100
vtp_sgr_bulks(vtp_sgr_bulks7384,176213
ctermtoxterm(ctermtoxterm7411,176639
set_console_color_rgb(void)set_console_color_rgb7422,176823
get_default_console_color(get_default_console_color7455,177776
reset_console_color_rgb(void)reset_console_color_rgb7502,178867
restore_console_color_rgb(void)restore_console_color_rgb7525,179464
control_console_color_rgb(void)control_console_color_rgb7545,179997
use_vtp(void)use_vtp7554,180122
is_term_win32(void)is_term_win327560,180169
has_vtp_working(void)has_vtp_working7566,180261
has_conpty_working(void)has_conpty_working7574,180328
get_conpty_type(void)get_conpty_type7580,180393
is_conpty_stable(void)is_conpty_stable7586,180452
resize_console_buf(void)resize_console_buf7593,180581

src/popupmenu.c,3067
static pumitem_T *pum_array = NULL;	// items of displayed pumpum_array15,335
static int pum_size;			// nr of items in "pum_array"pum_size16,397
static int pum_selected;		// index of selected item or -1pum_selected17,450
static int pum_first = 0;		// index of top itempum_first18,508
static int call_update_screen = FALSE;call_update_screen20,557
static int pum_height;			// nr of displayed pum itemspum_height22,597
static int pum_width;			// width of displayed pum itemspum_width23,651
static int pum_base_width;		// width of pum items basepum_base_width24,707
static int pum_kind_width;		// width of pum items kind columnpum_kind_width25,762
static int pum_extra_width;		// width of extra stuffpum_extra_width26,824
static int pum_scrollbar;		// TRUE when scrollbar presentpum_scrollbar27,877
static int pum_row;			// top row of pumpum_row29,936
static int pum_col;			// left column of pumpum_col30,976
static win_T *pum_window = NULL;pum_window32,1021
static int pum_win_row;pum_win_row33,1054
static int pum_win_height;pum_win_height34,1078
static int pum_win_col;pum_win_col35,1105
static int pum_win_wcol;pum_win_wcol36,1129
static int pum_win_width;pum_win_width37,1154
static int pum_pretend_not_visible = FALSE;pum_pretend_not_visible41,1329
static int pum_will_redraw = FALSE;pum_will_redraw45,1502
#define PUM_DEF_HEIGHT PUM_DEF_HEIGHT49,1588
pum_compute_size(void)pum_compute_size52,1631
pum_display(pum_display88,2522
pum_call_update_screen()pum_call_update_screen368,9304
pum_under_menu(int row, int col)pum_under_menu384,9748
pum_redraw(void)pum_redraw397,10013
pum_position_info_popup(win_T *wp)pum_position_info_popup637,15440
pum_set_selected(int n, int repeat UNUSED)pum_set_selected693,16998
pum_undisplay(void)pum_undisplay985,24716
pum_clear(void)pum_clear1002,25074
pum_visible(void)pum_visible1013,25319
pum_may_redraw(void)pum_may_redraw1022,25482
pum_get_height(void)pum_get_height1060,26485
pum_set_event_info(dict_T *dict)pum_set_event_info1070,26640
pum_position_at_mouse(int min_width)pum_position_at_mouse1086,27166
static pumitem_T *balloon_array = NULL;balloon_array1125,28100
static int balloon_arraysize;balloon_arraysize1126,28140
# define BALLOON_MIN_WIDTH BALLOON_MIN_WIDTH1128,28171
# define BALLOON_MIN_HEIGHT BALLOON_MIN_HEIGHT1129,28201
    char_u	*start;start1132,28250
    int		bytelen;bytelen1133,28269
    int		cells;cells1134,28287
    int		indent;indent1135,28303
} balpart_T;balpart_T1136,28320
split_message(char_u *mesg, pumitem_T **array)split_message1145,28600
ui_remove_balloon(void)ui_remove_balloon1285,31925
ui_post_balloon(char_u *mesg, list_T *list)ui_post_balloon1300,32209
ui_may_remove_balloon(void)ui_may_remove_balloon1349,33240
pum_select_mouse_pos(void)pum_select_mouse_pos1362,33518
pum_execute_menu(vimmenu_T *menu, int mode)pum_execute_menu1376,33783
pum_show_popupmenu(vimmenu_T *menu)pum_show_popupmenu1396,34199
pum_make_popup(char_u *path_name, int use_mouse_pos)pum_make_popup1521,36981

src/popupwin.c,8317
    char	*pp_name;pp_name19,428
    poppos_T	pp_val;pp_val20,447
} poppos_entry_T;poppos_entry_T21,468
static poppos_entry_T poppos_entries[] = {poppos_entries23,487
popup_options_one(dict_T *dict, char_u *key)popup_options_one39,911
set_padding_border(dict_T *dict, int *array, char *name, int max_val)set_padding_border81,1747
set_moved_values(win_T *wp)set_moved_values118,2498
set_moved_columns(win_T *wp, int flags)set_moved_columns130,2793
set_mousemoved_values(win_T *wp)set_mousemoved_values146,3156
set_mousemoved_columns(win_T *wp, int flags)set_mousemoved_columns157,3406
popup_on_border(win_T *wp, int row, int col)popup_on_border186,4087
popup_close_if_on_X(win_T *wp, int row, int col)popup_close_if_on_X202,4659
static int drag_start_row;drag_start_row214,4935
static int drag_start_col;drag_start_col215,4962
static int drag_start_wantline;drag_start_wantline216,4989
static int drag_start_wantcol;drag_start_wantcol217,5021
static int drag_on_resize_handle;drag_on_resize_handle218,5052
popup_start_drag(win_T *wp, int row, int col)popup_start_drag225,5196
popup_drag(win_T *wp)popup_drag263,6245
popup_set_firstline(win_T *wp)popup_set_firstline320,7486
popup_is_in_scrollbar(win_T *wp, int row, int col)popup_is_in_scrollbar340,7920
popup_handle_scrollbar_click(win_T *wp, int row, int col)popup_handle_scrollbar_click353,8228
popup_add_timeout(win_T *wp, int time)popup_add_timeout379,8820
get_pos_entry(dict_T *d, int give_error)get_pos_entry397,9234
apply_move_options(win_T *wp, dict_T *d)apply_move_options419,9736
handle_moved_argument(win_T *wp, dictitem_T *di, int mousemoved)handle_moved_argument486,11450
check_highlight(dict_T *dict, char *name, char_u **pval)check_highlight553,13023
popup_show_curline(win_T *wp)popup_show_curline576,13440
popup_get_sign_name(win_T *wp)popup_get_sign_name604,14277
popup_highlight_curline(win_T *wp)popup_highlight_curline617,14545
apply_general_options(win_T *wp, dict_T *dict)apply_general_options650,15367
apply_options(win_T *wp, dict_T *dict)apply_options945,22451
add_popup_strings(buf_T *buf, list_T *l)add_popup_strings964,22822
add_popup_dicts(buf_T *buf, list_T *l)add_popup_dicts983,23234
popup_top_extra(win_T *wp)popup_top_extra1049,24615
popup_left_extra(win_T *wp)popup_left_extra1062,24878
popup_height(win_T *wp)popup_height1071,25058
popup_width(win_T *wp)popup_width1083,25294
popup_extra_width(win_T *wp)popup_extra_width1096,25665
popup_adjust_position(win_T *wp)popup_adjust_position1107,25929
    TYPE_NORMAL,TYPE_NORMAL1519,38006
    TYPE_ATCURSOR,TYPE_ATCURSOR1520,38023
    TYPE_BEVAL,TYPE_BEVAL1521,38042
    TYPE_NOTIFICATION,TYPE_NOTIFICATION1522,38058
    TYPE_DIALOG,TYPE_DIALOG1523,38081
    TYPE_MENU,TYPE_MENU1524,38098
    TYPE_PREVIEW,	// preview windowTYPE_PREVIEW1525,38113
    TYPE_INFO		// popup menu infoTYPE_INFO1526,38149
} create_type_T;create_type_T1527,38183
popup_set_buffer_text(buf_T *buf, typval_T text)popup_set_buffer_text1534,38323
parse_popup_option(win_T *wp, int is_preview)parse_popup_option1577,39299
parse_previewpopup(win_T *wp)parse_previewpopup1679,41300
parse_completepopup(win_T *wp)parse_completepopup1690,41522
popup_set_wantpos_cursor(win_T *wp, int width, dict_T *d)popup_set_wantpos_cursor1700,41758
popup_set_wantpos_rowcol(win_T *wp, int row, int col)popup_set_wantpos_rowcol1739,42677
add_border_left_right_padding(win_T *wp)add_border_left_right_padding1750,42880
popup_create(typval_T *argvars, typval_T *rettv, create_type_T type)popup_create1768,43228
f_popup_clear(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_popup_clear2058,50427
f_popup_create(typval_T *argvars, typval_T *rettv)f_popup_create2067,50571
f_popup_atcursor(typval_T *argvars, typval_T *rettv)f_popup_atcursor2076,50727
f_popup_beval(typval_T *argvars, typval_T *rettv)f_popup_beval2085,50884
invoke_popup_callback(win_T *wp, typval_T *result)invoke_popup_callback2095,51122
popup_close_and_callback(win_T *wp, typval_T *arg)popup_close_and_callback2123,51711
popup_close_with_retval(win_T *wp, int retval)popup_close_with_retval2172,52863
popup_close_for_mouse_click(win_T *wp)popup_close_for_mouse_click2185,53097
check_mouse_moved(win_T *wp, win_T *mouse_wp)check_mouse_moved2191,53194
popup_handle_mouse_moved(void)popup_handle_mouse_moved2213,53840
filter_handle_drag(win_T *wp, int c, typval_T *rettv)filter_handle_drag2240,54461
f_popup_filter_menu(typval_T *argvars, typval_T *rettv)f_popup_filter_menu2257,54859
f_popup_filter_yesno(typval_T *argvars, typval_T *rettv)f_popup_filter_yesno2312,56206
f_popup_dialog(typval_T *argvars, typval_T *rettv)f_popup_dialog2350,57020
f_popup_menu(typval_T *argvars, typval_T *rettv)f_popup_menu2359,57172
f_popup_notification(typval_T *argvars, typval_T *rettv)f_popup_notification2368,57328
find_popup_win(int id)find_popup_win2379,57639
f_popup_close(typval_T *argvars, typval_T *rettv UNUSED)f_popup_close2395,57874
popup_hide(win_T *wp)popup_hide2414,58264
f_popup_hide(typval_T *argvars, typval_T *rettv UNUSED)f_popup_hide2433,58619
popup_show(win_T *wp)popup_show2443,58806
f_popup_show(typval_T *argvars, typval_T *rettv UNUSED)f_popup_show2457,59023
f_popup_settext(typval_T *argvars, typval_T *rettv UNUSED)f_popup_settext2476,59358
popup_free(win_T *wp)popup_free2495,59815
error_for_popup_window(void)error_for_popup_window2508,60121
error_if_popup_window(int also_with_term UNUSED)error_if_popup_window2514,60215
popup_close(int id)popup_close2537,60807
popup_close_tabpage(tabpage_T *tp, int id)popup_close_tabpage2569,61390
close_all_popups(void)close_all_popups2593,61811
f_popup_move(typval_T *argvars, typval_T *rettv UNUSED)f_popup_move2607,62094
f_popup_setoptions(typval_T *argvars, typval_T *rettv UNUSED)f_popup_setoptions2634,62645
f_popup_getpos(typval_T *argvars, typval_T *rettv)f_popup_getpos2666,63354
f_popup_locate(typval_T *argvars, typval_T *rettv)f_popup_locate2710,64788
get_padding_border(dict_T *dict, int *array, char *name)get_padding_border2725,65172
get_borderhighlight(dict_T *dict, win_T *wp)get_borderhighlight2747,65675
get_borderchars(dict_T *dict, win_T *wp)get_borderchars2771,66146
get_moved_list(dict_T *dict, win_T *wp)get_moved_list2800,66695
f_popup_getoptions(typval_T *argvars, typval_T *rettv)f_popup_getoptions2826,67294
error_if_term_popup_window()error_if_term_popup_window2934,70788
popup_reset_handled(int handled_flag)popup_reset_handled2953,71298
find_next_popup(int lowest, int handled_flag)find_next_popup2970,71808
invoke_popup_filter(win_T *wp, int c)invoke_popup_filter3009,72901
popup_do_filter(int c)popup_do_filter3056,74135
popup_no_mapping(void)popup_no_mapping3104,75257
popup_check_cursor_pos()popup_check_cursor_pos3123,75731
popup_update_mask(win_T *wp, int width, int height)popup_update_mask3141,76200
popup_masked(win_T *wp, int width, int height, int screencol, int screenline)popup_masked3193,77546
update_popup_transparent(win_T *wp, int val)update_popup_transparent3207,77941
check_popup_unhidden(win_T *wp)check_popup_unhidden3263,79467
popup_need_position_adjust(win_T *wp)popup_need_position_adjust3289,80176
may_update_popup_mask(int type)may_update_popup_mask3309,80784
get_spaces(int len)get_spaces3467,85351
update_popups(void (*win_update)(win_T *wp))update_popups3479,85613
set_ref_in_one_popup(win_T *wp, int copyID)set_ref_in_one_popup3780,94459
set_ref_in_popups(int copyID)set_ref_in_popups3805,95075
popup_is_popup(win_T *wp)popup_is_popup3825,95507
popup_find_preview_window(void)popup_find_preview_window3836,95745
popup_find_info_window(void)popup_find_info_window3852,96100
f_popup_findinfo(typval_T *argvars UNUSED, typval_T *rettv)f_popup_findinfo3865,96359
f_popup_findpreview(typval_T *argvars UNUSED, typval_T *rettv)f_popup_findpreview3877,96596
popup_create_preview_window(int info)popup_create_preview_window3896,97128
popup_close_preview(void)popup_close_preview3926,97792
popup_hide_info(void)popup_hide_info3938,97963
popup_win_closed(win_T *win)popup_win_closed3952,98192
popup_set_title(win_T *wp)popup_set_title3977,98665
popup_update_preview_title(void)popup_update_preview_title4003,99281

src/po/sjiscorr.c,40
main(int argc, char **argv)main10,185

src/profiler.c,3067
profile_start(proftime_T *tm)profile_start22,500
profile_end(proftime_T *tm)profile_end35,707
profile_sub(proftime_T *tm, proftime_T *tm2)profile_sub58,1121
profile_msg(proftime_T *tm)profile_msg78,1472
profile_float(proftime_T *tm)profile_float98,1893
profile_setlimit(long msec, proftime_T *tm)profile_setlimit115,2210
profile_passed_limit(proftime_T *tm)profile_passed_limit142,2737
profile_zero(proftime_T *tm)profile_zero164,3215
profile_divide(proftime_T *tm, int count, proftime_T *tm2)profile_divide185,3607
static proftime_T prof_wait_time;prof_wait_time207,4052
profile_add(proftime_T *tm, proftime_T *tm2)profile_add213,4134
profile_self(proftime_T *self, proftime_T *total, proftime_T *children)profile_self232,4480
profile_get_wait(proftime_T *tm)profile_get_wait253,4979
profile_sub_wait(proftime_T *tm, proftime_T *tma)profile_sub_wait262,5114
profile_equal(proftime_T *tm1, proftime_T *tm2)profile_equal274,5329
profile_cmp(const proftime_T *tm1, const proftime_T *tm2)profile_cmp287,5616
static char_u	*profile_fname = NULL;profile_fname298,5868
static proftime_T pause_time;pause_time299,5905
ex_profile(exarg_T *eap)ex_profile305,5975
    PEXP_SUBCMD,	// expand :profile sub-commandsPEXP_SUBCMD349,6952
    PEXP_FUNC		// expand :profile func {funcname}PEXP_FUNC350,7001
} pexpand_what;pexpand_what351,7051
#define PROFCMD_START	PROFCMD_START355,7112
#define PROFCMD_PAUSE	PROFCMD_PAUSE357,7148
#define PROFCMD_CONTINUE PROFCMD_CONTINUE359,7187
#define PROFCMD_FUNC	PROFCMD_FUNC361,7225
#define PROFCMD_FILE	PROFCMD_FILE363,7259
#define PROFCMD_LAST	PROFCMD_LAST365,7290
static char *pexpand_cmds[] = {pexpand_cmds353,7068
get_profile_name(expand_T *xp UNUSED, int idx)get_profile_name373,7427
set_context_in_profile_cmd(expand_T *xp, char_u *arg)set_context_in_profile_cmd389,7703
static proftime_T inchar_time;inchar_time413,8236
prof_inchar_enter(void)prof_inchar_enter419,8350
prof_inchar_exit(void)prof_inchar_exit428,8494
prof_def_func(void)prof_def_func440,8701
prof_func_line(prof_func_line451,8919
prof_sort_list(prof_sort_list475,9467
prof_total_cmp(const void *s1, const void *s2)prof_total_cmp504,10153
prof_self_cmp(const void *s1, const void *s2)prof_self_cmp517,10405
func_do_profile(ufunc_T *fp)func_do_profile530,10639
prof_child_enter(prof_child_enter563,11588
prof_child_exit(prof_child_exit578,11916
func_line_start(void *cookie)func_line_start600,12564
func_line_exec(void *cookie)func_line_exec623,13144
func_line_end(void *cookie)func_line_end636,13386
func_dump_profile(FILE *fd)func_dump_profile660,14002
script_do_profile(scriptitem_T *si)script_do_profile743,16002
script_prof_save(script_prof_save759,16350
script_prof_restore(proftime_T *tm)script_prof_restore777,16783
script_dump_profile(FILE *fd)script_dump_profile798,17337
profile_dump(void)profile_dump876,19354
script_line_start(void)script_line_start901,19853
script_line_exec(void)script_line_exec937,20876
script_line_end(void)script_line_end952,21191

src/pty.c,1388
#  define buf_T buf_T60,1984
#  undef buf_Tbuf_T64,2061
# define hpuxhpux113,2857
# define PTYRANGE0 PTYRANGE0120,2967
# define PTYRANGE1 PTYRANGE1123,3018
# undef HAVE_SVR4_PTYSHAVE_SVR4_PTYS128,3128
# define O_NOCTTY O_NOCTTY135,3245
initmaster(int f UNUSED)initmaster147,3506
setup_slavepty(int fd)setup_slavepty168,3881
#define PTY_DONEPTY_DONE189,4381
mch_openpty(char **ttyn)mch_openpty191,4406
#define PTY_DONEPTY_DONE219,5094
mch_openpty(char **ttyn)mch_openpty221,5119
#define PTY_DONEPTY_DONE236,5413
mch_openpty(char **ttyn)mch_openpty238,5438
#define PTY_DONEPTY_DONE260,5931
mch_openpty(char **ttyn)mch_openpty262,5956
#define PTY_DONEPTY_DONE285,6453
mch_openpty(char **ttyn)mch_openpty287,6478
#define PTY_DONEPTY_DONE313,7130
mch_openpty(char **ttyn)mch_openpty315,7155
#define PTY_DONEPTY_DONE346,7896
static int aixhack = -1;aixhack349,7928
mch_openpty(char **ttyn)mch_openpty353,7969
static char PtyProto[] = "/dev/ptym/ptyXY";PtyProto386,8653
static char TtyProto[] = "/dev/pty/ttyXY";TtyProto387,8697
static char PtyProto[] = "/dev/pt/XY";PtyProto390,8794
static char TtyProto[] = "/dev/tt/XY";TtyProto391,8833
static char PtyProto[] = "/dev/ptyXY";PtyProto393,8880
static char TtyProto[] = "/dev/ttyXY";TtyProto394,8919
mch_openpty(char **ttyn)mch_openpty399,8984
mch_isatty(int fd)mch_isatty453,10156

src/quickfix.c,21872
struct dir_stack_Tdir_stack_T18,426
    struct dir_stack_T	*next;next20,447
    char_u		*dirname;dirname21,477
typedef struct qfline_S qfline_T;qfline_T27,579
struct qfline_Sqfline_S28,613
    qfline_T	*qf_next;	// pointer to next error in the listqf_next30,631
    qfline_T	*qf_prev;	// pointer to previous error in the listqf_prev31,691
    linenr_T	qf_lnum;	// line number where the error occurredqf_lnum32,755
    int		qf_fnum;	// file number for the lineqf_fnum33,817
    int		qf_col;		// column where the error occurredqf_col34,863
    int		qf_nr;		// error numberqf_nr35,916
    char_u	*qf_module;	// module name for this errorqf_module36,949
    char_u	*qf_pattern;	// search pattern for the errorqf_pattern37,1002
    char_u	*qf_text;	// description of the errorqf_text38,1058
    char_u	qf_viscol;	// set to TRUE if qf_col is screen columnqf_viscol39,1107
    char_u	qf_cleared;	// set to TRUE if line has been deletedqf_cleared40,1171
    char_u	qf_type;	// type of the error (mostly 'E'); 1 forqf_type41,1234
    char_u	qf_valid;	// valid error message detectedqf_valid43,1312
#define LISTCOUNT LISTCOUNT49,1412
#define INVALID_QFIDX INVALID_QFIDX50,1435
#define INVALID_QFBUFNR INVALID_QFBUFNR51,1462
    QFLT_QUICKFIX, // Quickfix list - global listQFLT_QUICKFIX58,1536
    QFLT_LOCATION, // Location list - per window listQFLT_LOCATION59,1586
    QFLT_INTERNAL  // Internal - Temporary list used by getqflist()/getloclist()QFLT_INTERNAL60,1640
} qfltype_T;qfltype_T61,1721
typedef struct qf_list_Sqf_list_S72,2161
    int_u	qf_id;		// Unique identifier for this listqf_id74,2188
    qfltype_T	qfl_type;qfl_type75,2241
    qfline_T	*qf_start;	// pointer to the first errorqf_start76,2265
    qfline_T	*qf_last;	// pointer to the last errorqf_last77,2319
    qfline_T	*qf_ptr;	// pointer to the current errorqf_ptr78,2371
    int		qf_count;	// number of errors (0 means empty list)qf_count79,2425
    int		qf_index;	// current index in the error listqf_index80,2485
    int		qf_nonevalid;	// TRUE if not a single valid entry foundqf_nonevalid81,2539
    char_u	*qf_title;	// title derived from the command that createdqf_title82,2604
    typval_T	*qf_ctx;	// context set by setqflist/setloclistqf_ctx84,2715
    struct dir_stack_T	*qf_dir_stack;qf_dir_stack86,2777
    char_u		*qf_directory;qf_directory87,2815
    struct dir_stack_T	*qf_file_stack;qf_file_stack88,2842
    char_u		*qf_currfile;qf_currfile89,2881
    int			qf_multiline;qf_multiline90,2907
    int			qf_multiignore;qf_multiignore91,2931
    int			qf_multiscan;qf_multiscan92,2957
    long		qf_changedtick;qf_changedtick93,2981
} qf_list_T;qf_list_T94,3007
struct qf_info_Sqf_info_S100,3129
    int		qf_refcount;qf_refcount106,3393
    int		qf_listcount;	    // current number of listsqf_listcount107,3415
    int		qf_curlist;	    // current error listqf_curlist108,3469
    qf_list_T	qf_lists[LISTCOUNT];qf_lists109,3516
    qfltype_T	qfl_type;	    // type of listqfl_type110,3551
    int		qf_bufnr;	    // quickfix window buffer numberqf_bufnr111,3595
static qf_info_T ql_info;	// global quickfix listql_info114,3655
static int_u last_qf_id = 0;	// Last used quickfix list idlast_qf_id115,3705
#define FMT_PATTERNS FMT_PATTERNS117,3765
typedef struct efm_S efm_T;efm_T122,3896
struct efm_Sefm_S123,3924
    regprog_T	    *prog;	// pre-formatted part of 'errorformat'prog125,3939
    efm_T	    *next;	// pointer to next (NULL if last)next126,4003
    char_u	    addr[FMT_PATTERNS]; // indices of used % patternsaddr127,4058
    char_u	    prefix;	// prefix of this format line:prefix128,4123
    char_u	    flags;	// additional flags given in prefixflags141,4604
    int		    conthere;	// %> usedconthere144,4743
typedef struct qf_delq_Sqf_delq_S149,4884
    struct qf_delq_S	*next;next151,4911
    qf_info_T		*qi;qi152,4939
} qf_delq_T;qf_delq_T153,4959
static qf_delq_T *qf_delq_head = NULL;qf_delq_head154,4972
static int	quickfix_busy = 0;quickfix_busy158,5109
static efm_T	*fmt_start = NULL; // cached across qf_parse_line() callsfmt_start160,5140
static char_u	*e_no_more_items = (char_u *)N_("E553: No more items");e_no_more_items181,6502
#define IS_QF_WINDOW(IS_QF_WINDOW184,6611
#define IS_LL_WINDOW(IS_LL_WINDOW186,6734
#define IS_QF_STACK(IS_QF_STACK189,6871
#define IS_LL_STACK(IS_LL_STACK190,6928
#define IS_QF_LIST(IS_QF_LIST191,6985
#define IS_LL_LIST(IS_LL_LIST192,7043
#define GET_LOC_LIST(GET_LOC_LIST198,7214
#define FOR_ALL_QFL_ITEMS(FOR_ALL_QFL_ITEMS202,7410
static char_u   *qf_last_bufname = NULL;qf_last_bufname211,7742
static bufref_T  qf_last_bufref = {NULL, 0, 0};qf_last_bufref212,7783
static char	*e_loc_list_changed =e_loc_list_changed214,7832
#define LINE_MAXLEN LINE_MAXLEN220,7997
static struct fmtpatternfmtpattern222,8023
    char_u	convchar;convchar224,8050
    char	*pattern;pattern225,8071
} fmt_pat[FMT_PATTERNS] =fmt_pat226,8090
efmpat_to_regpat(efmpat_to_regpat248,8656
scanf_fmt_to_regpat(scanf_fmt_to_regpat321,10394
efm_analyze_prefix(char_u *efmp, efm_T *efminfo)efm_analyze_prefix369,11289
efm_to_regpat(efm_to_regpat391,11892
free_efm_list(efm_T **efm_first)free_efm_list468,13520
efm_regpat_bufsz(char_u *efm)efm_regpat_bufsz486,13895
efm_option_part_len(char_u *efm)efm_option_part_len507,14361
parse_efm_option(char_u *efm)parse_efm_option524,14767
    QF_FAIL = 0,QF_FAIL579,16144
    QF_OK = 1,QF_OK580,16161
    QF_END_OF_INPUT = 2,QF_END_OF_INPUT581,16176
    QF_NOMEM = 3,QF_NOMEM582,16201
    QF_IGNORE_LINE = 4,QF_IGNORE_LINE583,16219
    QF_MULTISCAN = 5,QF_MULTISCAN584,16243
    char_u	*linebuf;linebuf592,16382
    int		linelen;linelen593,16403
    char_u	*growbuf;growbuf594,16421
    int		growbufsiz;growbufsiz595,16442
    FILE	*fd;fd596,16463
    typval_T	*tv;tv597,16477
    char_u	*p_str;p_str598,16495
    listitem_T	*p_li;p_li599,16514
    buf_T	*buf;buf600,16536
    linenr_T	buflnum;buflnum601,16552
    linenr_T	lnumlast;lnumlast602,16574
    vimconv_T	vc;vc603,16597
} qfstate_T;qfstate_T604,16615
qf_grow_linebuf(qfstate_T *state, int newsz)qf_grow_linebuf610,16724
qf_get_next_str_line(qfstate_T *state)qf_get_next_str_line638,17449
qf_get_next_list_line(qfstate_T *state)qf_get_next_list_line679,18298
qf_get_next_buf_line(qfstate_T *state)qf_get_next_buf_line718,19111
qf_get_next_file_line(qfstate_T *state)qf_get_next_file_line751,19776
qf_get_nextline(qfstate_T *state)qf_get_nextline848,22185
    char_u	*namebuf;namebuf890,23197
    char_u	*module;module891,23218
    char_u	*errmsg;errmsg892,23238
    int		errmsglen;errmsglen893,23258
    long	lnum;lnum894,23278
    int		col;col895,23293
    char_u	use_viscol;use_viscol896,23307
    char_u	*pattern;pattern897,23330
    int		enr;enr898,23351
    int		type;type899,23365
    int		valid;valid900,23380
} qffields_T;qffields_T901,23396
qf_parse_fmt_f(regmatch_T *rmp, int midx, qffields_T *fields, int prefix)qf_parse_fmt_f908,23543
qf_parse_fmt_n(regmatch_T *rmp, int midx, qffields_T *fields)qf_parse_fmt_n935,24269
qf_parse_fmt_l(regmatch_T *rmp, int midx, qffields_T *fields)qf_parse_fmt_l948,24593
qf_parse_fmt_c(regmatch_T *rmp, int midx, qffields_T *fields)qf_parse_fmt_c961,24915
qf_parse_fmt_t(regmatch_T *rmp, int midx, qffields_T *fields)qf_parse_fmt_t974,25239
copy_nonerror_line(char_u *linebuf, int linelen, qffields_T *fields)copy_nonerror_line987,25534
qf_parse_fmt_m(regmatch_T *rmp, int midx, qffields_T *fields)qf_parse_fmt_m1010,26088
qf_parse_fmt_r(regmatch_T *rmp, int midx, char_u **tail)qf_parse_fmt_r1035,26730
qf_parse_fmt_p(regmatch_T *rmp, int midx, qffields_T *fields)qf_parse_fmt_p1048,27029
qf_parse_fmt_v(regmatch_T *rmp, int midx, qffields_T *fields)qf_parse_fmt_v1075,27642
qf_parse_fmt_s(regmatch_T *rmp, int midx, qffields_T *fields)qf_parse_fmt_s1089,28005
qf_parse_fmt_o(regmatch_T *rmp, int midx, qffields_T *fields)qf_parse_fmt_o1111,28626
static int (*qf_parse_fmt[FMT_PATTERNS])(regmatch_T *, int, qffields_T *) =qf_parse_fmt1129,29125
qf_parse_match(qf_parse_match1151,29699
qf_parse_get_fields(qf_parse_get_fields1208,31253
qf_parse_dir_pfx(int idx, qffields_T *fields, qf_list_T *qfl)qf_parse_dir_pfx1255,32367
qf_parse_file_pfx(qf_parse_file_pfx1279,32941
qf_parse_line_nomatch(char_u *linebuf, int linelen, qffields_T *fields)qf_parse_line_nomatch1310,33616
qf_parse_multiline_pfx(qf_parse_multiline_pfx1323,33970
qf_parse_line(qf_parse_line1380,35346
qf_stack_empty(qf_info_T *qi)qf_stack_empty1474,37581
qf_list_empty(qf_list_T *qfl)qf_list_empty1483,37752
qf_list_has_valid_entries(qf_list_T *qfl)qf_list_has_valid_entries1493,37950
qf_get_list(qf_info_T *qi, int idx)qf_get_list1502,38143
qf_alloc_fields(qffields_T *pfields)qf_alloc_fields1511,38315
qf_free_fields(qffields_T *pfields)qf_free_fields1529,38907
qf_setup_state(qf_setup_state1542,39185
qf_cleanup_state(qfstate_T *pstate)qf_cleanup_state1581,39999
qf_init_process_nextline(qf_init_process_nextline1596,40323
qf_init_ext(qf_init_ext1643,41577
qf_init(win_T	    *wp,qf_init1778,45080
qf_store_title(qf_list_T *qfl, char_u *title)qf_store_title1803,45642
qf_cmdtitle(char_u *cmd)qf_cmdtitle1824,46148
qf_get_curlist(qf_info_T *qi)qf_get_curlist1836,46411
qf_new_list(qf_info_T *qi, char_u *qf_title)qf_new_list1847,46684
locstack_queue_delreq(qf_info_T *qi)locstack_queue_delreq1880,47612
qf_stack_get_bufnr(void)qf_stack_get_bufnr1897,47864
wipe_qf_buffer(qf_info_T *qi)wipe_qf_buffer1907,48039
ll_free_all(qf_info_T **pqi)ll_free_all1928,48475
qf_free_all(win_T *wp)qf_free_all1963,49162
incr_quickfix_busy(void)incr_quickfix_busy1987,49736
decr_quickfix_busy(void)decr_quickfix_busy1996,49885
check_quickfix_busy(void)check_quickfix_busy2022,50372
qf_add_entry(qf_add_entry2039,50669
qf_alloc_stack(qfltype_T qfltype)qf_alloc_stack2131,52886
ll_get_or_alloc_list(win_T *wp)ll_get_or_alloc_list2150,53238
qf_cmd_get_stack(exarg_T *eap, int print_emsg)qf_cmd_get_stack2172,53937
qf_cmd_get_or_alloc_stack(exarg_T *eap, win_T **pwinp)qf_cmd_get_or_alloc_stack2198,54542
copy_loclist_entries(qf_list_T *from_qfl, qf_list_T *to_qfl)copy_loclist_entries2217,54868
copy_loclist(qf_list_T *from_qfl, qf_list_T *to_qfl)copy_loclist2258,55866
copy_loclist_stack(win_T *from, win_T *to)copy_loclist_stack2306,57109
qf_get_fnum(qf_list_T *qfl, char_u *directory, char_u *fname)qf_get_fnum2349,58090
qf_push_dir(char_u *dirbuf, struct dir_stack_T **stackptr, int is_file_stack)qf_push_dir2417,59739
qf_pop_dir(struct dir_stack_T **stackptr)qf_pop_dir2486,61375
qf_clean_dir_stack(struct dir_stack_T **stackptr)qf_clean_dir_stack2510,61914
qf_guess_filepath(qf_list_T *qfl, char_u *filename)qf_guess_filepath2543,62694
qflist_valid(win_T *wp, int_u qf_id)qflist_valid2586,63753
is_qf_entry_present(qf_list_T *qfl, qfline_T *qf_ptr)is_qf_entry_present2612,64326
get_next_valid_entry(get_next_valid_entry2633,64782
get_prev_valid_entry(get_prev_valid_entry2663,65422
get_nth_valid_entry(get_nth_valid_entry2695,66123
get_nth_entry(qf_list_T *qfl, int errornr, int *new_qfidx)get_nth_entry2740,67026
qf_get_entry(qf_get_entry2771,67932
qf_find_help_win(void)qf_find_help_win2793,68400
win_set_loclist(win_T *wp, qf_info_T *qi)win_set_loclist2808,68612
jump_to_help_window(qf_info_T *qi, int newwin, int *opened_window)jump_to_help_window2819,68814
qf_find_win_with_loclist(qf_info_T *ll)qf_find_win_with_loclist2870,70180
qf_find_win_with_normal_buf(void)qf_find_win_with_normal_buf2885,70423
qf_goto_tabwin_with_file(int fnum)qf_goto_tabwin_with_file2901,70732
qf_open_new_file_win(qf_info_T *ll_ref)qf_open_new_file_win2921,71087
qf_goto_win_with_ll_file(win_T *use_win, int qf_fnum, qf_info_T *ll_ref)qf_goto_win_with_ll_file2947,71873
qf_goto_win_with_qfl_file(int qf_fnum)qf_goto_win_with_qfl_file2987,72912
qf_jump_to_usable_window(int qf_fnum, int newwin, int *opened_window)qf_jump_to_usable_window3035,74173
qf_jump_edit_buffer(qf_jump_edit_buffer3094,75887
qf_jump_goto_line(qf_jump_goto_line3162,77494
qf_jump_print_msg(qf_jump_print_msg3209,78430
qf_jump_open_window(qf_jump_open_window3252,79874
qf_jump_to_buffer(qf_jump_to_buffer3289,80963
qf_jump(qf_info_T	*qi,qf_jump3337,82021
qf_jump_newwin(qf_info_T	*qi,qf_jump_newwin3357,82674
static int	qfFileAttr;qfFileAttr3455,84967
static int	qfSepAttr;qfSepAttr3456,84990
static int	qfLineAttr;qfLineAttr3457,85012
qf_list_entry(qfline_T *qfp, int qf_idx, int cursel)qf_list_entry3466,85263
qf_list(exarg_T *eap)qf_list3545,87606
qf_fmt_text(char_u *text, char_u *buf, int bufsize)qf_fmt_text3623,89373
qf_msg(qf_info_T *qi, int which, char *lead)qf_msg3648,89810
qf_age(exarg_T *eap)qf_age3682,90617
qf_history(exarg_T *eap)qf_history3723,91350
qf_free_items(qf_list_T *qfl)qf_free_items3761,92119
qf_free(qf_list_T *qfl)qf_free3808,93231
qf_mark_adjust(qf_mark_adjust3823,93462
qf_types(int c, int nr)qf_types3887,94852
qf_view_result(int split)qf_view_result3921,95528
ex_cwindow(exarg_T *eap)ex_cwindow3955,96255
ex_cclose(exarg_T *eap)ex_cclose3988,97010
qf_set_title_var(qf_list_T *qfl)qf_set_title_var4006,97338
qf_goto_cwindow(qf_info_T *qi, int resize, int sz, int vertsplit)qf_goto_cwindow4017,97611
qf_set_cwindow_options(void)qf_set_cwindow_options4045,98127
qf_open_new_cwindow(qf_info_T *qi, int height)qf_open_new_cwindow4068,98785
ex_copen(exarg_T *eap)ex_copen4140,100834
qf_win_goto(win_T *win, linenr_T lnum)qf_win_goto4195,102044
ex_cbottom(exarg_T *eap)ex_cbottom4216,102520
qf_current_entry(win_T *wp)qf_current_entry4234,102913
qf_win_pos_update(qf_win_pos_update4250,103277
is_qf_win(win_T *win, qf_info_T *qi)is_qf_win4284,104044
qf_find_win(qf_info_T *qi)qf_find_win4303,104601
qf_find_buf(qf_info_T *qi)qf_find_buf4318,104834
qf_update_win_titlevar(qf_info_T *qi)qf_update_win_titlevar4344,105317
qf_update_buffer(qf_info_T *qi, qfline_T *old_last)qf_update_buffer4362,105642
qf_buf_add_line(buf_T *buf, linenr_T lnum, qfline_T *qfp, char_u *dirname)qf_buf_add_line4402,106584
qf_fill_buffer(qf_list_T *qfl, buf_T *buf, qfline_T *old_last)qf_fill_buffer4486,108840
qf_list_changed(qf_list_T *qfl)qf_list_changed4571,110740
qf_id2nr(qf_info_T *qi, int_u qfid)qf_id2nr4581,110933
qf_restore_list(qf_info_T *qi, int_u save_qfid)qf_restore_list4599,111488
qf_jump_first(qf_info_T *qi, int_u save_qfid, int forceit)qf_jump_first4618,111828
grep_internal(cmdidx_T cmdidx)grep_internal4632,112153
make_get_auname(cmdidx_T cmdidx)make_get_auname4646,112452
get_mef_name(void)get_mef_name4666,112996
make_get_fullcmd(char_u *makecmd, char_u *fname)make_get_fullcmd4722,114095
ex_make(exarg_T *eap)ex_make4756,115037
qf_get_size(exarg_T *eap)qf_get_size4844,117190
qf_get_valid_size(exarg_T *eap)qf_get_valid_size4857,117439
qf_get_cur_idx(exarg_T *eap)qf_get_cur_idx4892,118109
qf_get_cur_valid_idx(exarg_T *eap)qf_get_cur_valid_idx4907,118430
qf_get_nth_valid_entry(qf_list_T *qfl, int n, int fdo)qf_get_nth_valid_entry4953,119427
ex_cc(exarg_T *eap)ex_cc4997,120157
ex_cnext(exarg_T *eap)ex_cnext5040,121230
qf_find_first_entry_in_buf(qf_list_T *qfl, int bnr, int *errornr)qf_find_first_entry_in_buf5086,122369
qf_find_first_entry_on_line(qfline_T *entry, int *errornr)qf_find_first_entry_on_line5106,122864
qf_find_last_entry_on_line(qfline_T *entry, int *errornr)qf_find_last_entry_on_line5126,123373
qf_entry_after_pos(qfline_T *qfp, pos_T *pos, int linewise)qf_entry_after_pos5146,123810
qf_entry_before_pos(qfline_T *qfp, pos_T *pos, int linewise)qf_entry_before_pos5161,124186
qf_entry_on_or_after_pos(qfline_T *qfp, pos_T *pos, int linewise)qf_entry_on_or_after_pos5176,124573
qf_entry_on_or_before_pos(qfline_T *qfp, pos_T *pos, int linewise)qf_entry_on_or_before_pos5191,124969
qf_find_entry_after_pos(qf_find_entry_after_pos5210,125676
qf_find_entry_before_pos(qf_find_entry_before_pos5251,126824
qf_find_closest_entry(qf_find_closest_entry5282,127512
qf_get_nth_below_entry(qfline_T *entry_arg, int n, int linewise, int *errornr)qf_get_nth_below_entry5313,128198
qf_get_nth_above_entry(qfline_T *entry, int n, int linewise, int *errornr)qf_get_nth_above_entry5344,128906
qf_find_nth_adj_entry(qf_find_nth_adj_entry5367,129511
ex_cbelow(exarg_T *eap)ex_cbelow5402,130307
cfile_get_auname(cmdidx_T cmdidx)cfile_get_auname5470,131915
ex_cfile(exarg_T *eap)ex_cfile5489,132415
vgr_get_auname(cmdidx_T cmdidx)vgr_get_auname5570,134603
vgr_init_regmatch(regmmatch_T *regmatch, char_u *s)vgr_init_regmatch5590,135189
vgr_display_fname(char_u *fname)vgr_display_fname5616,135767
vgr_load_dummy_buf(vgr_load_dummy_buf5640,136220
vgr_qflist_valid(vgr_qflist_valid5678,137146
vgr_match_buflines(vgr_match_buflines5712,137798
vgr_jump_to_match(vgr_jump_to_match5776,139228
    long	tomatch;	// maximum number of matches to findtomatch5809,139856
    char_u	*spat;		// search patternspat5810,139911
    int		flags;		// search modifierflags5811,139948
    char_u	**fnames;	// list of files to searchfnames5812,139984
    int		fcount;		// number of filesfcount5813,140032
    regmmatch_T	regmatch;	// compiled search patternregmatch5814,140069
    char_u	*qf_title;	// quickfix list titleqf_title5815,140122
} vgr_args_T;vgr_args_T5816,140167
vgr_process_args(vgr_process_args5824,140317
vgr_process_files(vgr_process_files5876,141387
ex_vimgrep(exarg_T *eap)ex_vimgrep6033,145725
restore_start_dir(char_u *dirname_start)restore_start_dir6141,148407
load_dummy_buffer(load_dummy_buffer6176,149475
wipe_dummy_buffer(buf_T *buf, char_u *dirname_start)wipe_dummy_buffer6269,152088
unload_dummy_buffer(buf_T *buf, char_u *dirname_start)unload_dummy_buffer6319,153409
get_qfline_items(qfline_T *qfp, list_T *list)get_qfline_items6336,153859
get_errorlist(qf_info_T *qi_arg, win_T *wp, int qf_idx, list_T *list)get_errorlist6374,155105
    QF_GETLIST_NONE	= 0x0,QF_GETLIST_NONE6413,155794
    QF_GETLIST_TITLE	= 0x1,QF_GETLIST_TITLE6414,155821
    QF_GETLIST_ITEMS	= 0x2,QF_GETLIST_ITEMS6415,155849
    QF_GETLIST_NR	= 0x4,QF_GETLIST_NR6416,155877
    QF_GETLIST_WINID	= 0x8,QF_GETLIST_WINID6417,155902
    QF_GETLIST_CONTEXT	= 0x10,QF_GETLIST_CONTEXT6418,155930
    QF_GETLIST_ID	= 0x20,QF_GETLIST_ID6419,155961
    QF_GETLIST_IDX	= 0x40,QF_GETLIST_IDX6420,155987
    QF_GETLIST_SIZE	= 0x80,QF_GETLIST_SIZE6421,156014
    QF_GETLIST_TICK	= 0x100,QF_GETLIST_TICK6422,156042
    QF_GETLIST_FILEWINID	= 0x200,QF_GETLIST_FILEWINID6423,156071
    QF_GETLIST_QFBUFNR	= 0x400,QF_GETLIST_QFBUFNR6424,156105
    QF_GETLIST_ALL	= 0x7FF,QF_GETLIST_ALL6425,156137
qf_get_list_from_lines(dict_T *what, dictitem_T *di, dict_T *retdict)qf_get_list_from_lines6433,156296
qf_winid(qf_info_T *qi)qf_winid6480,157417
qf_getprop_qfbufnr(qf_info_T *qi, dict_T *retdict)qf_getprop_qfbufnr6499,157886
qf_getprop_keys2flags(dict_T *what, int loclist)qf_getprop_keys2flags6509,158113
qf_getprop_qfidx(qf_info_T *qi, dict_T *what)qf_getprop_qfidx6568,159914
qf_getprop_defaults(qf_info_T *qi, int flags, int locstack, dict_T *retdict)qf_getprop_defaults6616,161130
qf_getprop_title(qf_list_T *qfl, dict_T *retdict)qf_getprop_title6656,162559
qf_getprop_filewinid(win_T *wp, qf_info_T *qi, dict_T *retdict)qf_getprop_filewinid6667,162891
qf_getprop_items(qf_info_T *qi, int qf_idx, dict_T *retdict)qf_getprop_items6685,163268
qf_getprop_ctx(qf_list_T *qfl, dict_T *retdict)qf_getprop_ctx6704,163634
qf_getprop_idx(qf_list_T *qfl, dict_T *retdict)qf_getprop_idx6732,164154
qf_get_properties(win_T *wp, dict_T *what, dict_T *retdict)qf_get_properties6747,164598
qf_add_entry_from_dict(qf_add_entry_from_dict6805,166656
qf_add_entries(qf_add_entries6884,168682
qf_setprop_get_qfidx(qf_setprop_get_qfidx6955,170411
qf_setprop_title(qf_info_T *qi, int qf_idx, dict_T *what, dictitem_T *di)qf_setprop_title7017,171956
qf_setprop_items(qf_info_T *qi, int qf_idx, dictitem_T *di, int action)qf_setprop_items7036,172371
qf_setprop_items_from_lines(qf_setprop_items_from_lines7056,172847
qf_setprop_context(qf_list_T *qfl, dictitem_T *di)qf_setprop_context7093,173718
qf_setprop_curidx(qf_info_T *qi, qf_list_T *qfl, dictitem_T *di)qf_setprop_curidx7110,174008
qf_set_properties(qf_info_T *qi, dict_T *what, int action, char_u *title)qf_set_properties7156,175220
qf_free_stack(win_T *wp, qf_info_T *qi)qf_free_stack7201,176510
set_errorlist(set_errorlist7256,177845
mark_quickfix_ctx(qf_info_T *qi, int copyID)mark_quickfix_ctx7300,178603
set_ref_in_quickfix(int copyID)set_ref_in_quickfix7322,179139
cbuffer_get_auname(cmdidx_T cmdidx)cbuffer_get_auname7359,179913
cbuffer_process_args(cbuffer_process_args7378,180477
ex_cbuffer(exarg_T *eap)ex_cbuffer7432,181522
cexpr_get_auname(cmdidx_T cmdidx)cexpr_get_auname7516,183575
ex_cexpr(exarg_T *eap)ex_cexpr7535,184119
hgr_get_ll(int *new_ll)hgr_get_ll7608,186043
hgr_search_file(hgr_search_file7640,186626
hgr_search_files_in_dir(hgr_search_files_in_dir7711,187916
hgr_search_in_rtp(qf_list_T *qfl, regmatch_T *p_regmatch, char_u *lang)hgr_search_in_rtp7758,189061
ex_helpgrep(exarg_T *eap)ex_helpgrep7791,189729
get_qf_loc_list(int is_qf, win_T *wp, typval_T *what_arg, typval_T *rettv)get_qf_loc_list7897,192127
f_getloclist(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_getloclist7928,192726
f_getqflist(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_getqflist7942,192978
set_qf_ll_list(set_qf_ll_list7953,193205
f_setloclist(typval_T *argvars, typval_T *rettv)f_setloclist8022,194679
f_setqflist(typval_T *argvars, typval_T *rettv)f_setqflist8037,194958

src/regexp_bt.c,8924
#define END	END138,5357
#define BOL	BOL139,5410
#define EOL	EOL140,5459
#define BRANCH	BRANCH141,5502
#define BACK	BACK143,5574
#define EXACTLY	EXACTLY144,5631
#define NOTHING	NOTHING145,5676
#define STAR	STAR146,5718
#define PLUS	PLUS148,5792
#define MATCH	MATCH150,5866
#define NOMATCH	NOMATCH151,5920
#define BEHIND	BEHIND152,5980
#define NOBEHIND	NOBEHIND153,6044
#define SUBPAT	SUBPAT154,6110
#define BRACE_SIMPLE	BRACE_SIMPLE155,6160
#define BOW	BOW157,6258
#define EOW	EOW158,6306
#define BRACE_LIMITS	BRACE_LIMITS159,6354
#define NEWL	NEWL161,6452
#define BHPOS	BHPOS162,6489
#define ADD_NL	ADD_NL166,6611
#define FIRST_NL	FIRST_NL167,6630
#define ANY	ANY168,6660
#define ANYOF	ANYOF169,6704
#define ANYBUT	ANYBUT170,6765
#define IDENT	IDENT172,6838
#define SIDENT	SIDENT173,6881
#define KWORD	KWORD174,6938
#define SKWORD	SKWORD175,6978
#define FNAME	FNAME176,7029
#define SFNAME	SFNAME177,7071
#define PRINT	PRINT178,7127
#define SPRINT	SPRINT179,7169
#define WHITE	WHITE180,7225
#define NWHITE	NWHITE181,7268
#define DIGIT	DIGIT182,7316
#define NDIGIT	NDIGIT183,7354
#define HEX	HEX184,7397
#define NHEX	NHEX185,7431
#define OCTAL	OCTAL186,7470
#define NOCTAL	NOCTAL187,7508
#define WORD	WORD188,7551
#define NWORD	NWORD189,7587
#define HEAD	HEAD190,7628
#define NHEAD	NHEAD191,7664
#define ALPHA	ALPHA192,7705
#define NALPHA	NALPHA193,7743
#define LOWER	LOWER194,7786
#define NLOWER	NLOWER195,7828
#define UPPER	UPPER196,7875
#define NUPPER	NUPPER197,7917
#define LAST_NL	LAST_NL198,7964
#define WITH_NL(WITH_NL199,7997
#define MOPEN	MOPEN201,8056
#define MCLOSE	MCLOSE204,8181
#define BACKREF	BACKREF206,8269
# define ZOPEN	ZOPEN209,8353
# define ZCLOSE	ZCLOSE211,8440
# define ZREF	ZREF212,8490
#define BRACE_COMPLEX	BRACE_COMPLEX215,8562
#define NOPEN	NOPEN217,8634
#define NCLOSE	NCLOSE219,8713
#define MULTIBYTECODE	MULTIBYTECODE221,8757
#define RE_BOF	RE_BOF222,8821
#define RE_EOF	RE_EOF223,8875
#define CURSOR	CURSOR224,8923
#define RE_LNUM	RE_LNUM226,8973
#define RE_COL	RE_COL227,9023
#define RE_VCOL	RE_VCOL228,9074
#define RE_MARK	RE_MARK230,9135
#define RE_VISUAL	RE_VISUAL231,9189
#define RE_COMPOSING	RE_COMPOSING232,9232
#define HASWIDTH	HASWIDTH237,9328
#define SIMPLE	SIMPLE238,9386
#define SPSTART	SPSTART239,9448
#define HASNL	HASNL240,9492
#define HASLOOKBH	HASLOOKBH241,9532
#define WORST	WORST242,9585
static int	num_complex_braces; // Complex \{...} countnum_complex_braces244,9618
static char_u	*regcode;	// Code-emit pointer, or JUST_CALC_SIZEregcode245,9673
static long	regsize;	// Code size.regsize246,9737
static int	reg_toolong;	// TRUE when offset out of rangereg_toolong247,9772
static char_u	had_endbrace[NSUBEXP];	// flags, TRUE if end of () foundhad_endbrace248,9829
static long	brace_min[10];	// Minimums for complex brace repeatsbrace_min249,9900
static long	brace_max[10];	// Maximums for complex brace repeatsbrace_max250,9965
static int	brace_count[10]; // Current counts for complex brace repeatsbrace_count251,10030
static int	one_exactly = FALSE;	// only do one char for EXACTLYone_exactly252,10102
static char_u	*classchars = (char_u *)".iIkKfFpPsSdDxXoOwWhHaAlLuU";classchars255,10232
static int	classcodes[] = {classcodes256,10301
#define JUST_CALC_SIZE	JUST_CALC_SIZE270,10650
typedef enum regstate_Eregstate_E273,10727
    RS_NOPEN = 0	// NOPEN and NCLOSERS_NOPEN275,10753
    , RS_MOPEN		// MOPEN + [0-9]RS_MOPEN276,10790
    , RS_MCLOSE		// MCLOSE + [0-9]RS_MCLOSE277,10823
    , RS_ZOPEN		// ZOPEN + [0-9]RS_ZOPEN279,10877
    , RS_ZCLOSE		// ZCLOSE + [0-9]RS_ZCLOSE280,10910
    , RS_BRANCH		// BRANCHRS_BRANCH282,10952
    , RS_BRCPLX_MORE	// BRACE_COMPLEX and trying one more matchRS_BRCPLX_MORE283,10979
    , RS_BRCPLX_LONG	// BRACE_COMPLEX and trying longest matchRS_BRCPLX_LONG284,11043
    , RS_BRCPLX_SHORT	// BRACE_COMPLEX and trying shortest matchRS_BRCPLX_SHORT285,11106
    , RS_NOMATCH	// NOMATCHRS_NOMATCH286,11171
    , RS_BEHIND1	// BEHIND / NOBEHIND matching restRS_BEHIND1287,11199
    , RS_BEHIND2	// BEHIND / NOBEHIND matching behind partRS_BEHIND2288,11251
    , RS_STAR_LONG	// STAR/PLUS/BRACE_SIMPLE longest matchRS_STAR_LONG289,11310
    , RS_STAR_SHORT	// STAR/PLUS/BRACE_SIMPLE shortest matchRS_STAR_SHORT290,11369
} regstate_T;regstate_T291,11430
	char_u	*ptr;	// rex.input pointer, for single-line regexpptr302,11669
	lpos_T	pos;	// rex.input pos, for multi-line regexppos303,11728
    } rs_u;rs_u304,11781
    int		rs_len;rs_len305,11793
} regsave_T;regsave_T306,11810
	char_u	*ptr;ptr313,11914
	lpos_T	pos;pos314,11928
    } se_u;se_u315,11941
} save_se_T;save_se_T316,11953
typedef struct regbehind_Sregbehind_S319,12008
    regsave_T	save_after;save_after321,12037
    regsave_T	save_behind;save_behind322,12063
    int		save_need_clear_subexpr;save_need_clear_subexpr323,12090
    save_se_T   save_start[NSUBEXP];save_start324,12124
    save_se_T   save_end[NSUBEXP];save_end325,12161
} regbehind_T;regbehind_T326,12196
typedef struct regitem_Sregitem_S334,12413
    regstate_T	rs_state;	// what we are doing, one of RS_ abovers_state336,12440
    short	rs_no;		// submatch nr or BEHIND/NOBEHINDrs_no337,12504
    char_u	*rs_scan;	// current node in programrs_scan338,12556
	save_se_T  sesave;sesave341,12620
	regsave_T  regsave;regsave342,12640
    } rs_un;			// room for saving rex.inputrs_un343,12661
} regitem_T;regitem_T344,12705
typedef struct regstar_Sregstar_S348,12769
    int		nextb;		// next bytenextb350,12796
    int		nextb_ic;	// next byte reverse casenextb_ic351,12826
    long	count;count352,12871
    long	minval;minval353,12887
    long	maxval;maxval354,12904
} regstar_T;regstar_T355,12921
typedef struct backpos_Sbackpos_S359,13059
    char_u	*bp_scan;	// "scan" where BACK was encounteredbp_scan361,13086
    regsave_T	bp_pos;		// last input positionbp_pos362,13144
} backpos_T;backpos_T363,13190
static garray_T	regstack = {0, 0, 0, 0, NULL};regstack372,13485
static garray_T	backpos = {0, 0, 0, 0, NULL};backpos373,13532
static regsave_T behind_pos;behind_pos375,13579
#define REGSTACK_INITIAL	REGSTACK_INITIAL388,14153
#define BACKPOS_INITIAL	BACKPOS_INITIAL389,14183
#define OP(OP428,15759
#define NEXT(NEXT429,15786
#define OPERAND(OPERAND430,15854
#define OPERAND_MIN(OPERAND_MIN432,15946
#define OPERAND_MAX(OPERAND_MAX435,16106
#define OPERAND_CMP(OPERAND_CMP437,16224
static int	regnarrate = 0;regnarrate450,16474
regcomp_start(regcomp_start458,16611
use_multibytecode(int c)use_multibytecode491,17305
regc(int b)regc502,17539
regmbc(int c)regmbc514,17708
#define REGMBC(REGMBC524,17885
#define CASEMBC(CASEMBC525,17914
reg_equi_class(int c)reg_equi_class533,18137
regnode(int op)regnode859,30775
re_put_long(char_u *p, long_u val)re_put_long879,31099
regnext(char_u *p)regnext894,31486
regtail(char_u *p, char_u *val)regtail915,31795
regoptail(char_u *p, char_u *val)regoptail954,32579
reginsert(int op, char_u *opnd)reginsert970,32975
reginsert_nr(int op, long val, char_u *opnd)reginsert_nr998,33464
reginsert_limits(reginsert_limits1029,34088
seen_endbrace(int refnum)seen_endbrace1066,34882
regatom(int *flagp)regatom1095,35581
regpiece(int *flagp)regpiece1891,53313
regconcat(int *flagp)regconcat2033,56741
regbranch(int *flagp)regbranch2110,58381
reg(reg2157,59604
bt_regcomp(char_u *expr, int re_flags)bt_regcomp2287,63395
vim_regcomp_had_eol(void)vim_regcomp_had_eol2408,66540
coll_get_char(void)coll_get_char2419,66723
bt_regfree(regprog_T *prog)bt_regfree2445,67251
#define ADVANCE_REGINPUT(ADVANCE_REGINPUT2450,67304
static long	bl_minval;bl_minval2457,67561
static long	bl_maxval;bl_maxval2458,67584
reg_save(regsave_T *save, garray_T *gap)reg_save2464,67683
reg_restore(regsave_T *save, garray_T *gap)reg_restore2480,67998
reg_save_equal(regsave_T *save)reg_save_equal2502,68488
#define save_se(save_se2511,68732
#define restore_se(restore_se2515,68897
save_se_multi(save_se_T *savep, lpos_T *posp)save_se_multi2529,69348
save_se_one(save_se_T *savep, char_u **pp)save_se_one2537,69520
regrepeat(regrepeat2548,69775
regstack_push(regstate_T state, char_u *scan)regstack_push2937,77641
regstack_pop(char_u **scan)regstack_pop2961,78122
save_subexpr(regbehind_T *bp)save_subexpr2976,78435
restore_subexpr(regbehind_T *bp)restore_subexpr3005,79085
regmatch(regmatch3045,80269
regtry(regtry4520,114443
bt_regexec_both(bt_regexec_both4605,116598
bt_regexec_nl(bt_regexec_nl4820,121989
bt_regexec_multi(bt_regexec_multi4848,122725
re_num_cmp(long_u val, char_u *scan)re_num_cmp4865,123273
regdump(char_u *pattern, bt_regprog_T *r)regdump4882,123590
regprop(char_u *op)regprop4968,125638

src/regexp.c,12670
#undef DEBUGDEBUG9,299
# define BT_REGEXP_DUMPBT_REGEXP_DUMP16,412
# define BT_REGEXP_LOGBT_REGEXP_LOG18,498
# define BT_REGEXP_DEBUG_LOGBT_REGEXP_DEBUG_LOG19,521
# define BT_REGEXP_DEBUG_LOG_NAME	BT_REGEXP_DEBUG_LOG_NAME20,550
#define Magic(Magic28,835
#define un_Magic(un_Magic29,869
#define is_Magic(is_Magic30,901
no_Magic(int x)no_Magic33,947
toggle_Magic(int x)toggle_Magic41,1039
#define REGMAGIC	REGMAGIC54,1345
#define UCHARAT(UCHARAT59,1399
#define EMSG_RET_NULL(EMSG_RET_NULL63,1548
#define IEMSG_RET_NULL(IEMSG_RET_NULL64,1626
#define EMSG_RET_FAIL(EMSG_RET_FAIL65,1706
#define EMSG2_RET_NULL(EMSG2_RET_NULL66,1776
#define EMSG3_RET_NULL(EMSG3_RET_NULL67,1890
#define EMSG2_RET_FAIL(EMSG2_RET_FAIL68,2012
#define EMSG_ONE_RET_NULL EMSG_ONE_RET_NULL69,2118
#define MAX_LIMIT	MAX_LIMIT72,2220
static char_u e_missingbracket[] = N_("E769: Missing ] after %s[");e_missingbracket74,2255
static char_u e_reverse_range[] = N_("E944: Reverse range in character class");e_reverse_range75,2323
static char_u e_large_class[] = N_("E945: Range too large in character class");e_large_class76,2403
static char_u e_unmatchedpp[] = N_("E53: Unmatched %s%%(");e_unmatchedpp77,2483
static char_u e_unmatchedp[] = N_("E54: Unmatched %s(");e_unmatchedp78,2543
static char_u e_unmatchedpar[] = N_("E55: Unmatched %s)");e_unmatchedpar79,2600
static char_u e_z_not_allowed[] = N_("E66: \\z( not allowed here");e_z_not_allowed81,2678
static char_u e_z1_not_allowed[] = N_("E67: \\z1 - \\z9 not allowed here");e_z1_not_allowed82,2746
static char_u e_missing_sb[] = N_("E69: Missing ] after %s%%[");e_missing_sb84,2829
static char_u e_empty_sb[]  = N_("E70: Empty %s%%[]");e_empty_sb85,2894
static char_u e_recursive[]  = N_("E956: Cannot use pattern recursively");e_recursive86,2949
#define NOT_MULTI	NOT_MULTI88,3025
#define MULTI_ONE	MULTI_ONE89,3045
#define MULTI_MULT	MULTI_MULT90,3065
#define RA_FAIL	RA_FAIL93,3119
#define RA_CONT	RA_CONT94,3165
#define RA_BREAK	RA_BREAK95,3210
#define RA_MATCH	RA_MATCH96,3249
#define RA_NOMATCH	RA_NOMATCH97,3288
re_multi_type(int c)re_multi_type105,3510
static char_u		*reg_prev_sub = NULL;reg_prev_sub114,3723
static char_u REGEXP_INRANGE[] = "]^-n\\";REGEXP_INRANGE132,4308
static char_u REGEXP_ABBR[] = "nrtebdoxuU";REGEXP_ABBR133,4351
backslash_trans(int c)backslash_trans139,4491
get_char_class(char_u **pp)get_char_class157,4886
#define CLASS_ALNUM CLASS_ALNUM162,4975
#define CLASS_ALPHA CLASS_ALPHA164,5009
#define CLASS_BLANK CLASS_BLANK166,5043
#define CLASS_CNTRL CLASS_CNTRL168,5077
#define CLASS_DIGIT CLASS_DIGIT170,5111
#define CLASS_GRAPH CLASS_GRAPH172,5145
#define CLASS_LOWER CLASS_LOWER174,5179
#define CLASS_PRINT CLASS_PRINT176,5213
#define CLASS_PUNCT CLASS_PUNCT178,5247
#define CLASS_SPACE CLASS_SPACE180,5281
#define CLASS_UPPER CLASS_UPPER182,5315
#define CLASS_XDIGIT CLASS_XDIGIT184,5351
#define CLASS_TAB CLASS_TAB186,5385
#define CLASS_RETURN CLASS_RETURN188,5419
#define CLASS_BACKSPACE CLASS_BACKSPACE190,5459
#define CLASS_ESCAPE CLASS_ESCAPE192,5499
#define CLASS_IDENT CLASS_IDENT194,5535
#define CLASS_KEYWORD CLASS_KEYWORD196,5572
#define CLASS_FNAME CLASS_FNAME198,5609
#define CLASS_NONE CLASS_NONE200,5639
static short	class_tab[256];class_tab219,6037
#define	    RI_DIGIT	RI_DIGIT221,6067
#define	    RI_HEX	RI_HEX222,6093
#define	    RI_OCTAL	RI_OCTAL223,6117
#define	    RI_WORD	RI_WORD224,6143
#define	    RI_HEAD	RI_HEAD225,6168
#define	    RI_ALPHA	RI_ALPHA226,6193
#define	    RI_LOWER	RI_LOWER227,6219
#define	    RI_UPPER	RI_UPPER228,6245
#define	    RI_WHITE	RI_WHITE229,6271
init_class_tab(void)init_class_tab232,6315
#define ri_digit(ri_digit274,7424
#define ri_hex(ri_hex275,7485
#define ri_octal(ri_octal276,7542
#define ri_word(ri_word277,7603
#define ri_head(ri_head278,7662
#define ri_alpha(ri_alpha279,7721
#define ri_lower(ri_lower280,7782
#define ri_upper(ri_upper281,7843
#define ri_white(ri_white282,7904
#define RF_ICASE RF_ICASE285,7988
#define RF_NOICASE RF_NOICASE286,8025
#define RF_HASNL RF_HASNL287,8068
#define RF_ICOMBINE RF_ICOMBINE288,8108
#define RF_LOOKBH RF_LOOKBH289,8161
static char_u	*regparse;	// Input-scan pointer.regparse295,8262
static int	regnpar;	// () count.regnpar296,8310
static int	regnzpar;	// \z() count.regnzpar298,8362
static int	re_has_z;	// \z item detectedre_has_z299,8398
static unsigned	regflags;	// RF_ flags for progregflags301,8446
static int	had_eol;	// TRUE when EOL found by vim_regcomp()had_eol303,8537
static int	reg_magic;	// magicness of the pattern:reg_magic306,8605
#define MAGIC_NONE	MAGIC_NONE307,8656
#define MAGIC_OFF	MAGIC_OFF308,8698
#define MAGIC_ON	MAGIC_ON309,8741
#define MAGIC_ALL	MAGIC_ALL310,8779
static int	reg_string;	// matching with a string instead of a bufferreg_string312,8819
static int	reg_strict;	// "[abc" is illegalreg_strict314,8900
static char_u META[] = "%&()*+.123456789<=>?@ACDFHIKLMOPSUVWX[_acdfhiklmnopsuvwxz{|~";META321,9038
static char_u META_flags[] = {META_flags324,9198
static int	curchr;		// currently parsed charactercurchr342,9905
static int	prevchr;prevchr346,10147
static int	prevprevchr;	// previous-previous characterprevprevchr347,10167
static int	nextchr;	// used for ungetchr()nextchr348,10222
#define REG_NOPAREN	REG_NOPAREN351,10289
#define REG_PAREN	REG_PAREN352,10329
#define REG_ZPAREN	REG_ZPAREN353,10357
#define REG_NPAREN	REG_NPAREN354,10387
     char_u	*regparse;regparse358,10435
     int	prevchr_len;prevchr_len359,10458
     int	curchr;curchr360,10480
     int	prevchr;prevchr361,10497
     int	prevprevchr;prevprevchr362,10515
     int	nextchr;nextchr363,10537
     int	at_start;at_start364,10555
     int	prev_at_start;prev_at_start365,10574
     int	regnpar;regnpar366,10598
} parse_state_T;parse_state_T367,10616
static regengine_T bt_regengine;bt_regengine385,11135
static regengine_T nfa_regengine;nfa_regengine386,11168
re_multiline(regprog_T *prog)re_multiline392,11295
get_equi_class(char_u **pp)get_equi_class403,11602
static char *EQUIVAL_CLASS_C[16] = {EQUIVAL_CLASS_C430,12011
get_coll_element(char_u **pp)get_coll_element457,12678
static int reg_cpo_lit; // 'cpoptions' contains 'l' flagreg_cpo_lit480,13036
static int reg_cpo_bsl; // 'cpoptions' contains '\' flagreg_cpo_bsl481,13093
get_cpo_flags(void)get_cpo_flags484,13167
skip_anyof(char_u *p)skip_anyof496,13483
skip_regexp(skip_regexp545,14604
static int	prevchr_len;	// byte length of previous charprevchr_len601,15649
static int	at_start;	// True when on the first characterat_start602,15705
static int	prev_at_start;  // True when on the second characterprev_at_start603,15762
initchr(char_u *str)initchr609,15877
save_parse_state(parse_state_T *ps)save_parse_state623,16173
restore_parse_state(parse_state_T *ps)restore_parse_state640,16553
peekchr(void)peekchr658,16938
skipchr(void)skipchr826,20871
skipchr_keepstart(void)skipchr_keepstart857,21653
getchr(void)getchr874,21977
ungetchr(void)ungetchr886,22116
gethexchrs(int maxinputlen)gethexchrs909,22752
getdecchrs(void)getdecchrs935,23185
getoctchrs(void)getoctchrs966,23832
read_limits(long *minval, long *maxval)read_limits994,24379
static char_u	*reg_tofree = NULL;reg_tofree1059,26054
static unsigned	reg_tofreelen;reg_tofreelen1060,26088
    regmatch_T		*reg_match;reg_match1080,26793
    regmmatch_T		*reg_mmatch;reg_mmatch1081,26821
    char_u		**reg_startp;reg_startp1082,26851
    char_u		**reg_endp;reg_endp1083,26877
    lpos_T		*reg_startpos;reg_startpos1084,26901
    lpos_T		*reg_endpos;reg_endpos1085,26928
    win_T		*reg_win;reg_win1086,26953
    buf_T		*reg_buf;reg_buf1087,26974
    linenr_T		reg_firstlnum;reg_firstlnum1088,26995
    linenr_T		reg_maxline;reg_maxline1089,27024
    int			reg_line_lbr;	// "\n" in string is line breakreg_line_lbr1090,27051
    linenr_T	lnum;		// line number, relative to first linelnum1093,27171
    char_u	*line;		// start of current lineline1094,27230
    char_u	*input;		// current input, points into "regline"input1095,27274
    int	need_clear_subexpr;	// subexpressions still need to be clearedneed_clear_subexpr1097,27335
    int	need_clear_zsubexpr;	// extmatch subexpressions still need to beneed_clear_zsubexpr1099,27425
    int			reg_ic;reg_ic1106,27733
    int			reg_icombine;reg_icombine1110,27885
    colnr_T		reg_maxcol;reg_maxcol1114,28016
    int nfa_has_zend;	    // NFA regexp \ze operator encountered.nfa_has_zend1117,28083
    int nfa_has_backref;    // NFA regexp \1 .. \9 encountered.nfa_has_backref1118,28149
    int nfa_nsubexpr;	    // Number of sub expressions actually being usednfa_nsubexpr1119,28213
    int nfa_listid;nfa_listid1125,28544
    int nfa_alt_listid;nfa_alt_listid1126,28564
    int nfa_has_zsubexpr;   // NFA regexp has \z( ), set zsubexpr.nfa_has_zsubexpr1129,28608
} regexec_T;regexec_T1131,28682
static regexec_T	rex;rex1133,28696
static int		rex_in_use = FALSE;rex_in_use1134,28718
reg_iswordc(int c)reg_iswordc1141,28864
reg_getline(linenr_T lnum)reg_getline1150,29032
static char_u	*reg_startzp[NSUBEXP];	// Workspace to mark beginningreg_startzp1163,29411
static char_u	*reg_endzp[NSUBEXP];	//   and end of \z(...\) matchesreg_endzp1164,29479
static lpos_T	reg_startzpos[NSUBEXP];	// idem, beginning posreg_startzpos1165,29547
static lpos_T	reg_endzpos[NSUBEXP];	// idem, end posreg_endzpos1166,29608
#define REG_MULTI	REG_MULTI1170,29705
make_extmatch(void)make_extmatch1177,29859
ref_extmatch(reg_extmatch_T *em)ref_extmatch1191,30066
unref_extmatch(reg_extmatch_T *em)unref_extmatch1203,30260
reg_prev_class(void)reg_prev_class1220,30507
reg_match_visual(void)reg_match_visual1232,30779
prog_magic_wrong(void)prog_magic_wrong1308,32431
cleanup_subexpr(void)cleanup_subexpr1331,32966
cleanup_zsubexpr(void)cleanup_zsubexpr1352,33432
reg_nextline(void)reg_nextline1376,33946
match_with_backref(match_with_backref1390,34259
re_mult_next(char *what)re_mult_next1460,35833
    int a, b, c;a1473,36064
    int a, b, c;b1473,36064
    int a, b, c;c1473,36064
} decomp_T;decomp_T1474,36081
static decomp_T decomp_table[0xfb4f-0xfb20+1] =decomp_table1478,36114
mb_decompose(int c, int *c1, int *c2, int *c3)mb_decompose1531,38292
cstrncmp(char_u *s1, char_u *s2, int *n)cstrncmp1555,38716
cstrchr(char_u *s, int c)cstrchr1607,39957
typedef void (*(*fptr_T)(int *, int))();fptr_T1660,41295
do_upper(int *d, int c)do_upper1665,41466
do_Upper(int *d, int c)do_Upper1673,41563
do_lower(int *d, int c)do_lower1681,41664
do_Lower(int *d, int c)do_Lower1689,41761
regtilde(char_u *source, int magic)regtilde1709,42372
static int can_f_submatch = FALSE;	// TRUE when submatch() can be usedcan_f_submatch1768,43771
    regmatch_T	*sm_match;sm_match1774,44024
    regmmatch_T	*sm_mmatch;sm_mmatch1775,44050
    linenr_T	sm_firstlnum;sm_firstlnum1776,44078
    linenr_T	sm_maxline;sm_maxline1777,44105
    int		sm_line_lbr;sm_line_lbr1778,44130
} regsubmatch_T;regsubmatch_T1779,44152
static regsubmatch_T rsm;  // can only be used when can_f_submatch is TRUErsm1781,44170
fill_submatch_list(int argc UNUSED, typval_T *argv, int argskip, int argcount)fill_submatch_list1791,44399
clear_submatch_list(staticList10_T *sl)clear_submatch_list1822,45223
vim_regsub(vim_regsub1850,46047
vim_regsub_multi(vim_regsub_multi1883,46688
vim_regsub_both(vim_regsub_both1917,47444
reg_getline_submatch(linenr_T lnum)reg_getline_submatch2326,56484
reg_submatch(int no)reg_submatch2348,57013
reg_submatch_list(int no)reg_submatch_list2443,59227
init_regexec_multi(init_regexec_multi2518,60710
static regengine_T bt_regengine =bt_regengine2538,61247
static regengine_T nfa_regengine =nfa_regengine2549,61402
static int regexp_engine = 0;regexp_engine2560,61629
static char_u regname[][30] = {regname2563,61673
vim_regcomp(char_u *expr_arg, int re_flags)vim_regcomp2577,62008
vim_regfree(regprog_T *prog)vim_regfree2671,64399
free_regexp_stuff(void)free_regexp_stuff2679,64534
report_re_switch(char_u *pat)report_re_switch2690,64706
regprog_in_use(regprog_T *prog)regprog_in_use2708,65077
vim_regexec_string(vim_regexec_string2724,65493
vim_regexec_prog(vim_regexec_prog2795,67143
vim_regexec(regmatch_T *rmp, char_u *line, colnr_T col)vim_regexec2816,67563
vim_regexec_nl(regmatch_T *rmp, char_u *line, colnr_T col)vim_regexec_nl2827,67866
vim_regexec_multi(vim_regexec_multi2842,68331

src/regexp_nfa.c,20028
# define NFA_REGEXP_ERROR_LOG	NFA_REGEXP_ERROR_LOG25,811
# define ENABLE_LOGENABLE_LOG26,864
# define NFA_REGEXP_DUMP_LOG	NFA_REGEXP_DUMP_LOG27,884
# define NFA_REGEXP_RUN_LOG	NFA_REGEXP_RUN_LOG28,935
# define NFA_REGEXP_DEBUG_LOG	NFA_REGEXP_DEBUG_LOG29,984
#define NFA_ADD_NL	NFA_ADD_NL33,1098
    NFA_SPLIT = -1024,NFA_SPLIT37,1129
    NFA_MATCH,NFA_MATCH38,1152
    NFA_EMPTY,			    // matches 0-lengthNFA_EMPTY39,1167
    NFA_START_COLL,		    // [abc] startNFA_START_COLL41,1209
    NFA_END_COLL,		    // [abc] endNFA_END_COLL42,1249
    NFA_START_NEG_COLL,		    // [^abc] startNFA_START_NEG_COLL43,1285
    NFA_END_NEG_COLL,		    // [^abc] end (postfix only)NFA_END_NEG_COLL44,1330
    NFA_RANGE,			    // range of the two previous itemsNFA_RANGE45,1386
    NFA_RANGE_MIN,		    // low end of a rangeNFA_RANGE_MIN47,1468
    NFA_RANGE_MAX,		    // high end of a rangeNFA_RANGE_MAX48,1514
    NFA_CONCAT,			    // concatenate two previous items (postfixNFA_CONCAT50,1562
    NFA_OR,			    // \| (postfix only)NFA_OR52,1644
    NFA_STAR,			    // greedy * (postfix only)NFA_STAR53,1683
    NFA_STAR_NONGREEDY,		    // non-greedy * (postfix only)NFA_STAR_NONGREEDY54,1730
    NFA_QUEST,			    // greedy \? (postfix only)NFA_QUEST55,1790
    NFA_QUEST_NONGREEDY,	    // non-greedy \? (postfix only)NFA_QUEST_NONGREEDY56,1839
    NFA_BOL,			    // ^    Begin lineNFA_BOL58,1901
    NFA_EOL,			    // $    End lineNFA_EOL59,1939
    NFA_BOW,			    // \<   Begin wordNFA_BOW60,1975
    NFA_EOW,			    // \>   End wordNFA_EOW61,2013
    NFA_BOF,			    // \%^  Begin fileNFA_BOF62,2049
    NFA_EOF,			    // \%$  End fileNFA_EOF63,2087
    NFA_NEWL,NFA_NEWL64,2123
    NFA_ZSTART,			    // Used for \zsNFA_ZSTART65,2137
    NFA_ZEND,			    // Used for \zeNFA_ZEND66,2175
    NFA_NOPEN,			    // Start of subexpression marked with \%(NFA_NOPEN67,2211
    NFA_NCLOSE,			    // End of subexpr. marked with \%( ... \)NFA_NCLOSE68,2274
    NFA_START_INVISIBLE,NFA_START_INVISIBLE69,2338
    NFA_START_INVISIBLE_FIRST,NFA_START_INVISIBLE_FIRST70,2363
    NFA_START_INVISIBLE_NEG,NFA_START_INVISIBLE_NEG71,2394
    NFA_START_INVISIBLE_NEG_FIRST,NFA_START_INVISIBLE_NEG_FIRST72,2423
    NFA_START_INVISIBLE_BEFORE,NFA_START_INVISIBLE_BEFORE73,2458
    NFA_START_INVISIBLE_BEFORE_FIRST,NFA_START_INVISIBLE_BEFORE_FIRST74,2490
    NFA_START_INVISIBLE_BEFORE_NEG,NFA_START_INVISIBLE_BEFORE_NEG75,2528
    NFA_START_INVISIBLE_BEFORE_NEG_FIRST,NFA_START_INVISIBLE_BEFORE_NEG_FIRST76,2564
    NFA_START_PATTERN,NFA_START_PATTERN77,2606
    NFA_END_INVISIBLE,NFA_END_INVISIBLE78,2629
    NFA_END_INVISIBLE_NEG,NFA_END_INVISIBLE_NEG79,2652
    NFA_END_PATTERN,NFA_END_PATTERN80,2679
    NFA_COMPOSING,		    // Next nodes in NFA are part of theNFA_COMPOSING81,2700
    NFA_END_COMPOSING,		    // End of a composing char in the NFANFA_END_COMPOSING83,2797
    NFA_ANY_COMPOSING,		    // \%C: Any composing characters.NFA_ANY_COMPOSING84,2863
    NFA_OPT_CHARS,		    // \%[abc]NFA_OPT_CHARS85,2925
    NFA_PREV_ATOM_NO_WIDTH,	    // Used for \@=NFA_PREV_ATOM_NO_WIDTH88,3032
    NFA_PREV_ATOM_NO_WIDTH_NEG,	    // Used for \@!NFA_PREV_ATOM_NO_WIDTH_NEG89,3080
    NFA_PREV_ATOM_JUST_BEFORE,	    // Used for \@<=NFA_PREV_ATOM_JUST_BEFORE90,3132
    NFA_PREV_ATOM_JUST_BEFORE_NEG,  // Used for \@<!NFA_PREV_ATOM_JUST_BEFORE_NEG91,3184
    NFA_PREV_ATOM_LIKE_PATTERN,	    // Used for \@>NFA_PREV_ATOM_LIKE_PATTERN92,3237
    NFA_BACKREF1,		    // \1NFA_BACKREF194,3290
    NFA_BACKREF2,		    // \2NFA_BACKREF295,3319
    NFA_BACKREF3,		    // \3NFA_BACKREF396,3348
    NFA_BACKREF4,		    // \4NFA_BACKREF497,3377
    NFA_BACKREF5,		    // \5NFA_BACKREF598,3406
    NFA_BACKREF6,		    // \6NFA_BACKREF699,3435
    NFA_BACKREF7,		    // \7NFA_BACKREF7100,3464
    NFA_BACKREF8,		    // \8NFA_BACKREF8101,3493
    NFA_BACKREF9,		    // \9NFA_BACKREF9102,3522
    NFA_ZREF1,			    // \z1NFA_ZREF1104,3570
    NFA_ZREF2,			    // \z2NFA_ZREF2105,3598
    NFA_ZREF3,			    // \z3NFA_ZREF3106,3626
    NFA_ZREF4,			    // \z4NFA_ZREF4107,3654
    NFA_ZREF5,			    // \z5NFA_ZREF5108,3682
    NFA_ZREF6,			    // \z6NFA_ZREF6109,3710
    NFA_ZREF7,			    // \z7NFA_ZREF7110,3738
    NFA_ZREF8,			    // \z8NFA_ZREF8111,3766
    NFA_ZREF9,			    // \z9NFA_ZREF9112,3794
    NFA_SKIP,			    // Skip charactersNFA_SKIP114,3829
    NFA_MOPEN,NFA_MOPEN116,3869
    NFA_MOPEN1,NFA_MOPEN1117,3884
    NFA_MOPEN2,NFA_MOPEN2118,3900
    NFA_MOPEN3,NFA_MOPEN3119,3916
    NFA_MOPEN4,NFA_MOPEN4120,3932
    NFA_MOPEN5,NFA_MOPEN5121,3948
    NFA_MOPEN6,NFA_MOPEN6122,3964
    NFA_MOPEN7,NFA_MOPEN7123,3980
    NFA_MOPEN8,NFA_MOPEN8124,3996
    NFA_MOPEN9,NFA_MOPEN9125,4012
    NFA_MCLOSE,NFA_MCLOSE127,4029
    NFA_MCLOSE1,NFA_MCLOSE1128,4045
    NFA_MCLOSE2,NFA_MCLOSE2129,4062
    NFA_MCLOSE3,NFA_MCLOSE3130,4079
    NFA_MCLOSE4,NFA_MCLOSE4131,4096
    NFA_MCLOSE5,NFA_MCLOSE5132,4113
    NFA_MCLOSE6,NFA_MCLOSE6133,4130
    NFA_MCLOSE7,NFA_MCLOSE7134,4147
    NFA_MCLOSE8,NFA_MCLOSE8135,4164
    NFA_MCLOSE9,NFA_MCLOSE9136,4181
    NFA_ZOPEN,NFA_ZOPEN139,4218
    NFA_ZOPEN1,NFA_ZOPEN1140,4233
    NFA_ZOPEN2,NFA_ZOPEN2141,4249
    NFA_ZOPEN3,NFA_ZOPEN3142,4265
    NFA_ZOPEN4,NFA_ZOPEN4143,4281
    NFA_ZOPEN5,NFA_ZOPEN5144,4297
    NFA_ZOPEN6,NFA_ZOPEN6145,4313
    NFA_ZOPEN7,NFA_ZOPEN7146,4329
    NFA_ZOPEN8,NFA_ZOPEN8147,4345
    NFA_ZOPEN9,NFA_ZOPEN9148,4361
    NFA_ZCLOSE,NFA_ZCLOSE150,4378
    NFA_ZCLOSE1,NFA_ZCLOSE1151,4394
    NFA_ZCLOSE2,NFA_ZCLOSE2152,4411
    NFA_ZCLOSE3,NFA_ZCLOSE3153,4428
    NFA_ZCLOSE4,NFA_ZCLOSE4154,4445
    NFA_ZCLOSE5,NFA_ZCLOSE5155,4462
    NFA_ZCLOSE6,NFA_ZCLOSE6156,4479
    NFA_ZCLOSE7,NFA_ZCLOSE7157,4496
    NFA_ZCLOSE8,NFA_ZCLOSE8158,4513
    NFA_ZCLOSE9,NFA_ZCLOSE9159,4530
    NFA_ANY,		//	Match any one character.NFA_ANY163,4575
    NFA_IDENT,		//	Match identifier charNFA_IDENT164,4617
    NFA_SIDENT,		//	Match identifier char but no digitNFA_SIDENT165,4658
    NFA_KWORD,		//	Match keyword charNFA_KWORD166,4713
    NFA_SKWORD,		//	Match word char but no digitNFA_SKWORD167,4751
    NFA_FNAME,		//	Match file name charNFA_FNAME168,4800
    NFA_SFNAME,		//	Match file name char but no digitNFA_SFNAME169,4840
    NFA_PRINT,		//	Match printable charNFA_PRINT170,4894
    NFA_SPRINT,		//	Match printable char but no digitNFA_SPRINT171,4934
    NFA_WHITE,		//	Match whitespace charNFA_WHITE172,4988
    NFA_NWHITE,		//	Match non-whitespace charNFA_NWHITE173,5029
    NFA_DIGIT,		//	Match digit charNFA_DIGIT174,5075
    NFA_NDIGIT,		//	Match non-digit charNFA_NDIGIT175,5111
    NFA_HEX,		//	Match hex charNFA_HEX176,5152
    NFA_NHEX,		//	Match non-hex charNFA_NHEX177,5184
    NFA_OCTAL,		//	Match octal charNFA_OCTAL178,5221
    NFA_NOCTAL,		//	Match non-octal charNFA_NOCTAL179,5257
    NFA_WORD,		//	Match word charNFA_WORD180,5298
    NFA_NWORD,		//	Match non-word charNFA_NWORD181,5332
    NFA_HEAD,		//	Match head charNFA_HEAD182,5371
    NFA_NHEAD,		//	Match non-head charNFA_NHEAD183,5405
    NFA_ALPHA,		//	Match alpha charNFA_ALPHA184,5444
    NFA_NALPHA,		//	Match non-alpha charNFA_NALPHA185,5480
    NFA_LOWER,		//	Match lowercase charNFA_LOWER186,5521
    NFA_NLOWER,		//	Match non-lowercase charNFA_NLOWER187,5561
    NFA_UPPER,		//	Match uppercase charNFA_UPPER188,5606
    NFA_NUPPER,		//	Match non-uppercase charNFA_NUPPER189,5646
    NFA_LOWER_IC,	//	Match [a-z]NFA_LOWER_IC190,5691
    NFA_NLOWER_IC,	//	Match [^a-z]NFA_NLOWER_IC191,5724
    NFA_UPPER_IC,	//	Match [A-Z]NFA_UPPER_IC192,5759
    NFA_NUPPER_IC,	//	Match [^A-Z]NFA_NUPPER_IC193,5792
    NFA_FIRST_NL = NFA_ANY + NFA_ADD_NL,NFA_FIRST_NL195,5828
    NFA_LAST_NL = NFA_NUPPER_IC + NFA_ADD_NL,NFA_LAST_NL196,5869
    NFA_CURSOR,		//	Match cursor posNFA_CURSOR198,5916
    NFA_LNUM,		//	Match line numberNFA_LNUM199,5953
    NFA_LNUM_GT,	//	Match > line numberNFA_LNUM_GT200,5989
    NFA_LNUM_LT,	//	Match < line numberNFA_LNUM_LT201,6029
    NFA_COL,		//	Match cursor columnNFA_COL202,6069
    NFA_COL_GT,		//	Match > cursor columnNFA_COL_GT203,6106
    NFA_COL_LT,		//	Match < cursor columnNFA_COL_LT204,6148
    NFA_VCOL,		//	Match cursor virtual columnNFA_VCOL205,6190
    NFA_VCOL_GT,	//	Match > cursor virtual columnNFA_VCOL_GT206,6236
    NFA_VCOL_LT,	//	Match < cursor virtual columnNFA_VCOL_LT207,6286
    NFA_MARK,		//	Match markNFA_MARK208,6336
    NFA_MARK_GT,	//	Match > markNFA_MARK_GT209,6365
    NFA_MARK_LT,	//	Match < markNFA_MARK_LT210,6398
    NFA_VISUAL,		//	Match Visual areaNFA_VISUAL211,6431
    NFA_CLASS_ALNUM,NFA_CLASS_ALNUM214,6509
    NFA_CLASS_ALPHA,NFA_CLASS_ALPHA215,6530
    NFA_CLASS_BLANK,NFA_CLASS_BLANK216,6551
    NFA_CLASS_CNTRL,NFA_CLASS_CNTRL217,6572
    NFA_CLASS_DIGIT,NFA_CLASS_DIGIT218,6593
    NFA_CLASS_GRAPH,NFA_CLASS_GRAPH219,6614
    NFA_CLASS_LOWER,NFA_CLASS_LOWER220,6635
    NFA_CLASS_PRINT,NFA_CLASS_PRINT221,6656
    NFA_CLASS_PUNCT,NFA_CLASS_PUNCT222,6677
    NFA_CLASS_SPACE,NFA_CLASS_SPACE223,6698
    NFA_CLASS_UPPER,NFA_CLASS_UPPER224,6719
    NFA_CLASS_XDIGIT,NFA_CLASS_XDIGIT225,6740
    NFA_CLASS_TAB,NFA_CLASS_TAB226,6762
    NFA_CLASS_RETURN,NFA_CLASS_RETURN227,6781
    NFA_CLASS_BACKSPACE,NFA_CLASS_BACKSPACE228,6803
    NFA_CLASS_ESCAPE,NFA_CLASS_ESCAPE229,6828
    NFA_CLASS_IDENT,NFA_CLASS_IDENT230,6850
    NFA_CLASS_KEYWORD,NFA_CLASS_KEYWORD231,6871
    NFA_CLASS_FNAMENFA_CLASS_FNAME232,6894
static int nfa_classcodes[] = {nfa_classcodes236,6951
static char_u e_nul_found[] = N_("E865: (NFA) Regexp end encountered prematurely");e_nul_found246,7313
static char_u e_misplaced[] = N_("E866: (NFA regexp) Misplaced %c");e_misplaced247,7397
static char_u e_ill_char_class[] = N_("E877: (NFA regexp) Invalid character class: %d");e_ill_char_class248,7466
static int nfa_re_flags; // re_flags passed to nfa_regcomp()nfa_re_flags251,7613
static int *post_start;  // holds the postfix form of r.e.post_start252,7674
static int *post_end;post_end253,7733
static int *post_ptr;post_ptr254,7755
static int nstate;	// Number of states in the NFA.nstate255,7777
static int istate;	// Index in the state vector, used in alloc_state()istate256,7828
static save_se_T *nfa_endp = NULL;nfa_endp259,7947
static int nfa_ll_index = 0;nfa_ll_index262,8044
#define EMIT(EMIT273,8432
nfa_regcomp_start(nfa_regcomp_start284,8703
nfa_get_reganch(nfa_state_T *start, int depth)nfa_get_reganch322,9636
nfa_get_regstart(nfa_state_T *start, int depth)nfa_get_regstart384,10749
nfa_get_match_text(nfa_state_T *start)nfa_get_match_text468,12378
realloc_post_list(void)realloc_post_list509,13115
nfa_recognize_char_class(char_u *start, char_u *end, int extra_newl)nfa_recognize_char_class542,14222
#   define CLASS_not	CLASS_not544,14293
#   define CLASS_af	CLASS_af545,14320
#   define CLASS_AF	CLASS_AF546,14346
#   define CLASS_az	CLASS_az547,14372
#   define CLASS_AZ	CLASS_AZ548,14398
#   define CLASS_o7	CLASS_o7549,14424
#   define CLASS_o9	CLASS_o9550,14450
#   define CLASS_underscore	CLASS_underscore551,14476
nfa_emit_equi_class(int c)nfa_emit_equi_class691,17255
#define EMIT2(EMIT2693,17284
#define EMITMBC(EMITMBC694,17331
# define A_circumflex A_circumflex700,17491
# define A_diaeresis A_diaeresis701,17518
# define A_grave A_grave702,17544
# define A_acute A_acute703,17566
# define A_virguilla A_virguilla704,17588
# define A_ring A_ring705,17614
# define C_cedilla C_cedilla706,17635
# define E_acute E_acute707,17659
# define E_circumflex E_circumflex708,17681
# define E_diaeresis E_diaeresis709,17708
# define E_grave E_grave710,17734
# define I_acute I_acute711,17756
# define I_circumflex I_circumflex712,17778
# define I_diaeresis I_diaeresis713,17805
# define I_grave I_grave714,17831
# define N_virguilla N_virguilla715,17853
# define O_circumflex O_circumflex716,17879
# define O_diaeresis O_diaeresis717,17906
# define O_grave O_grave718,17932
# define O_acute O_acute719,17954
# define O_virguilla O_virguilla720,17976
# define O_slash O_slash721,18002
# define U_circumflex U_circumflex722,18024
# define U_diaeresis U_diaeresis723,18051
# define U_grave U_grave724,18077
# define U_acute U_acute725,18099
# define Y_acute Y_acute726,18121
# define a_grave a_grave727,18143
# define a_acute a_acute728,18165
# define a_circumflex a_circumflex729,18187
# define a_virguilla a_virguilla730,18214
# define a_diaeresis a_diaeresis731,18240
# define a_ring a_ring732,18266
# define c_cedilla c_cedilla733,18287
# define e_grave e_grave734,18311
# define e_acute e_acute735,18333
# define e_circumflex e_circumflex736,18355
# define e_diaeresis e_diaeresis737,18382
# define i_grave i_grave738,18408
# define i_acute i_acute739,18430
# define i_circumflex i_circumflex740,18452
# define i_diaeresis i_diaeresis741,18479
# define n_virguilla n_virguilla742,18505
# define o_grave o_grave743,18531
# define o_acute o_acute744,18553
# define o_circumflex o_circumflex745,18575
# define o_virguilla o_virguilla746,18602
# define o_diaeresis o_diaeresis747,18628
# define o_slash o_slash748,18654
# define u_grave u_grave749,18676
# define u_acute u_acute750,18698
# define u_circumflex u_circumflex751,18720
# define u_diaeresis u_diaeresis752,18747
# define y_acute y_acute753,18773
# define y_diaeresis y_diaeresis754,18795
#undef EMIT2EMIT21170,33106
#undef EMITMBCEMITMBC1171,33119
nfa_regatom(void)nfa_regatom1195,33720
nfa_regpiece(void)nfa_regpiece1988,51422
nfa_regconcat(void)nfa_regconcat2197,56550
nfa_regbranch(void)nfa_regbranch2273,57984
nfa_reg(nfa_reg2320,59141
static char_u code[50];code2385,60665
nfa_set_code(int c)nfa_set_code2388,60706
static FILE *log_fd;log_fd2621,70068
static char_u e_log_open_failed[] = N_("Could not open temporary log file for writing, displaying on stderr... ");e_log_open_failed2622,70089
nfa_postfix_dump(char_u *expr, int retval)nfa_postfix_dump2628,70281
nfa_print_state(FILE *debugf, nfa_state_T *state)nfa_print_state2659,71013
nfa_print_state2(FILE *debugf, nfa_state_T *state, garray_T *indent)nfa_print_state22670,71235
nfa_dump(nfa_regprog_T *prog)nfa_dump2731,72479
re2post(void)re2post2758,73135
static nfa_state_T	*state_ptr; // points to nfa_prog->statestate_ptr2775,73547
alloc_state(int c, nfa_state_T *out, nfa_state_T *out1)alloc_state2781,73680
typedef union Ptrlist Ptrlist;Ptrlist2812,74331
union PtrlistPtrlist2813,74362
    Ptrlist	*next;next2815,74378
    nfa_state_T	*s;s2816,74397
struct FragFrag2819,74421
    nfa_state_T *start;start2821,74435
    Ptrlist	*out;out2822,74459
typedef struct Frag Frag_T;Frag_T2824,74480
frag(nfa_state_T *start, Ptrlist *out)frag2830,74579
list1(list12843,74765
patch(Ptrlist *l, nfa_state_T *s)patch2857,74954
append(Ptrlist *l1, Ptrlist *l2)append2873,75166
static Frag_T empty;empty2887,75376
st_error(int *postfix UNUSED, int *end UNUSED, int *p UNUSED)st_error2890,75414
st_push(Frag_T s, Frag_T **p, Frag_T *stack_end)st_push2935,76405
st_pop(Frag_T **p, Frag_T *stack)st_pop2949,76613
nfa_max_width(nfa_state_T *startstate, int depth)nfa_max_width2965,76890
post2nfa(int *postfix, int *end, int nfa_calc_size)post2nfa3184,81381
#define PUSH(PUSH3203,81748
#define POP(POP3204,81801
#undef POP1POP13707,93272
#undef PUSH1PUSH13708,93284
#undef POP2POP23709,93297
#undef PUSH2PUSH23710,93309
#undef POPPOP3711,93322
#undef PUSHPUSH3712,93333
nfa_postprocess(nfa_regprog_T *prog)nfa_postprocess3719,93444
    int	    in_use; // number of subexpr with useful infoin_use3777,94961
	struct multiposmultipos3782,95107
	    linenr_T	start_lnum;start_lnum3784,95127
	    linenr_T	end_lnum;end_lnum3785,95153
	    colnr_T	start_col;start_col3786,95177
	    colnr_T	end_col;end_col3787,95201
	} multi[NSUBEXP];multi3788,95223
	struct lineposlinepos3789,95242
	    char_u	*start;start3791,95261
	    char_u	*end;end3792,95281
	} line[NSUBEXP];line3793,95299
    } list;list3794,95317
} regsub_T;regsub_T3795,95329
    regsub_T	norm; // \( .. \) matchesnorm3799,95359
    regsub_T	synt; // \z( .. \) matchessynt3801,95417
} regsubs_T;regsubs_T3803,95464
typedef struct nfa_pim_S nfa_pim_T;nfa_pim_T3806,95527
struct nfa_pim_Snfa_pim_S3807,95563
    int		result;		// NFA_PIM_*, see belowresult3809,95582
    nfa_state_T	*state;		// the invisible match start statestate3810,95624
    regsubs_T	subs;		// submatch info, only party usedsubs3811,95684
	lpos_T	pos;pos3814,95755
	char_u	*ptr;ptr3815,95768
    } end;			// where the match must endend3816,95782
#define NFA_PIM_UNUSED NFA_PIM_UNUSED3820,95860
#define NFA_PIM_TODO NFA_PIM_TODO3821,95903
#define NFA_PIM_MATCH NFA_PIM_MATCH3822,95950
#define NFA_PIM_NOMATCH NFA_PIM_NOMATCH3823,96002
    nfa_state_T	*state;state3829,96136
    int		count;count3830,96160
    nfa_pim_T	pim;		// if pim.result != NFA_PIM_UNUSED: postponedpim3831,96176
    regsubs_T	subs;		// submatch info, only party usedsubs3833,96265
} nfa_thread_T;nfa_thread_T3834,96320
    nfa_thread_T    *t;		// allocated array of statest3839,96415
    int		    n;		// nr of states currently in "t"n3840,96469
    int		    len;	// max nr of states in "t"len3841,96519
    int		    id;		// ID of the listid3842,96564
    int		    has_pim;	// TRUE when any state has a PIMhas_pim3843,96600
} nfa_list_T;nfa_list_T3844,96655
log_subsexpr(regsubs_T *subs)log_subsexpr3850,96745
log_subexpr(regsub_T *sub)log_subexpr3860,96911
pim_info(nfa_pim_T *pim)pim_info3885,97508
static int	    nfa_match;nfa_match3902,97837
static proftime_T  *nfa_time_limit;nfa_time_limit3904,97883
static int	   *nfa_timed_out;nfa_timed_out3905,97919
static int	    nfa_time_count;nfa_time_count3906,97949
copy_pim(nfa_pim_T *to, nfa_pim_T *from)copy_pim3916,98178
clear_sub(regsub_T *sub)clear_sub3929,98474
copy_sub(regsub_T *to, regsub_T *from)copy_sub3945,98819
copy_sub_off(regsub_T *to, regsub_T *from)copy_sub_off3966,99277
copy_ze_off(regsub_T *to, regsub_T *from)copy_ze_off3988,99812
sub_equal(regsub_T *sub1, regsub_T *sub2)sub_equal4013,100347
report_state(char *action,report_state4094,101872
has_state_with_pos(has_state_with_pos4120,102466
pim_equal(nfa_pim_T *one, nfa_pim_T *two)pim_equal4149,103148
match_follows(nfa_state_T *startstate, int depth)match_follows4174,103864
state_in_list(state_in_list4267,105915
#define ADDSTATE_HERE_OFFSET ADDSTATE_HERE_OFFSET4281,106285
addstate(addstate4289,106511
addstate_here(addstate_here4752,117253
check_char_class(int class, int c)check_char_class4837,119491
match_backref(match_backref4931,121292
match_zref(match_zref4996,122760
nfa_save_listids(nfa_regprog_T *prog, int *list)nfa_save_listids5026,123411
nfa_restore_listids(nfa_regprog_T *prog, int *list)nfa_restore_listids5045,123775
nfa_re_num_cmp(long_u val, int op, long_u pos)nfa_re_num_cmp5059,123997
recursive_regmatch(recursive_regmatch5074,124390
failure_chance(nfa_state_T *state, int depth)failure_chance5257,129116
skip_to_start(int c, colnr_T *colp)skip_to_start5417,132210
find_match_text(colnr_T startcol, int regstart, char_u *match_text)find_match_text5438,132680
nfa_did_time_out()nfa_did_time_out5491,133894
nfa_regmatch(nfa_regmatch5517,134511
#define	ADD_STATE_IF_MATCH(ADD_STATE_IF_MATCH5624,137081
#undef ADD_STATE_IF_MATCHADD_STATE_IF_MATCH6958,169954
nfa_regtry(nfa_regtry6971,170210
nfa_regexec_both(nfa_regexec_both7114,173814
nfa_regcomp(char_u *expr, int re_flags)nfa_regcomp7228,176780
nfa_regfree(regprog_T *prog)nfa_regfree7339,179283
nfa_regexec_nl(nfa_regexec_nl7358,179788
nfa_regexec_multi(nfa_regexec_multi7403,181113
# undef ENABLE_LOGENABLE_LOG7417,181586

src/register.c,3203
static yankreg_T	y_regs[NUM_REGISTERS];y_regs25,708
static yankreg_T	*y_current;	    // ptr to current yankregy_current27,749
static int		y_append;	    // TRUE when appendingy_append28,808
static yankreg_T	*y_previous = NULL; // ptr to last written yankregy_previous29,857
get_y_regs(void)get_y_regs47,1522
get_y_current(void)get_y_current53,1579
get_y_previous(void)get_y_previous59,1642
set_y_previous(yankreg_T *yreg)set_y_previous65,1700
static char_u	*expr_line = NULL;expr_line74,1862
get_expr_register(void)get_expr_register81,2009
set_expr_line(char_u *new_line)set_expr_line100,2365
get_expr_line(void)get_expr_line111,2586
get_expr_line_src(void)get_expr_line_src142,3259
valid_yank_reg(valid_yank_reg155,3532
get_yank_register(int regname, int writing)get_yank_register195,4458
may_get_selection(int regname)may_get_selection250,5785
get_register(get_register275,6266
put_register(int name, void *reg)put_register327,7428
free_register(void *reg)free_register343,7799
yank_register_mline(int regname)yank_register_mline359,8050
do_record(int c)do_record375,8419
stuff_yank(int regname, char_u *p)stuff_yank431,9726
static int execreg_lastc = NUL;execreg_lastc481,10682
get_execreg_lastc(void)get_execreg_lastc484,10723
set_execreg_lastc(int lastc)set_execreg_lastc490,10787
do_execreg(do_execreg501,10967
put_reedit_in_typebuf(int silent)put_reedit_in_typebuf630,14184
put_in_typebuf(put_in_typebuf659,14756
insert_reg(insert_reg698,15580
get_spec_reg(get_spec_reg760,17069
cmdline_paste_reg(cmdline_paste_reg855,19413
adjust_clip_reg(int *rp)adjust_clip_reg892,20416
shift_delete_registers()shift_delete_registers916,21089
yank_do_autocmd(oparg_T *oap, yankreg_T *reg)yank_do_autocmd932,21425
init_yank(void)init_yank995,22898
clear_registers(void)clear_registers1005,23048
free_yank(long n)free_yank1023,23351
free_yank_all(void)free_yank_all1054,23953
op_yank(oparg_T *oap, int deleting, int mess)op_yank1068,24333
yank_copy_line(struct block_def *bd, long y_idx)yank_copy_line1391,32690
copy_yank_reg(yankreg_T *reg)copy_yank_reg1414,33291
do_put(do_put1446,34068
get_register_name(int num)get_register_name2126,51734
ex_display(exarg_T *eap)ex_display2162,52309
dis_msg(dis_msg2328,56135
clip_free_selection(Clipboard_T *cbd)clip_free_selection2353,56596
clip_get_selection(Clipboard_T *cbd)clip_get_selection2370,56931
clip_yank_selection(clip_yank_selection2431,58585
clip_convert_selection(char_u **str, long_u *len, Clipboard_T *cbd)clip_convert_selection2455,59046
may_set_selection(void)may_set_selection2514,60223
dnd_yank_drag_data(char_u *str, long len)dnd_yank_drag_data2536,60707
get_reg_type(int regname, long *reglen)get_reg_type2555,61050
getreg_wrap_one_line(char_u *s, int flags)getreg_wrap_one_line2599,62116
get_reg_contents(int regname, int flags)get_reg_contents2630,62855
init_write_reg(init_write_reg2723,65001
finish_write_reg(finish_write_reg2747,65511
write_reg_contents(write_reg_contents2773,66323
write_reg_contents_lst(write_reg_contents_lst2783,66498
write_reg_contents_ex(write_reg_contents_ex2824,67388
str_to_reg(str_to_reg2904,68912

src/screen.c,4764
static int	screen_attr = 0;screen_attr45,1829
static int screen_char_attr = 0;screen_char_attr57,2326
conceal_cursor_line(win_T *wp)conceal_cursor_line65,2530
conceal_check_cursor_line(void)conceal_check_cursor_line88,2951
get_wcr_attr(win_T *wp)get_wcr_attr105,3359
screen_fill_end(screen_fill_end128,3834
win_draw_end(win_draw_end163,4545
compute_foldcolumn(win_T *wp, int col)compute_foldcolumn228,6125
fill_foldcolumn(fill_foldcolumn244,6469
comp_char_differs(int off_from, int off_to)comp_char_differs296,7689
char_needs_redraw(int off_from, int off_to, int cols)char_needs_redraw318,8239
screen_get_current_line_off()screen_get_current_line_off345,9134
blocked_by_popup(int row, int col)blocked_by_popup357,9383
reset_screen_attr(void)reset_screen_attr372,9668
screen_line(screen_line399,10624
# define CHAR_CELLS CHAR_CELLS422,11270
rl_mirror(char_u *str)rl_mirror794,21482
draw_vsep_win(win_T *wp, int row)draw_vsep_win812,21757
status_match_len(expand_T *xp, char_u *s)status_match_len834,22222
skip_status_match_char(expand_T *xp, char_u *s)skip_status_match_char862,22813
win_redr_status_matches(win_redr_status_matches889,23503
#define L_MATCH(L_MATCH896,23646
stl_connected(win_T *wp)stl_connected1103,27897
get_keymap_str(get_keymap_str1130,28280
win_redr_custom(win_redr_custom1180,29356
screen_putchar(int c, int row, int col, int attr)screen_putchar1369,33878
screen_getbytes(int row, int col, char_u *bytes, int *attrp)screen_getbytes1388,34235
screen_comp_differs(int off, int *u8cc)screen_comp_differs1422,35072
screen_puts(screen_puts1443,35599
screen_puts_len(screen_puts_len1457,35829
start_search_hl(void)start_search_hl1717,42444
end_search_hl(void)end_search_hl1734,42767
screen_start_highlight(int attr)screen_start_highlight1745,42954
screen_stop_highlight(void)screen_stop_highlight1880,46401
reset_cterm_colors(void)reset_cterm_colors2019,49386
screen_char(unsigned off, int row, int col)screen_char2048,50006
screen_char_2(unsigned off, int row, int col)screen_char_22147,52554
screen_draw_rectangle(screen_draw_rectangle2173,53364
redraw_block(int row, int end, win_T *wp)redraw_block2216,54134
space_to_screenline(int off, int attr)space_to_screenline2239,54483
screen_fill(screen_fill2253,54827
check_for_delay(int check_msg_scroll)check_for_delay2440,59351
clear_TabPageIdxs(void)clear_TabPageIdxs2458,59725
screen_valid(int doclear)screen_valid2473,60097
screenalloc(int doclear)screenalloc2490,60693
free_screenlines(void)free_screenlines2827,70967
screenclear(void)screenclear2848,71402
screenclear2(void)screenclear22856,71584
lineclear(unsigned off, int width, int attr)lineclear2919,73019
lineinvalid(unsigned off, int width)lineinvalid2933,73443
linecopy(int to, int from, win_T *wp)linecopy2942,73649
can_clear(char_u *p)can_clear2972,74633
screen_start(void)screen_start2997,75182
windgoto(int row, int col)windgoto3008,75439
#define GOTO_COST GOTO_COST3020,75656
#define HIGHL_COST HIGHL_COST3021,75726
#define PLAN_LE	PLAN_LE3023,75785
#define PLAN_CR	PLAN_CR3024,75807
#define PLAN_NL	PLAN_NL3025,75829
#define PLAN_WRITE PLAN_WRITE3026,75851
setcursor(void)setcursor3254,80936
setcursor_mayforce(int force)setcursor_mayforce3264,81106
win_ins_lines(win_ins_lines3292,81901
win_del_lines(win_del_lines3371,83908
win_do_lines(win_do_lines3423,85212
win_rest_invalid(win_T *wp)win_rest_invalid3506,87498
#define USE_T_CAL USE_T_CAL3530,88247
#define USE_T_CDL USE_T_CDL3531,88269
#define USE_T_AL USE_T_AL3532,88291
#define USE_T_CE USE_T_CE3533,88313
#define USE_T_DL USE_T_DL3534,88335
#define USE_T_SR USE_T_SR3535,88357
#define USE_NL	USE_NL3536,88379
#define USE_T_CD USE_T_CD3537,88400
#define USE_REDRAW USE_REDRAW3538,88422
screen_ins_lines(screen_ins_lines3549,88768
screen_del_lines(screen_del_lines3779,95488
skip_showmode()skip_showmode4028,102458
showmode(void)showmode4053,103149
msg_pos_mode(void)msg_pos_mode4240,107910
unshowmode(int force)unshowmode4252,108155
clearmode(void)clearmode4267,108446
recording_mode(int attr)recording_mode4282,108706
draw_tabline(void)draw_tabline4298,108971
get_trans_bufname(buf_T *buf)get_trans_bufname4481,112877
fillchar_status(int *attr, win_T *wp)fillchar_status4494,113204
fillchar_vsep(int *attr)fillchar_vsep4541,114117
redrawing(void)redrawing4554,114325
messaging(void)messaging4572,114656
#define COL_RULER COL_RULER4584,114973
comp_col(void)comp_col4587,115044
number_width(win_T *wp)number_width4633,116097
screen_screencol(void)screen_screencol4680,117177
screen_screenrow(void)screen_screenrow4690,117343
set_chars_option(char_u **varp)set_chars_option4701,117512

src/scriptfile.c,3553
static garray_T		ga_loaded = {0, 0, sizeof(char_u *), 4, NULL};ga_loaded18,481
estack_init(void)estack_init25,604
estack_push(etype_T type, char_u *name, long lnum)estack_push46,1042
estack_push_ufunc(etype_T type, ufunc_T *ufunc, long lnum)estack_push_ufunc72,1634
estack_pop(void)estack_pop86,1943
estack_sfile(void)estack_sfile96,2092
ex_runtime(exarg_T *eap)ex_runtime153,3386
source_callback(char_u *fname, void *cookie)source_callback185,4088
do_in_path(do_in_path201,4611
do_in_path_and_pp(do_in_path_and_pp338,7954
do_in_runtimepath(do_in_runtimepath383,9005
source_runtime(char_u *name, int flags)source_runtime400,9449
source_in_path(char_u *path, char_u *name, int flags, int *ret_sid)source_in_path409,9634
source_all_matches(char_u *pat)source_all_matches421,9916
add_pack_dir_to_rtp(char_u *fname)add_pack_dir_to_rtp439,10286
load_pack_plugin(char_u *fname)load_pack_plugin587,14253
static int APP_ADD_DIR;APP_ADD_DIR628,15264
static int APP_LOAD;APP_LOAD629,15288
static int APP_BOTH;APP_BOTH630,15309
add_pack_plugin(char_u *fname, void *cookie)add_pack_plugin633,15347
add_pack_start_dirs(void)add_pack_start_dirs668,15988
load_start_packages(void)load_start_packages678,16207
ex_packloadall(exarg_T *eap)ex_packloadall690,16469
ex_packadd(exarg_T *eap)ex_packadd706,16814
remove_duplicates(garray_T *gap)remove_duplicates741,17805
ExpandRTDir(ExpandRTDir769,18618
ExpandPackAddDir(ExpandPackAddDir865,20534
cmd_source(char_u *fname, exarg_T *eap)cmd_source913,21439
ex_source(exarg_T *eap)ex_source941,22112
ex_options(ex_options967,22551
struct source_cookiesource_cookie986,23042
    FILE	*fp;		// opened file for sourcingfp988,23065
    char_u	*nextline;	// if not NULL: line that was read aheadnextline989,23108
    linenr_T	sourcing_lnum;	// line number of the source filesourcing_lnum990,23171
    int		finished;	// ":finish" usedfinished991,23233
    int		fileformat;	// EOL_UNKNOWN, EOL_UNIX or EOL_DOSfileformat993,23286
    int		error;		// TRUE if LF found after CR-LFerror994,23343
    linenr_T	breakpoint;	// next line with breakpoint or zerobreakpoint997,23416
    char_u	*fname;		// name of sourced filefname998,23478
    int		dbg_tick;	// debug_tick when breakpoint was setdbg_tick999,23522
    int		level;		// top nesting level of sourced filelevel1000,23579
    vimconv_T	conv;		// type of conversionconv1002,23640
source_breakpoint(void *cookie)source_breakpoint1010,23802
source_dbg_tick(void *cookie)source_dbg_tick1019,23980
source_level(void *cookie)source_level1028,24135
# define USE_FOPEN_NOINHUSE_FOPEN_NOINH1035,24299
fopen_noinh_readbin(char *filename)fopen_noinh_readbin1041,24461
do_source(do_source1075,25284
ex_scriptnames(exarg_T *eap)ex_scriptnames1454,35143
scriptnames_slash_adjust(void)scriptnames_slash_adjust1485,35805
get_scriptname(scid_T id)get_scriptname1499,36071
free_scriptnames(void)free_scriptnames1516,36506
free_autoload_scriptnames(void)free_autoload_scriptnames1538,36902
get_one_sourceline(struct source_cookie *sp)get_one_sourceline1555,37212
getsourceline(int c UNUSED, void *cookie, int indent UNUSED, int do_concat)getsourceline1667,39868
ex_scriptencoding(exarg_T *eap)ex_scriptencoding1788,42865
ex_scriptversion(exarg_T *eap UNUSED)ex_scriptversion1820,43570
ex_finish(exarg_T *eap)ex_finish1854,44318
do_finish(exarg_T *eap, int reanimate)do_finish1868,44738
autoload_name(char_u *name)autoload_name1913,46054
script_autoload(script_autoload1936,46636

src/search.c,5128
static spat_T spats[2] =spats56,1774
static int last_idx = 0;	// index in spats[] for RE_LASTlast_idx62,1940
static char_u lastc[2] = {NUL, NUL};	// last character searched forlastc64,1998
static int lastcdir = FORWARD;		// last direction of character searchlastcdir65,2066
static int last_t_cmd = TRUE;		// last search t_cmdlast_t_cmd66,2136
static char_u	lastc_bytes[MB_MAXBYTES + 1];lastc_bytes67,2188
static int	lastc_bytelen = 1;	// >1 for multi-byte charlastc_bytelen68,2232
static spat_T	    saved_spats[2];saved_spats71,2366
static int	    saved_spats_last_idx = 0;saved_spats_last_idx73,2426
static int	    saved_spats_no_hlsearch = 0;saved_spats_no_hlsearch74,2467
static char_u	    *mr_pattern = NULL;	// pattern used by search_regcomp()mr_pattern77,2520
static int	    mr_pattern_alloced = FALSE; // mr_pattern was allocatedmr_pattern_alloced79,2616
typedef struct SearchedFileSearchedFile87,2825
    FILE	*fp;		// File pointerfp89,2855
    char_u	*name;		// Full name of filename90,2886
    linenr_T	lnum;		// Line we were up to in filelnum91,2926
    int		matched;	// Found a match in this filematched92,2976
} SearchedFile;SearchedFile93,3024
search_regcomp(search_regcomp111,3699
get_search_pat(void)get_search_pat199,5661
reverse_text(char_u *s)reverse_text210,5873
save_re_pat(int idx, char_u *pat, int magic)save_re_pat246,6403
static int save_level = 0;save_level268,6932
save_search_patterns(void)save_search_patterns271,6969
restore_search_patterns(void)restore_search_patterns289,7371
free_search_patterns(void)free_search_patterns309,7764
static spat_T	    saved_last_search_spat;saved_last_search_spat328,8120
static int	    did_save_last_search_spat = 0;did_save_last_search_spat329,8162
static int	    saved_last_idx = 0;saved_last_idx330,8208
static int	    saved_no_hlsearch = 0;saved_no_hlsearch331,8243
save_last_search_pattern(void)save_last_search_pattern342,8607
restore_last_search_pattern(void)restore_last_search_pattern357,8999
last_search_pattern(void)last_search_pattern377,9447
ignorecase(char_u *pat)ignorecase388,9652
ignorecase_opt(char_u *pat, int ic_in, int scs)ignorecase_opt397,9795
pat_has_uppercase(char_u *pat)pat_has_uppercase413,10112
last_csearch(void)last_csearch448,10705
last_csearch_forward(void)last_csearch_forward454,10761
last_csearch_until(void)last_csearch_until460,10833
set_last_csearch(int c, char_u *s UNUSED, int len UNUSED)set_last_csearch466,10903
set_csearch_direction(int cdir)set_csearch_direction478,11125
set_csearch_until(int t_cmd)set_csearch_until484,11192
last_search_pat(void)last_search_pat490,11263
reset_search_dir(void)reset_search_dir499,11405
set_last_search_pat(set_last_search_pat513,11721
last_pat_prog(regmmatch_T *regmatch)last_pat_prog563,12955
searchit(searchit597,14223
set_search_direction(int cdir)set_search_direction1131,28196
set_vv_searchforward(void)set_vv_searchforward1137,28277
first_submatch(regmmatch_T *rp)first_submatch1147,28497
do_search(do_search1187,29826
#define SEARCH_STAT_BUF_LEN SEARCH_STAT_BUF_LEN1208,30455
search_for_exact_line(search_for_exact_line1644,41509
searchc(cmdarg_T *cap, int t_cmd)searchc1724,43124
findmatch(oparg_T *oap, int initc)findmatch1851,45749
check_prevcol(check_prevcol1864,46085
find_rawstring_end(char_u *linep, pos_T *startpos, pos_T *endpos)find_rawstring_end1883,46503
find_mps_values(find_mps_values1927,47641
findmatchlimit(findmatchlimit2038,49853
check_linecomment(char_u *line)check_linecomment2683,65315
showmatch(showmatch2743,66669
findsent(int dir, long count)findsent2847,69826
findpar(findpar2973,72675
inmacro(char_u *opt, char_u *s)inmacro3058,74806
startPS(linenr_T lnum, int para, int both)startPS3087,75575
static int	cls_bigword;	// TRUE for "W", "B" or "E"cls_bigword3116,76260
cls(void)cls3126,76580
fwd_word(fwd_word3167,77399
bck_word(long count, int bigword, int stop)bck_word3237,78946
end_word(end_word3300,80649
bckend_word(bckend_word3368,82156
skip_chars(int cclass, int dir)skip_chars3415,83081
back_in_line(void)back_in_line3428,83348
find_first_blank(pos_T *posp)find_first_blank3447,83651
findsent_forward(findsent_forward3466,83908
current_word(current_word3486,84341
current_sent(oparg_T *oap, long count, int include)current_sent3660,88536
current_block(current_block3839,92768
in_html_tag(in_html_tag3988,96558
current_tagblock(current_tagblock4059,97870
current_par(current_par4266,102632
find_next_quote(find_next_quote4446,106667
find_prev_quote(find_prev_quote4478,107297
current_quote(current_quote4508,107934
is_zero_width(char_u *pattern, int move, pos_T *cur, int direction)is_zero_width4796,115470
current_search(current_search4859,117021
linewhite(linenr_T lnum)linewhite4998,120603
search_stat(search_stat5012,120841
#define OUT_OF_TIME OUT_OF_TIME5031,121304
find_pattern_in_path(find_pattern_in_path5145,124196
show_pat_in_path(show_pat_in_path5826,142284
get_spat(int idx)get_spat5893,143707
get_spat_last_idx(void)get_spat_last_idx5902,143815

src/session.c,1171
static int did_lcd;	// whether ":lcd" was produced for a sessiondid_lcd18,388
ses_put_fname(FILE *fd, char_u *name, unsigned *flagp)ses_put_fname27,660
ses_fname(FILE *fd, buf_T *buf, unsigned *flagp, int add_eol)ses_fname65,1413
ses_arglist(ses_arglist95,2234
ses_do_win(win_T *wp)ses_do_win142,3158
ses_do_frame(frame_T *fr)ses_do_frame167,3780
ses_skipframe(frame_T *fr)ses_skipframe184,4129
ses_win_rec(FILE *fd, frame_T *fr)ses_win_rec201,4523
ses_winsizes(ses_winsizes245,5667
put_view_curpos(FILE *fd, win_T *wp, char *spaces)put_view_curpos287,6633
put_view(put_view303,7029
store_session_globals(FILE *fd)store_session_globals501,12834
makeopens(makeopens574,14492
get_view_file(int c)get_view_file913,24644
ex_loadview(exarg_T *eap)ex_loadview976,25801
write_session_file(char_u *filename)write_session_file997,26342
# define MKSESSION_NLMKSESSION_NL1065,28673
static int mksession_nl = FALSE;    // use NL only in put_eol()mksession_nl1066,28695
ex_mkrc(exarg_T	*eap)ex_mkrc1073,28837
var_flavour(char_u *varname)var_flavour1300,34244
put_eol(FILE *fd)put_eol1321,34618
put_line(FILE *fd, char *s)put_line1341,34893

src/sha256.c,1005
#define GET_UINT32(GET_UINT3227,887
#define PUT_UINT32(PUT_UINT3235,1093
sha256_start(context_sha256_T *ctx)sha256_start44,1323
sha256_process(context_sha256_T *ctx, char_u data[64])sha256_process60,1683
#define  SHR(SHR82,2341
#define ROTR(ROTR83,2384
#define S0(S085,2434
#define S1(S186,2488
#define S2(S288,2545
#define S3(S389,2600
#define F0(F091,2656
#define F1(F192,2702
#define R(R94,2743
#define P(P100,2845
sha256_update(context_sha256_T *ctx, char_u *input, UINT32_T length)sha256_update192,6683
static char_u sha256_padding[64] = {sha256_padding228,7344
sha256_finish(context_sha256_T *ctx, char_u digest[32])sha256_finish236,7604
sha256_bytes(sha256_bytes271,8629
sha256_key(sha256_key299,9230
static char *sha_self_test_msg[] = {sha_self_test_msg315,9521
static char *sha_self_test_vector[] = {sha_self_test_vector321,9646
sha256_self_test(void)sha256_self_test335,10012
get_some_time(void)get_some_time380,11067
sha2_seed(sha2_seed398,11432

src/sign.c,6465
typedef struct sign sign_T;sign_T21,432
struct signsign23,461
    sign_T	*sn_next;	// next sign in listsn_next25,475
    int		sn_typenr;	// type number of signsn_typenr26,517
    char_u	*sn_name;	// name of signsn_name27,560
    char_u	*sn_icon;	// name of pixmapsn_icon28,597
    void	*sn_image;	// icon imagesn_image30,660
    char_u	*sn_text;	// text used instead of pixmapsn_text32,702
    int		sn_line_hl;	// highlight ID for linesn_line_hl33,754
    int		sn_text_hl;	// highlight ID for textsn_text_hl34,800
static sign_T	*first_sign = NULL;first_sign37,850
static int	next_sign_typenr = 1;next_sign_typenr38,884
# define SIGNCMD_DEFINE	SIGNCMD_DEFINE45,1055
# define SIGNCMD_UNDEFINE SIGNCMD_UNDEFINE47,1096
# define SIGNCMD_LIST	SIGNCMD_LIST49,1135
# define SIGNCMD_PLACE	SIGNCMD_PLACE51,1171
# define SIGNCMD_UNPLACE SIGNCMD_UNPLACE53,1210
# define SIGNCMD_JUMP	SIGNCMD_JUMP55,1248
# define SIGNCMD_LAST	SIGNCMD_LAST57,1280
static char *cmds[] = {cmds43,1018
static hashtab_T	sg_table;	// sign group (signgroup_T) hashtablesg_table60,1308
static int		next_sign_id = 1; // next sign id in the global groupnext_sign_id61,1373
init_signs(void)init_signs67,1501
sign_group_ref(char_u *groupname)sign_group_ref77,1726
sign_group_unref(char_u *groupname)sign_group_unref111,2458
sign_in_group(sign_entry_T *sign, char_u *group)sign_in_group136,3022
sign_group_for_window(sign_entry_T *sign, win_T *wp)sign_group_for_window149,3445
sign_group_get_next_signid(buf_T *buf, char_u *groupname)sign_group_get_next_signid161,3740
insert_sign(insert_sign205,4632
insert_sign_by_lnum_prio(insert_sign_by_lnum_prio266,6057
find_sign_by_typenr(int typenr)find_sign_by_typenr293,6885
sign_typenr2name(int typenr)sign_typenr2name307,7126
sign_get_info(sign_entry_T *sign)sign_get_info321,7397
sign_sort_by_prio_on_line(buf_T *buf, sign_entry_T *sign)sign_sort_by_prio_on_line343,8090
buf_addsign(buf_addsign413,10184
buf_change_sign_type(buf_change_sign_type454,11260
buf_get_signattrs(win_T *wp, linenr_T lnum, sign_attrs_T *sattr)buf_get_signattrs483,11994
buf_delsign(buf_delsign558,14258
buf_findsign(buf_findsign619,16022
buf_getsign_at_line(buf_getsign_at_line638,16518
buf_findsign_id(buf_findsign_id663,17147
buf_findsigntype_id(buf_findsigntype_id682,17601
buf_signcount(buf_T *buf, linenr_T lnum)buf_signcount709,18248
buf_delete_signs(buf_T *buf, char_u *group)buf_delete_signs736,18866
sign_list_placed(buf_T *rbuf, char_u *sign_group)sign_list_placed772,19773
sign_mark_adjust(sign_mark_adjust821,20913
sign_cmd_idx(sign_cmd_idx858,21846
sign_find(char_u *name, sign_T **sp_prev)sign_find877,22251
alloc_new_sign(char_u *name)alloc_new_sign898,22583
sign_define_init_icon(sign_T *sp, char_u *icon)sign_define_init_icon949,23713
sign_define_init_text(sign_T *sp, char_u *text)sign_define_init_text969,24122
sign_define_by_name(sign_define_by_name1029,25388
sign_exists_by_name(char_u *name)sign_exists_by_name1083,26441
sign_undefine_by_name(char_u *name, int give_error)sign_undefine_by_name1092,26575
sign_list_by_name(char_u *name)sign_list_by_name1113,26921
may_force_numberwidth_recompute(buf_T *buf, int unplace)may_force_numberwidth_recompute1125,27119
sign_place(sign_place1142,27521
sign_unplace(int sign_id, char_u *sign_group, buf_T *buf, linenr_T atlnum)sign_unplace1196,28829
sign_unplace_at_cursor(char_u *groupname)sign_unplace_at_cursor1230,29676
sign_jump(int sign_id, char_u *sign_group, buf_T *buf)sign_jump1245,30001
sign_define_cmd(char_u *sign_name, char_u *cmdline)sign_define_cmd1289,30893
sign_place_cmd(sign_place_cmd1347,31988
sign_unplace_cmd(sign_unplace_cmd1391,32878
sign_jump_cmd(sign_jump_cmd1460,34535
parse_sign_cmd_args(parse_sign_cmd_args1491,35272
ex_sign(exarg_T *eap)ex_sign1607,37491
sign_getinfo(sign_T *sp, dict_T *retdict)sign_getinfo1688,39336
sign_getlist(char_u *name, list_T *retlist)sign_getlist1718,40168
get_buffer_signs(buf_T *buf, list_T *l)get_buffer_signs1747,40734
sign_get_placed_in_buf(sign_get_placed_in_buf1763,41021
sign_get_placed(sign_get_placed1806,42097
sign_gui_started(void)sign_gui_started1829,42598
sign_list_defined(sign_T *sp)sign_list_defined1843,42830
sign_undefine(sign_T *sp, sign_T *sp_prev)sign_undefine1888,43684
sign_get_image(sign_get_image1909,44109
free_signs(void)free_signs1925,44385
    EXP_SUBCMD,		// expand :sign sub-commandsEXP_SUBCMD1933,44486
    EXP_DEFINE,		// expand :sign define {name} argsEXP_DEFINE1934,44532
    EXP_PLACE,		// expand :sign place {id} argsEXP_PLACE1935,44584
    EXP_LIST,		// expand :sign place argsEXP_LIST1936,44632
    EXP_UNPLACE,	// expand :sign unplace"EXP_UNPLACE1937,44674
    EXP_SIGN_NAMES,	// expand with name of placed signsEXP_SIGN_NAMES1938,44716
    EXP_SIGN_GROUPS	// expand with name of placed sign groupsEXP_SIGN_GROUPS1939,44772
} expand_what;expand_what1940,44834
get_nth_sign_name(int idx)get_nth_sign_name1946,44941
get_nth_sign_group_name(int idx)get_nth_sign_group_name1963,45306
get_sign_name(expand_T *xp UNUSED, int idx)get_sign_name1993,45850
set_context_in_sign_cmd(expand_T *xp, char_u *arg)set_context_in_sign_cmd2042,46804
sign_define_from_dict(char_u *name_arg, dict_T *dict)sign_define_from_dict2165,49631
sign_define_multiple(list_T *l, list_T *retlist)sign_define_multiple2210,50668
f_sign_define(typval_T *argvars, typval_T *rettv)f_sign_define2230,51057
f_sign_getdefined(typval_T *argvars, typval_T *rettv)f_sign_getdefined2265,51796
f_sign_getplaced(typval_T *argvars, typval_T *rettv)f_sign_getplaced2282,52124
f_sign_jump(typval_T *argvars, typval_T *rettv)f_sign_jump2343,53527
sign_place_from_dict(sign_place_from_dict2391,54521
f_sign_place(typval_T *argvars, typval_T *rettv)f_sign_place2513,56799
f_sign_placelist(typval_T *argvars, typval_T *rettv)f_sign_placelist2535,57266
sign_undefine_multiple(list_T *l, list_T *retlist)sign_undefine_multiple2566,57898
f_sign_undefine(typval_T *argvars, typval_T *rettv)f_sign_undefine2586,58297
sign_unplace_from_dict(typval_T *group_tv, dict_T *dict)sign_unplace_from_dict2625,59094
get_first_valid_sign(win_T *wp)get_first_valid_sign2687,60273
signcolumn_on(win_T *wp)signcolumn_on2702,60574
f_sign_unplace(typval_T *argvars, typval_T *rettv)f_sign_unplace2725,61165
f_sign_unplacelist(typval_T *argvars, typval_T *rettv)f_sign_unplacelist2754,61648

src/sound.c,2216
static long	    sound_id = 0;sound_id18,389
typedef struct soundcb_S soundcb_T;soundcb_T20,420
struct soundcb_S {soundcb_S22,457
    callback_T	snd_callback;snd_callback23,476
    MCIDEVICEID	snd_device_id;snd_device_id25,518
    long	snd_id;snd_id26,549
    soundcb_T	*snd_next;snd_next28,573
static soundcb_T    *first_callback = NULL;first_callback31,602
has_any_sound_callback(void)has_any_sound_callback38,812
get_sound_callback(typval_T *arg)get_sound_callback44,904
delete_sound_callback(soundcb_T *soundcb)delete_sound_callback71,1448
static ca_context   *context = NULL;context96,1938
typedef struct soundcb_queue_S soundcb_queue_T;soundcb_queue_T99,2046
struct soundcb_queue_S {soundcb_queue_S101,2095
    soundcb_queue_T	*scb_next;scb_next102,2120
    uint32_t		scb_id;		// ID of the soundscb_id103,2151
    int			scb_result;	// CA_ valuescb_result104,2193
    soundcb_T		*scb_callback;	// function to callscb_callback105,2228
static soundcb_queue_T *callback_queue = NULL;callback_queue109,2334
sound_callback(sound_callback117,2609
has_sound_callback_in_queue(void)has_sound_callback_in_queue143,3199
invoke_sound_callback(void)invoke_sound_callback152,3323
sound_play_common(typval_T *argvars, typval_T *rettv, int playfile)sound_play_common180,3909
f_sound_playevent(typval_T *argvars, typval_T *rettv)f_sound_playevent226,5098
f_sound_playfile(typval_T *argvars, typval_T *rettv)f_sound_playfile235,5278
f_sound_stop(typval_T *argvars, typval_T *rettv UNUSED)f_sound_stop244,5435
f_sound_clear(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_sound_clear254,5629
sound_free(void)sound_free265,5832
static HWND g_hWndSound = NULL;g_hWndSound291,6253
sound_wndproc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)sound_wndproc294,6314
sound_window()sound_window334,7265
f_sound_playevent(typval_T *argvars, typval_T *rettv)f_sound_playevent350,7597
f_sound_playfile(typval_T *argvars, typval_T *rettv)f_sound_playfile365,7875
f_sound_stop(typval_T *argvars, typval_T *rettv UNUSED)f_sound_stop420,9097
f_sound_clear(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_sound_clear430,9332
sound_free(void)sound_free438,9511

src/spell.c,6822
#define IN_SPELL_CIN_SPELL_C58,2261
#define REGION_ALL REGION_ALL67,2426
#define VIMSUGMAGIC VIMSUGMAGIC69,2481
#define VIMSUGMAGICL VIMSUGMAGICL70,2546
#define VIMSUGVERSION VIMSUGVERSION71,2569
#define SP_BANNED	SP_BANNED74,2655
#define SP_OK	SP_OK75,2676
#define SP_RARE	SP_RARE76,2693
#define SP_LOCAL	SP_LOCAL77,2712
#define SP_BAD	SP_BAD78,2731
typedef struct matchinf_Smatchinf_S83,2803
    langp_T	*mi_lp;			// info for language and regionmi_lp85,2831
    char_u	*mi_word;		// start of word being checkedmi_word88,2933
    char_u	*mi_end;		// end of matching word so farmi_end89,2986
    char_u	*mi_fend;		// next char to be added to mi_fwordmi_fend90,3038
    char_u	*mi_cend;		// char after what was used formi_cend91,3097
    char_u	mi_fword[MAXWLEN + 1];	// mi_word case-foldedmi_fword95,3196
    int		mi_fwordlen;		// nr of valid bytes in mi_fwordmi_fwordlen96,3253
    int		mi_prefarridx;		// index in sl_pidxs with list ofmi_prefarridx99,3355
    int		mi_prefcnt;		// number of entries at mi_prefarridxmi_prefcnt101,3440
    int		mi_prefixlen;		// byte length of prefixmi_prefixlen102,3500
    int		mi_cprefixlen;		// byte length of prefix in originalmi_cprefixlen103,3549
    int		mi_compoff;		// start of following word offsetmi_compoff107,3666
    char_u	mi_compflags[MAXWLEN];	// flags for compound words usedmi_compflags108,3722
    int		mi_complen;		// nr of compound words usedmi_complen109,3789
    int		mi_compextra;		// nr of COMPOUNDROOT wordsmi_compextra110,3840
    int		mi_result;		// result so far: SP_BAD, SP_OK, etc.mi_result113,3907
    int		mi_capflags;		// WF_ONECAP WF_ALLCAP WF_KEEPCAPmi_capflags114,3966
    win_T	*mi_win;		// buffer being checkedmi_win115,4023
    int		mi_result2;		// "mi_resul" without following wordmi_result2118,4087
    char_u	*mi_end2;		// "mi_end" without following wordmi_end2119,4146
} matchinf_T;matchinf_T120,4203
#define FIND_FOLDWORD	FIND_FOLDWORD126,4302
#define FIND_KEEPWORD	FIND_KEEPWORD127,4355
#define FIND_PREFIX	FIND_PREFIX128,4406
#define FIND_COMPOUND	FIND_COMPOUND129,4458
#define FIND_KEEPCOMPOUND FIND_KEEPCOMPOUND130,4520
spell_check(spell_check162,6106
find_word(matchinf_T *mip, int mode)find_word380,12018
match_checkcompoundpattern(match_checkcompoundpattern888,25626
can_compound(slang_T *slang, char_u *word, char_u *flags)can_compound918,26335
match_compoundrule(slang_T *slang, char_u *compflags)match_compoundrule956,27466
valid_word_prefix(valid_word_prefix1009,28774
find_prefix(matchinf_T *mip, int mode)find_prefix1063,30080
fold_more(matchinf_T *mip)fold_more1182,32902
spell_valid_case(spell_valid_case1209,33571
no_spell_checking(win_T *wp)no_spell_checking1223,33984
spell_move_to(spell_move_to1243,34565
spell_cat_line(char_u *buf, char_u *line, int maxlen)spell_cat_line1488,40597
typedef struct spelload_Sspelload_S1513,41111
    char_u  sl_lang[MAXWLEN + 1];	// language namesl_lang1515,41139
    slang_T *sl_slang;			// resulting slang_T structsl_slang1516,41190
    int	    sl_nobreak;			// NOBREAK language foundsl_nobreak1517,41243
} spelload_T;spelload_T1518,41295
spell_load_lang(char_u *lang)spell_load_lang1525,41452
spell_enc(void)spell_enc1598,43352
int_wordlist_spl(char_u *fname)int_wordlist_spl1611,43594
slang_alloc(char_u *lang)slang_alloc1622,43845
slang_free(slang_T *lp)slang_free1645,44294
slang_clear(slang_T *lp)slang_clear1657,44487
slang_clear_sug(slang_T *lp)slang_clear_sug1746,46537
spell_load_cb(char_u *fname, void *cookie)spell_load_cb1761,46865
count_common_word(count_common_word1786,47434
byte_in_str(char_u *str, int n)byte_in_str1832,48367
#define SY_MAXLEN SY_MAXLEN1842,48504
typedef struct syl_item_Ssyl_item_S1843,48527
    char_u	sy_chars[SY_MAXLEN];	    // the sequence of charssy_chars1845,48555
    int		sy_len;sy_len1846,48616
} syl_item_T;syl_item_T1847,48633
init_syl_tab(slang_T *slang)init_syl_tab1854,48772
count_syllables(slang_T *slang, char_u *word)count_syllables1892,49649
did_set_spelllang(win_T *wp)did_set_spelllang1951,50894
clear_midword(win_T *wp)clear_midword2275,59173
use_midword(slang_T *lp, win_T *wp)use_midword2286,59436
find_region(char_u *rp, char_u *region)find_region2330,60520
captype(captype2352,60859
spell_delete_wordlist(void)spell_delete_wordlist2404,62017
spell_free_all(void)spell_free_all2421,62259
spell_reload(void)spell_reload2448,62756
open_spellbuf(void)open_spellbuf2483,63579
close_spellbuf(buf_T *buf)close_spellbuf2505,63945
clear_spell_chartab(spelltab_T *sp)clear_spell_chartab2519,64141
init_spell_chartab(void)init_spell_chartab2557,65172
spell_iswordp(spell_iswordp2614,66627
spell_iswordp_nmw(char_u *p, win_T *wp)spell_iswordp_nmw2655,67441
spell_mb_isword_class(int cl, win_T *wp)spell_mb_isword_class2676,67920
spell_iswordp_w(int *p, win_T *wp)spell_iswordp_w2689,68256
spell_casefold(spell_casefold2719,68972
check_need_cap(linenr_T lnum, colnr_T col)check_need_cap2768,69806
ex_spellrepall(exarg_T *eap UNUSED)ex_spellrepall2836,71083
onecap_copy(onecap_copy2909,72939
allcap_copy(char_u *word, char_u *wcopy)allcap_copy2942,73513
nofold_len(char_u *fword, int flen, char_u *word)nofold_len2989,74350
make_case_word(char_u *fword, char_u *cword, int flags)make_case_word3005,74649
eval_soundfold(char_u *word)eval_soundfold3024,75105
spell_soundfold(spell_soundfold3061,76181
spell_soundfold_sofo(slang_T *slang, char_u *inword, char_u *res)spell_soundfold_sofo3096,76899
spell_soundfold_sal(slang_T *slang, char_u *inword, char_u *res)spell_soundfold_sal3165,78153
spell_soundfold_wsal(slang_T *slang, char_u *inword, char_u *res)spell_soundfold_wsal3442,83715
ex_spellinfo(exarg_T *eap UNUSED)ex_spellinfo3753,90218
#define DUMPFLAG_KEEPCASE DUMPFLAG_KEEPCASE3779,90695
#define DUMPFLAG_COUNT	DUMPFLAG_COUNT3780,90752
#define DUMPFLAG_ICASE	DUMPFLAG_ICASE3781,90803
#define DUMPFLAG_ONECAP	DUMPFLAG_ONECAP3782,90868
#define DUMPFLAG_ALLCAP	DUMPFLAG_ALLCAP3783,90929
ex_spelldump(exarg_T *eap)ex_spelldump3789,91020
spell_dump_compl(spell_dump_compl3825,91995
dump_word(dump_word4020,96894
dump_prefixes(dump_prefixes4110,99046
spell_to_word_end(char_u *start, win_T *win)spell_to_word_end4226,101632
spell_word_start(int startcol)spell_word_start4243,102051
static int spell_expand_need_cap;spell_expand_need_cap4278,102728
spell_expand_check_cap(colnr_T col)spell_expand_check_cap4281,102772
expand_spelling(expand_spelling4293,103079
valid_spellang(char_u *val)valid_spellang4309,103368
valid_spellfile(char_u *val)valid_spellfile4318,103507
did_set_spell_option(int is_spellfile)did_set_spell_option4333,103772
compile_cap_prog(synblock_T *synblock)compile_cap_prog4364,104376

src/spellfile.c,16095
#define BY_NOFLAGS	BY_NOFLAGS254,8794
#define BY_INDEX	BY_INDEX256,8896
#define BY_FLAGS	BY_FLAGS257,8949
#define BY_FLAGS2	BY_FLAGS2259,9052
#define BY_SPECIAL BY_SPECIAL261,9156
#define ZERO_FLAG	ZERO_FLAG263,9217
#define SAL_F0LLOWUP	SAL_F0LLOWUP266,9323
#define SAL_COLLAPSE	SAL_COLLAPSE267,9347
#define SAL_REM_ACCENTS	SAL_REM_ACCENTS268,9371
#define VIMSPELLMAGIC VIMSPELLMAGIC270,9399
#define VIMSPELLMAGICL VIMSPELLMAGICL271,9470
#define VIMSPELLVERSION VIMSPELLVERSION272,9495
#define SN_REGION	SN_REGION275,9589
#define SN_CHARFLAGS	SN_CHARFLAGS276,9633
#define SN_MIDWORD	SN_MIDWORD277,9677
#define SN_PREFCOND	SN_PREFCOND278,9719
#define SN_REP	SN_REP279,9763
#define SN_SAL	SN_SAL280,9802
#define SN_SOFO	SN_SOFO281,9841
#define SN_MAP	SN_MAP282,9884
#define SN_COMPOUND	SN_COMPOUND283,9923
#define SN_SYLLABLE	SN_SYLLABLE284,9971
#define SN_NOBREAK	SN_NOBREAK285,10013
#define SN_SUGFILE	SN_SUGFILE286,10054
#define SN_REPSAL	SN_REPSAL287,10103
#define SN_WORDS	SN_WORDS288,10148
#define SN_NOSPLITSUGS	SN_NOSPLITSUGS289,10184
#define SN_INFO	SN_INFO290,10246
#define SN_NOCOMPOUNDSUGS SN_NOCOMPOUNDSUGS291,10282
#define SN_END	SN_END292,10345
#define SNF_REQUIRED	SNF_REQUIRED294,10385
#define CF_WORD	CF_WORD296,10445
#define CF_UPPER	CF_UPPER297,10467
static char *e_spell_trunc = N_("E758: Truncated spell file");e_spell_trunc319,11626
static char *e_afftrailing = N_("Trailing text in %s line %d: %s");e_afftrailing320,11689
static char *e_affname = N_("Affix name too long in %s line %d: %s");e_affname321,11757
static char *e_affform = N_("E761: Format error in affix file FOL, LOW or UPP");e_affform322,11827
static char *e_affrange = N_("E762: Character in FOL, LOW or UPP is out of range");e_affrange323,11908
static char *msg_compressing = N_("Compressing word tree...");msg_compressing324,11992
spell_load_file(spell_load_file340,12653
tree_count_words(char_u *byts, idx_T *idxs)tree_count_words599,17899
suggest_load_files(void)suggest_load_files660,19043
read_cnt_string(FILE *fd, int cnt_bytes, int *cntp)read_cnt_string804,22907
read_region_section(FILE *fd, slang_T *lp, int len)read_region_section833,23449
read_charflags_section(FILE *fd)read_charflags_section851,23832
read_prefcond_section(FILE *fd, slang_T *lp)read_prefcond_section888,24611
read_rep_section(FILE *fd, garray_T *gap, short *first)read_rep_section933,25665
read_sal_section(FILE *fd, slang_T *slang)read_sal_section982,26682
read_words_section(FILE *fd, slang_T *lp, int len)read_words_section1129,29954
read_sofo_section(FILE *fd, slang_T *slang)read_sofo_section1163,30536
read_compound(FILE *fd, slang_T *slang, int len)read_compound1203,31375
set_sofo(slang_T *lp, char_u *from, char_u *to)set_sofo1395,35384
set_sal_first(slang_T *lp)set_sal_first1482,37546
mb_str2wide(char_u *s)mb_str2wide1542,38945
spell_read_tree(spell_read_tree1565,39425
read_tree_node(read_tree_node1618,40809
#define SHARED_MASK	SHARED_MASK1633,41179
spell_reload_one(spell_reload_one1733,43491
#define MAXLINELEN MAXLINELEN1764,44182
typedef struct afffile_Safffile_S1769,44341
    char_u	*af_enc;	// "SET", normalized, alloc'ed string or NULLaf_enc1771,44368
    int		af_flagtype;	// AFT_CHAR, AFT_LONG, AFT_NUM or AFT_CAPLONGaf_flagtype1772,44434
    unsigned	af_rare;	// RARE ID for rare wordaf_rare1773,44502
    unsigned	af_keepcase;	// KEEPCASE ID for keep-case wordaf_keepcase1774,44549
    unsigned	af_bad;		// BAD ID for banned wordaf_bad1775,44609
    unsigned	af_needaffix;	// NEEDAFFIX IDaf_needaffix1776,44657
    unsigned	af_circumfix;	// CIRCUMFIX IDaf_circumfix1777,44700
    unsigned	af_needcomp;	// NEEDCOMPOUND IDaf_needcomp1778,44743
    unsigned	af_comproot;	// COMPOUNDROOT IDaf_comproot1779,44788
    unsigned	af_compforbid;	// COMPOUNDFORBIDFLAG IDaf_compforbid1780,44833
    unsigned	af_comppermit;	// COMPOUNDPERMITFLAG IDaf_comppermit1781,44886
    unsigned	af_nosuggest;	// NOSUGGEST IDaf_nosuggest1782,44939
    int		af_pfxpostpone;	// postpone prefixes without chop string andaf_pfxpostpone1783,44982
    int		af_ignoreextra;	// IGNOREEXTRA presentaf_ignoreextra1785,45073
    hashtab_T	af_pref;	// hashtable for prefixes, affheader_Taf_pref1786,45121
    hashtab_T	af_suff;	// hashtable for suffixes, affheader_Taf_suff1787,45183
    hashtab_T	af_comp;	// hashtable for compound flags, compitem_Taf_comp1788,45245
} afffile_T;afffile_T1789,45312
#define AFT_CHAR	AFT_CHAR1791,45326
#define AFT_LONG	AFT_LONG1792,45372
#define AFT_CAPLONG	AFT_CAPLONG1793,45419
#define AFT_NUM	AFT_NUM1794,45476
typedef struct affentry_S affentry_T;affentry_T1796,45534
struct affentry_Saffentry_S1798,45638
    affentry_T	*ae_next;	// next affix with same name/numberae_next1800,45658
    char_u	*ae_chop;	// text to chop off basic word (can be NULL)ae_chop1801,45719
    char_u	*ae_add;	// text to add to basic word (can be NULL)ae_add1802,45785
    char_u	*ae_flags;	// flags on the affix (can be NULL)ae_flags1803,45848
    char_u	*ae_cond;	// condition (NULL for ".")ae_cond1804,45906
    regprog_T	*ae_prog;	// regexp program for ae_cond or NULLae_prog1805,45955
    char	ae_compforbid;	// COMPOUNDFORBIDFLAG foundae_compforbid1806,46017
    char	ae_comppermit;	// COMPOUNDPERMITFLAG foundae_comppermit1807,46069
#define AH_KEY_LEN AH_KEY_LEN1810,46125
typedef struct affheader_Saffheader_S1813,46235
    char_u	ah_key[AH_KEY_LEN]; // key for hashtab == name of affixah_key1815,46264
    unsigned	ah_flag;	// affix name as number, uses "af_flagtype"ah_flag1816,46331
    int		ah_newID;	// prefix ID after renumbering; 0 if not usedah_newID1817,46397
    int		ah_combine;	// suffix may combine with prefixah_combine1818,46462
    int		ah_follows;	// another affix block should be followingah_follows1819,46517
    affentry_T	*ah_first;	// first affix entryah_first1820,46581
} affheader_T;affheader_T1821,46628
#define HI2AH(HI2AH1823,46644
typedef struct compitem_Scompitem_S1826,46727
    char_u	ci_key[AH_KEY_LEN]; // key for hashtab == name of compoundci_key1828,46755
    unsigned	ci_flag;	// affix name as number, uses "af_flagtype"ci_flag1829,46825
    int		ci_newID;	// affix ID after renumbering.ci_newID1830,46891
} compitem_T;compitem_T1831,46941
#define HI2CI(HI2CI1833,46956
#define  SBLOCKSIZE SBLOCKSIZE1843,47426
typedef struct sblock_S sblock_T;sblock_T1844,47471
struct sblock_Ssblock_S1845,47505
    int		sb_used;	// nr of bytes already in usesb_used1847,47523
    sblock_T	*sb_next;	// next block in listsb_next1848,47571
    char_u	sb_data[1];	// data, actually longersb_data1849,47616
typedef struct wordnode_S wordnode_T;wordnode_T1855,47698
struct wordnode_Swordnode_S1856,47736
	char_u	hashkey[6];	// the hash key, only used while compressinghashkey1860,47798
	int	index;		// index in written nodes (valid after firstindex1861,47863
    } wn_u1;wn_u11863,47935
	wordnode_T *next;	// next node with same hash keynext1866,47990
	wordnode_T *wnode;	// parent node that will write this nodewnode1867,48041
    } wn_u2;wn_u21868,48102
    wordnode_T	*wn_child;	// child (next byte in word)wn_child1869,48115
    wordnode_T  *wn_sibling;	// next sibling (alternate byte in word,wn_sibling1870,48170
    int		wn_refs;	// Nr. of references to this node.  Onlywn_refs1872,48262
    char_u	wn_byte;	// Byte for this node. NUL for word endwn_byte1876,48429
    char_u	wn_affixID;	// supported/required prefix ID or 0wn_affixID1882,48709
    short_u	wn_flags;	// WF_ flagswn_flags1883,48769
    short	wn_region;	// region maskwn_region1884,48804
    int		wn_nr;		// sequence nr for printingwn_nr1887,48864
#define WN_MASK	WN_MASK1891,48920
#define HI2WN(HI2WN1893,48982
typedef struct spellinfo_Sspellinfo_S1898,49084
    wordnode_T	*si_foldroot;	// tree with case-folded wordssi_foldroot1900,49113
    long	si_foldwcount;	// nr of words in si_foldrootsi_foldwcount1901,49173
    wordnode_T	*si_keeproot;	// tree with keep-case wordssi_keeproot1903,49228
    long	si_keepwcount;	// nr of words in si_keeprootsi_keepwcount1904,49286
    wordnode_T	*si_prefroot;	// tree with postponed prefixessi_prefroot1906,49341
    long	si_sugtree;	// creating the soundfolding triesi_sugtree1908,49403
    sblock_T	*si_blocks;	// memory blocks usedsi_blocks1910,49459
    long	si_blocks_cnt;	// memory blocks allocatedsi_blocks_cnt1911,49506
    int		si_did_emsg;	// TRUE when ran out of memorysi_did_emsg1912,49557
    long	si_compress_cnt;    // words to add before loweringsi_compress_cnt1914,49611
    wordnode_T	*si_first_free; // List of nodes that have been freed duringsi_first_free1916,49701
    long	si_free_count;	// number of nodes in si_first_freesi_free_count1918,49825
    int		si_wordnode_nr;	// sequence nr for nodessi_wordnode_nr1920,49908
    buf_T	*si_spellbuf;	// buffer used to store soundfold word tablesi_spellbuf1922,49965
    int		si_ascii;	// handling only ASCII wordssi_ascii1924,50035
    int		si_add;		// addition filesi_add1925,50083
    int		si_clear_chartab;   // when TRUE clear char tablessi_clear_chartab1926,50118
    int		si_region;	// region masksi_region1927,50178
    vimconv_T	si_conv;	// for conversion to 'encoding'si_conv1928,50213
    int		si_memtot;	// runtime memory usedsi_memtot1929,50268
    int		si_verbose;	// verbose messagessi_verbose1930,50311
    int		si_msg_count;	// number of words added since last messagesi_msg_count1931,50352
    char_u	*si_info;	// info text chars or NULLsi_info1932,50419
    int		si_region_count; // number of regions supported (1 when theresi_region_count1933,50467
    char_u	si_region_name[MAXREGIONS * 2 + 1];si_region_name1935,50562
    garray_T	si_rep;		// list of fromto_T entries from REP linessi_rep1939,50672
    garray_T	si_repsal;	// list of fromto_T entries from REPSAL linessi_repsal1940,50737
    garray_T	si_sal;		// list of fromto_T entries from SAL linessi_sal1941,50807
    char_u	*si_sofofr;	// SOFOFROM textsi_sofofr1942,50872
    char_u	*si_sofoto;	// SOFOTO textsi_sofoto1943,50912
    int		si_nosugfile;	// NOSUGFILE item foundsi_nosugfile1944,50950
    int		si_nosplitsugs;	// NOSPLITSUGS item foundsi_nosplitsugs1945,50997
    int		si_nocompoundsugs; // NOCOMPOUNDSUGS item foundsi_nocompoundsugs1946,51048
    int		si_followup;	// soundsalike: ?si_followup1947,51105
    int		si_collapse;	// soundsalike: ?si_collapse1948,51145
    hashtab_T	si_commonwords;	// hashtable for common wordssi_commonwords1949,51185
    time_t	si_sugtime;	// timestamp for .sug filesi_sugtime1950,51245
    int		si_rem_accents;	// soundsalike: remove accentssi_rem_accents1951,51295
    garray_T	si_map;		// MAP info concatenatedsi_map1952,51351
    char_u	*si_midword;	// MIDWORD chars or NULLsi_midword1953,51398
    int		si_compmax;	// max nr of words for compoundingsi_compmax1954,51447
    int		si_compminlen;	// minimal length for compoundingsi_compminlen1955,51503
    int		si_compsylmax;	// max nr of syllables for compoundingsi_compsylmax1956,51561
    int		si_compoptions;	// COMP_ flagssi_compoptions1957,51624
    garray_T	si_comppat;	// CHECKCOMPOUNDPATTERN items, each stored assi_comppat1958,51664
    char_u	*si_compflags;	// flags used for compoundingsi_compflags1960,51751
    char_u	si_nobreak;	// NOBREAKsi_nobreak1961,51807
    char_u	*si_syllable;	// syllable stringsi_syllable1962,51841
    garray_T	si_prefcond;	// table with conditions for postponedsi_prefcond1963,51885
    int		si_newprefID;	// current value for ah_newIDsi_newprefID1965,51991
    int		si_newcompID;	// current value for compound IDsi_newcompID1966,52044
} spellinfo_T;spellinfo_T1967,52100
#define PFX_FLAGS	PFX_FLAGS2007,54703
#define CONDIT_COMB	CONDIT_COMB2010,54778
#define CONDIT_CFIX	CONDIT_CFIX2011,54822
#define CONDIT_SUF	CONDIT_SUF2012,54878
#define CONDIT_AFF	CONDIT_AFF2013,54934
static long compress_start = 30000;	// memory / SBLOCKSIZEcompress_start2018,55066
static long compress_inc = 100;		// memory / SBLOCKSIZEcompress_inc2019,55125
static long compress_added = 500000;	// word countcompress_added2020,55181
spell_check_msm(void)spell_check_msm2027,55331
#define PRINTLINESIZE	PRINTLINESIZE2069,56310
#define PRINTWIDTH	PRINTWIDTH2070,56337
#define PRINTSOME(PRINTSOME2072,56359
static char line1[PRINTLINESIZE];line12075,56494
static char line2[PRINTLINESIZE];line22076,56528
static char line3[PRINTLINESIZE];line32077,56562
spell_clear_flags(wordnode_T *node)spell_clear_flags2080,56613
spell_print_node(wordnode_T *node, int depth)spell_print_node2092,56816
spell_print_tree(wordnode_T *root)spell_print_tree2149,58062
spell_read_aff(spellinfo_T *spin, char_u *fname)spell_read_aff2168,58440
#define MAXITEMCNT MAXITEMCNT2175,58596
is_aff_rule(is_aff_rule3096,85308
aff_process_flags(afffile_T *affile, affentry_T *entry)aff_process_flags3112,85678
spell_info_item(char_u *s)spell_info_item3146,86476
affitem2flag(affitem2flag3161,86815
get_affitem(int flagtype, char_u **pp)get_affitem3195,87484
process_compflags(process_compflags3231,88201
check_renumber(spellinfo_T *spin)check_renumber3315,90418
flag_in_afflist(int flagtype, char_u *afflist, unsigned flag)flag_in_afflist3328,90686
aff_check_number(int spinval, int affval, char *name)aff_check_number3371,91502
aff_check_string(char_u *spinval, char_u *affval, char *name)aff_check_string3381,91782
str_equal(char_u *s1, char_u *s2)str_equal3392,92098
add_fromto(add_fromto3404,92337
sal_to_bool(char_u *s)sal_to_bool3428,92872
spell_free_aff(afffile_T *aff)spell_free_aff3437,93031
spell_read_dic(spellinfo_T *spin, char_u *fname, afffile_T *affile)spell_read_dic3475,93752
get_affix_flags(afffile_T *affile, char_u *afflist)get_affix_flags3687,99016
get_pfxlist(get_pfxlist3719,100130
get_compflags(get_compflags3761,101021
store_aff_word(store_aff_word3800,101980
spell_read_wordfile(spellinfo_T *spin, char_u *fname)spell_read_wordfile4063,109443
getroom(getroom4265,113929
getroom_save(spellinfo_T *spin, char_u *s)getroom_save4312,115054
free_blocks(sblock_T *bl)free_blocks4327,115290
wordtree_alloc(spellinfo_T *spin)wordtree_alloc4344,115529
store_word(store_word4359,116027
tree_add_word(tree_add_word4406,117317
get_wordnode(spellinfo_T *spin)get_wordnode4587,122557
deref_wordnode(spellinfo_T *spin, wordnode_T *node)deref_wordnode4614,123186
free_wordnode(spellinfo_T *spin, wordnode_T *n)free_wordnode4638,123650
wordtree_compress(spellinfo_T *spin, wordnode_T *root)wordtree_compress4649,123890
node_compress(node_compress4690,124852
node_equal(wordnode_T *n1, wordnode_T *n2)node_equal4796,128120
rep_compare(const void *s1, const void *s2)rep_compare4820,128724
write_vim_spell(spellinfo_T *spin, char_u *fname)write_vim_spell4833,128969
clear_node(wordnode_T *node)clear_node5250,140817
put_node(put_node5279,141449
ex_mkspell(exarg_T *eap)ex_mkspell5409,144677
spell_make_sugfile(spellinfo_T *spin, char_u *wfname)spell_make_sugfile5436,145270
sug_filltree(spellinfo_T *spin, slang_T *slang)sug_filltree5523,147748
sug_maketable(spellinfo_T *spin)sug_maketable5629,150099
sug_filltable(sug_filltable5658,150823
offset2bytes(int nr, char_u *buf)offset2bytes5725,152588
sug_write(spellinfo_T *spin, char_u *fname)sug_write5768,153326
mkspell(mkspell5865,155796
spell_message(spellinfo_T *spin, char_u *str)spell_message6123,162958
ex_spell(exarg_T *eap)ex_spell6143,163329
spell_add_word(spell_add_word6156,163685
init_spellfile(void)init_spellfile6327,167601
set_spell_chartab(char_u *fol, char_u *low, char_u *upp)set_spell_chartab6408,169748
set_spell_charflags(set_spell_charflags6478,171158
set_spell_finish(spelltab_T *new_st)set_spell_finish6513,171868
write_spell_prefcond(FILE *fd, garray_T *gap)write_spell_prefcond6547,172603
set_map_str(slang_T *lp, char_u *map)set_map_str6586,173347

src/spellsuggest.c,9779
#define RESCORE(RESCORE26,756
#define MAXSCORE(MAXSCORE32,968
#define WF_MIXCAP WF_MIXCAP35,1077
typedef struct suginfo_Ssuginfo_S40,1201
    garray_T	su_ga;		    // suggestions, contains "suggest_T"su_ga42,1228
    int		su_maxcount;	    // max. number of suggestions displayedsu_maxcount43,1290
    int		su_maxscore;	    // maximum score for adding to su_gasu_maxscore44,1356
    int		su_sfmaxscore;	    // idem, for when doing soundfold wordssu_sfmaxscore45,1419
    garray_T	su_sga;		    // like su_ga, sound-folded scoringsu_sga46,1487
    char_u	*su_badptr;	    // start of bad word in linesu_badptr47,1549
    int		su_badlen;	    // length of detected bad word in linesu_badlen48,1605
    int		su_badflags;	    // caps flags for bad wordsu_badflags49,1668
    char_u	su_badword[MAXWLEN]; // bad word truncated at su_badlensu_badword50,1721
    char_u	su_fbadword[MAXWLEN]; // su_badword case-foldedsu_fbadword51,1788
    char_u	su_sal_badword[MAXWLEN]; // su_badword soundfoldedsu_sal_badword52,1847
    hashtab_T	su_banned;	    // table with banned wordssu_banned53,1909
    slang_T	*su_sallang;	    // default language for sound foldingsu_sallang54,1965
} suginfo_T;suginfo_T55,2032
typedef struct suggest_Ssuggest_S58,2088
    char_u	*st_word;	// suggested word, allocated stringst_word60,2115
    int		st_wordlen;	// STRLEN(st_word)st_wordlen61,2172
    int		st_orglen;	// length of replaced textst_orglen62,2212
    int		st_score;	// lower is betterst_score63,2259
    int		st_altscore;	// used when st_score compares equalst_altscore64,2297
    int		st_salscore;	// st_score is for soundalikest_salscore65,2356
    int		st_had_bonus;	// bonus already included in scorest_had_bonus66,2408
    slang_T	*st_slang;	// language used for sound foldingst_slang67,2466
} suggest_T;suggest_T68,2524
#define SUG(SUG70,2538
#define WAS_BANNED(WAS_BANNED73,2646
#define SUG_CLEAN_COUNT(SUG_CLEAN_COUNT78,2937
#define SUG_MAX_COUNT(SUG_MAX_COUNT82,3159
#define SCORE_SPLIT	SCORE_SPLIT85,3242
#define SCORE_SPLIT_NO	SCORE_SPLIT_NO86,3284
#define SCORE_ICASE	SCORE_ICASE87,3346
#define SCORE_REGION	SCORE_REGION88,3396
#define SCORE_RARE	SCORE_RARE89,3453
#define SCORE_SWAP	SCORE_SWAP90,3489
#define SCORE_SWAP3	SCORE_SWAP391,3534
#define SCORE_REP	SCORE_REP92,3590
#define SCORE_SUBST	SCORE_SUBST93,3630
#define SCORE_SIMILAR	SCORE_SIMILAR94,3679
#define SCORE_SUBCOMP	SCORE_SUBCOMP95,3738
#define SCORE_DEL	SCORE_DEL96,3799
#define SCORE_DELDUP	SCORE_DELDUP97,3842
#define SCORE_DELCOMP	SCORE_DELCOMP98,3899
#define SCORE_INS	SCORE_INS99,3956
#define SCORE_INSDUP	SCORE_INSDUP100,3999
#define SCORE_INSCOMP	SCORE_INSCOMP101,4055
#define SCORE_NONWORD	SCORE_NONWORD102,4112
#define SCORE_FILE	SCORE_FILE104,4171
#define SCORE_MAXINIT	SCORE_MAXINIT105,4219
#define SCORE_COMMON1	SCORE_COMMON1108,4333
#define SCORE_COMMON2	SCORE_COMMON2109,4394
#define SCORE_COMMON3	SCORE_COMMON3110,4454
#define SCORE_THRES2	SCORE_THRES2111,4519
#define SCORE_THRES3	SCORE_THRES3112,4579
#define SCORE_SFMAX1	SCORE_SFMAX1117,4875
#define SCORE_SFMAX2	SCORE_SFMAX2118,4931
#define SCORE_SFMAX3	SCORE_SFMAX3119,4988
#define SCORE_BIG	SCORE_BIG121,5045
#define SCORE_MAXMAX	SCORE_MAXMAX122,5095
#define SCORE_LIMITMAX	SCORE_LIMITMAX123,5144
#define SCORE_EDIT_MIN	SCORE_EDIT_MIN127,5341
    STATE_START = 0,	// At start of node check for NUL bytes (goodwordSTATE_START134,5478
    STATE_NOPREFIX,	// try without prefixSTATE_NOPREFIX137,5632
    STATE_SPLITUNDO,	// Undo splitting.STATE_SPLITUNDO138,5674
    STATE_ENDNUL,	// Past NUL bytes at start of the node.STATE_ENDNUL139,5714
    STATE_PLAIN,	// Use each byte of the node.STATE_PLAIN140,5772
    STATE_DEL,		// Delete a byte from the bad word.STATE_DEL141,5819
    STATE_INS_PREP,	// Prepare for inserting bytes.STATE_INS_PREP142,5871
    STATE_INS,		// Insert a byte in the bad word.STATE_INS143,5923
    STATE_SWAP,		// Swap two bytes.STATE_SWAP144,5973
    STATE_UNSWAP,	// Undo swap two characters.STATE_UNSWAP145,6009
    STATE_SWAP3,	// Swap two characters over three.STATE_SWAP3146,6056
    STATE_UNSWAP3,	// Undo Swap two characters over three.STATE_UNSWAP3147,6108
    STATE_UNROT3L,	// Undo rotate three characters leftSTATE_UNROT3L148,6167
    STATE_UNROT3R,	// Undo rotate three characters rightSTATE_UNROT3R149,6223
    STATE_REP_INI,	// Prepare for using REP items.STATE_REP_INI150,6280
    STATE_REP,		// Use matching REP items from the .aff file.STATE_REP151,6331
    STATE_REP_UNDO,	// Undo a REP item replacement.STATE_REP_UNDO152,6393
    STATE_FINAL		// End of this node.STATE_FINAL153,6445
} state_T;state_T154,6483
typedef struct trystate_Strystate_S159,6569
    state_T	ts_state;	// state at this level, STATE_ts_state161,6597
    int		ts_score;	// scorets_score162,6650
    idx_T	ts_arridx;	// index in tree array, start of nodets_arridx163,6678
    short	ts_curi;	// index in list of child nodests_curi164,6737
    char_u	ts_fidx;	// index in fword[], case-folded bad wordts_fidx165,6788
    char_u	ts_fidxtry;	// ts_fidx at which bytes may be changedts_fidxtry166,6850
    char_u	ts_twordlen;	// valid length of tword[]ts_twordlen167,6914
    char_u	ts_prefixdepth;	// stack depth for end of prefix orts_prefixdepth168,6965
    char_u	ts_flags;	// TSF_ flagsts_flags170,7066
    char_u	ts_tcharlen;	// number of bytes in tword characterts_tcharlen171,7101
    char_u	ts_tcharidx;	// current byte index in tword characterts_tcharidx172,7163
    char_u	ts_isdiff;	// DIFF_ valuests_isdiff173,7228
    char_u	ts_fcharstart;	// index in fword where badword char startedts_fcharstart174,7266
    char_u	ts_prewordlen;	// length of word in "preword[]"ts_prewordlen175,7337
    char_u	ts_splitoff;	// index in "tword" after last splitts_splitoff176,7396
    char_u	ts_splitfidx;	// "ts_fidx" at word splitts_splitfidx177,7457
    char_u	ts_complen;	// nr of compound words usedts_complen178,7509
    char_u	ts_compsplit;	// index for "compflags" where word was spitts_compsplit179,7561
    char_u	ts_save_badflags;   // su_badflags saved herets_save_badflags180,7631
    char_u	ts_delidx;	// index in fword for char that was deleted,ts_delidx181,7688
} trystate_T;trystate_T183,7799
#define DIFF_NONE	DIFF_NONE186,7838
#define DIFF_YES	DIFF_YES187,7885
#define DIFF_INSERT	DIFF_INSERT188,7928
#define TSF_PREFIXOK	TSF_PREFIXOK191,7997
#define TSF_DIDSPLIT	TSF_DIDSPLIT192,8057
#define TSF_DIDDEL	TSF_DIDDEL193,8109
#define PFD_NOPREFIX	PFD_NOPREFIX196,8203
#define PFD_PREFIXTREE	PFD_PREFIXTREE197,8251
#define PFD_NOTSPECIAL	PFD_NOTSPECIAL198,8314
can_be_compound(can_be_compound238,10631
score_wordcount_adj(score_wordcount_adj271,11531
badword_captype(char_u *word, char_u *end)badword_captype309,12350
bytes2offset(char_u **pp)bytes2offset356,13323
#define SPS_BEST SPS_BEST391,13919
#define SPS_FAST SPS_FAST392,13941
#define SPS_DOUBLE SPS_DOUBLE393,13963
static int sps_flags = SPS_BEST;	// flags from 'spellsuggest'sps_flags395,13986
static int sps_limit = 9999;		// max nr of suggestions givensps_limit396,14048
spell_check_sps(void)spell_check_sps403,14226
spell_suggest(int count)spell_suggest458,15297
spell_suggest_list(spell_suggest_list696,21735
spell_find_suggest(spell_find_suggest741,23009
spell_suggest_expr(suginfo_T *su, char_u *expr)spell_suggest_expr876,26939
spell_suggest_file(suginfo_T *su, char_u *fname)spell_suggest_file912,28003
spell_suggest_intern(suginfo_T *su, int interactive)spell_suggest_intern968,29291
spell_find_cleanup(suginfo_T *su)spell_find_cleanup1050,32020
suggest_try_special(suginfo_T *su)suggest_try_special1070,32474
# define PROF_STORE(PROF_STORE1144,34295
suggest_try_change(suginfo_T *su)suggest_try_change1151,34417
#define TRY_DEEPER(TRY_DEEPER1188,35493
suggest_trie_walk(suggest_trie_walk1223,37045
go_deeper(trystate_T *stack, int depth, int score_add)go_deeper2642,76043
find_keepcap_word(slang_T *slang, char_u *fword, char_u *kword)find_keepcap_word2658,76606
score_comp_sal(suginfo_T *su)score_comp_sal2806,79912
score_combine(suginfo_T *su)score_combine2860,81202
stp_sal_score(stp_sal_score2972,84149
    short	sft_score;	// lowest score usedsft_score3030,85799
    char_u	sft_word[1];    // soundfolded word, actually longersft_word3031,85841
} sftword_T;sftword_T3032,85905
static sftword_T dumsft;dumsft3034,85919
#define HIKEY2SFT(HIKEY2SFT3035,85944
#define HI2SFT(HI2SFT3036,86025
suggest_try_soundalike_prep(void)suggest_try_soundalike_prep3042,86145
suggest_try_soundalike(suginfo_T *su)suggest_try_soundalike3065,86780
suggest_try_soundalike_finish(void)suggest_try_soundalike_finish3101,87683
add_sound_suggest(add_sound_suggest3138,88628
soundfold_find(slang_T *slang, char_u *word)soundfold_find3339,93979
similar_chars(slang_T *slang, int c1, int c2)similar_chars3414,95631
add_suggestion(add_suggestion3455,96465
check_suggestions(check_suggestions3586,100159
add_banned(add_banned3623,101005
rescore_suggestions(suginfo_T *su)rescore_suggestions3646,101471
rescore_one(suginfo_T *su, suggest_T *stp)rescore_one3659,101733
sug_compare(const void *s1, const void *s2)sug_compare3692,102623
cleanup_suggestions(cleanup_suggestions3714,103108
soundalike_score(soundalike_score3749,103953
spell_edit_score(spell_edit_score3978,109253
#define CNT(CNT4011,110071
    int		badi;badi4089,111676
    int		goodi;goodi4090,111691
    int		score;score4091,111707
} limitscore_T;limitscore_T4092,111723
spell_edit_score_limit(spell_edit_score_limit4103,112071
spell_edit_score_limit_w(spell_edit_score_limit_w4278,116631

src/syntax.c,16045
#define SYN_NAMELEN	SYN_NAMELEN18,389
#define SPO_MS_OFF	SPO_MS_OFF21,497
#define SPO_ME_OFF	SPO_ME_OFF22,541
#define SPO_HS_OFF	SPO_HS_OFF23,583
#define SPO_HE_OFF	SPO_HE_OFF24,627
#define SPO_RS_OFF	SPO_RS_OFF25,669
#define SPO_RE_OFF	SPO_RE_OFF26,713
#define SPO_LC_OFF	SPO_LC_OFF27,755
#define SPO_COUNT	SPO_COUNT28,802
static char *(spo_name_tab[SPO_COUNT]) =spo_name_tab30,823
typedef struct syn_patternsyn_pattern46,1495
    char	 sp_type;		// see SPTYPE_ defines belowsp_type48,1524
    char	 sp_syncing;		// this item used for syncingsp_syncing49,1573
    short	 sp_syn_match_id;	// highlight group ID of patternsp_syn_match_id50,1626
    short	 sp_off_flags;		// see belowsp_off_flags51,1687
    int		 sp_offsets[SPO_COUNT];	// offsetssp_offsets52,1726
    int		 sp_flags;		// see HL_ defines belowsp_flags53,1770
    int		 sp_cchar;		// conceal substitute charactersp_cchar55,1836
    int		 sp_ic;			// ignore-case flag for sp_progsp_ic57,1896
    int		 sp_sync_idx;		// sync item index (syncing only)sp_sync_idx58,1947
    int		 sp_line_id;		// ID of last line where triedsp_line_id59,2005
    int		 sp_startcol;		// next match in sp_line_id linesp_startcol60,2059
    short	*sp_cont_list;		// cont. group IDs, if non-zerosp_cont_list61,2116
    short	*sp_next_list;		// next group IDs, if non-zerosp_next_list62,2174
    struct sp_syn sp_syn;		// struct passed to in_id_list()sp_syn63,2231
    char_u	*sp_pattern;		// regexp to match, patternsp_pattern64,2291
    regprog_T	*sp_prog;		// regexp to match, programsp_prog65,2344
    syn_time_T	 sp_time;sp_time67,2417
} synpat_T;synpat_T69,2449
#define SPTYPE_MATCH	SPTYPE_MATCH76,2692
#define SPTYPE_START	SPTYPE_START77,2751
#define SPTYPE_END	SPTYPE_END78,2807
#define SPTYPE_SKIP	SPTYPE_SKIP79,2859
#define SYN_ITEMS(SYN_ITEMS82,2919
#define NONE_IDX	NONE_IDX84,2989
#define SF_CCOMMENT	SF_CCOMMENT89,3083
#define SF_MATCH	SF_MATCH90,3137
#define SYN_STATE_P(SYN_STATE_P92,3190
#define MAXKEYWLEN	MAXKEYWLEN94,3252
static int current_attr = 0;	    // attr of current syntax wordcurrent_attr99,3380
static int current_id = 0;	    // ID of current char for syn_get_id()current_id101,3461
static int current_trans_id = 0;    // idem, transparency removedcurrent_trans_id102,3531
static int current_flags = 0;current_flags105,3624
static int current_seqnr = 0;current_seqnr106,3654
static int current_sub_char = 0;current_sub_char107,3684
typedef struct syn_cluster_Ssyn_cluster_S110,3725
    char_u	    *scl_name;	    // syntax cluster namescl_name112,3756
    char_u	    *scl_name_u;    // uppercase of scl_namescl_name_u113,3809
    short	    *scl_list;	    // IDs in this syntax clusterscl_list114,3865
} syn_cluster_T;syn_cluster_T115,3924
#define CLUSTER_REPLACE	CLUSTER_REPLACE120,3986
#define CLUSTER_ADD	CLUSTER_ADD121,4050
#define CLUSTER_SUBTRACT CLUSTER_SUBTRACT122,4104
#define SYN_CLSTR(SYN_CLSTR124,4170
#define SYNID_ALLBUT	SYNID_ALLBUT134,4596
#define SYNID_TOP	SYNID_TOP135,4668
#define SYNID_CONTAINED	SYNID_CONTAINED136,4732
#define SYNID_CLUSTER	SYNID_CLUSTER137,4808
#define MAX_SYN_INC_TAG	MAX_SYN_INC_TAG139,4879
#define MAX_CLUSTER_ID MAX_CLUSTER_ID140,4948
static char_u **syn_cmdlinep;syn_cmdlinep147,5198
static int current_syn_inc_tag = 0;current_syn_inc_tag154,5422
static int running_syn_inc_tag = 0;running_syn_inc_tag155,5458
static keyentry_T dumkey;dumkey164,5809
#define KE2HIKEY(KE2HIKEY165,5835
#define HIKEY2KE(HIKEY2KE166,5873
#define HI2KE(HI2KE167,5956
static int keepend_level = -1;keepend_level174,6191
static char msg_no_items[] = N_("No Syntax items defined for this buffer");msg_no_items176,6223
typedef struct state_itemstate_item183,6511
    int		si_idx;			// index of syntax pattern orsi_idx185,6539
    int		si_id;			// highlight group ID for keywordssi_id187,6608
    int		si_trans_id;		// idem, transparency removedsi_trans_id188,6661
    int		si_m_lnum;		// lnum of the matchsi_m_lnum189,6714
    int		si_m_startcol;		// starting column of the matchsi_m_startcol190,6756
    lpos_T	si_m_endpos;		// just after end posn of the matchsi_m_endpos191,6813
    lpos_T	si_h_startpos;		// start position of the highlightingsi_h_startpos192,6874
    lpos_T	si_h_endpos;		// end position of the highlightingsi_h_endpos193,6939
    lpos_T	si_eoe_pos;		// end position of end patternsi_eoe_pos194,7000
    int		si_end_idx;		// group ID for end pattern or zerosi_end_idx195,7055
    int		si_ends;		// if match ends before si_m_endpossi_ends196,7113
    int		si_attr;		// attributes in this statesi_attr197,7168
    long	si_flags;		// HL_HAS_EOL flag in this state, andsi_flags198,7215
    int		si_seqnr;		// sequence numbersi_seqnr201,7327
    int		si_cchar;		// substitution character for concealsi_cchar202,7366
    short	*si_cont_list;		// list of contained groupssi_cont_list204,7431
    short	*si_next_list;		// nextgroup IDs after this item endssi_next_list205,7485
    reg_extmatch_T *si_extmatch;	// \z(...\) matches from startsi_extmatch206,7549
} stateitem_T;stateitem_T208,7629
#define KEYWORD_IDX	KEYWORD_IDX210,7645
#define ID_LIST_ALL	ID_LIST_ALL211,7704
static int next_seqnr = 1;		// value to use for si_seqnrnext_seqnr215,7833
    int		flags;		// flags for contained and transparentflags224,8013
    int		keyword;	// TRUE for ":syn keyword"keyword225,8069
    int		*sync_idx;	// syntax item for "grouphere" argument, NULLsync_idx226,8114
    char	has_cont_list;	// TRUE if "cont_list" can be usedhas_cont_list228,8202
    short	*cont_list;	// group IDs for "contains" argumentcont_list229,8261
    short	*cont_in_list;	// group IDs for "containedin" argumentcont_in_list230,8320
    short	*next_list;	// group IDs for "nextgroup" argumentnext_list231,8385
} syn_opt_arg_T;syn_opt_arg_T232,8445
static int next_match_col;		// column for start of next matchnext_match_col241,8786
static lpos_T next_match_m_endpos;	// position for end of next matchnext_match_m_endpos242,8848
static lpos_T next_match_h_startpos;	// pos. for highl. start of next matchnext_match_h_startpos243,8917
static lpos_T next_match_h_endpos;	// pos. for highl. end of next matchnext_match_h_endpos244,8993
static int next_match_idx;		// index of matched itemnext_match_idx245,9065
static long next_match_flags;		// flags for next matchnext_match_flags246,9118
static lpos_T next_match_eos_pos;	// end of start pattn (start region)next_match_eos_pos247,9173
static lpos_T next_match_eoe_pos;	// pos. for end of end patternnext_match_eoe_pos248,9244
static int next_match_end_idx;		// ID of group for end pattn or zeronext_match_end_idx249,9309
static reg_extmatch_T *next_match_extmatch = NULL;next_match_extmatch250,9378
#define INVALID_STATE(INVALID_STATE256,9576
#define VALID_STATE(VALID_STATE257,9630
static win_T	*syn_win;		// current window for highlightingsyn_win263,9827
static buf_T	*syn_buf;		// current buffer for highlightingsyn_buf264,9886
static synblock_T *syn_block;		// current buffer for highlightingsyn_block265,9945
static proftime_T *syn_tm;		// timeout limitsyn_tm267,10031
static linenr_T current_lnum = 0;	// lnum of current statecurrent_lnum269,10083
static colnr_T	current_col = 0;	// column of current statecurrent_col270,10142
static int	current_state_stored = 0; // TRUE if stored current statecurrent_state_stored271,10201
static int	current_finished = 0;	// current line has been finishedcurrent_finished273,10311
static garray_T current_state		// current stack of state_itemscurrent_state274,10378
static short	*current_next_list = NULL; // when non-zero, nextgroup listcurrent_next_list276,10465
static int	current_next_flags = 0; // flags for current_next_listcurrent_next_flags277,10538
static int	current_line_id = 0;	// unique number for current linecurrent_line_id278,10604
#define CUR_STATE(CUR_STATE280,10671
static int syn_time_on = FALSE;syn_time_on311,12123
# define IF_SYN_TIME(IF_SYN_TIME312,12155
# define IF_SYN_TIME(IF_SYN_TIME314,12189
typedef int syn_time_T;syn_time_T315,12218
syn_set_timeout(proftime_T *tm)syn_set_timeout356,14342
syntax_start(win_T *wp, linenr_T lnum)syntax_start370,14721
clear_syn_state(synstate_T *p)clear_syn_state549,19641
clear_current_state(void)clear_current_state572,20080
syn_sync(syn_sync593,20634
save_chartab(char_u *chartab)save_chartab868,27710
restore_chartab(char_u *chartab)restore_chartab879,27959
syn_match_linecont(linenr_T lnum)syn_match_linecont889,28195
syn_start_line(void)syn_start_line914,28844
syn_update_ends(int startofline)syn_update_ends942,29477
syn_stack_free_block(synblock_T *block)syn_stack_free_block1041,33191
syn_stack_free_all(synblock_T *block)syn_stack_free_all1059,33590
syn_stack_alloc(void)syn_stack_alloc1084,34150
syn_stack_apply_changes(buf_T *buf)syn_stack_apply_changes1163,36237
syn_stack_apply_changes_block(synblock_T *block, buf_T *buf)syn_stack_apply_changes_block1177,36502
syn_stack_cleanup(void)syn_stack_cleanup1226,37764
syn_stack_free_entry(synblock_T *block, synstate_T *p)syn_stack_free_entry1290,39408
syn_stack_find_entry(linenr_T lnum)syn_stack_find_entry1303,39768
store_current_state(void)store_current_state1323,40191
load_current_state(synstate_T *from)load_current_state1446,43546
syn_stack_equal(synstate_T *sp)syn_stack_equal1493,44903
syntax_end_parsing(linenr_T lnum)syntax_end_parsing1565,46944
invalidate_current_state(void)invalidate_current_state1582,47284
validate_current_state(void)validate_current_state1591,47482
syntax_check_changed(linenr_T lnum)syntax_check_changed1603,47824
syn_finish_line(syn_finish_line1651,49005
get_syntax_attr(get_syntax_attr1698,50372
syn_current_attr(syn_current_attr1752,51635
did_match_already(int idx, garray_T *gap)did_match_already2344,68686
push_next_match(stateitem_T *cur_si)push_next_match2367,69261
check_state_ends(void)check_state_ends2460,72024
update_si_attr(int idx)update_si_attr2565,74987
check_keepend(void)check_keepend2620,76433
update_si_end(update_si_end2680,78065
push_current_state(int idx)push_current_state2746,79780
pop_current_state(void)pop_current_state2760,80109
find_endpos(find_endpos2785,80858
limit_pos(lpos_T *pos, lpos_T *limit)limit_pos3022,87167
limit_pos_zero(limit_pos_zero3034,87436
syn_add_end_off(syn_add_end_off3048,87650
syn_add_start_off(syn_add_start_off3100,88887
syn_getcurline(void)syn_getcurline3153,90052
syn_regexec(syn_regexec3163,90255
check_keyword_id(check_keyword_id3230,91637
syn_cmd_conceal(exarg_T *eap UNUSED, int syncing UNUSED)syn_cmd_conceal3317,93929
syn_cmd_case(exarg_T *eap, int syncing UNUSED)syn_cmd_case3348,94610
syn_cmd_spell(exarg_T *eap, int syncing UNUSED)syn_cmd_spell3377,95246
syn_cmd_iskeyword(exarg_T *eap, int syncing UNUSED)syn_cmd_iskeyword3416,96256
syntax_clear(synblock_T *block)syntax_clear3467,97466
reset_synblock(win_T *wp)reset_synblock3523,98974
syntax_sync_clear(void)syntax_sync_clear3537,99192
syn_remove_pattern(syn_remove_pattern3563,99921
syn_clear_pattern(synblock_T *block, int i)syn_clear_pattern3585,100413
syn_clear_cluster(synblock_T *block, int i)syn_clear_cluster3602,100906
syn_cmd_clear(exarg_T *eap, int syncing)syn_cmd_clear3613,101147
syn_clear_one(int id, int syncing)syn_clear_one3697,102937
syn_cmd_on(exarg_T *eap, int syncing UNUSED)syn_cmd_on3723,103537
syn_cmd_enable(exarg_T *eap, int syncing UNUSED)syn_cmd_enable3732,103680
syn_cmd_reset(exarg_T *eap, int syncing UNUSED)syn_cmd_reset3744,103993
syn_cmd_manual(exarg_T *eap, int syncing UNUSED)syn_cmd_manual3759,104352
syn_cmd_off(exarg_T *eap, int syncing UNUSED)syn_cmd_off3768,104496
syn_cmd_onoff(exarg_T *eap, char *name)syn_cmd_onoff3774,104599
syn_cmd_list(syn_cmd_list3791,104940
syn_lines_msg(void)syn_lines_msg3884,107029
syn_match_msg(void)syn_match_msg3907,107556
static int  last_matchgroup;last_matchgroup3917,107746
struct name_listname_list3919,107776
    int		flag;flag3921,107795
    char	*name;name3922,107810
syn_list_one(syn_list_one3931,107994
syn_list_flags(struct name_list *nlist, int flags, int attr)syn_list_flags4042,111167
syn_list_cluster(int id)syn_list_cluster4058,111480
put_id_list(char_u *name, short *list, int attr)put_id_list4085,112128
put_pattern(put_pattern4124,112870
syn_list_keywords(syn_list_keywords4197,114520
syn_clear_keyword(int id, hashtab_T *ht)syn_clear_keyword4295,117060
clear_keywtab(hashtab_T *ht)clear_keywtab4345,117929
add_keyword(add_keyword4375,118448
get_group_name(get_group_name4435,120081
get_syn_options(get_syn_options4462,120881
syn_incl_toplevel(int id, int *flagsp)syn_incl_toplevel4650,125571
syn_cmd_include(exarg_T *eap, int syncing UNUSED)syn_cmd_include4675,126221
syn_cmd_keyword(exarg_T *eap, int syncing UNUSED)syn_cmd_keyword4750,128215
syn_cmd_match(syn_cmd_match4879,131201
syn_cmd_region(syn_cmd_region4983,134600
#define ITEM_START	ITEM_START4994,134880
#define ITEM_SKIP	ITEM_SKIP4995,134905
#define ITEM_END	ITEM_END4996,134929
#define ITEM_MATCHGROUP	ITEM_MATCHGROUP4997,134952
syn_compare_stub(const void *v1, const void *v2)syn_compare_stub5249,141541
syn_combine_list(short **clstr1, short **clstr2, int list_op)syn_combine_list5262,141835
syn_scl_name2id(char_u *name)syn_scl_name2id5386,144436
syn_scl_namen2id(char_u *linep, int len)syn_scl_namen2id5407,144979
syn_check_cluster(char_u *pp, int len)syn_check_cluster5428,145425
syn_add_cluster(char_u *name)syn_add_cluster5451,145863
syn_cmd_cluster(exarg_T *eap, int syncing UNUSED)syn_cmd_cluster5500,147143
init_syn_patterns(void)init_syn_patterns5578,148795
get_syn_pattern(char_u *arg, synpat_T *ci)get_syn_pattern5590,149156
syn_cmd_sync(exarg_T *eap, int syncing UNUSED)syn_cmd_sync5692,151355
get_id_list(get_id_list5850,155281
copy_id_list(short *list)copy_id_list6052,159493
in_id_list(in_id_list6079,160121
struct subcommandsubcommand6176,162730
    char    *name;			// subcommand namename6178,162750
    void    (*func)(exarg_T *, int);	// function to callfunc6179,162790
static struct subcommand subcommands[] =subcommands6182,162851
ex_syntax(exarg_T *eap)ex_syntax6211,163636
ex_ownsyntax(exarg_T *eap)ex_ownsyntax6249,164455
syntax_present(win_T *win)syntax_present6295,165832
    EXP_SUBCMD,	    // expand ":syn" sub-commandsEXP_SUBCMD6306,166058
    EXP_CASE,	    // expand ":syn case" argumentsEXP_CASE6307,166108
    EXP_SPELL,	    // expand ":syn spell" argumentsEXP_SPELL6308,166158
    EXP_SYNC	    // expand ":syn sync" argumentsEXP_SYNC6309,166210
} expand_what;expand_what6310,166259
reset_expand_highlight(void)reset_expand_highlight6317,166388
set_context_in_echohl_cmd(expand_T *xp, char_u *arg)set_context_in_echohl_cmd6327,166593
set_context_in_syntax_cmd(expand_T *xp, char_u *arg)set_context_in_syntax_cmd6338,166809
get_syntax_name(expand_T *xp UNUSED, int idx)get_syntax_name6380,167935
syn_get_id(syn_get_id6414,168682
get_syntax_info(int *seqnrp)get_syntax_info6448,169710
syn_get_sub_char(void)syn_get_sub_char6458,169855
syn_get_stack_item(int i)syn_get_stack_item6471,170147
syn_get_foldlevel(win_T *wp, long lnum)syn_get_foldlevel6490,170580
ex_syntime(exarg_T *eap)ex_syntime6524,171182
syn_clear_time(syn_time_T *st)syn_clear_time6539,171520
syntime_clear(void)syntime_clear6551,171730
get_syntime_arg(expand_T *xp UNUSED, int idx)get_syntime_arg6573,172158
    proftime_T	total;total6587,172408
    int		count;count6588,172430
    int		match;match6589,172446
    proftime_T	slowest;slowest6590,172462
    proftime_T	average;average6591,172486
    int		id;id6592,172510
    char_u	*pattern;pattern6593,172523
} time_entry_T;time_entry_T6594,172544
syn_compare_syntime(const void *v1, const void *v2)syn_compare_syntime6597,172576
syntime_report(void)syntime_report6609,172822

src/tag.c,4429
typedef struct tag_pointerstag_pointers19,413
    char_u	*tagname;	// start of tag name (skip "file:")tagname22,481
    char_u	*tagname_end;	// char after tag nametagname_end23,538
    char_u	*fname;		// first char of file namefname24,586
    char_u	*fname_end;	// char after file namefname_end25,633
    char_u	*command;	// first char of commandcommand26,680
    char_u	*command_end;	// first char after commandcommand_end28,761
    char_u	*tag_fname;	// file name of the tags file. This is usedtag_fname29,814
    int		is_etag;	// TRUE for emacs tagis_etag32,929
    char_u	*tagkind;	// "kind:" valuetagkind34,976
    char_u	*tagkind_end;	// end of tagkindtagkind_end35,1014
    char_u	*user_data;	// user_data stringuser_data36,1057
    char_u	*user_data_end;	// end of user_datauser_data_end37,1100
    linenr_T	tagline;	// "line:" valuetagline38,1147
} tagptrs_T;tagptrs_T39,1186
#define MT_ST_CUR	MT_ST_CUR48,1509
#define MT_GL_CUR	MT_GL_CUR49,1562
#define MT_GL_OTH	MT_GL_OTH50,1615
#define MT_ST_OTH	MT_ST_OTH51,1666
#define MT_IC_OFF	MT_IC_OFF52,1717
#define MT_RE_OFF	MT_RE_OFF53,1761
#define MT_MASK	MT_MASK54,1806
#define MT_COUNT	MT_COUNT55,1856
static char	*mt_names[MT_COUNT/2] =mt_names57,1877
#define NOTAGFILE	NOTAGFILE60,1974
static char_u	*nofile_fname = NULL;	// fname for NOTAGFILE errornofile_fname61,2027
static char_u *bottommsg = (char_u *)N_("E555: at bottom of tag stack");bottommsg87,3072
static char_u *topmsg = (char_u *)N_("E556: at top of tag stack");topmsg88,3145
static char_u *recurmsg = (char_u *)N_("E986: cannot modify the tag stack within tagfunc");recurmsg90,3229
static char_u *tfu_inv_ret_msg = (char_u *)N_("E987: invalid return value from tagfunc");tfu_inv_ret_msg91,3321
static char_u	*tagmatchname = NULL;	// name of last used tagtagmatchname94,3419
static taggy_T ptag_entry = {NULL, {{0, 0, 0}, 0}, 0, 0, NULL};ptag_entry101,3611
static int  tfu_in_use = FALSE;	    // disallow recursive call of tagfunctfu_in_use105,3700
#define TAG_SEP TAG_SEP109,3847
do_tag(do_tag132,4791
print_tag_list(print_tag_list816,21307
add_llist_tags(add_llist_tags1010,25593
tag_freematch(void)tag_freematch1158,28628
taglen_advance(int l)taglen_advance1164,28698
do_tags(exarg_T *eap UNUSED)do_tags1179,28866
tag_strnicmp(char_u *s1, char_u *s2, size_t len)tag_strnicmp1222,30101
    char_u	*pat;		// the patternpat1246,30515
    int		len;		// length of pat[]len1247,30548
    char_u	*head;		// start of pattern headhead1248,30582
    int		headlen;	// length of head[]headlen1249,30626
    regmatch_T	regmatch;	// regexp program, may be NULLregmatch1250,30664
} pat_T;pat_T1251,30720
prepare_pats(pat_T *pats, int has_re)prepare_pats1257,30810
find_tagfunc_tags(find_tagfunc_tags1296,31925
find_tags(find_tags1546,37724
# define INCSTACK_SIZE INCSTACK_SIZE1613,39944
# define ML_EXTRA ML_EXTRA2516,63274
static garray_T tag_fnames = GA_EMPTY;tag_fnames2823,70184
found_tagfile_cb(char_u *fname, void *cookie UNUSED)found_tagfile_cb2830,70348
free_tag_stuff(void)free_tag_stuff2846,70710
get_tagfname(get_tagfname2866,71106
tagname_free(tagname_T *tnp)tagname_free3005,74628
parse_tag_line(parse_tag_line3022,75089
test_for_static(tagptrs_T *tagp)test_for_static3138,77596
matching_line_len(char_u *lbuf)matching_line_len3160,77959
parse_match(parse_match3183,78493
tag_full_fname(tagptrs_T *tagp)tag_full_fname3278,80718
jumpto_tag(jumpto_tag3308,81272
expand_tag_fname(char_u *fname, char_u *tag_fname, int expand)expand_tag_fname3716,91707
test_for_current(test_for_current3767,92983
find_extra(char_u **pp)find_extra3811,93796
tagstack_clear_entry(taggy_T *item)tagstack_clear_entry3859,94659
expand_tags(expand_tags3866,94770
add_tag_field(add_tag_field3918,96139
get_tags(list_T *list, char_u *pat, char_u *buf_fname)get_tags3966,97208
get_tag_details(taggy_T *tag, dict_T *retdict)get_tag_details4063,99510
get_tagstack(win_T *wp, dict_T *retdict)get_tagstack4092,100403
tagstack_clear(win_T *wp)tagstack_clear4119,101006
tagstack_shift(win_T *wp)tagstack_shift4135,101363
tagstack_push_item(tagstack_push_item4150,101647
tagstack_push_items(win_T *wp, list_T *l)tagstack_push_items4184,102428
tagstack_set_curidx(win_T *wp, int curidx)tagstack_set_curidx4224,103541
set_tagstack(win_T *wp, dict_T *d, int action)set_tagstack4241,103937

src/tee/tee.c,185
# define sysconf(sysconf38,1330
void usage(void)usage41,1361
myfread(char *buf, int elsize /*ignored*/, int max, FILE *fp)myfread63,1913
main(int argc, char *argv[])main80,2134

src/term.c,12407
#define tgetstr tgetstr24,706
#  define TPUTSFUNCASTTPUTSFUNCAST41,1057
#   define TPUTSFUNCAST TPUTSFUNCAST44,1112
#   define TPUTSFUNCAST TPUTSFUNCAST46,1157
#undef tgetstrtgetstr51,1218
struct builtin_termbuiltin_term68,1891
    int		bt_entry;bt_entry70,1913
    char	*bt_string;bt_string71,1932
#define BT_EXTRA_KEYS	BT_EXTRA_KEYS75,2026
#   define LOG_TR(LOG_TR106,2983
    STATUS_GET,		// send request when switching to RAW modeSTATUS_GET110,3053
    STATUS_SENT,	// did send request, checking for responseSTATUS_SENT111,3113
    STATUS_GOT,		// received responseSTATUS_GOT112,3173
    STATUS_FAIL		// timed outSTATUS_FAIL113,3211
} request_progress_T;request_progress_T114,3241
    request_progress_T	    tr_progress;tr_progress117,3281
    time_t		    tr_start;	// when request was sent, -1 for nevertr_start118,3321
} termrequest_T;termrequest_T119,3386
#  define TERMREQUEST_INIT TERMREQUEST_INIT121,3404
static termrequest_T crv_status = TERMREQUEST_INIT;crv_status124,3485
static termrequest_T u7_status = TERMREQUEST_INIT;u7_status127,3573
static termrequest_T rfg_status = TERMREQUEST_INIT;rfg_status131,3684
static int fg_r = 0;fg_r132,3736
static int fg_g = 0;fg_g133,3757
static int fg_b = 0;fg_b134,3778
static int bg_r = 255;bg_r135,3799
static int bg_g = 255;bg_g136,3822
static int bg_b = 255;bg_b137,3845
static termrequest_T rbg_status = TERMREQUEST_INIT;rbg_status141,3914
static termrequest_T rbm_status = TERMREQUEST_INIT;rbm_status144,4007
static termrequest_T rcs_status = TERMREQUEST_INIT;rcs_status147,4092
static termrequest_T winpos_status = TERMREQUEST_INIT;winpos_status150,4182
static termrequest_T *all_termrequests[] = {all_termrequests152,4238
short ospeed;ospeed177,4822
char *UP, *BC, PC;UP184,4936
char *UP, *BC, PC;BC184,4936
char *UP, *BC, PC;PC184,4936
# define TGETSTR(TGETSTR188,4973
# define TGETENT(TGETENT189,5018
static int  detected_8bit = FALSE;	// detected 8-bit terminaldetected_8bit193,5149
static int initial_cursor_shape = 0;initial_cursor_shape198,5341
static int initial_cursor_shape_blink = FALSE;initial_cursor_shape_blink202,5494
static int initial_cursor_blink = FALSE;initial_cursor_blink205,5599
static struct builtin_term builtin_termcaps[] =builtin_termcaps208,5648
termgui_mch_get_color(char_u *name)termgui_mch_get_color1369,46162
termgui_get_color(char_u *name)termgui_get_color1375,46254
termgui_mch_get_rgb(guicolor_T color)termgui_mch_get_rgb1389,46495
# define DEFAULT_TERM	DEFAULT_TERM1399,46663
# define DEFAULT_TERM	DEFAULT_TERM1403,46724
# define DEFAULT_TERM	DEFAULT_TERM1407,46812
# define DEFAULT_TERM	DEFAULT_TERM1411,46875
# define DEFAULT_TERM	DEFAULT_TERM1415,46933
# undef DEFAULT_TERMDEFAULT_TERM1419,46997
# define DEFAULT_TERM	DEFAULT_TERM1420,47018
# undef DEFAULT_TERMDEFAULT_TERM1424,47087
# define DEFAULT_TERM	DEFAULT_TERM1425,47108
# define DEFAULT_TERM	DEFAULT_TERM1429,47177
char_u *(term_strings[(int)KS_LAST + 1]);term_strings1437,47437
static int	need_gather = FALSE;	    // need to fill termleader[]need_gather1439,47480
static char_u	termleader[256 + 1];	    // for check_termcode()termleader1440,47545
static int	check_for_codes = FALSE;    // check for key code responsecheck_for_codes1442,47633
static int	is_not_xterm = FALSE;	    // recognized not-really-xtermis_not_xterm1443,47703
find_builtin_term(char_u *term)find_builtin_term1447,47812
parse_builtin_tcap(char_u *term)parse_builtin_tcap1482,48567
set_color_count(int nr)set_color_count1556,50238
may_adjust_color_count(int val)may_adjust_color_count1573,50628
static char *(key_names[]) =key_names1598,51147
get_term_entries(int *height, int *width)get_term_entries1616,51560
report_term_error(char *error_msg, char_u *term)report_term_error1729,54963
report_default_term(char_u *term)report_default_term1759,55600
set_termname(char_u *term)set_termname1780,56095
tgetent_error(char_u *tbuf, char_u *term)tgetent_error2113,64254
vim_tgetstr(char *s, char_u **pp)vim_tgetstr2150,65203
getlinecol(getlinecol2169,65738
add_termcap_entry(char_u *name, int force)add_termcap_entry2193,66370
term_is_builtin(char_u *name)term_is_builtin2301,68546
term_is_8bit(char_u *name)term_is_8bit2312,68822
term_7to8bit(char_u *p)term_7to8bit2324,69074
term_is_gui(char_u *name)term_is_gui2340,69302
tltoa(unsigned long i)tltoa2349,69492
tgoto(char *cm, int x, int y)tgoto2374,69848
termcapinit(char_u *name)termcapinit2424,70648
#define OUT_SIZE	OUT_SIZE2464,71756
static char_u		out_buf[OUT_SIZE + 1];out_buf2467,71841
static int		out_pos = 0;	// number of chars in out_bufout_pos2469,71880
#define MAX_ESC_SEQ_LEN	MAX_ESC_SEQ_LEN2473,72078
out_flush(void)out_flush2479,72162
out_flush_cursor(out_flush_cursor2497,72501
out_flush_check(void)out_flush_check2519,73016
out_trash(void)out_trash2530,73210
out_char(unsigned c)out_char2543,73482
out_char_nf(unsigned c)out_char_nf2561,73885
out_str_nf(char_u *s)out_str_nf2579,74431
out_str_cf(char_u *s)out_str_cf2600,74892
out_str(char_u *s)out_str2671,76327
term_windgoto(int row, int col)term_windgoto2703,76886
term_cursor_right(int i)term_cursor_right2709,76976
term_append_lines(int line_count)term_append_lines2715,77056
term_delete_lines(int line_count)term_delete_lines2721,77154
term_set_winpos(int x, int y)term_set_winpos2728,77296
can_get_termresponse()can_get_termresponse2743,77594
termrequest_sent(termrequest_T *status)termrequest_sent2757,77835
termrequest_any_pending()termrequest_any_pending2767,78034
static int winpos_x = -1;winpos_x2788,78528
static int winpos_y = -1;winpos_y2789,78554
static int did_request_winpos = 0;did_request_winpos2790,78580
term_get_winpos(int *x, int *y, varnumber_T timeout)term_get_winpos2798,78780
term_set_winsize(int height, int width)term_set_winsize2844,79791
term_color(char_u *s, int n)term_color2851,79909
term_fg_color(int n)term_fg_color2892,81074
term_bg_color(int n)term_bg_color2902,81255
term_bg_default(void)term_bg_default2924,81955
#define RED(RED2947,82538
#define GREEN(GREEN2948,82588
#define BLUE(BLUE2949,82638
term_rgb_color(char_u *s, guicolor_T rgb)term_rgb_color2952,82705
#define MAX_COLOR_STR_LEN MAX_COLOR_STR_LEN2954,82749
term_fg_rgb_color(guicolor_T rgb)term_fg_rgb_color2963,82935
term_bg_rgb_color(guicolor_T rgb)term_bg_rgb_color2969,83014
term_settitle(char_u *title)term_settitle2981,83271
term_push_title(int which)term_push_title2995,83617
term_pop_title(int which)term_pop_title3014,83946
ttest(int pairs)ttest3035,84337
add_long_to_buf(long_u val, char_u *dst)add_long_to_buf3144,86678
get_long_from_buf(char_u *buf, long_u *val)get_long_from_buf3165,87323
get_bytes_from_buf(char_u *buf, char_u *bytes, int num_bytes)get_bytes_from_buf3193,87986
check_shellsize(void)check_shellsize3229,88908
limit_screen_size(void)limit_screen_size3240,89134
win_new_shellsize(void)win_new_shellsize3254,89393
shell_resized(void)shell_resized3281,90061
shell_resized_check(void)shell_resized_check3291,90237
set_shellsize(int width, int height, int mustset)set_shellsize3319,90892
settmode(int tmode)settmode3433,93643
starttermcap(void)starttermcap3490,95116
stoptermcap(void)stoptermcap3517,95793
may_req_termresponse(void)may_req_termresponse3574,97484
may_req_ambiguous_char_width(void)may_req_ambiguous_char_width3601,98361
may_req_bg_color(void)may_req_bg_color3643,99414
log_tr(const char *fmt, ...)log_tr3681,100203
swapping_screen(void)swapping_screen3711,100799
scroll_start(void)scroll_start3722,101081
static int cursor_is_off = FALSE;cursor_is_off3732,101241
cursor_on_force(void)cursor_on_force3738,101355
cursor_on(void)cursor_on3748,101488
cursor_off(void)cursor_off3758,101591
term_cursor_mode(int forced)term_cursor_mode3772,101838
term_cursor_color(char_u *color)term_cursor_color3821,102902
blink_state_is_inverted()blink_state_is_inverted3834,103111
term_cursor_shape(int shape, int blink)term_cursor_shape3849,103415
scroll_region_set(win_T *wp, int off)scroll_region_set3887,104279
scroll_region_reset(void)scroll_region_reset3901,104680
static struct termcodetermcode3914,104964
    char_u  name[2];	    // termcap name of entryname3916,104989
    char_u  *code;	    // terminal code (in allocated memory)code3917,105039
    int	    len;	    // STRLEN(code)len3918,105101
    int	    modlen;	    // length of part before ";*~".modlen3919,105138
} *termcodes = NULL;termcodes3920,105194
static int  tc_max_len = 0; // number of entries that termcodes[] can holdtc_max_len3922,105216
static int  tc_len = 0;	    // current number of entries in termcodes[]tc_len3923,105291
clear_termcodes(void)clear_termcodes3928,105423
#define ATC_FROM_TERM ATC_FROM_TERM3945,105761
add_termcode(char_u *name, char_u *string, int flags)add_termcode3954,106038
termcode_star(char_u *code, int len)termcode_star4092,109106
find_termcode(char_u *name)find_termcode4106,109363
get_termcode(int i)get_termcode4117,109579
get_termcode_len(int idx)get_termcode_len4128,109747
del_termcode(char_u *name)del_termcode4134,109818
del_termcode_idx(int idx)del_termcode_idx4153,110184
switch_to_8bit(void)switch_to_8bit4169,110509
static linenr_T orig_topline = 0;orig_topline4194,111012
static int orig_topfill = 0;orig_topfill4196,111064
set_mouse_topline(win_T *wp)set_mouse_topline4210,111455
is_mouse_topline(win_T *wp)is_mouse_topline4223,111700
put_string_in_typebuf(put_string_in_typebuf4239,111996
decode_modifiers(int n)decode_modifiers4290,113263
modifiers2keycode(int modifiers, int *key, char_u *string)modifiers2keycode4307,113571
check_termcode(check_termcode4340,114621
term_get_fg_color(char_u *r, char_u *g, char_u *b)term_get_fg_color5346,142212
term_get_bg_color(char_u *r, char_u *g, char_u *b)term_get_bg_color5360,142422
replace_termcodes(replace_termcodes5399,143767
find_term_bykeys(char_u *src)find_term_bykeys5614,148834
gather_termleader(void)gather_termleader5633,149212
show_termcodes(void)show_termcodes5664,149908
#define INC3 INC35675,150059
#define INC2 INC25676,150108
#define GAP GAP5677,150155
show_one_termcode(char_u *name, char_u *code, int printit)show_one_termcode5750,151759
static int xt_index_in = 0;xt_index_in5803,152777
static int xt_index_out = 0;xt_index_out5804,152805
req_codes_from_term(void)req_codes_from_term5807,152851
req_more_codes_from_term(void)req_more_codes_from_term5815,152973
got_code_from_term(char_u *code, int len)got_code_from_term5848,153903
#define XT_LEN XT_LEN5850,153947
check_for_codes_from_term(void)check_for_codes_from_term5911,155465
static char ksme_str[20];ksme_str5948,156401
static char ksmr_str[20];ksmr_str5949,156427
static char ksmd_str[20];ksmd_str5950,156453
update_tcap(int attr)update_tcap5956,156572
#  define KSSIZE KSSIZE5980,157247
struct ks_tbl_sks_tbl_s5981,157267
    int  code;		// value of KS_code5983,157285
    char *vtp;		// code in vtp modevtp5984,157317
    char *vtp2;		// code in vtp2 modevtp25985,157353
    char buf[KSSIZE];   // save buffer in non-vtp modebuf5986,157391
    char vbuf[KSSIZE];  // save buffer in vtp modevbuf5987,157446
    char v2buf[KSSIZE]; // save buffer in vtp2 modev2buf5988,157497
    char arr[KSSIZE];   // real bufferarr5989,157549
static struct ks_tbl_s ks_tbl[] =ks_tbl5992,157592
find_first_tcap(find_first_tcap6019,158852
swap_tcap(void)swap_tcap6036,159162
hex_digit(int c)hex_digit6127,160901
gui_adjust_rgb(guicolor_T c)gui_adjust_rgb6139,161095
#  define gui_adjust_rgb(gui_adjust_rgb6147,161241
gui_get_color_cmn(char_u *name)gui_get_color_cmn6151,161297
#  undef RGBRGB6157,161576
#  define RGB(RGB6160,161610
# define LINE_LEN LINE_LEN6162,161666
gui_get_rgb_color_cmn(int r, int g, int b)gui_get_rgb_color_cmn6313,165997
static int cube_value[] = {cube_value6325,166288
static int grey_ramp[] = {grey_ramp6329,166359
#  define VTERM_ANSI_INDEX_NONE VTERM_ANSI_INDEX_NONE6337,166638
static char_u ansi_table[16][4] = {ansi_table6340,166681
cterm_color2rgb(int nr, char_u *r, char_u *g, char_u *b, char_u *ansi_idx)cterm_color2rgb6362,167341
term_replace_bs_del_keycode(char_u *ta_buf, int ta_len, int len)term_replace_bs_del_keycode6405,168080

src/terminal.c,19037
# define MIN(MIN46,1613
# define MAX(MAX49,1674
  VTermScreenCellAttrs	attrs;attrs56,1848
  char			width;width57,1878
  VTermColor		fg;fg58,1894
  VTermColor		bg;bg59,1912
} cellattr_T;cellattr_T60,1930
typedef struct sb_line_S {sb_line_S62,1945
    int		sb_cols;	// can differ per linesb_cols63,1972
    cellattr_T	*sb_cells;	// allocatedsb_cells64,2013
    cellattr_T	sb_fill_attr;	// for short linesb_fill_attr65,2052
    char_u	*sb_text;	// for tl_scrollback_postponedsb_text66,2099
} sb_line_T;sb_line_T67,2151
#  define HPCON HPCON71,2193
#  define EXTENDED_STARTUPINFO_PRESENT EXTENDED_STARTUPINFO_PRESENT74,2261
#  define PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE77,2364
typedef struct _DYN_STARTUPINFOEXW_DYN_STARTUPINFOEXW79,2429
    STARTUPINFOW StartupInfo;StartupInfo81,2466
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;lpAttributeList82,2496
} DYN_STARTUPINFOEXW, *PDYN_STARTUPINFOEXW;DYN_STARTUPINFOEXW83,2546
} DYN_STARTUPINFOEXW, *PDYN_STARTUPINFOEXW;PDYN_STARTUPINFOEXW83,2546
struct terminal_S {terminal_S87,2629
    term_T	*tl_next;tl_next88,2649
    VTerm	*tl_vterm;tl_vterm90,2671
    job_T	*tl_job;tl_job91,2692
    buf_T	*tl_buffer;tl_buffer92,2711
    int		tl_system;	// when non-zero used for :!cmd outputtl_system94,2755
    int		tl_toprow;	// row with first line of system terminaltl_toprow95,2814
    int		tl_vterm_size_changed;tl_vterm_size_changed99,2952
    int		tl_normal_mode; // TRUE: Terminal-Normal modetl_normal_mode101,2985
    int		tl_channel_closed;tl_channel_closed102,3040
    int		tl_channel_recently_closed; // still need to handle tl_finishtl_channel_recently_closed103,3068
    int		tl_finish;tl_finish105,3140
#define TL_FINISH_UNSET	TL_FINISH_UNSET106,3160
#define TL_FINISH_CLOSE	TL_FINISH_CLOSE107,3192
#define TL_FINISH_NOCLOSE TL_FINISH_NOCLOSE108,3265
#define TL_FINISH_OPEN	TL_FINISH_OPEN109,3310
    char_u	*tl_opencmd;tl_opencmd110,3351
    char_u	*tl_eof_chars;tl_eof_chars111,3375
    char_u	*tl_api;	// prefix for terminal API functiontl_api112,3401
    char_u	*tl_arg0_cmd;	// To format the status bartl_arg0_cmd114,3458
    void	*tl_winpty_config;tl_winpty_config117,3525
    void	*tl_winpty;tl_winpty118,3553
    HPCON	tl_conpty;tl_conpty120,3575
    DYN_STARTUPINFOEXW tl_siex;	// Structure that always needs to be holdtl_siex121,3596
    FILE	*tl_out_fd;tl_out_fd123,3671
    char_u	*tl_command;tl_command126,3725
    char_u	*tl_kill;tl_kill128,3756
    int		tl_rows;tl_rows131,3807
    int		tl_cols;tl_cols132,3825
    char_u	*tl_title; // NULL or allocatedtl_title134,3844
    char_u	*tl_status_text; // NULL or allocatedtl_status_text135,3887
    int		tl_dirty_row_start; // MAX_ROW if nothing dirtytl_dirty_row_start138,3989
    int		tl_dirty_row_end;   // row below last one to updatetl_dirty_row_end139,4046
    int		tl_dirty_snapshot;  // text updated after making snapshottl_dirty_snapshot140,4107
    int		tl_timer_set;tl_timer_set142,4193
    proftime_T	tl_timer_due;tl_timer_due143,4216
    int		tl_postponed_scroll;	// to be scrolled uptl_postponed_scroll145,4252
    garray_T	tl_scrollback;tl_scrollback147,4304
    int		tl_scrollback_scrolled;tl_scrollback_scrolled148,4332
    garray_T	tl_scrollback_postponed;tl_scrollback_postponed149,4365
    cellattr_T	tl_default_color;tl_default_color151,4404
    linenr_T	tl_top_diff_rows;   // rows of top diff file or zerotl_top_diff_rows153,4438
    linenr_T	tl_bot_diff_rows;   // rows of bottom diff filetl_bot_diff_rows154,4504
    VTermPos	tl_cursor_pos;tl_cursor_pos156,4566
    int		tl_cursor_visible;tl_cursor_visible157,4594
    int		tl_cursor_blink;tl_cursor_blink158,4622
    int		tl_cursor_shape;  // 1: block, 2: underline, 3: bartl_cursor_shape159,4648
    char_u	*tl_cursor_color; // NULL or allocatedtl_cursor_color160,4709
    int		tl_using_altscreen;tl_using_altscreen162,4760
#define TMODE_ONCE TMODE_ONCE165,4793
#define TMODE_LOOP TMODE_LOOP166,4840
static term_T *first_term = NULL;first_term171,4923
static term_T *in_terminal_loop = NULL;in_terminal_loop174,4997
static BOOL has_winpty = FALSE;has_winpty177,5051
static BOOL has_conpty = FALSE;has_conpty178,5083
#define MAX_ROW MAX_ROW181,5123
#define KEY_BUF_LEN KEY_BUF_LEN182,5198
static int term_backspace_char = BS;term_backspace_char199,5807
static int term_default_cterm_fg = -1;term_default_cterm_fg202,5883
static int term_default_cterm_bg = -1;term_default_cterm_bg203,5922
static char_u	*last_set_cursor_color = NULL;last_set_cursor_color207,6108
static char_u	*desired_cursor_color = NULL;desired_cursor_color208,6153
static int	last_set_cursor_shape = -1;last_set_cursor_shape209,6197
static int	desired_cursor_shape = -1;desired_cursor_shape210,6236
static int	last_set_cursor_blink = -1;last_set_cursor_blink211,6274
static int	desired_cursor_blink = -1;desired_cursor_blink212,6313
cursor_color_equal(char_u *lhs_color, char_u *rhs_color)cursor_color_equal219,6445
cursor_color_copy(char_u **to_color, char_u *from_color)cursor_color_copy227,6665
cursor_color_get(char_u *color)cursor_color_get237,6962
parse_termwinsize(win_T *wp, int *rows, int *cols)parse_termwinsize250,7303
set_term_and_win_size(term_T *term)set_term_and_win_size277,7821
init_job_options(jobopt_T *opt)init_job_options311,8692
setup_job_options(jobopt_T *opt, int rows, int cols)setup_job_options325,8980
term_flush_messages()term_flush_messages364,10008
term_close_buffer(buf_T *buf, buf_T *old_curbuf)term_close_buffer375,10201
term_start(term_start400,10839
ex_terminal(exarg_T *eap)ex_terminal710,18895
# define OPTARG_HAS(OPTARG_HAS736,19293
# undef OPTARG_HASOPTARG_HAS823,21465
term_write_session(FILE *fd, win_T *wp)term_write_session894,23214
term_should_restore(buf_T *buf)term_should_restore918,23869
free_scrollback(term_T *term)free_scrollback931,24116
static term_T	*terminals_to_free = NULL;terminals_to_free945,24551
free_terminal(buf_T *buf)free_terminal956,24889
free_unused_terminals()free_unused_terminals992,25674
get_tty_part(term_T *term UNUSED)get_tty_part1028,26480
term_write_job_output(term_T *term, char_u *msg, size_t len)term_write_job_output1049,26840
update_cursor(term_T *term, int redraw)update_cursor1072,27521
write_to_term(buf_T *buffer, char_u *msg, channel_T *channel)write_to_term1103,28104
term_send_mouse(VTerm *vterm, int button, int pressed)term_send_mouse1161,29643
static int enter_mouse_col = -1;enter_mouse_col1180,30117
static int enter_mouse_row = -1;enter_mouse_row1181,30150
term_mouse_click(VTerm *vterm, int key)term_mouse_click1188,30307
term_convert_key(term_T *term, int c, int modmask, char *buf)term_convert_key1285,33025
term_job_running_check(term_T *term, int check_job_status)term_job_running_check1459,38868
term_job_running(term_T *term)term_job_running1484,39580
term_none_open(term_T *term)term_none_open1493,39749
term_try_stop_job(buf_T *buf)term_try_stop_job1509,40202
add_scrollback_line_to_buffer(term_T *term, char_u *text, int len)add_scrollback_line_to_buffer1561,41441
cell2cellattr(const VTermScreenCell *cell, cellattr_T *attr)cell2cellattr1597,42301
equal_celattr(cellattr_T *a, cellattr_T *b)equal_celattr1606,42494
add_empty_scrollback(term_T *term, cellattr_T *fill_attr, int lnum)add_empty_scrollback1622,42923
cleanup_scrollback(term_T *term)cleanup_scrollback1654,43636
update_snapshot(term_T *term)update_snapshot1678,44212
for_all_windows_and_curwin(win_T **wp, int *did_curwin)for_all_windows_and_curwin1805,47554
may_move_terminal_to_buffer(term_T *term, int redraw)may_move_terminal_to_buffer1827,48096
term_check_timers(int next_due_arg, proftime_T *now)term_check_timers1874,49350
set_terminal_mode(term_T *term, int normal_mode)set_terminal_mode1904,50001
cleanup_vterm(term_T *term)cleanup_vterm1919,50405
term_enter_normal_mode(void)term_enter_normal_mode1932,50710
term_in_normal_mode(void)term_in_normal_mode1959,51453
term_enter_job_mode()term_enter_job_mode1971,51685
term_vgetc()term_vgetc1992,52176
static int	mouse_was_outside = FALSE;mouse_was_outside2014,52588
send_keys_to_term(term_T *term, int c, int modmask, int typed)send_keys_to_term2022,52823
position_cursor(win_T *wp, VTermPos *pos, int add_off UNUSED)position_cursor2112,54722
term_paste_register(int prev_c UNUSED)term_paste_register2130,55193
terminal_is_active()terminal_is_active2203,56823
term_get_cursor_shape(guicolor_T *fg, guicolor_T *bg)term_get_cursor_shape2210,56946
may_output_cursor_props(void)may_output_cursor_props2257,58000
may_set_cursor_props(term_T *term)may_set_cursor_props2279,58769
prepare_restore_cursor_props(void)prepare_restore_cursor_props2300,59278
term_use_loop_check(int check_job_status)term_use_loop_check2318,59690
term_use_loop(void)term_use_loop2333,60014
term_win_entered()term_win_entered2343,60205
raw_c_to_ctrl(int c)raw_c_to_ctrl2366,60647
ctrl_to_raw_c(int c)ctrl_to_raw_c2379,60919
terminal_loop(int blocking)terminal_loop2399,61488
may_toggle_cursor(term_T *term)may_toggle_cursor2599,66716
color2index(VTermColor *color, int fg, int *boldp)color2index2615,67020
vtermAttr2hl(VTermScreenCellAttrs cellattrs)vtermAttr2hl2690,69332
hl2vtermAttr(int attr, cellattr_T *cell)hl2vtermAttr2711,69740
cell2attr(cell2attr2730,70204
set_dirty_snapshot(term_T *term)set_dirty_snapshot2806,71896
handle_damage(VTermRect rect, void *user)handle_damage2820,72191
term_scroll_up(term_T *term, int start_row, int count)term_scroll_up2832,72535
handle_moverect(VTermRect dest, VTermRect src, void *user)handle_moverect2856,73153
handle_movecursor(handle_movecursor2885,74095
handle_settermprop(handle_settermprop2913,74665
handle_resize(int rows, int cols, void *user)handle_resize2998,76756
limit_scrollback(term_T *term, garray_T *gap, int update_buffer)limit_scrollback3030,77521
handle_pushline(int cols, const VTermScreenCell *cells, void *user)handle_pushline3059,78174
handle_postponed_scrollback(term_T *term)handle_postponed_scrollback3163,80512
static VTermScreenCallbacks screen_callbacks = {screen_callbacks3205,81635
term_after_channel_closed(term_T *term)term_after_channel_closed3222,82134
may_close_term_popup(void)may_close_term_popup3304,84294
term_channel_closed(channel_T *ch)term_channel_closed3325,84716
term_check_channel_closed_recently()term_check_channel_closed_recently3385,85907
term_line2screenline(term_line2screenline3408,86413
update_system_term(term_T *term)update_system_term3499,88091
term_do_update_window(win_T *wp)term_do_update_window3547,89198
term_update_window(win_T *wp)term_update_window3558,89433
term_is_finished(buf_T *buf)term_is_finished3665,92491
term_show_buffer(buf_T *buf)term_show_buffer3675,92748
term_change_in_curbuf(void)term_change_in_curbuf3687,93007
term_get_attr(win_T *wp, linenr_T lnum, int col)term_get_attr3708,93549
cterm_color2vterm(int nr, VTermColor *rgb)cterm_color2vterm3733,94171
init_default_colors(term_T *term, win_T *wp)init_default_colors3742,94380
set_vterm_palette(VTerm *vterm, long_u *rgb)set_vterm_palette3894,97822
set_ansi_colors_list(VTerm *vterm, list_T *list)set_ansi_colors_list3914,98271
init_vterm_ansi_colors(VTerm *vterm)init_vterm_ansi_colors3948,98919
handle_drop_command(listitem_T *item)handle_drop_command3966,99460
is_permitted_term_api(char_u *func, char_u *pat)is_permitted_term_api4047,101446
handle_call_command(term_T *term, channel_T *channel, listitem_T *item)handle_call_command4057,101733
parse_osc(const char *command, size_t cmdlen, void *user)parse_osc4098,102765
parse_csi(parse_csi4156,104317
static VTermParserCallbacks parser_fallbacks = {parser_fallbacks4210,105574
vterm_malloc(size_t size, void *data UNUSED)vterm_malloc4224,105846
vterm_memfree(void *ptr, void *data UNUSED)vterm_memfree4230,105942
static VTermAllocatorFunctions vterm_allocator = {vterm_allocator4235,106010
create_vterm(term_T *term, int rows, int cols)create_vterm4245,106197
term_update_colors(void)term_update_colors4309,107917
term_get_status_text(term_T *term)term_get_status_text4326,108296
set_ref_in_term(int copyID)set_ref_in_term4361,109124
set_terminal_default_colors(int cterm_fg, int cterm_bg)set_terminal_default_colors4381,109527
term_get_buf(typval_T *argvars, char *where)term_get_buf4393,109851
same_color(VTermColor *a, VTermColor *b)same_color4410,110218
dump_term_color(FILE *fd, VTermColor *color)dump_term_color4419,110392
f_term_dumpwrite(typval_T *argvars, typval_T *rettv UNUSED)f_term_dumpwrite4449,111412
dump_is_corrupt(garray_T *gap)dump_is_corrupt4632,115414
append_cell(garray_T *gap, cellattr_T *cell)append_cell4638,115507
read_dump_file(FILE *fd, VTermPos *cursor_pos)read_dump_file4652,115812
get_separator(int text_width, char_u *fname)get_separator4882,120780
term_load_dump(typval_T *argvars, typval_T *rettv, int do_diff)term_load_dump4932,121934
term_swap_diff()term_swap_diff5198,128613
f_term_dumpdiff(typval_T *argvars, typval_T *rettv)f_term_dumpdiff5305,131297
f_term_dumpload(typval_T *argvars, typval_T *rettv)f_term_dumpload5314,131459
f_term_getaltscreen(typval_T *argvars, typval_T *rettv)f_term_getaltscreen5323,131612
f_term_getattr(typval_T *argvars, typval_T *rettv)f_term_getattr5336,131882
f_term_getcursor(typval_T *argvars, typval_T *rettv)f_term_getcursor5372,132608
f_term_getjob(typval_T *argvars, typval_T *rettv)f_term_getjob5405,133440
get_row_number(typval_T *tv, term_T *term)get_row_number5423,133820
f_term_getline(typval_T *argvars, typval_T *rettv)f_term_getline5436,134105
f_term_getscrolled(typval_T *argvars, typval_T *rettv)f_term_getscrolled5483,135174
f_term_getsize(typval_T *argvars, typval_T *rettv)f_term_getsize5496,135439
f_term_setsize(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_term_setsize5515,135836
f_term_getstatus(typval_T *argvars, typval_T *rettv)f_term_getstatus5545,136677
f_term_gettitle(typval_T *argvars, typval_T *rettv)f_term_gettitle5569,137163
f_term_gettty(typval_T *argvars, typval_T *rettv)f_term_gettty5585,137489
f_term_list(typval_T *argvars UNUSED, typval_T *rettv)f_term_list5619,138184
f_term_scrape(typval_T *argvars, typval_T *rettv)f_term_scrape5639,138620
f_term_sendkeys(typval_T *argvars, typval_T *rettv UNUSED)f_term_sendkeys5749,141084
f_term_getansicolors(typval_T *argvars, typval_T *rettv)f_term_getansicolors5788,141803
f_term_setansicolors(typval_T *argvars, typval_T *rettv UNUSED)f_term_setansicolors5823,142588
f_term_setapi(typval_T *argvars, typval_T *rettv UNUSED)f_term_setapi5849,143109
f_term_setrestore(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_term_setrestore5870,143534
f_term_setkill(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_term_setkill5893,144012
f_term_start(typval_T *argvars, typval_T *rettv)f_term_start5914,144448
f_term_wait(typval_T *argvars, typval_T *rettv UNUSED)f_term_wait5942,145248
term_send_eof(channel_T *ch)term_send_eof6000,146730
term_getjob(term_T *term)term_getjob6023,147247
typedef int COORD;COORD6034,147457
typedef int DWORD;DWORD6035,147476
typedef int HANDLE;HANDLE6036,147495
typedef int *DWORD_PTR;DWORD_PTR6037,147515
typedef int HPCON;HPCON6038,147539
typedef int HRESULT;HRESULT6039,147558
typedef int LPPROC_THREAD_ATTRIBUTE_LIST;LPPROC_THREAD_ATTRIBUTE_LIST6040,147579
typedef int SIZE_T;SIZE_T6041,147621
typedef int PSIZE_T;PSIZE_T6042,147641
typedef int PVOID;PVOID6043,147662
typedef int BOOL;BOOL6044,147681
# define WINAPIWINAPI6045,147699
HRESULT (WINAPI *pCreatePseudoConsole)(COORD, HANDLE, HANDLE, DWORD, HPCON*);pCreatePseudoConsole6048,147723
HRESULT (WINAPI *pResizePseudoConsole)(HPCON, COORD);pResizePseudoConsole6049,147801
HRESULT (WINAPI *pClosePseudoConsole)(HPCON);pClosePseudoConsole6050,147855
BOOL (WINAPI *pInitializeProcThreadAttributeList)(LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD, PSIZE_T);pInitializeProcThreadAttributeList6051,147901
BOOL (WINAPI *pUpdateProcThreadAttribute)(LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD_PTR, PVOID, SIZE_T, PVOID, PSIZE_T);pUpdateProcThreadAttribute6052,148005
void (WINAPI *pDeleteProcThreadAttributeList)(LPPROC_THREAD_ATTRIBUTE_LIST);pDeleteProcThreadAttributeList6053,148127
dyn_conpty_init(int verbose)dyn_conpty_init6056,148220
conpty_term_and_job_init(conpty_term_and_job_init6107,149410
conpty_term_report_winsize(term_T *term, int rows, int cols)conpty_term_report_winsize6338,155331
term_free_conpty(term_T *term)term_free_conpty6348,155529
use_conpty(void)use_conpty6362,155880
#define WINPTY_SPAWN_FLAG_AUTO_SHUTDOWN WINPTY_SPAWN_FLAG_AUTO_SHUTDOWN6369,155942
#define WINPTY_SPAWN_FLAG_EXIT_AFTER_SHUTDOWN WINPTY_SPAWN_FLAG_EXIT_AFTER_SHUTDOWN6370,155986
#define WINPTY_MOUSE_MODE_FORCE	WINPTY_MOUSE_MODE_FORCE6371,156037
void* (*winpty_config_new)(UINT64, void*);winpty_config_new6373,156073
void* (*winpty_open)(void*, void*);winpty_open6374,156116
void* (*winpty_spawn_config_new)(UINT64, void*, LPCWSTR, void*, void*, void*);winpty_spawn_config_new6375,156152
BOOL (*winpty_spawn)(void*, void*, HANDLE*, HANDLE*, DWORD*, void*);winpty_spawn6376,156231
void (*winpty_config_set_mouse_mode)(void*, int);winpty_config_set_mouse_mode6377,156300
void (*winpty_config_set_initial_size)(void*, int, int);winpty_config_set_initial_size6378,156350
LPCWSTR (*winpty_conin_name)(void*);winpty_conin_name6379,156407
LPCWSTR (*winpty_conout_name)(void*);winpty_conout_name6380,156444
LPCWSTR (*winpty_conerr_name)(void*);winpty_conerr_name6381,156482
void (*winpty_free)(void*);winpty_free6382,156520
void (*winpty_config_free)(void*);winpty_config_free6383,156548
void (*winpty_spawn_config_free)(void*);winpty_spawn_config_free6384,156583
void (*winpty_error_free)(void*);winpty_error_free6385,156624
LPCWSTR (*winpty_error_msg)(void*);winpty_error_msg6386,156658
BOOL (*winpty_set_size)(void*, int, int, void*);winpty_set_size6387,156694
HANDLE (*winpty_agent_process)(void*);winpty_agent_process6388,156743
#define WINPTY_DLL WINPTY_DLL6390,156783
static HINSTANCE hWinPtyDLL = NULL;hWinPtyDLL6392,156816
dyn_winpty_init(int verbose)dyn_winpty_init6396,156877
winpty_term_and_job_init(winpty_term_and_job_init6459,158771
term_and_job_init(term_and_job_init6675,164406
create_pty_only(term_T *term, jobopt_T *options)create_pty_only6729,165666
term_free_vterm(term_T *term)term_free_vterm6799,167578
term_report_winsize(term_T *term, int rows, int cols)term_report_winsize6817,168000
terminal_enabled(void)terminal_enabled6826,168217
term_and_job_init(term_and_job_init6844,168606
create_pty_only(term_T *term, jobopt_T *opt)create_pty_only6874,169368
term_free_vterm(term_T *term)term_free_vterm6894,169824
term_report_winsize(term_T *term, int rows, int cols)term_report_winsize6905,170006

src/termlib.c,1025
char	*tent;		      // Pointer to terminal entry, set by tgetenttent30,730
char	PC = 0;		      // Pad character, default NULLPC31,794
char	*UP = 0, *BC = 0;     // Pointers to UP and BC strings from databaseUP32,845
char	*UP = 0, *BC = 0;     // Pointers to UP and BC strings from databaseBC32,845
short	ospeed;		      // Baud rate (1-16, 1=300, 16=19200), as in sttyospeed33,919
#  define TERMCAPFILE TERMCAPFILE58,1775
#   define TERMCAPFILE TERMCAPFILE61,1829
#   define TERMCAPFILE TERMCAPFILE63,1881
tgetent(tgetent69,1952
getent(char *tbuf, char *term, FILE *termcap, int buflen)getent143,3487
nextent(char *tbuf, FILE *termcap, int buflen)nextent175,4135
tgetflag(char *id)tgetflag218,5080
tgetnum(char *id)tgetnum236,5389
tgetstr(char *id, char **buf)tgetstr275,6344
tgoto(tgoto384,8694
long _bauds[16]={_bauds523,11711
tputs(tputs530,11862
_match(char *s1, char *s2)_match578,12974
_find(char *s, char *set)_find592,13165
_addfmt(char *buf, char *fmt, int val)_addfmt612,13395

src/testing.c,3688
prepare_assert_error(garray_T *gap)prepare_assert_error22,469
ga_concat_esc(garray_T *gap, char_u *p, int clen)ga_concat_esc49,1061
ga_concat_shorten_esc(garray_T *gap, char_u *str)ga_concat_shorten_esc85,1936
fill_assert_error(fill_assert_error130,2777
assert_equal_common(typval_T *argvars, assert_type_T atype)assert_equal_common175,3932
assert_match_common(typval_T *argvars, assert_type_T atype)assert_match_common193,4317
assert_bool(typval_T *argvars, int isTrue)assert_bool220,4996
assert_append_cmd_or_arg(garray_T *gap, typval_T *argvars, char_u *cmd)assert_append_cmd_or_arg244,5556
assert_beeps(typval_T *argvars)assert_beeps259,5902
f_assert_beeps(typval_T *argvars, typval_T *rettv)f_assert_beeps288,6456
f_assert_equal(typval_T *argvars, typval_T *rettv)f_assert_equal297,6630
assert_equalfile(typval_T *argvars)assert_equalfile303,6772
f_assert_equalfile(typval_T *argvars, typval_T *rettv)f_assert_equalfile377,8148
f_assert_notequal(typval_T *argvars, typval_T *rettv)f_assert_notequal386,8333
f_assert_exception(typval_T *argvars, typval_T *rettv)f_assert_exception395,8528
f_assert_fails(typval_T *argvars, typval_T *rettv)f_assert_fails424,9237
f_assert_false(typval_T *argvars, typval_T *rettv)f_assert_false476,10621
assert_inrange(typval_T *argvars)assert_inrange482,10748
f_assert_inrange(typval_T *argvars, typval_T *rettv)f_assert_inrange553,12390
f_assert_match(typval_T *argvars, typval_T *rettv)f_assert_match562,12567
f_assert_notmatch(typval_T *argvars, typval_T *rettv)f_assert_notmatch571,12764
f_assert_report(typval_T *argvars, typval_T *rettv)f_assert_report580,12946
f_assert_true(typval_T *argvars, typval_T *rettv)f_assert_true595,13229
f_test_alloc_fail(typval_T *argvars, typval_T *rettv UNUSED)f_test_alloc_fail604,13408
f_test_autochdir(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_test_autochdir627,13972
f_test_feedinput(typval_T *argvars, typval_T *rettv UNUSED)f_test_feedinput638,14144
f_test_getvalue(typval_T *argvars, typval_T *rettv)f_test_getvalue661,14533
f_test_option_not_set(typval_T *argvars, typval_T *rettv UNUSED)f_test_option_not_set680,14907
f_test_override(typval_T *argvars, typval_T *rettv UNUSED)f_test_override698,15261
f_test_refcount(typval_T *argvars, typval_T *rettv)f_test_refcount760,16826
f_test_garbagecollect_now(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_test_garbagecollect_now823,18212
f_test_garbagecollect_soon(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_test_garbagecollect_soon834,18479
f_test_ignore_error(typval_T *argvars, typval_T *rettv UNUSED)f_test_ignore_error843,18643
f_test_null_blob(typval_T *argvars UNUSED, typval_T *rettv)f_test_null_blob849,18779
f_test_null_channel(typval_T *argvars UNUSED, typval_T *rettv)f_test_null_channel857,18938
f_test_null_dict(typval_T *argvars UNUSED, typval_T *rettv)f_test_null_dict865,19089
f_test_null_job(typval_T *argvars UNUSED, typval_T *rettv)f_test_null_job872,19220
f_test_null_list(typval_T *argvars UNUSED, typval_T *rettv)f_test_null_list880,19359
f_test_null_partial(typval_T *argvars UNUSED, typval_T *rettv)f_test_null_partial886,19466
f_test_null_string(typval_T *argvars UNUSED, typval_T *rettv)f_test_null_string893,19610
f_test_unknown(typval_T *argvars UNUSED, typval_T *rettv)f_test_unknown900,19751
f_test_void(typval_T *argvars UNUSED, typval_T *rettv)f_test_void906,19856
f_test_scrollbar(typval_T *argvars, typval_T *rettv UNUSED)f_test_scrollbar913,19971
f_test_setmouse(typval_T *argvars, typval_T *rettv UNUSED)f_test_setmouse951,20904
f_test_settime(typval_T *argvars, typval_T *rettv UNUSED)f_test_settime958,21089

src/textprop.c,2708
#define PT2HIKEY(PT2HIKEY40,1488
#define HIKEY2PT(HIKEY2PT41,1524
#define HI2PT(HI2PT42,1600
static hashtab_T *global_proptypes = NULL;global_proptypes45,1682
static int proptype_id = 0;proptype_id48,1766
static char_u e_type_not_exist[] = N_("E971: Property type %s does not exist");e_type_not_exist50,1795
static char_u e_invalid_col[] = N_("E964: Invalid column number: %ld");e_invalid_col51,1875
static char_u e_invalid_lnum[] = N_("E966: Invalid line number: %ld");e_invalid_lnum52,1947
find_prop_hi(char_u *name, buf_T *buf)find_prop_hi59,2148
find_prop(char_u *name, buf_T *buf)find_prop83,2552
find_prop_type_id(char_u *name, buf_T *buf)find_prop_type_id97,2777
lookup_prop_type(char_u *name, buf_T *buf)lookup_prop_type112,3107
get_bufnr_from_arg(typval_T *arg, buf_T **buf)get_bufnr_from_arg131,3605
f_prop_add(typval_T *argvars, typval_T *rettv UNUSED)f_prop_add156,4070
prop_add_common(prop_add_common184,4702
get_text_props(buf_T *buf, linenr_T lnum, char_u **props, int will_change)get_text_props358,9230
find_visible_prop(win_T *wp, int type_id, int id, textprop_T *prop,find_visible_prop389,10109
set_text_props(linenr_T lnum, char_u *props, int len)set_text_props423,10994
find_type_by_id(hashtab_T *ht, int id)find_type_by_id445,11589
prop_fill_dict(dict_T *dict, textprop_T *prop, buf_T *buf)prop_fill_dict475,12104
text_prop_type_by_id(buf_T *buf, int id)text_prop_type_by_id494,12704
f_prop_clear(typval_T *argvars, typval_T *rettv UNUSED)f_prop_clear508,12974
f_prop_find(typval_T *argvars, typval_T *rettv)f_prop_find561,14056
f_prop_list(typval_T *argvars, typval_T *rettv)f_prop_list736,17944
f_prop_remove(typval_T *argvars, typval_T *rettv)f_prop_remove779,18890
prop_type_set(typval_T *argvars, int add)prop_type_set911,22159
f_prop_type_add(typval_T *argvars, typval_T *rettv UNUSED)f_prop_type_add1025,24487
f_prop_type_change(typval_T *argvars, typval_T *rettv UNUSED)f_prop_type_change1034,24638
f_prop_type_delete(typval_T *argvars, typval_T *rettv UNUSED)f_prop_type_delete1043,24796
f_prop_type_get(typval_T *argvars, typval_T *rettv)f_prop_type_get1081,25434
list_types(hashtab_T *ht, list_T *l)list_types1122,26420
f_prop_type_list(typval_T *argvars, typval_T *rettv UNUSED)f_prop_type_list1144,26757
clear_ht_prop_types(hashtab_T *ht)clear_ht_prop_types1169,27269
clear_global_prop_types(void)clear_global_prop_types1198,27693
clear_buf_prop_types(buf_T *buf)clear_buf_prop_types1209,27861
adjust_prop_columns(adjust_prop_columns1227,28471
adjust_props_for_split(adjust_props_for_split1348,31788
adjust_props_for_join(adjust_props_for_join1422,33857
join_prop_lines(join_prop_lines1469,34807

src/time.c,2519
static char	tz_cache[64];tz_cache21,557
vim_localtime(vim_localtime35,1135
vim_time(void)vim_time63,1834
get_ctime(time_t thetime, int add_newline)get_ctime80,2260
f_localtime(typval_T *argvars UNUSED, typval_T *rettv)f_localtime128,3237
list2proftime(typval_T *arg, proftime_T *tm)list2proftime139,3477
f_reltime(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_reltime164,4006
f_reltimefloat(typval_T *argvars UNUSED, typval_T *rettv)f_reltimefloat212,4949
f_reltimestr(typval_T *argvars UNUSED, typval_T *rettv)f_reltimestr231,5295
f_strftime(typval_T *argvars, typval_T *rettv)f_strftime250,5716
f_strptime(typval_T *argvars, typval_T *rettv)f_strptime305,7063
static timer_T	*first_timer = NULL;first_timer335,7821
static long	last_timer_id = 0;last_timer_id336,7857
proftime_time_left(proftime_T *due, proftime_T *now)proftime_time_left342,7963
insert_timer(timer_T *timer)insert_timer364,8455
remove_timer(timer_T *timer)remove_timer378,8727
free_timer(timer_T *timer)free_timer389,8967
create_timer(long msec, int repeat)create_timer400,9173
timer_callback(timer_T *timer)timer_callback424,9694
check_due_timer(void)check_due_timer443,10126
find_timer(long id)find_timer580,13993
stop_timer(timer_T *timer)stop_timer598,14244
stop_all_timers(void)stop_all_timers611,14448
add_timer_info(typval_T *rettv, timer_T *timer)add_timer_info624,14664
add_timer_info_all(typval_T *rettv)add_timer_info_all658,15536
set_ref_in_timer(int copyID)set_ref_in_timer671,15784
timer_free_all()timer_free_all696,16326
f_timer_info(typval_T *argvars, typval_T *rettv)f_timer_info713,16535
f_timer_pause(typval_T *argvars, typval_T *rettv UNUSED)f_timer_pause738,17005
f_timer_start(typval_T *argvars, typval_T *rettv)f_timer_start757,17408
f_timer_stop(typval_T *argvars, typval_T *rettv UNUSED)f_timer_stop798,18330
f_timer_stopall(typval_T *argvars UNUSED, typval_T *rettv UNUSED)f_timer_stopall816,18644
static struct timeval	prev_timeval;prev_timeval824,18806
gettimeofday(struct timeval *tv, char *dummy UNUSED)gettimeofday831,18958
time_push(void *tv_rel, void *tv_start)time_push845,19305
time_pop(time_pop868,20068
time_diff(struct timeval *then, struct timeval *now)time_diff881,20368
time_msg(time_msg893,20672
get8ctime(FILE *fd)get8ctime933,21727
put_time(FILE *fd, time_T the_time)put_time961,22189
time_to_bytes(time_T the_time, char_u *buf)time_to_bytes973,22396
add_time(char_u *buf, size_t buflen, time_t tt)add_time1016,23462

src/ui.c,6332
# define WIN32_LEAN_AND_MEANWIN32_LEAN_AND_MEAN22,633
ui_write(char_u *s, int len)ui_write28,725
static char_u *ta_str = NULL;ta_str71,1719
static int ta_off;	// offset for next char to use when ta_str != NULLta_off72,1749
static int ta_len;	// length of ta_str when it's not NULLta_len73,1819
ui_inchar_undo(char_u *s, int len)ui_inchar_undo76,1887
ui_inchar(ui_inchar116,2923
inchar_loop(inchar_loop265,6778
ui_wait_for_chars_or_timer(ui_wait_for_chars_or_timer433,11058
ui_char_avail(void)ui_char_avail508,12965
ui_delay(long msec, int ignoreinput)ui_delay533,13370
ui_suspend(void)ui_suspend552,13805
suspend_shell(void)suspend_shell570,14135
ui_get_shellsize(void)ui_get_shellsize588,14505
ui_set_shellsize(ui_set_shellsize616,15119
ui_new_shellsize(void)ui_new_shellsize632,15411
ui_get_winpos(int *x, int *y, varnumber_T timeout UNUSED)ui_get_winpos655,15869
ui_breakcheck(void)ui_breakcheck674,16273
ui_breakcheck_force(int force)ui_breakcheck_force684,16464
clip_init(int can_use)clip_init745,18424
clip_update_selection(Clipboard_T *clip)clip_update_selection774,19116
clip_own_selection(Clipboard_T *cbd)clip_own_selection809,19892
clip_lose_selection(Clipboard_T *cbd)clip_lose_selection845,21002
clip_copy_selection(Clipboard_T *clip)clip_copy_selection883,21938
static int global_change_count = 0; // if set, inside a start_global_changesglobal_change_count901,22392
static int clipboard_needs_update = FALSE; // clipboard needs to be updatedclipboard_needs_update902,22469
static int clip_did_set_selection = TRUE;clip_did_set_selection903,22545
start_global_changes(void)start_global_changes909,22639
is_clipboard_needs_update()is_clipboard_needs_update928,22996
end_global_changes(void)end_global_changes937,23139
clip_auto_select(void)clip_auto_select970,23852
clip_isautosel_star(void)clip_isautosel_star983,24112
clip_isautosel_plus(void)clip_isautosel_plus997,24365
#define CLIP_CLEAR	CLIP_CLEAR1018,25003
#define CLIP_SET	CLIP_SET1019,25024
#define CLIP_TOGGLE	CLIP_TOGGLE1020,25043
clip_modeless(int button, int is_click, int is_drag)clip_modeless1027,25233
clip_compare_pos(clip_compare_pos1061,26361
clip_start_selection(int col, int row, int repeated_click)clip_start_selection1078,26628
clip_process_selection(clip_process_selection1179,29237
clip_may_redraw_selection(int row, int col, int len)clip_may_redraw_selection1361,34268
clip_clear_selection(Clipboard_T *cbd)clip_clear_selection1384,34865
clip_may_clear_selection(int row1, int row2)clip_may_clear_selection1399,35199
clip_scroll_selection(clip_scroll_selection1412,35559
clip_invert_area(clip_invert_area1446,36445
clip_invert_rectangle(clip_invert_rectangle1515,37760
clip_copy_modeless_selection(int both UNUSED)clip_copy_modeless_selection1564,38814
#define CHAR_CLASS(CHAR_CLASS1763,43649
clip_get_word_boundaries(Clipboard_T *cb, int row, int col)clip_get_word_boundaries1766,43722
clip_get_line_end(Clipboard_T *cbd UNUSED, int row)clip_get_line_end1809,44923
clip_update_modeless_selection(clip_update_modeless_selection1832,45398
clip_gen_own_selection(Clipboard_T *cbd)clip_gen_own_selection1859,46081
clip_gen_lose_selection(Clipboard_T *cbd)clip_gen_lose_selection1874,46349
clip_gen_set_selection(Clipboard_T *cbd)clip_gen_set_selection1889,46593
clip_gen_request_selection(Clipboard_T *cbd)clip_gen_request_selection1915,47202
clip_gen_owner_exists(Clipboard_T *cbd UNUSED)clip_gen_owner_exists1931,47522
check_clipboard_option(void)check_clipboard_option1951,47900
# define INBUFLEN INBUFLEN2063,50782
# define INBUFLEN INBUFLEN2065,50811
static char_u	inbuf[INBUFLEN + MAX_KEY_CODE_LEN];inbuf2068,50841
static int	inbufcount = 0;	    // number of chars in inbuf[]inbufcount2069,50891
vim_is_input_buf_full(void)vim_is_input_buf_full2078,51200
vim_is_input_buf_empty(void)vim_is_input_buf_empty2084,51278
vim_free_in_input_buf(void)vim_free_in_input_buf2091,51390
vim_used_in_input_buf(void)vim_used_in_input_buf2099,51518
get_input_buf(void)get_input_buf2110,51736
set_input_buf(char_u *p)set_input_buf2133,52294
add_to_input_buf(char_u *s, int len)add_to_input_buf2155,52750
add_to_input_buf_csi(char_u *str, int len)add_to_input_buf_csi2168,53015
trash_input_buf(void)trash_input_buf2190,53391
read_from_input_buf(char_u *buf, long maxlen)read_from_input_buf2200,53546
fill_input_buf(int exit_on_error UNUSED)fill_input_buf2214,53912
read_error_exit(void)read_error_exit2367,57975
ui_cursor_shape_forced(int forced)ui_cursor_shape_forced2380,58254
ui_cursor_shape(void)ui_cursor_shape2399,58534
check_col(int col)check_col2409,58652
check_row(int row)check_row2422,58835
open_app_context(void)open_app_context2444,59297
static Atom	vim_atom;	// Vim's own special selection formatvim_atom2453,59435
static Atom	vimenc_atom;	// Vim's extended selection formatvimenc_atom2454,59495
static Atom	utf8_atom;utf8_atom2455,59555
static Atom	compound_text_atom;compound_text_atom2456,59578
static Atom	text_atom;text_atom2457,59610
static Atom	targets_atom;targets_atom2458,59633
static Atom	timestamp_atom;	// Used to get a timestamptimestamp_atom2459,59659
x11_setup_atoms(Display *dpy)x11_setup_atoms2462,59724
clip_x11_timestamp_cb(clip_x11_timestamp_cb2487,60758
x11_setup_selection(Widget w)x11_setup_selection2533,62104
clip_x11_request_selection_cb(clip_x11_request_selection_cb2540,62273
clip_x11_request_selection(clip_x11_request_selection2641,64403
clip_x11_convert_selection_cb(clip_x11_convert_selection_cb2734,67031
clip_x11_lose_ownership_cb(Widget w UNUSED, Atom *sel_atom)clip_x11_lose_ownership_cb2864,70286
clip_x11_lose_selection(Widget myShell, Clipboard_T *cbd)clip_x11_lose_selection2873,70478
clip_x11_notify_cb(Widget w UNUSED, Atom *sel_atom UNUSED, Atom *target UNUSED)clip_x11_notify_cb2880,70654
clip_x11_own_selection(Widget myShell, Clipboard_T *cbd)clip_x11_own_selection2886,70808
clip_x11_set_selection(Clipboard_T *cbd UNUSED)clip_x11_set_selection2918,71860
clip_x11_owner_exists(Clipboard_T *cbd)clip_x11_owner_exists2925,72024
yank_cut_buffer0(Display *dpy, Clipboard_T *cbd)yank_cut_buffer02938,72329
ui_focus_change(ui_focus_change2988,73596
im_save_status(long *psave)im_save_status3052,75149

src/undo.c,5348
#define UH_MAGIC UH_MAGIC81,2955
#define UE_MAGIC UE_MAGIC82,3015
#define CRYPT_BUF_SIZE CRYPT_BUF_SIZE85,3115
    buf_T	*bi_buf;bi_buf92,3287
    FILE	*bi_fp;bi_fp93,3306
    cryptstate_T *bi_state;bi_state95,3341
    char_u	*bi_buffer; // CRYPT_BUF_SIZE, NULL when not bufferingbi_buffer96,3369
    size_t	bi_used;    // bytes written to/read from bi_bufferbi_used97,3435
    size_t	bi_avail;   // bytes available in bi_bufferbi_avail98,3498
} bufinfo_T;bufinfo_T100,3560
#define U_ALLOC_LINE(U_ALLOC_LINE127,4665
static long	u_newcount, u_oldcount;u_newcount130,4779
static long	u_newcount, u_oldcount;u_oldcount130,4779
static int	undo_undoes = FALSE;undo_undoes136,4936
static int	lastmark = 0;lastmark138,4969
static int seen_b_u_curhead;seen_b_u_curhead145,5135
static int seen_b_u_newhead;seen_b_u_newhead146,5164
static int header_count;header_count147,5193
u_check_tree(u_header_T *uhp,u_check_tree150,5235
u_check(int newhead_may_be_NULL)u_check207,6548
u_save_cursor(void)u_save_cursor235,7361
u_save(linenr_T top, linenr_T bot)u_save248,7773
u_savesub(linenr_T lnum)u_savesub269,8332
u_inssub(linenr_T lnum)u_inssub284,8722
u_savedel(linenr_T lnum, long nlines)u_savedel300,9142
undo_allowed(void)undo_allowed314,9437
get_undolevel(void)get_undolevel347,10031
u_save_line(undoline_T *ul, linenr_T lnum)u_save_line359,10268
u_savecommon(u_savecommon388,11106
# define UF_START_MAGIC	UF_START_MAGIC734,19767
# define UF_START_MAGIC_LEN	UF_START_MAGIC_LEN735,19844
# define UF_HEADER_MAGIC	UF_HEADER_MAGIC736,19874
# define UF_HEADER_END_MAGIC	UF_HEADER_END_MAGIC737,19934
# define UF_ENTRY_MAGIC	UF_ENTRY_MAGIC738,19997
# define UF_ENTRY_END_MAGIC	UF_ENTRY_END_MAGIC739,20056
# define UF_VERSION	UF_VERSION740,20117
# define UF_VERSION_CRYPT	UF_VERSION_CRYPT741,20174
# define UF_LAST_SAVE_NR	UF_LAST_SAVE_NR744,20254
# define UHP_SAVE_NR	UHP_SAVE_NR747,20306
static char_u e_not_open[] = N_("E828: Cannot open undo file for writing: %s");e_not_open749,20331
u_compute_hash(char_u *hash)u_compute_hash755,20503
u_get_undo_file_name(char_u *buf_ffname, int reading)u_get_undo_file_name778,21131
corruption_error(char *mesg, char_u *file_name)corruption_error861,23294
u_free_uhp(u_header_T *uhp)u_free_uhp867,23432
undo_write(bufinfo_T *bi, char_u *ptr, size_t len)undo_write888,23782
undo_flush(bufinfo_T *bi)undo_flush922,24464
fwrite_crypt(bufinfo_T *bi, char_u *ptr, size_t len)fwrite_crypt940,24870
undo_write_bytes(bufinfo_T *bi, long_u nr, int len)undo_write_bytes974,25623
put_header_ptr(bufinfo_T *bi, u_header_T *uhp)put_header_ptr990,26057
undo_read_4c(bufinfo_T *bi)undo_read_4c996,26194
undo_read_2c(bufinfo_T *bi)undo_read_2c1013,26481
undo_read_byte(bufinfo_T *bi)undo_read_byte1030,26724
undo_read_time(bufinfo_T *bi)undo_read_time1045,26939
undo_read(bufinfo_T *bi, char_u *buffer, size_t size)undo_read1068,27299
read_string_decrypt(bufinfo_T *bi, int len)read_string_decrypt1123,28526
serialize_header(bufinfo_T *bi, char_u *hash)serialize_header1149,29132
serialize_uhp(bufinfo_T *bi, u_header_T *uhp)serialize_uhp1237,31675
unserialize_uhp(bufinfo_T *bi, char_u *file_name)unserialize_uhp1280,32975
serialize_uep(serialize_uep1372,34885
unserialize_uep(bufinfo_T *bi, int *error, char_u *file_name)unserialize_uep1397,35569
serialize_pos(bufinfo_T *bi, pos_T pos)serialize_pos1454,36767
unserialize_pos(bufinfo_T *bi, pos_T *pos)unserialize_pos1465,37027
serialize_visualinfo(bufinfo_T *bi, visualinfo_T *info)serialize_visualinfo1482,37341
unserialize_visualinfo(bufinfo_T *bi, visualinfo_T *info)unserialize_visualinfo1494,37666
u_write_undo(u_write_undo1512,38292
u_read_undo(char_u *name, char_u *hash, char_u *orig_name UNUSED)u_read_undo1786,44710
# define SET_FLAG(SET_FLAG2021,50298
u_undo(int count)u_undo2152,53674
u_redo(int count)u_redo2177,54221
u_doit(int startcount)u_doit2188,54413
undo_time(undo_time2265,56386
u_undoredo(int undo)u_undoredo2618,65727
u_undo_end(u_undo_end2918,74213
u_sync(u_sync3001,75963
ex_undolist(exarg_T *eap UNUSED)ex_undolist3024,76581
ex_undojoin(exarg_T *eap UNUSED)ex_undojoin3130,79031
u_unchanged(buf_T *buf)u_unchanged3153,79616
u_find_first_changed(void)u_find_first_changed3164,79855
u_update_save_nr(buf_T *buf)u_update_save_nr3204,80899
u_unch_branch(u_header_T *uhp)u_unch_branch3220,81221
u_get_headentry(void)u_get_headentry3237,81591
u_getbot(void)u_getbot3252,81935
u_freeheader(u_freeheader3290,82938
u_freebranch(u_freebranch3325,83908
u_freeentries(u_freeentries3360,84789
u_freeentry(u_entry_T *uep, long n)u_freeentry3392,85522
u_clearall(buf_T *buf)u_clearall3407,85826
u_saveline(linenr_T lnum)u_saveline3421,86143
u_clearline(void)u_clearline3442,86733
u_undoline(void)u_undoline3459,87149
u_blockfree(buf_T *buf)u_blockfree3499,88164
bufIsChanged(buf_T *buf)bufIsChanged3514,88645
anyBufIsChanged(void)anyBufIsChanged3527,88886
bufIsChangedNotTerm(buf_T *buf)bufIsChangedNotTerm3541,89085
curbufIsChanged(void)curbufIsChanged3550,89372
u_eval_tree(u_header_T *first_uhp, list_T *list)u_eval_tree3562,89587
f_undofile(typval_T *argvars UNUSED, typval_T *rettv)f_undofile3602,90468
f_undotree(typval_T *argvars UNUSED, typval_T *rettv)f_undotree3632,91026

src/uninstall.c,711
confirm(void)confirm27,729
reg_delete_key(HKEY hRootKey, const char *key, DWORD flag)reg_delete_key36,874
popup_gvim_path(char *buf, DWORD bufsize)popup_gvim_path63,1743
openwith_gvim_path(char *buf, DWORD bufsize)openwith_gvim_path89,2525
remove_popup(void)remove_popup109,3072
remove_openwith(void)remove_openwith155,4502
batfile_thisversion(char *path)batfile_thisversion199,5965
remove_batfiles(int doit)remove_batfiles223,6363
remove_if_exists(char *path, char *filename)remove_if_exists255,6992
remove_icons(void)remove_icons272,7257
remove_start_menu(void)remove_start_menu283,7465
delete_uninstall_key(void)delete_uninstall_key308,8046
main(int argc, char *argv[])main314,8226

src/usercmd.c,2419
typedef struct ucmducmd16,346
    char_u	*uc_name;	// The command nameuc_name18,368
    long_u	uc_argt;	// The argument typeuc_argt19,409
    char_u	*uc_rep;	// The command's replacement stringuc_rep20,450
    long	uc_def;		// The default value for a range/countuc_def21,506
    int		uc_compl;	// completion typeuc_compl22,563
    cmd_addr_T	uc_addr_type;	// The command's address typeuc_addr_type23,601
    sctx_T	uc_script_ctx;	// SCTX where the command was defineduc_script_ctx25,678
    char_u	*uc_compl_arg;	// completion argument if anyuc_compl_arg26,742
} ucmd_T;ucmd_T28,806
static garray_T ucmds = {0, 0, sizeof(ucmd_T), 4, NULL};ucmds31,847
#define USER_CMD(USER_CMD33,905
#define USER_CMD_GA(USER_CMD_GA34,959
    int	    expand;expand42,1156
    char    *name;name43,1176
} command_complete[] =command_complete44,1195
    cmd_addr_T	expand;expand101,2760
    char	*name;name102,2783
    char	*shortname;shortname103,2799
} addr_type_complete[] =addr_type_complete104,2820
#define UC_BUFFER	UC_BUFFER117,3188
find_ucmd(find_ucmd126,3494
set_context_in_user_cmd(expand_T *xp, char_u *arg_in)set_context_in_user_cmd233,6132
get_user_command_name(int idx)get_user_command_name294,7445
get_user_commands(expand_T *xp UNUSED, int idx)get_user_commands303,7637
get_user_cmd_addr_type(expand_T *xp UNUSED, int idx)get_user_cmd_addr_type325,8172
get_user_cmd_flags(expand_T *xp UNUSED, int idx)get_user_cmd_flags335,8388
get_user_cmd_nargs(expand_T *xp UNUSED, int idx)get_user_cmd_nargs351,8801
get_user_cmd_complete(expand_T *xp UNUSED, int idx)get_user_cmd_complete365,9153
cmdcomplete_str_to_type(char_u *complete_str)cmdcomplete_str_to_type371,9267
uc_list(char_u *name, size_t name_len)uc_list386,9587
uc_fun_cmd(void)uc_fun_cmd552,13218
parse_addr_type_arg(parse_addr_type_arg570,13620
parse_compl_arg(parse_compl_arg610,14573
uc_scan_attr(uc_scan_attr689,16329
uc_add_command(uc_add_command853,19641
ex_command(exarg_T *eap)ex_command978,22135
ex_comclear(exarg_T *eap UNUSED)ex_comclear1047,23779
uc_clear(garray_T *gap)uc_clear1058,23946
ex_delcommand(exarg_T *eap)ex_delcommand1079,24261
uc_split_args(char_u *arg, size_t *lenp)uc_split_args1123,25028
add_cmd_modifier(char_u *buf, char *mod_str, int *multi_mods)add_cmd_modifier1217,26315
uc_check_code(uc_check_code1246,27068
do_ucmd(exarg_T *eap)do_ucmd1535,33093

src/userfunc.c,6143
#define FC_ABORT FC_ABORT18,415
#define FC_RANGE FC_RANGE19,467
#define FC_DICT	FC_DICT20,518
#define FC_CLOSURE FC_CLOSURE21,573
#define FC_DELETED FC_DELETED22,637
#define FC_REMOVED FC_REMOVED23,705
#define FC_SANDBOX FC_SANDBOX24,774
#define FC_DEAD	FC_DEAD25,834
#define FC_EXPORT FC_EXPORT26,904
static hashtab_T	func_hashtab;func_hashtab31,1020
static garray_T funcargs = GA_EMPTY;funcargs34,1077
static funccall_T *current_funccal = NULL;current_funccal37,1167
static funccall_T *previous_funccal = NULL;previous_funccal41,1319
static char *e_funcexts = N_("E122: Function %s already exists, add ! to replace it");e_funcexts43,1364
static char *e_funcdict = N_("E717: Dictionary entry already exists");e_funcdict44,1451
static char *e_funcref = N_("E718: Funcref required");e_funcref45,1522
static char *e_nofunc = N_("E130: Unknown function: %s");e_nofunc46,1577
func_init()func_init51,1713
func_tbl_get(void)func_tbl_get60,1817
one_function_arg(char_u *arg, garray_T *newargs, garray_T *argtypes, int skip)one_function_arg71,2038
get_function_args(get_function_args139,3487
register_closure(ufunc_T *fp)register_closure269,6016
set_ufunc_name(ufunc_T *fp, char_u *name)set_ufunc_name286,6435
get_lambda_tv(char_u **arg, typval_T *rettv, int evaluate)get_lambda_tv306,6856
deref_func_name(char_u *name, int *lenp, partial_T **partialp, int no_autoload)deref_func_name438,10034
emsg_funcname(char *ermsg, char_u *name)emsg_funcname487,11020
get_func_tv(get_func_tv505,11323
eval_fname_sid(char_u *p)eval_fname_sid581,13202
fname_trans_sid(char_u *name, char_u *fname_buf, char_u **tofree, int *error)fname_trans_sid593,13506
find_func_with_sid(char_u *name, int sid)find_func_with_sid644,14494
find_func_even_dead(char_u *name, cctx_T *cctx)find_func_even_dead666,15000
find_func(char_u *name, cctx_T *cctx)find_func702,15860
cat_func_name(char_u *buf, ufunc_T *fp)cat_func_name717,16223
add_nr_var(add_nr_var732,16492
free_funccal(funccall_T *fc)free_funccal750,16836
free_funccal_contents(funccall_T *fc)free_funccal_contents777,17536
cleanup_function_call(funccall_T *fc)cleanup_function_call799,18036
funccal_unref(funccall_T *fc, ufunc_T *fp, int force)funccal_unref883,20313
func_remove(ufunc_T *fp)func_remove915,21174
func_clear_items(ufunc_T *fp)func_clear_items938,21702
func_clear(ufunc_T *fp, int force)func_clear959,22252
func_free(ufunc_T *fp)func_free976,22633
func_clear_free(ufunc_T *fp, int force)func_clear_free992,23058
call_user_func(call_user_func1003,23198
call_user_func_check(call_user_func_check1403,33711
func_name_refcount(char_u *name)func_name_refcount1462,35325
static funccal_entry_T *funccal_stack = NULL;funccal_stack1467,35406
save_funccal(funccal_entry_T *entry)save_funccal1474,35587
restore_funccal(void)restore_funccal1483,35768
get_current_funccal(void)get_current_funccal1495,35988
free_all_functions(void)free_all_functions1502,36096
builtin_function(char_u *name, int len)builtin_function1587,38181
func_call(func_call1598,38392
static int callback_depth = 0;callback_depth1644,39477
get_callback_depth(void)get_callback_depth1647,39517
call_callback(call_callback1656,39628
user_func_error(int error, char_u *name)user_func_error1681,40320
call_func(call_func1720,41236
printable_func_name(ufunc_T *fp)printable_func_name1899,46565
list_func_head(ufunc_T *fp, int indent)list_func_head1908,46757
trans_function_name(trans_function_name2000,48803
ex_function(exarg_T *eap)ex_function2230,54441
#define MAX_FUNC_NESTING MAX_FUNC_NESTING2253,54955
eval_fname_script(char_u *p)eval_fname_script3108,76355
translated_function_exists(char_u *name)translated_function_exists3121,76696
has_varargs(ufunc_T *ufunc)has_varargs3133,76961
function_exists(char_u *name, int no_deref)function_exists3143,77168
get_expanded_name(char_u *name, int check)get_expanded_name3166,77778
get_user_func_name(expand_T *xp, int idx)get_user_func_name3187,78185
ex_delfunction(exarg_T *eap)ex_delfunction3230,79026
func_unref(char_u *name)func_unref3306,80776
func_ptr_unref(ufunc_T *fp)func_ptr_unref3334,81386
func_ref(char_u *name)func_ref3349,81686
func_ptr_ref(ufunc_T *fp)func_ptr_ref3368,82086
can_free_funccal(funccall_T *fc, int copyID)can_free_funccal3379,82302
ex_return(exarg_T *eap)ex_return3391,82547
ex_call(exarg_T *eap)ex_call3445,83851
do_return(do_return3603,88018
discard_pending_return(void *rettv)discard_pending_return3684,90097
get_return_cmd(void *rettv)get_return_cmd3694,90342
get_func_line(get_func_line3719,90923
func_has_ended(void *cookie)func_has_ended3783,92567
func_has_abort(func_has_abort3797,92960
make_partial(dict_T *selfdict_in, typval_T *rettv)make_partial3812,93314
func_name(void *cookie)func_name3893,95269
func_breakpoint(void *cookie)func_breakpoint3902,95448
func_dbg_tick(void *cookie)func_dbg_tick3911,95616
func_level(void *cookie)func_level3920,95761
current_func_returned(void)current_func_returned3929,95913
free_unref_funccal(int copyID, int testing)free_unref_funccal3935,95992
get_funccal(void)get_funccal3966,96661
get_funccal_local_ht()get_funccal_local_ht3993,97213
get_funccal_local_var()get_funccal_local_var4005,97482
get_funccal_args_ht()get_funccal_args_ht4017,97777
get_funccal_args_var()get_funccal_args_var4029,98046
list_func_vars(int *first)list_func_vars4040,98273
get_current_funccal_dict(hashtab_T *ht)get_current_funccal_dict4053,98625
find_hi_in_scoped_ht(char_u *name, hashtab_T **pht)find_hi_in_scoped_ht4065,98864
find_var_in_scoped_ht(char_u *name, int no_autoload)find_var_in_scoped_ht4102,99737
set_ref_in_previous_funccal(int copyID)set_ref_in_previous_funccal4136,100591
set_ref_in_funccal(funccall_T *fc, int copyID)set_ref_in_funccal4153,101035
set_ref_in_call_stack(int copyID)set_ref_in_call_stack4173,101526
set_ref_in_functions(int copyID)set_ref_in_functions4194,102091
set_ref_in_func_args(int copyID)set_ref_in_func_args4219,102567
set_ref_in_func(char_u *name, ufunc_T *fp_in, int copyID)set_ref_in_func4235,102947

src/version.c,1211
char		*Version = VIM_VERSION_SHORT;Version31,1002
static char	*mediumVersion = VIM_VERSION_MEDIUM;mediumVersion32,1038
char	longVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)longVersion36,1189
init_longVersion(void)init_longVersion40,1302
init_longVersion(void)init_longVersion55,1660
char	*longVersion = VIM_VERSION_LONG;longVersion73,2114
init_longVersion(void)init_longVersion76,2162
static char *(features[]) =features82,2218
static int included_patches[] =included_patches739,10846
static char *(extra_patches[]) =extra_patches1544,16724
highest_patch(void)highest_patch1551,16836
has_patch(int n)has_patch1562,17065
ex_version(exarg_T *eap)ex_version1574,17230
version_msg_wrap(char_u *s, int wrap)version_msg_wrap1592,17609
version_msg(char *s)version_msg1610,17951
list_features(void)list_features1619,18101
list_in_columns(char_u **items, int size, int current)list_in_columns1630,18356
list_version(void)list_version1716,20223
maybe_intro_message(void)maybe_intro_message2008,26732
intro_message(intro_message2023,27092
do_intro_line(do_intro_line2138,30022
# define MODBY_LEN MODBY_LEN2150,30204
ex_intro(exarg_T *eap UNUSED)ex_intro2213,31629

src/vim9compile.c,12987
#define USING_FLOAT_STUFFUSING_FLOAT_STUFF14,338
#define DEFINE_VIM9_GLOBALSDEFINE_VIM9_GLOBALS23,463
typedef struct endlabel_S endlabel_T;endlabel_T29,584
struct endlabel_S {endlabel_S30,622
    endlabel_T	*el_next;	    // chain end_label locationsel_next31,642
    int		el_end_label;	    // instruction idx where to set endel_end_label32,700
    int		is_if_label;	    // instruction idx at IF or ELSEIFis_if_label39,845
    endlabel_T	*is_end_label;	    // instructions to set end labelis_end_label40,906
} ifscope_T;ifscope_T41,973
    int		ws_top_label;	    // instruction idx at WHILEws_top_label47,1052
    endlabel_T	*ws_end_label;	    // instructions to set endws_end_label48,1107
} whilescope_T;whilescope_T49,1168
    int		fs_top_label;	    // instruction idx at FORfs_top_label55,1248
    endlabel_T	*fs_end_label;	    // break instructionsfs_end_label56,1301
} forscope_T;forscope_T57,1357
    int		ts_try_label;	    // instruction idx at TRYts_try_label63,1435
    endlabel_T	*ts_end_label;	    // jump to :finally or :endtryts_end_label64,1488
    int		ts_catch_label;	    // instruction idx of last CATCHts_catch_label65,1553
    int		ts_caught_all;	    // "catch" without argument encounteredts_caught_all66,1615
} tryscope_T;tryscope_T67,1683
    NO_SCOPE,NO_SCOPE70,1713
    IF_SCOPE,IF_SCOPE71,1727
    WHILE_SCOPE,WHILE_SCOPE72,1741
    FOR_SCOPE,FOR_SCOPE73,1758
    TRY_SCOPE,TRY_SCOPE74,1773
    BLOCK_SCOPEBLOCK_SCOPE75,1788
} scopetype_T;scopetype_T76,1804
typedef struct scope_S scope_T;scope_T81,1877
struct scope_S {scope_S82,1909
    scope_T	*se_outer;	    // scope containing this onese_outer83,1926
    scopetype_T se_type;se_type84,1982
    int		se_local_count;	    // ctx_locals.ga_len before scopese_local_count85,2007
	ifscope_T	se_if;se_if87,2082
	whilescope_T	se_while;se_while88,2100
	forscope_T	se_for;se_for89,2124
	tryscope_T	se_try;se_try90,2144
    } se_u;se_u91,2164
    char_u	*lv_name;lv_name98,2272
    type_T	*lv_type;lv_type99,2293
    int		lv_const;   // when TRUE cannot be assigned tolv_const100,2314
    int		lv_arg;	    // when TRUE this is an argumentlv_arg101,2370
} lvar_T;lvar_T102,2424
struct cctx_S {cctx_S108,2550
    ufunc_T	*ctx_ufunc;	    // current functionctx_ufunc109,2566
    int		ctx_lnum;	    // line number in current functionctx_lnum110,2614
    garray_T	ctx_instr;	    // generated instructionsctx_instr111,2672
    garray_T	ctx_locals;	    // currently visible local variablesctx_locals113,2727
    int		ctx_max_local;	    // maximum number of locals at one timectx_max_local114,2793
    garray_T	ctx_imports;	    // imported itemsctx_imports116,2862
    int		ctx_skip;	    // when TRUE skip commands, when FALSE skipctx_skip118,2911
    scope_T	*ctx_scope;	    // current scope, NULL at toplevelctx_scope120,3011
    garray_T	ctx_type_stack;	    // type of each item on the stackctx_type_stack122,3075
    garray_T	*ctx_type_list;	    // space for adding typesctx_type_list123,3142
static char e_var_notfound[] = N_("E1001: variable not found: %s");e_var_notfound126,3205
static char e_syntax_at[] = N_("E1002: Syntax error at %s");e_syntax_at127,3273
lookup_local(char_u *name, size_t len, cctx_T *cctx)lookup_local137,3590
lookup_arg(char_u *name, size_t len, cctx_T *cctx)lookup_arg159,4065
lookup_vararg(char_u *name, size_t len, cctx_T *cctx)lookup_vararg180,4493
lookup_script(char_u *name, size_t len)lookup_script193,4798
check_defined(char_u *p, int len, cctx_T *cctx)check_defined212,5254
get_list_type(type_T *member_type, garray_T *type_list)get_list_type226,5567
get_dict_type(type_T *member_type, garray_T *type_list)get_dict_type253,6305
#define RETURN_NULL_IF_SKIP(RETURN_NULL_IF_SKIP282,7164
#define RETURN_OK_IF_SKIP(RETURN_OK_IF_SKIP283,7238
generate_instr(cctx_T *cctx, isntype_T isn_type)generate_instr290,7442
generate_instr_drop(cctx_T *cctx, isntype_T isn_type, int drop)generate_instr_drop312,7969
generate_instr_type(cctx_T *cctx, isntype_T isn_type, type_T *type)generate_instr_type325,8280
may_generate_2STRING(int offset, cctx_T *cctx)may_generate_2STRING345,8725
check_number_or_float(vartype_T type1, vartype_T type2, char_u *op)check_number_or_float363,9127
generate_two_op(cctx_T *cctx, char_u *op)generate_two_op383,9676
generate_COMPARE(cctx_T *cctx, exptype_T exptype, int ic)generate_COMPARE482,12473
generate_2BOOL(cctx_T *cctx, int invert)generate_2BOOL562,15106
generate_TYPECHECK(cctx_T *cctx, type_T *vartype, int offset)generate_TYPECHECK579,15467
generate_PUSHNR(cctx_T *cctx, varnumber_T number)generate_PUSHNR600,15978
generate_PUSHBOOL(cctx_T *cctx, varnumber_T number)generate_PUSHBOOL616,16280
generate_PUSHSPEC(cctx_T *cctx, varnumber_T number)generate_PUSHSPEC632,16584
generate_PUSHF(cctx_T *cctx, float_T fnumber)generate_PUSHF649,16906
generate_PUSHS(cctx_T *cctx, char_u *str)generate_PUSHS667,17227
generate_PUSHCHANNEL(cctx_T *cctx, channel_T *channel)generate_PUSHCHANNEL684,17543
generate_PUSHJOB(cctx_T *cctx, job_T *job)generate_PUSHJOB701,17876
generate_PUSHBLOB(cctx_T *cctx, blob_T *blob)generate_PUSHBLOB718,18187
generate_PUSHFUNC(cctx_T *cctx, char_u *name)generate_PUSHFUNC735,18518
generate_PUSHPARTIAL(cctx_T *cctx, partial_T *part)generate_PUSHPARTIAL752,18862
generate_STORE(cctx_T *cctx, isntype_T isn_type, int idx, char_u *name)generate_STORE769,19184
generate_STORENR(cctx_T *cctx, int idx, varnumber_T value)generate_STORENR788,19598
generate_STOREOPT(cctx_T *cctx, char_u *name, int opt_flags)generate_STOREOPT805,19943
generate_LOAD(generate_LOAD822,20318
generate_LOADV(generate_LOADV846,20736
generate_OLDSCRIPT(generate_OLDSCRIPT870,21140
generate_VIM9SCRIPT(generate_VIM9SCRIPT896,21674
generate_NEWLIST(cctx_T *cctx, int count)generate_NEWLIST921,22173
generate_NEWDICT(cctx_T *cctx, int count)generate_NEWDICT958,23049
generate_FUNCREF(cctx_T *cctx, int dfunc_idx)generate_FUNCREF995,23941
generate_JUMP(cctx_T *cctx, jumpwhen_T when, int where)generate_JUMP1018,24443
generate_FOR(cctx_T *cctx, int loop_idx)generate_FOR1036,24847
generate_BCALL(cctx_T *cctx, int func_idx, int argcount)generate_BCALL1060,25402
generate_CALL(cctx_T *cctx, ufunc_T *ufunc, int pushed_argcount)generate_CALL1094,26345
generate_UCALL(cctx_T *cctx, char_u *name, int argcount)generate_UCALL1157,28014
generate_PCALL(cctx_T *cctx, int argcount, int at_top)generate_PCALL1182,28620
generate_MEMBER(cctx_T *cctx, char_u *name, size_t len)generate_MEMBER1205,29183
generate_ECHO(cctx_T *cctx, int with_white, int count)generate_ECHO1234,29889
generate_EXECUTE(cctx_T *cctx, int count)generate_EXECUTE1251,30249
generate_EXEC(cctx_T *cctx, char_u *line)generate_EXEC1263,30462
static char e_white_both[] =e_white_both1274,30685
reserve_local(cctx_T *cctx, char_u *name, size_t len, int isConst, type_T *type)reserve_local1282,30876
skip_type(char_u *start)skip_type1312,31663
parse_type_member(char_u **arg, type_T *type, garray_T *type_list)parse_type_member1337,32175
parse_type(char_u **arg, garray_T *type_list)parse_type1373,32932
equal_type(type_T *type1, type_T *type2)equal_type1489,35164
common_type(type_T *type1, type_T *type2, type_T **dest, garray_T *type_list)common_type1523,35940
vartype_name(vartype_T type)vartype_name1552,36545
type_name(type_T *type, char **tofree)type_name1579,37203
get_script_item_idx(int sid, char_u *name, int check_writable)get_script_item_idx1611,37957
find_imported(char_u *name, size_t len, cctx_T *cctx)find_imported1645,38746
compile_load_scriptvar(compile_load_scriptvar1678,39620
compile_load(char_u **arg, char_u *end_arg, cctx_T *cctx, int error)compile_load1755,41506
compile_arguments(char_u **arg, cctx_T *cctx, int *argcount)compile_arguments1858,43925
compile_call(char_u **arg, size_t varlen, cctx_T *cctx, int argcount_init)compile_call1901,44748
#define VIM9_NAMESPACE_CHAR	VIM9_NAMESPACE_CHAR1964,46268
to_name_end(char_u *arg, int namespace)to_name_end1974,46601
to_name_const_end(char_u *arg)to_name_const_end1996,47155
type_mismatch(type_T *expected, type_T *actual)type_mismatch2028,47762
check_type(type_T *expected, type_T *actual, int give_msg)check_type2042,48089
need_type(type_T *actual, type_T *expected, int offset, cctx_T *cctx)need_type2076,48861
compile_list(char_u **arg, cctx_T *cctx)compile_list2094,49237
compile_lambda(char_u **arg, cctx_T *cctx)compile_lambda2121,49672
compile_lambda_call(char_u **arg, cctx_T *cctx)compile_lambda_call2151,50345
compile_dict(char_u **arg, cctx_T *cctx, int literal)compile_dict2193,51290
compile_get_option(char_u **arg, cctx_T *cctx)compile_get_option2293,53133
compile_get_env(char_u **arg, cctx_T *cctx)compile_get_env2320,53754
compile_get_register(char_u **arg, cctx_T *cctx)compile_get_register2346,54237
apply_leader(typval_T *rettv, char_u *start, char_u *end)apply_leader2370,54658
get_vim_constant(char_u **arg, typval_T *rettv)get_vim_constant2424,55738
compile_leader(cctx_T *cctx, char_u *start, char_u *end)compile_leader2456,56387
compile_subscript(compile_subscript2504,57262
compile_expr7(char_u **arg, cctx_T *cctx)compile_expr72650,60702
compile_expr6(char_u **arg, cctx_T *cctx)compile_expr62852,64727
compile_expr5(char_u **arg, cctx_T *cctx)compile_expr52893,65469
get_compare_type(char_u *p, int *len, int *type_is)get_compare_type2941,66404
compile_expr4(char_u **arg, cctx_T *cctx)compile_expr43009,67733
compile_and_or(char_u **arg, cctx_T *cctx, char *op)compile_and_or3069,68868
compile_expr3(char_u **arg, cctx_T *cctx)compile_expr33137,70406
compile_expr2(char_u **arg, cctx_T *cctx)compile_expr23159,70904
compile_expr1(char_u **arg,  cctx_T *cctx)compile_expr13181,71371
compile_return(char_u *arg, int set_return_type, cctx_T *cctx)compile_return3251,73004
assignment_len(char_u *p, int *heredoc)assignment_len3295,74068
static char *reserved[] = {reserved3314,74411
heredoc_getline(heredoc_getline3326,74628
    dest_local,dest_local3342,74967
    dest_option,dest_option3343,74983
    dest_env,dest_env3344,75000
    dest_global,dest_global3345,75014
    dest_vimvar,dest_vimvar3346,75031
    dest_script,dest_script3347,75048
    dest_reg,dest_reg3348,75065
} assign_dest_T;assign_dest_T3349,75079
compile_assignment(char_u *arg, exarg_T *eap, cmdidx_T cmdidx, cctx_T *cctx)compile_assignment3356,75217
compile_import(char_u *arg, cctx_T *cctx)compile_import3832,85802
compile_jump_to_end(endlabel_T **el, jumpwhen_T when, cctx_T *cctx)compile_jump_to_end3841,86010
compile_fill_jump_to_end(endlabel_T **el, cctx_T *cctx)compile_fill_jump_to_end3857,86380
new_scope(cctx_T *cctx, scopetype_T type)new_scope3877,86781
evaluate_const_expr7(char_u **arg, cctx_T *cctx UNUSED, typval_T *tv)evaluate_const_expr73900,87262
evaluate_const_expr4(char_u **arg, cctx_T *cctx UNUSED, typval_T *tv)evaluate_const_expr43971,88717
evaluate_const_and_or(char_u **arg, cctx_T *cctx, char *op, typval_T *tv)evaluate_const_and_or4003,89334
evaluate_const_expr3(char_u **arg, cctx_T *cctx, typval_T *tv)evaluate_const_expr34053,90386
evaluate_const_expr2(char_u **arg, cctx_T *cctx, typval_T *tv)evaluate_const_expr24068,90796
evaluate_const_expr1(char_u **arg, cctx_T *cctx, typval_T *tv)evaluate_const_expr14085,91311
compile_if(char_u *arg, cctx_T *cctx)compile_if4169,92935
compile_elseif(char_u *arg, cctx_T *cctx)compile_elseif4207,93794
compile_else(char_u *arg, cctx_T *cctx)compile_else4256,95047
compile_endif(char_u *arg, cctx_T *cctx)compile_endif4296,96008
compile_for(char_u *arg, cctx_T *cctx)compile_for4343,97302
compile_endfor(char_u *arg, cctx_T *cctx)compile_endfor4424,99265
compile_while(char_u *arg, cctx_T *cctx)compile_while4471,100496
compile_endwhile(char_u *arg, cctx_T *cctx)compile_endwhile4499,101070
compile_continue(char_u *arg, cctx_T *cctx)compile_continue4527,101762
compile_break(char_u *arg, cctx_T *cctx)compile_break4554,102312
compile_block(char_u *arg, cctx_T *cctx)compile_block4586,102941
compile_endblock(cctx_T *cctx)compile_endblock4597,103141
compile_try(char_u *arg, cctx_T *cctx)compile_try4639,104150
compile_catch(char_u *arg, cctx_T *cctx UNUSED)compile_catch4668,104855
compile_finally(char_u *arg, cctx_T *cctx)compile_finally4761,107153
compile_endtry(char_u *arg, cctx_T *cctx)compile_endtry4804,108319
compile_throw(char_u *arg, cctx_T *cctx UNUSED)compile_throw4854,109658
compile_echo(char_u *arg, int with_white, cctx_T *cctx)compile_echo4877,110067
compile_execute(char_u *arg, cctx_T *cctx)compile_execute4900,110425
compile_def_function(ufunc_T *ufunc, int set_return_type)compile_def_function4928,110996
delete_instr(isn_T *isn)delete_instr5338,120705
delete_def_function(ufunc_T *ufunc)delete_def_function5449,122762
free_def_functions(void)free_def_functions5469,123183

src/vim9execute.c,2328
#define USING_FLOAT_STUFFUSING_FLOAT_STUFF14,336
    int	    tcd_frame;		// ec_frame when ISN_TRY was encounteredtcd_frame27,558
    int	    tcd_catch_idx;	// instruction of the first catchtcd_catch_idx28,623
    int	    tcd_finally_idx;	// instruction of the finally blocktcd_finally_idx29,684
    int	    tcd_caught;		// catch block enteredtcd_caught30,749
    int	    tcd_return;		// when TRUE return from end of :finallytcd_return31,797
} trycmd_T;trycmd_T32,863
    garray_T	ec_stack;	// stack of typval_T valuesec_stack58,1670
    int		ec_frame;	// index in ec_stack: context of ec_dfunc_idxec_frame59,1721
    garray_T	ec_trystack;	// stack of trycmd_T valuesec_trystack61,1787
    int		ec_in_catch;	// when TRUE in catch or finally blockec_in_catch62,1841
    int		ec_dfunc_idx;	// current function indexec_dfunc_idx64,1903
    isn_T	*ec_instr;	// array with instructionsec_instr65,1952
    int		ec_iidx;	// index in ec_instr: instruction to executeec_iidx66,2000
} ectx_T;ectx_T67,2063
#define STACK_TV_BOT(STACK_TV_BOT70,2154
ufunc_argcount(ufunc_T *ufunc)ufunc_argcount76,2352
init_instr_idx(ufunc_T *ufunc, int argcount, ectx_T *ectx)init_instr_idx93,2852
call_dfunc(int cdf_idx, int argcount, ectx_T *ectx)call_dfunc123,3629
#define STACK_TV(STACK_TV174,5253
func_return(ectx_T *ectx)func_return180,5381
#undef STACK_TVSTACK_TV215,6530
call_prepare(int argcount, typval_T *argvars, ectx_T *ectx)call_prepare221,6640
call_bfunc(int func_idx, int argcount, ectx_T *ectx)call_bfunc251,7359
call_ufunc(ufunc_T *ufunc, int argcount, ectx_T *ectx, isn_T *iptr)call_ufunc273,7886
call_by_name(char_u *name, int argcount, ectx_T *ectx, isn_T *iptr)call_by_name322,9270
call_partial(typval_T *tv, int argcount, ectx_T *ectx)call_partial345,9751
store_var(char_u *name, typval_T *tv)store_var374,10368
call_eval_func(char_u *name, int argcount, ectx_T *ectx, isn_T *iptr)call_eval_func389,10727
call_def_function(call_def_function412,11284
#define STACK_TV(STACK_TV427,11660
#undef STACK_TV_BOTSTACK_TV_BOT430,11796
#define STACK_TV_BOT(STACK_TV_BOT431,11816
#define STACK_TV_VAR(STACK_TV_VAR434,11957
ex_disassemble(exarg_T *eap)ex_disassemble1689,42080
tv2bool(typval_T *tv)tv2bool2153,54065
check_not_string(typval_T *tv)check_not_string2203,55154

src/vim9script.c,521
static char e_needs_vim9[] = N_("E1042: import/export can only be used in vim9script");e_needs_vim920,423
in_vim9script(void)in_vim9script23,520
ex_vim9script(exarg_T *eap)ex_vim9script33,668
ex_export(exarg_T *eap UNUSED)ex_export67,1421
new_imported(garray_T *gap)new_imported104,2211
free_imports(int sid)free_imports115,2406
ex_import(exarg_T *eap)ex_import140,2995
find_exported(find_exported161,3499
handle_import(char_u *arg_start, garray_T *gap, int import_sid, void *cctx)handle_import242,5178

src/viminfo.c,5222
    char_u	*vir_line;	// text of the current linevir_line22,441
    FILE	*vir_fd;	// file descriptorvir_fd23,491
    vimconv_T	vir_conv;	// encoding conversionvir_conv24,528
    int		vir_version;	// viminfo version detected or -1vir_version25,575
    garray_T	vir_barlines;	// lines starting with |vir_barlines26,631
} vir_T;vir_T27,683
    BVAL_NR,BVAL_NR30,708
    BVAL_STRING,BVAL_STRING31,721
    BVAL_EMPTYBVAL_EMPTY32,738
} btype_T;btype_T33,753
    btype_T	bv_type;bv_type36,782
    long	bv_nr;bv_nr37,803
    char_u	*bv_string;bv_string38,819
    char_u	*bv_tofree;	// free later when not NULLbv_tofree39,842
    int		bv_len;		// length of bv_stringbv_len40,893
    int		bv_allocated;	// bv_string was allocatedbv_allocated41,934
} bval_T;bval_T42,984
static int  viminfo_errcnt;viminfo_errcnt46,1040
find_viminfo_parameter(int type)find_viminfo_parameter54,1316
get_viminfo_parameter(int type)get_viminfo_parameter79,1965
viminfo_filename(char_u *file)viminfo_filename98,2461
viminfo_writestring(FILE *fd, char_u *p)viminfo_writestring147,3681
barline_writestring(FILE *fd, char_u *s, int remaining_start)barline_writestring186,4585
viminfo_readstring(viminfo_readstring251,5849
viminfo_readline(vir_T *virp)viminfo_readline316,7185
read_viminfo_bufferlist(read_viminfo_bufferlist322,7294
removable(char_u *name)removable379,8706
write_viminfo_bufferlist(FILE *fp)write_viminfo_bufferlist408,9169
#define LINE_BUF_LEN LINE_BUF_LEN423,9510
static histentry_T *viminfo_history[HIST_COUNT] =viminfo_history460,10306
static int	viminfo_hisidx[HIST_COUNT] = {0, 0, 0, 0, 0};viminfo_hisidx462,10400
static int	viminfo_hislen[HIST_COUNT] = {0, 0, 0, 0, 0};viminfo_hislen463,10457
static int	viminfo_add_at_front = FALSE;viminfo_add_at_front464,10514
hist_type2char(hist_type2char470,10642
prepare_viminfo_history(int asklen, int writing)prepare_viminfo_history493,11079
read_viminfo_history(vir_T *virp, int writing)read_viminfo_history536,12159
handle_viminfo_history(handle_viminfo_history591,13573
concat_history(int type)concat_history669,15471
sort_hist(const void *s1, const void *s2)sort_hist718,16568
merge_history(int type)merge_history733,16925
finish_viminfo_history(vir_T *virp)finish_viminfo_history794,18509
write_viminfo_history(FILE *fp, int merge)write_viminfo_history821,19132
write_viminfo_barlines(vir_T *virp, FILE *fp_out)write_viminfo_barlines942,22133
barline_parse(vir_T *virp, char_u *text, garray_T *values)barline_parse972,22807
write_viminfo_version(FILE *fp_out)write_viminfo_version1148,26794
no_viminfo(void)no_viminfo1155,26947
viminfo_error(char *errnum, char *message, char_u *line)viminfo_error1166,27217
viminfo_encoding(vir_T *virp)viminfo_encoding1188,27917
read_viminfo_varlist(vir_T *virp, int writing)read_viminfo_varlist1215,28415
write_viminfo_varlist(FILE *fp)write_viminfo_varlist1310,30691
read_viminfo_sub_string(vir_T *virp, int force)read_viminfo_sub_string1376,32288
write_viminfo_sub_string(FILE *fp)write_viminfo_sub_string1384,32481
read_viminfo_search_pattern(vir_T *virp, int force)read_viminfo_search_pattern1400,32811
wvsp_one(wvsp_one1484,34891
write_viminfo_search_pattern(FILE *fp)write_viminfo_search_pattern1508,35553
static yankreg_T *y_read_regs = NULL;y_read_regs1525,35962
#define REG_PREVIOUS REG_PREVIOUS1527,36001
#define REG_EXEC REG_EXEC1528,36024
prepare_viminfo_registers(void)prepare_viminfo_registers1534,36136
finish_viminfo_registers(void)finish_viminfo_registers1540,36252
read_viminfo_register(vir_T *virp, int force)read_viminfo_register1559,36611
handle_viminfo_register(garray_T *values, int force)handle_viminfo_register1697,39806
write_viminfo_registers(FILE *fp)write_viminfo_registers1788,42132
static xfmark_T *vi_namedfm = NULL;vi_namedfm1920,45500
static xfmark_T *vi_jumplist = NULL;vi_jumplist1922,45557
static int vi_jumplist_len = 0;vi_jumplist_len1923,45594
write_one_mark(FILE *fp_out, int c, pos_T *pos)write_one_mark1927,45650
write_buffer_marks(buf_T *buf, FILE *fp_out)write_buffer_marks1934,45815
skip_for_viminfo(buf_T *buf)skip_for_viminfo1970,46879
write_viminfo_marks(FILE *fp_out, garray_T *buflist)write_viminfo_marks1985,47170
write_one_filemark(write_one_filemark2030,48202
write_viminfo_filemarks(FILE *fp)write_viminfo_filemarks2065,49066
buf_compare(const void *s1, const void *s2)buf_compare2181,52235
copy_viminfo_marks(copy_viminfo_marks2198,52754
check_marks_read(void)check_marks_read2444,58614
read_viminfo_filemark(vir_T *virp, int force)read_viminfo_filemark2456,58953
prepare_viminfo_marks(void)prepare_viminfo_marks2519,60575
finish_viminfo_marks(void)finish_viminfo_marks2529,60804
handle_viminfo_mark(garray_T *values, int force)handle_viminfo_mark2553,61260
read_viminfo_barline(vir_T *virp, int got_encoding, int force, int writing)read_viminfo_barline2700,64496
read_viminfo_up_to_marks(read_viminfo_up_to_marks2783,66706
do_viminfo(FILE *fp_in, FILE *fp_out, int flags)do_viminfo2891,69465
read_viminfo(read_viminfo2977,71783
write_viminfo(char_u *file, int forceit)write_viminfo3023,72920
ex_viminfo(ex_viminfo3300,80465

src/vimrun.c,79
# define WIN32_LEAN_AND_MEANWIN32_LEAN_AND_MEAN22,623
main(void)main27,689

src/winclip.c,1673
# define WIN32_LEAN_AND_MEANWIN32_LEAN_AND_MEAN24,540
#define WINAPIWINAPI34,774
#define WINBASEAPIWINBASEAPI35,789
typedef int DWORD;DWORD36,808
typedef int LPBOOL;LPBOOL37,827
typedef int LPCSTR;LPCSTR38,847
typedef int LPCWSTR;LPCWSTR39,867
typedef int LPSTR;LPSTR40,888
typedef int LPWSTR;LPWSTR41,907
typedef int UINT;UINT42,927
utf8_to_utf16(char_u *instr, int inlen, short_u *outstr, int *unconvlenp)utf8_to_utf1653,1241
utf16_to_utf8(short_u *instr, int inlen, char_u *outstr)utf16_to_utf8102,2298
MultiByteToWideChar_alloc(UINT cp, DWORD flags,MultiByteToWideChar_alloc145,3074
WideCharToMultiByte_alloc(UINT cp, DWORD flags,WideCharToMultiByte_alloc164,3605
win_clip_init(void)win_clip_init186,4140
    int type;		// MCHAR, MBLOCK or MLINEtype203,4672
    int txtlen;		// length of CF_TEXT in bytestxtlen204,4713
    int ucslen;		// length of CF_UNICODETEXT in wordsucslen205,4760
    int rawlen;		// length of clip_star.format_raw, including encoding,rawlen206,4814
} VimClipType_t;VimClipType_t208,4918
clip_mch_own_selection(Clipboard_T *cbd UNUSED)clip_mch_own_selection214,5024
clip_mch_lose_selection(Clipboard_T *cbd UNUSED)clip_mch_lose_selection227,5314
crnl_to_nl(const char_u *str, int *size)crnl_to_nl238,5590
vim_open_clipboard(void)vim_open_clipboard269,6149
clip_mch_request_selection(Clipboard_T *cbd)clip_mch_request_selection295,6880
clip_mch_set_selection(Clipboard_T *cbd)clip_mch_set_selection455,10960
enc_to_utf16(char_u *str, int *lenp)enc_to_utf16616,15376
utf16_to_enc(short_u *str, int *lenp)utf16_to_enc678,16933
acp_to_enc(acp_to_enc734,18191
enc_to_acp(enc_to_acp759,18723

src/window.c,7966
#define NOWIN	NOWIN66,3141
#define ROWS_AVAIL ROWS_AVAIL68,3192
static char *m_onlyone = N_("Already only one window");m_onlyone70,3245
static int split_disallowed = 0;split_disallowed74,3424
log_frame_layout(frame_T *frame)log_frame_layout82,3573
do_window(do_window108,4334
# define CHECK_CMDWIN CHECK_CMDWIN129,4733
get_wincmd_addr_type(char_u *arg, exarg_T *eap)get_wincmd_addr_type644,15659
cmd_with_count(cmd_with_count741,17131
check_split_disallowed()check_split_disallowed759,17471
win_split(int size, int flags)win_split785,18152
win_split_ins(win_split_ins821,19131
win_init(win_T *newp, win_T *oldp, int flags UNUSED)win_init1343,32177
win_init_some(win_T *newp, win_T *oldp)win_init_some1411,33950
win_valid_popup(win_T *win UNUSED)win_valid_popup1426,34307
win_valid(win_T *win)win_valid1445,34701
win_valid_any_tab(win_T *win)win_valid_any_tab1461,34956
win_count(void)win_count1488,35381
make_windows(make_windows1505,35701
win_exchange(long Prenum)win_exchange1569,37162
win_rotate(int upwards, int count)win_rotate1673,39764
win_totop(int size, int flags)win_totop1755,41816
win_move_after(win_T *win1, win_T *win2)win_move_after1795,42823
win_equal(win_equal1861,44561
win_equal_rec(win_equal_rec1881,45240
leaving_window(win_T *win)leaving_window2200,53897
entering_window(win_T *win)entering_window2225,54657
close_windows(close_windows2246,55212
last_window(void)last_window2308,56749
one_window(void)one_window2318,56942
close_last_window_tabpage(close_last_window_tabpage2340,57268
win_close_buffer(win_T *win, int action, int abort_if_last)win_close_buffer2392,58840
win_close(win_T *win, int free_buf)win_close2431,59896
win_close_othertab(win_T *win, int free_buf, tabpage_T *tp)win_close_othertab2670,66524
win_free_mem(win_free_mem2733,68127
win_free_all(void)win_free_all2757,68716
winframe_remove(winframe_remove2787,69336
win_altframe(win_altframe2953,73644
alt_tabpage(void)alt_tabpage2998,74716
frame2win(frame_T *frp)frame2win3016,75059
frame_has_win(frame_T *frp, win_T *wp)frame_has_win3027,75240
frame_new_height(frame_new_height3045,75623
frame_fixed_height(frame_T *frp)frame_fixed_height3155,78269
frame_fixed_width(frame_T *frp)frame_fixed_width3184,79008
frame_add_statusline(frame_T *frp)frame_add_statusline3213,79736
frame_new_width(frame_new_width3247,80551
frame_add_vsep(frame_T *frp)frame_add_vsep3362,83372
frame_fix_width(win_T *wp)frame_fix_width3396,84042
frame_fix_height(win_T *wp)frame_fix_height3405,84206
frame_minheight(frame_T *topfrp, win_T *next_curwin)frame_minheight3418,84564
frame_minwidth(frame_minwidth3471,85764
close_others(close_others3522,86913
win_init_empty(win_T *wp)win_init_empty3577,88110
curwin_init(void)curwin_init3603,88738
win_alloc_first(void)win_alloc_first3614,88945
win_alloc_popup_win(void)win_alloc_popup_win3637,89491
win_init_popup_win(win_T *wp, buf_T *buf)win_init_popup_win3658,89846
win_alloc_firstwin(win_T *oldwin)win_alloc_firstwin3676,90404
new_frame(win_T *wp)new_frame3717,91380
win_init_size(void)win_init_size3733,91626
alloc_tabpage(void)alloc_tabpage3746,91908
free_tabpage(tabpage_T *tp)free_tabpage3782,92478
win_new_tabpage(int after)win_new_tabpage3822,93345
may_open_tabpage(void)may_open_tabpage3902,95317
make_tabpages(int maxcount)make_tabpages3920,95686
valid_tabpage(tabpage_T *tpc)valid_tabpage3949,96254
valid_tabpage_win(tabpage_T *tpc)valid_tabpage_win3964,96491
close_tabpage(tabpage_T *tab)close_tabpage3990,96910
find_tabpage(int n)find_tabpage4016,97391
tabpage_index(tabpage_T *ftp)tabpage_index4034,97701
leave_tabpage(leave_tabpage4051,98091
enter_tabpage(enter_tabpage4100,99411
goto_tabpage(int n)goto_tabpage4174,101798
goto_tabpage_tp(goto_tabpage_tp4248,103218
goto_tabpage_win(tabpage_T *tp, win_T *wp)goto_tabpage_win4273,103805
tabpage_move(int nr)tabpage_move4290,104137
win_goto(win_T *wp)win_goto4345,105373
win_find_nr(int winnr)win_find_nr4393,106347
win_find_tabpage(win_T *win)win_find_tabpage4409,106601
win_vert_neighbor(tabpage_T *tp, win_T *wp, int up, long count)win_vert_neighbor4428,106978
win_goto_ver(win_goto_ver4493,108254
win_horz_neighbor(tabpage_T *tp, win_T *wp, int left, long count)win_horz_neighbor4515,108734
win_goto_hor(win_goto_hor4580,110003
win_enter(win_T *wp, int undo_sync)win_enter4599,110323
win_enter_ext(win_enter_ext4610,110595
buf_jump_open_win(buf_T *buf)buf_jump_open_win4756,114336
buf_jump_open_tab(buf_T *buf)buf_jump_open_tab4777,114740
static int last_win_id = LOWEST_WIN_ID - 1;last_win_id4802,115167
win_alloc(win_T *after UNUSED, int hidden UNUSED)win_alloc4809,115327
win_free(win_free4894,117228
win_unlisted(win_T *wp)win_unlisted5032,120001
win_free_popup(win_T *win)win_free_popup5043,120278
win_append(win_T *after, win_T *wp)win_append5062,120702
win_remove(win_remove5087,121129
frame_append(frame_T *after, frame_T *frp)frame_append5110,121649
frame_insert(frame_T *before, frame_T *frp)frame_insert5123,121928
frame_remove(frame_T *frp)frame_remove5138,122229
win_alloc_lines(win_T *wp)win_alloc_lines5158,122676
win_free_lsize(win_T *wp)win_free_lsize5171,122895
shell_new_rows(void)shell_new_rows5183,123160
shell_new_columns(void)shell_new_columns5213,123968
win_size_save(garray_T *gap)win_size_save5237,124660
win_size_restore(garray_T *gap)win_size_restore5263,125223
win_comp_pos(void)win_comp_pos5294,125942
frame_comp_pos(frame_T *topfrp, int *row, int *col)frame_comp_pos5310,126322
win_setheight(int height)win_setheight5354,127332
win_setheight_win(int height, win_T *win)win_setheight_win5364,127525
frame_setheight(frame_T *curfrp, int height)frame_setheight5411,128931
win_setwidth(int width)win_setwidth5577,133214
win_setwidth_win(int width, win_T *wp)win_setwidth_win5583,133289
frame_setwidth(frame_T *curfrp, int width)frame_setwidth5611,133953
win_setminheight(void)win_setminheight5750,137379
win_setminwidth(void)win_setminwidth5776,137809
win_drag_status_line(win_T *dragwin, int offset)win_drag_status_line5802,138242
win_drag_vsep_line(win_T *dragwin, int offset)win_drag_vsep_line5931,141171
#define FRACTION_MULT	FRACTION_MULT6030,143492
set_fraction(win_T *wp)set_fraction6037,143654
win_new_height(win_T *wp, int height)win_new_height6054,144234
scroll_to_fraction(win_T *wp, int prev_height)scroll_to_fraction6088,145177
win_new_width(win_T *wp, int width)win_new_width6214,148180
win_comp_scroll(win_T *wp)win_comp_scroll6230,148509
command_height(void)command_height6241,148707
frame_add_height(frame_T *frp, int n)frame_add_height6314,150529
last_status(last_status6331,150849
last_status_rec(frame_T *fr, int statusline)last_status_rec6340,151103
tabline_height(void)tabline_height6405,152613
min_rows(void)min_rows6425,153024
only_one_window(void)only_one_window6452,153587
check_lnums(int do_curwin)check_lnums6484,154374
reset_lnums()reset_lnums6512,155203
make_snapshot(int idx)make_snapshot6544,155924
make_snapshot_rec(frame_T *fr, frame_T **frp)make_snapshot_rec6551,156061
clear_snapshot(tabpage_T *tp, int idx)clear_snapshot6571,156602
clear_snapshot_rec(frame_T *fr)clear_snapshot_rec6578,156741
restore_snapshot(restore_snapshot6594,157067
check_snapshot_rec(frame_T *sn, frame_T *fr)check_snapshot_rec6619,157779
restore_snapshot_rec(frame_T *sn, frame_T *fr)restore_snapshot_rec6639,158437
win_hasvertsplit(void)win_hasvertsplit6672,159149
get_win_number(win_T *wp, win_T *first_win)get_win_number6690,159479
get_tab_number(tabpage_T *tp UNUSED)get_tab_number6705,159685
frame_check_height(frame_T *topfrp, int height)frame_check_height6724,159983
frame_check_width(frame_T *topfrp, int width)frame_check_width6743,160343
int_cmp(const void *a, const void *b)int_cmp6763,160727
check_colorcolumn(win_T *wp)check_colorcolumn6773,160940

src/xdiff/xdiffi.c,3704
#define XDL_MAX_COST_MIN XDL_MAX_COST_MIN25,866
#define XDL_HEUR_MIN_COST XDL_HEUR_MIN_COST26,895
#define XDL_LINE_MAX XDL_LINE_MAX27,925
#define XDL_SNAKE_CNT XDL_SNAKE_CNT28,997
#define XDL_K_HEUR XDL_K_HEUR29,1022
typedef struct s_xdpsplit {s_xdpsplit31,1044
	long i1, i2;i132,1072
	long i1, i2;i232,1072
	int min_lo, min_hi;min_lo33,1086
	int min_lo, min_hi;min_hi33,1086
} xdpsplit_t;xdpsplit_t34,1107
static long xdl_split(unsigned long const *ha1, long off1, long lim1,xdl_split45,1642
int xdl_recs_cmp(diffdata_t *dd1, long off1, long lim1,xdl_recs_cmp251,6990
int xdl_do_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,xdl_do_diff307,8307
static xdchange_t *xdl_add_change(xdchange_t *xscr, long i1, long i2, long chg1, long chg2) {xdl_add_change369,9762
static int recs_match(xrecord_t *rec1, xrecord_t *rec2, long flags)recs_match386,10075
#define MAX_INDENT MAX_INDENT400,10522
static int xget_indent(xrecord_t *rec)xget_indent407,10739
#define MAX_BLANKS MAX_BLANKS436,11351
struct split_measurement {split_measurement439,11439
	int end_of_file;end_of_file443,11545
	int indent;indent449,11673
	int pre_blank;pre_blank454,11754
	int pre_indent;pre_indent460,11886
	int post_blank;post_blank465,11978
	int post_indent;post_indent471,12130
struct split_score {split_score474,12152
	int effective_indent;effective_indent476,12236
	int penalty;penalty479,12311
static void measure_split(const xdfile_t *xdf, long split,measure_split485,12415
#define START_OF_FILE_PENALTY START_OF_FILE_PENALTY538,13819
#define END_OF_FILE_PENALTY END_OF_FILE_PENALTY541,13911
#define TOTAL_BLANK_WEIGHT TOTAL_BLANK_WEIGHT544,14004
#define POST_BLANK_WEIGHT POST_BLANK_WEIGHT547,14098
#define RELATIVE_INDENT_PENALTY RELATIVE_INDENT_PENALTY552,14205
#define RELATIVE_INDENT_WITH_BLANK_PENALTY RELATIVE_INDENT_WITH_BLANK_PENALTY553,14242
#define RELATIVE_OUTDENT_PENALTY RELATIVE_OUTDENT_PENALTY559,14393
#define RELATIVE_OUTDENT_WITH_BLANK_PENALTY RELATIVE_OUTDENT_WITH_BLANK_PENALTY560,14429
#define RELATIVE_DEDENT_PENALTY RELATIVE_DEDENT_PENALTY566,14590
#define RELATIVE_DEDENT_WITH_BLANK_PENALTY RELATIVE_DEDENT_WITH_BLANK_PENALTY567,14625
#define INDENT_WEIGHT INDENT_WEIGHT575,14954
#define INDENT_HEURISTIC_MAX_SLIDING INDENT_HEURISTIC_MAX_SLIDING580,15026
static void score_add_split(const struct split_measurement *m, struct split_score *s)score_add_split592,15435
static int score_cmp(struct split_score *s1, struct split_score *s2)score_cmp670,17678
struct xdlgroup {xdlgroup694,18795
	long start;start699,18957
	long end;end705,19086
static void group_init(xdfile_t *xdf, struct xdlgroup *g)group_init711,19160
static inline int group_next(xdfile_t *xdf, struct xdlgroup *g)group_next722,19437
static inline int group_previous(xdfile_t *xdf, struct xdlgroup *g)group_previous738,19801
static int group_slide_down(xdfile_t *xdf, struct xdlgroup *g, long flags)group_slide_down755,20203
static int group_slide_up(xdfile_t *xdf, struct xdlgroup *g, long flags)group_slide_up776,20709
static void xdl_bug(const char *msg)xdl_bug792,21027
int xdl_change_compact(xdfile_t *xdf, xdfile_t *xdfo, long flags) {xdl_change_compact803,21286
int xdl_build_script(xdfenv_t *xe, xdchange_t **xscr) {xdl_build_script938,25222
void xdl_free_script(xdchange_t *xscr) {xdl_free_script964,25827
static int xdl_call_hunk_func(xdfenv_t *xe UNUSED, xdchange_t *xscr, xdemitcb_t *ecb,xdl_call_hunk_func973,25963
static void xdl_mark_ignorable(xdchange_t *xscr, xdfenv_t *xe, long flags)xdl_mark_ignorable990,26386
int xdl_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,xdl_diff1011,26880

src/xdiff/xemit.c,469
static long xdl_get_rec(xdfile_t *xdf, long ri, char const **rec) {xdl_get_rec25,866
static int xdl_emit_record(xdfile_t *xdf, long ri, char const *pre, xdemitcb_t *ecb) {xdl_emit_record33,997
xdchange_t *xdl_get_hunk(xdchange_t **xscr, xdemitconf_t const *xecfg)xdl_get_hunk52,1492
struct func_line {func_line136,3571
	long len;len137,3590
	char buf[80];buf138,3601
int xdl_emit_diff(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,xdl_emit_diff177,4366

src/xdiff/xhistogram.c,1987
#define MAX_PTR	MAX_PTR48,1991
#define MAX_CNT	MAX_CNT49,2015
#define LINE_END(LINE_END51,2040
#define LINE_END_PTR(LINE_END_PTR52,2085
struct histindex {histindex54,2137
	struct record {record55,2156
		unsigned int ptr, cnt;ptr56,2173
		unsigned int ptr, cnt;cnt56,2173
		struct record *next;next57,2198
	} **records, // an occurrencerecords58,2221
	  **line_map; // map of line to record chainline_map59,2252
	chastore_t rcha;rcha60,2298
	unsigned int *next_ptrs;next_ptrs61,2316
	unsigned int table_bits,table_bits62,2342
		     records_size,records_size63,2368
		     line_map_size;line_map_size64,2389
	unsigned int max_chain_length,max_chain_length66,2412
		     key_shift,key_shift67,2444
		     ptr_shift;ptr_shift68,2462
	unsigned int cnt,cnt70,2481
		     has_common;has_common71,2500
	xdfenv_t *env;env73,2520
	xpparam_t const *xpp;xpp74,2536
struct region {region77,2563
	unsigned int begin1, end1;begin178,2579
	unsigned int begin1, end1;end178,2579
	unsigned int begin2, end2;begin279,2607
	unsigned int begin2, end2;end279,2607
#define LINE_MAP(LINE_MAP82,2639
#define NEXT_PTR(NEXT_PTR84,2697
#define CNT(CNT87,2775
#define REC(REC90,2833
static int cmp_recs(xpparam_t const *xpp,cmp_recs93,2886
#define CMP_ENV(CMP_ENV101,3065
#define CMP(CMP104,3163
#define TABLE_HASH(TABLE_HASH107,3259
static int scanA(struct histindex *index, int line1, int count1)scanA110,3368
static int try_lcs(struct histindex *index, struct region *lcs, int b_ptr,try_lcs163,4511
static int fall_back_to_classic_diff(xpparam_t const *xpp, xdfenv_t *env,fall_back_to_classic_diff236,5956
static inline void free_index(struct histindex *index)free_index246,6239
static int find_lcs(xpparam_t const *xpp, xdfenv_t *env,find_lcs254,6412
static int histogram_diff(xpparam_t const *xpp, xdfenv_t *env,histogram_diff316,7913
int xdl_do_histogram_diff(mmfile_t *file1, mmfile_t *file2,xdl_do_histogram_diff377,9294

src/xdiff/xpatience.c,1633
#define NON_UNIQUE NON_UNIQUE43,1642
struct hashmap {hashmap49,1769
	int nr, alloc;nr50,1786
	int nr, alloc;alloc50,1786
	struct entry {entry51,1802
		unsigned long hash;hash52,1818
		unsigned long line1, line2;line158,2003
		unsigned long line1, line2;line258,2003
		struct entry *next, *previous;next64,2173
		struct entry *next, *previous;previous64,2173
		unsigned anchor : 1;anchor70,2326
	} *entries, *first, *last;entries71,2349
	} *entries, *first, *last;first71,2349
	} *entries, *first, *last;last71,2349
	unsigned long has_matches;has_matches73,2408
	mmfile_t *file1, *file2;file174,2436
	mmfile_t *file1, *file2;file274,2436
	xdfenv_t *env;env75,2462
	xpparam_t const *xpp;xpp76,2478
static int is_anchor(xpparam_t const *xpp, const char *line)is_anchor79,2505
static void insert_record(xpparam_t const *xpp, int line, struct hashmap *map,insert_record90,2780
static int fill_hashmap(mmfile_t *file1, mmfile_t *file2,fill_hashmap148,4619
static int binary_search(struct entry **sequence, int longest,binary_search181,5539
static struct entry *find_longest_common_sequence(struct hashmap *map)find_longest_common_sequence207,6342
static int match(struct hashmap *map, int line1, int line2)match257,7555
static int walk_common_sequence(struct hashmap *map, struct entry *first,walk_common_sequence269,7975
static int fall_back_to_classic_diff(struct hashmap *map,fall_back_to_classic_diff322,9082
static int patience_diff(mmfile_t *file1, mmfile_t *file2,patience_diff338,9552
int xdl_do_patience_diff(mmfile_t *file1, mmfile_t *file2,xdl_do_patience_diff384,10577

src/xdiff/xprepare.c,1940
#define XDL_KPDIS_RUN XDL_KPDIS_RUN26,868
#define XDL_MAX_EQLIMIT XDL_MAX_EQLIMIT27,892
#define XDL_SIMSCAN_WINDOW XDL_SIMSCAN_WINDOW28,921
#define XDL_GUESS_NLINES1 XDL_GUESS_NLINES129,952
#define XDL_GUESS_NLINES2 XDL_GUESS_NLINES230,982
typedef struct s_xdlclass {s_xdlclass33,1013
	struct s_xdlclass *next;next34,1041
	unsigned long ha;ha35,1067
	char const *line;line36,1086
	long size;size37,1105
	long idx;idx38,1117
	long len1, len2;len139,1128
	long len1, len2;len239,1128
} xdlclass_t;xdlclass_t40,1146
typedef struct s_xdlclassifier {s_xdlclassifier42,1161
	unsigned int hbits;hbits43,1194
	long hsize;hsize44,1215
	xdlclass_t **rchash;rchash45,1228
	chastore_t ncha;ncha46,1250
	xdlclass_t **rcrecs;rcrecs47,1268
	long alloc;alloc48,1290
	long count;count49,1303
	long flags;flags50,1316
} xdlclassifier_t;xdlclassifier_t51,1329
static int xdl_init_classifier(xdlclassifier_t *cf, long size, long flags) {xdl_init_classifier71,2097
static void xdl_free_classifier(xdlclassifier_t *cf) {xdl_free_classifier102,2753
static int xdl_classify_record(unsigned int pass, xdlclassifier_t *cf, xrecord_t **rhash,xdl_classify_record110,2885
static int xdl_prepare_ctx(unsigned int pass, mmfile_t *mf, long narec, xpparam_t const *xpp,xdl_prepare_ctx160,4031
static void xdl_free_ctx(xdfile_t *xdf) {xdl_free_ctx251,6208
int xdl_prepare_env(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,xdl_prepare_env262,6397
void xdl_free_env(xdfenv_t *xe) {xdl_free_env315,7774
static int xdl_clean_mmatch(char const *dis, long i, long s, long e) {xdl_clean_mmatch322,7865
static int xdl_cleanup_records(xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2) {xdl_cleanup_records385,9751
static int xdl_trim_ends(xdfile_t *xdf1, xdfile_t *xdf2) {xdl_trim_ends448,11461
static int xdl_optimize_ctxs(xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2) {xdl_optimize_ctxs474,12040

src/xdiff/xutils.c,1366
long xdl_bogosqrt(long n) {xdl_bogosqrt30,909
int xdl_emit_diffrec(char const *rec, long size, char const *pre, long psize,xdl_emit_diffrec43,1074
void *xdl_mmfile_first(mmfile_t *mmf, long *size)xdl_mmfile_first65,1528
long xdl_mmfile_size(mmfile_t *mmf)xdl_mmfile_size72,1622
int xdl_cha_init(chastore_t *cha, long isize, long icount) {xdl_cha_init78,1683
void xdl_cha_free(chastore_t *cha) {xdl_cha_free90,1893
void *xdl_cha_alloc(chastore_t *cha) {xdl_cha_alloc100,2044
long xdl_guess_lines(mmfile_t *mf, long sample) {xdl_guess_lines125,2554
int xdl_blankline(const char *line, long size, long flags)xdl_blankline146,2992
static int ends_with_optional_cr(const char *l, long s, long i)ends_with_optional_cr163,3299
int xdl_recmatch(const char *l1, long s1, const char *l2, long s2, long flags)xdl_recmatch177,3575
static unsigned long xdl_hash_record_with_whitespace(char const **data,xdl_hash_record_with_whitespace256,5563
unsigned long xdl_hash_record(char const **data, char const *top, long flags) {xdl_hash_record301,6696
unsigned int xdl_hashbits(unsigned int size) {xdl_hashbits317,7072
int xdl_num_out(char *out, long val) {xdl_num_out325,7263
int xdl_emit_hunk_hdr(long s1, long c1, long s2, long c2,xdl_emit_hunk_hdr347,7622
int xdl_fall_back_diff(xdfenv_t *diff_env, xpparam_t const *xpp,xdl_fall_back_diff396,8479

src/xpm_w32.c,121
# define WIN32_LEAN_AND_MEANWIN32_LEAN_AND_MEAN13,254
#define FOR_MSWFOR_MSW20,370
LoadXpmImage(LoadXpmImage31,589

src/xxd/xxd.c,2235
# define _CRT_SECURE_NO_DEPRECATE_CRT_SECURE_NO_DEPRECATE71,3520
# define _CRT_NONSTDC_NO_DEPRECATE_CRT_NONSTDC_NO_DEPRECATE72,3554
# define CYGWINCYGWIN75,3640
#  define __USE_FIXED_PROTOTYPES____USE_FIXED_PROTOTYPES__106,4360
#  define __P(__P119,4794
char version[] = "xxd V1.10 27oct98 by Juergen Weigert";version137,5270
char osver[] = " (Win32)";osver139,5340
char osver[] = "";osver141,5373
# define BIN_READ(BIN_READ145,5419
# define BIN_WRITE(BIN_WRITE146,5465
# define BIN_CREAT(BIN_CREAT147,5511
# define BIN_ASSIGN(BIN_ASSIGN148,5574
# define PATH_SEP PATH_SEP149,5650
# define BIN_READ(BIN_READ151,5695
# define BIN_WRITE(BIN_WRITE152,5741
# define BIN_CREAT(BIN_CREAT153,5786
# define BIN_ASSIGN(BIN_ASSIGN154,5849
# define PATH_SEP PATH_SEP155,5939
#  define BIN_READ(BIN_READ158,5979
#  define BIN_WRITE(BIN_WRITE159,6010
#  define BIN_CREAT(BIN_CREAT160,6041
#  define BIN_ASSIGN(BIN_ASSIGN161,6076
#  define PATH_SEP PATH_SEP162,6111
#  define FILE_SEP FILE_SEP163,6134
#  define BIN_READ(BIN_READ165,6164
#  define BIN_WRITE(BIN_WRITE166,6195
#  define BIN_CREAT(BIN_CREAT167,6226
#  define BIN_ASSIGN(BIN_ASSIGN168,6261
#  define PATH_SEP PATH_SEP169,6296
# define OPEN(OPEN175,6394
# define OPEN(OPEN177,6450
# define STRNCMP(STRNCMP181,6528
# define STRNCMP(STRNCMP183,6589
#  define __P(__P188,6697
#  define __P(__P190,6723
#define TRY_SEEK	TRY_SEEK201,7038
#define COLS COLS202,7110
#define LLEN LLEN203,7176
char hexxa[] = "0123456789abcdef0123456789ABCDEF", *hexx = hexxa;hexxa205,7251
char hexxa[] = "0123456789abcdef0123456789ABCDEF", *hexx = hexxa;hexx205,7251
#define HEX_NORMAL HEX_NORMAL208,7370
#define HEX_POSTSCRIPT HEX_POSTSCRIPT209,7391
#define HEX_CINCLUDE HEX_CINCLUDE210,7416
#define HEX_BITS HEX_BITS211,7439
#define HEX_LITTLEENDIAN HEX_LITTLEENDIAN212,7500
#define CONDITIONAL_CAPITALIZE(CONDITIONAL_CAPITALIZE214,7528
static char *pname;pname216,7598
exit_with_usage(void)exit_with_usage219,7633
die(int ret)die250,9438
huntype(huntype265,9801
xxdline(FILE *fp, char *l, int nz)xxdline397,12587
static unsigned char etoa64[] =etoa64428,13162
main(int argc, char *argv[])main457,14285

pixmaps/stock_icons.h,1073
static const guint8 stock_vim_build_tags[] =stock_vim_build_tags3,42
static const guint8 stock_vim_find_help[] =stock_vim_find_help121,7646
static const guint8 stock_vim_save_all[] =stock_vim_save_all233,14863
static const guint8 stock_vim_session_load[] =stock_vim_session_load355,22808
static const guint8 stock_vim_session_new[] =stock_vim_session_new466,29942
static const guint8 stock_vim_session_save[] =stock_vim_session_save589,37944
static const guint8 stock_vim_shell[] =stock_vim_shell703,45296
static const guint8 stock_vim_window_maximize[] =stock_vim_window_maximize1042,69294
static const guint8 stock_vim_window_maximize_width[] =stock_vim_window_maximize_width1150,76211
static const guint8 stock_vim_window_minimize[] =stock_vim_window_minimize1259,83139
static const guint8 stock_vim_window_minimize_width[] =stock_vim_window_minimize_width1366,89940
static const guint8 stock_vim_window_split[] =stock_vim_window_split1473,96747
static const guint8 stock_vim_window_split_vertical[] =stock_vim_window_split_vertical1588,104129

src/alloc.h,876
	aid_none = 0,aid_none14,352
	aid_qf_dirname_start,aid_qf_dirname_start15,367
	aid_qf_dirname_now,aid_qf_dirname_now16,390
	aid_qf_namebuf,aid_qf_namebuf17,411
	aid_qf_module,aid_qf_module18,428
	aid_qf_errmsg,aid_qf_errmsg19,444
	aid_qf_pattern,aid_qf_pattern20,460
	aid_tagstack_items,aid_tagstack_items21,477
	aid_tagstack_from,aid_tagstack_from22,498
	aid_tagstack_details,aid_tagstack_details23,518
	aid_sign_getdefined,aid_sign_getdefined24,541
	aid_sign_getplaced,aid_sign_getplaced25,563
	aid_sign_define_by_name,aid_sign_define_by_name26,584
	aid_sign_getlist,aid_sign_getlist27,610
	aid_sign_getplaced_dict,aid_sign_getplaced_dict28,629
	aid_sign_getplaced_list,aid_sign_getplaced_list29,655
	aid_insert_sign,aid_insert_sign30,681
	aid_sign_getinfo,aid_sign_getinfo31,699
	aid_lastaid_last32,718
} alloc_id_T;alloc_id_T33,728

src/ascii.h,3948
#define IF_EB(IF_EB17,385
#define CharOrd(CharOrd19,408
#define CharOrdLow(CharOrdLow20,463
#define CharOrdUp(CharOrdUp21,497
#define ROT13(ROT1322,530
#define NUL	NUL24,585
#define BELL	BELL25,605
#define BS	BS26,626
#define TAB	TAB27,645
#define NL	NL28,665
#define NL_STR	NL_STR29,684
#define FF	FF30,717
#define CAR	CAR31,736
#define ESC	ESC32,782
#define ESC_STR	ESC_STR33,802
#define ESC_STR_nc	ESC_STR_nc34,836
#define DEL	DEL35,862
#define DEL_STR	DEL_STR36,880
#define POUND	POUND38,915
#define Ctrl_chr(Ctrl_chr40,936
#define Meta(Meta41,1011
#define CTRL_F_STR	CTRL_F_STR43,1042
#define CTRL_H_STR	CTRL_H_STR44,1068
#define CTRL_V_STR	CTRL_V_STR45,1094
#define Ctrl_AT	Ctrl_AT47,1121
#define Ctrl_A	Ctrl_A48,1147
#define Ctrl_B	Ctrl_B49,1165
#define Ctrl_C	Ctrl_C50,1183
#define Ctrl_D	Ctrl_D51,1201
#define Ctrl_E	Ctrl_E52,1219
#define Ctrl_F	Ctrl_F53,1237
#define Ctrl_G	Ctrl_G54,1255
#define Ctrl_H	Ctrl_H55,1273
#define Ctrl_I	Ctrl_I56,1291
#define Ctrl_J	Ctrl_J57,1309
#define Ctrl_K	Ctrl_K58,1328
#define Ctrl_L	Ctrl_L59,1347
#define Ctrl_M	Ctrl_M60,1366
#define Ctrl_N	Ctrl_N61,1385
#define Ctrl_O	Ctrl_O62,1404
#define Ctrl_P	Ctrl_P63,1423
#define Ctrl_Q	Ctrl_Q64,1442
#define Ctrl_R	Ctrl_R65,1461
#define Ctrl_S	Ctrl_S66,1480
#define Ctrl_T	Ctrl_T67,1499
#define Ctrl_U	Ctrl_U68,1518
#define Ctrl_V	Ctrl_V69,1537
#define Ctrl_W	Ctrl_W70,1556
#define Ctrl_X	Ctrl_X71,1575
#define Ctrl_Y	Ctrl_Y72,1594
#define Ctrl_Z	Ctrl_Z73,1613
#define Ctrl_BSL	Ctrl_BSL75,1677
#define Ctrl_RSB	Ctrl_RSB76,1713
#define Ctrl_HAT	Ctrl_HAT77,1760
#define Ctrl__	Ctrl__78,1786
#define IF_EB(IF_EB85,1866
#define CharOrd__(CharOrd__92,2065
#define CharOrdLow(CharOrdLow93,2158
#define CharOrdUp(CharOrdUp94,2203
#define CharOrd(CharOrd95,2247
#define EBCDIC_CHAR_ADD_(EBCDIC_CHAR_ADD_97,2311
#define EBCDIC_CHAR_ADD(EBCDIC_CHAR_ADD98,2396
#define R13_(R13_100,2523
#define ROT13(ROT13101,2587
#define NUL	NUL103,2674
#define BELL	BELL104,2694
#define BS	BS105,2715
#define TAB	TAB106,2734
#define NL	NL107,2754
#define NL_STR	NL_STR108,2773
#define FF	FF109,2806
#define CAR	CAR110,2825
#define ESC	ESC111,2845
#define ESC_STR	ESC_STR112,2865
#define ESC_STR_nc	ESC_STR_nc113,2899
#define DEL	DEL114,2925
#define DEL_STR	DEL_STR115,2943
#define POUND	POUND117,2978
#define CTRL_F_STR	CTRL_F_STR119,2999
#define CTRL_H_STR	CTRL_H_STR120,3025
#define CTRL_V_STR	CTRL_V_STR121,3051
#define Ctrl_AT	Ctrl_AT123,3078
#define Ctrl_A	Ctrl_A124,3107
#define Ctrl_B	Ctrl_B125,3128
#define Ctrl_C	Ctrl_C126,3149
#define Ctrl_D	Ctrl_D127,3170
#define Ctrl_E	Ctrl_E128,3191
#define Ctrl_F	Ctrl_F129,3212
#define Ctrl_G	Ctrl_G130,3233
#define Ctrl_H	Ctrl_H131,3254
#define Ctrl_I	Ctrl_I132,3275
#define Ctrl_J	Ctrl_J133,3296
#define Ctrl_K	Ctrl_K134,3317
#define Ctrl_L	Ctrl_L135,3338
#define Ctrl_M	Ctrl_M136,3359
#define Ctrl_N	Ctrl_N137,3380
#define Ctrl_O	Ctrl_O138,3401
#define Ctrl_P	Ctrl_P139,3422
#define Ctrl_Q	Ctrl_Q140,3443
#define Ctrl_R	Ctrl_R141,3464
#define Ctrl_S	Ctrl_S142,3485
#define Ctrl_T	Ctrl_T143,3506
#define Ctrl_U	Ctrl_U144,3527
#define Ctrl_V	Ctrl_V145,3548
#define Ctrl_W	Ctrl_W146,3569
#define Ctrl_X	Ctrl_X147,3590
#define Ctrl_Y	Ctrl_Y148,3611
#define Ctrl_Z	Ctrl_Z149,3632
#define Ctrl_RSB	Ctrl_RSB151,3698
#define Ctrl_BSL	Ctrl_BSL152,3747
#define Ctrl_HAT	Ctrl_HAT153,3785
#define Ctrl__	Ctrl__154,3813
#define Ctrl_chr(Ctrl_chr156,3835
#define CtrlChar(CtrlChar159,3898
#define MetaChar(MetaChar162,3985
#define CSI	CSI168,4146
#define CSI_STR	CSI_STR169,4195
#define DCS	DCS170,4219
#define OSC	OSC171,4262
#define STERM	STERM172,4308
# define PATHSEP	PATHSEP181,4607
# define PATHSEPSTR	PATHSEPSTR182,4630
# define PATHSEP	PATHSEP184,4662
# define PATHSEPSTR	PATHSEPSTR185,4683

src/auto/config.h,6640
#define HAVE_X11 HAVE_X1111,288
#define TERMINFO TERMINFO14,349
#define HAVE_OSPEED HAVE_OSPEED17,413
#define HAVE_UP_BC_PC HAVE_UP_BC_PC23,554
#define HAVE_DATE_TIME HAVE_DATE_TIME32,784
#define HAVE_ATTRIBUTE_UNUSED HAVE_ATTRIBUTE_UNUSED35,864
#define UNIX UNIX38,939
#define VIM_SIZEOF_INT VIM_SIZEOF_INT41,991
#define VIM_SIZEOF_LONG VIM_SIZEOF_LONG44,1053
#define SIZEOF_OFF_T SIZEOF_OFF_T47,1115
#define SIZEOF_TIME_T SIZEOF_TIME_T50,1175
#define USEMEMMOVE USEMEMMOVE60,1421
#define USEMAN_S USEMAN_S64,1509
#define TIME_WITH_SYS_TIME TIME_WITH_SYS_TIME112,2775
#define SYS_SELECT_WITH_SYS_TIME SYS_SELECT_WITH_SYS_TIME115,2883
#define SELECT_TYPE_ARG234 SELECT_TYPE_ARG234118,2981
#define HAVE_SVR4_PTYS HAVE_SVR4_PTYS124,3116
#define RETSIGTYPE RETSIGTYPE137,3396
#define SIGRETURN SIGRETURN140,3501
#define HAVE_SIGCONTEXT HAVE_SIGCONTEXT143,3572
#define TGETENT_ZERO_ERR TGETENT_ZERO_ERR155,3926
#define HAVE_FCHDIR HAVE_FCHDIR161,4072
#define HAVE_FCHOWN HAVE_FCHOWN162,4094
#define HAVE_FCHMOD HAVE_FCHMOD163,4116
#define HAVE_FLOAT_FUNCS HAVE_FLOAT_FUNCS164,4138
#define HAVE_FSEEKO HAVE_FSEEKO165,4165
#define HAVE_FSYNC HAVE_FSYNC166,4187
#define HAVE_FTRUNCATE HAVE_FTRUNCATE167,4208
#define HAVE_GETCWD HAVE_GETCWD168,4233
#define HAVE_GETPGID HAVE_GETPGID169,4255
#define HAVE_GETPWENT HAVE_GETPWENT171,4309
#define HAVE_GETPWNAM HAVE_GETPWNAM172,4333
#define HAVE_GETPWUID HAVE_GETPWUID173,4357
#define HAVE_GETRLIMIT HAVE_GETRLIMIT174,4381
#define HAVE_GETTIMEOFDAY HAVE_GETTIMEOFDAY175,4406
#define HAVE_ICONV HAVE_ICONV177,4458
#define HAVE_LOCALTIME_R HAVE_LOCALTIME_R178,4479
#define HAVE_LSTAT HAVE_LSTAT179,4506
#define HAVE_MEMSET HAVE_MEMSET180,4527
#define HAVE_MKDTEMP HAVE_MKDTEMP181,4549
#define HAVE_NANOSLEEP HAVE_NANOSLEEP182,4572
#define HAVE_NL_LANGINFO_CODESET HAVE_NL_LANGINFO_CODESET183,4597
#define HAVE_OPENDIR HAVE_OPENDIR184,4632
#define HAVE_POSIX_OPENPT HAVE_POSIX_OPENPT185,4655
#define HAVE_PUTENV HAVE_PUTENV186,4683
#define HAVE_QSORT HAVE_QSORT187,4705
#define HAVE_READLINK HAVE_READLINK188,4726
#define HAVE_RENAME HAVE_RENAME189,4750
#define HAVE_SELECT HAVE_SELECT190,4772
#define HAVE_SELINUX HAVE_SELINUX191,4794
#define HAVE_SETENV HAVE_SETENV192,4817
#define HAVE_SETPGID HAVE_SETPGID193,4839
#define HAVE_SETSID HAVE_SETSID194,4862
#define HAVE_SIGACTION HAVE_SIGACTION195,4884
#define HAVE_SIGALTSTACK HAVE_SIGALTSTACK196,4909
#define HAVE_SIGSET HAVE_SIGSET197,4936
#define HAVE_SIGSTACK HAVE_SIGSTACK199,4986
#define HAVE_SIGPROCMASK HAVE_SIGPROCMASK200,5010
#define HAVE_STRCASECMP HAVE_STRCASECMP203,5086
#define HAVE_STRERROR HAVE_STRERROR204,5112
#define HAVE_STRFTIME HAVE_STRFTIME205,5136
#define HAVE_STRNCASECMP HAVE_STRNCASECMP207,5186
#define HAVE_STRPBRK HAVE_STRPBRK209,5240
#define HAVE_STRPTIME HAVE_STRPTIME210,5263
#define HAVE_STRTOL HAVE_STRTOL211,5287
#define HAVE_ST_BLKSIZE HAVE_ST_BLKSIZE213,5336
#define HAVE_SYSCONF HAVE_SYSCONF214,5362
#define HAVE_SYSINFO HAVE_SYSINFO216,5410
#define HAVE_SYSINFO_MEM_UNIT HAVE_SYSINFO_MEM_UNIT217,5433
#define HAVE_TGETENT HAVE_TGETENT218,5465
#define HAVE_TOWLOWER HAVE_TOWLOWER219,5488
#define HAVE_TOWUPPER HAVE_TOWUPPER220,5512
#define HAVE_ISWUPPER HAVE_ISWUPPER221,5536
#define HAVE_TZSET HAVE_TZSET222,5560
#define HAVE_UNSETENV HAVE_UNSETENV223,5581
#define HAVE_USLEEP HAVE_USLEEP224,5605
#define HAVE_UTIME HAVE_UTIME225,5627
#define HAVE_BIND_TEXTDOMAIN_CODESET HAVE_BIND_TEXTDOMAIN_CODESET226,5648
#define HAVE_MBLEN HAVE_MBLEN227,5687
#define HAVE_UTIMES HAVE_UTIMES235,5926
#define HAVE_DIRENT_H HAVE_DIRENT_H238,5991
#define HAVE_ERRNO_H HAVE_ERRNO_H239,6015
#define HAVE_FCNTL_H HAVE_FCNTL_H240,6038
#define HAVE_ICONV_H HAVE_ICONV_H242,6087
#define HAVE_INTTYPES_H HAVE_INTTYPES_H243,6110
#define HAVE_LANGINFO_H HAVE_LANGINFO_H244,6136
#define HAVE_LIBGEN_H HAVE_LIBGEN_H246,6187
#define HAVE_LIBINTL_H HAVE_LIBINTL_H247,6211
#define HAVE_LOCALE_H HAVE_LOCALE_H248,6236
#define HAVE_MATH_H HAVE_MATH_H249,6260
#define HAVE_POLL_H HAVE_POLL_H251,6307
#define HAVE_PWD_H HAVE_PWD_H253,6360
#define HAVE_SETJMP_H HAVE_SETJMP_H254,6381
#define HAVE_SGTTY_H HAVE_SGTTY_H255,6405
#define HAVE_STDINT_H HAVE_STDINT_H256,6428
#define HAVE_STRINGS_H HAVE_STRINGS_H257,6452
#define HAVE_SYS_ACL_H HAVE_SYS_ACL_H260,6536
#define HAVE_SYS_IOCTL_H HAVE_SYS_IOCTL_H262,6589
#define HAVE_SYS_PARAM_H HAVE_SYS_PARAM_H264,6645
#define HAVE_SYS_POLL_H HAVE_SYS_POLL_H265,6672
#define HAVE_SYS_RESOURCE_H HAVE_SYS_RESOURCE_H268,6756
#define HAVE_SYS_SELECT_H HAVE_SYS_SELECT_H269,6786
#define HAVE_SYS_STATFS_H HAVE_SYS_STATFS_H270,6814
#define HAVE_SYS_SYSCTL_H HAVE_SYS_SYSCTL_H272,6873
#define HAVE_SYS_SYSINFO_H HAVE_SYS_SYSINFO_H273,6901
#define HAVE_SYS_TIME_H HAVE_SYS_TIME_H275,6965
#define HAVE_SYS_TYPES_H HAVE_SYS_TYPES_H276,6991
#define HAVE_SYS_UTSNAME_H HAVE_SYS_UTSNAME_H277,7018
#define HAVE_TERMCAP_H HAVE_TERMCAP_H278,7047
#define HAVE_TERMIOS_H HAVE_TERMIOS_H279,7072
#define HAVE_TERMIO_H HAVE_TERMIO_H280,7097
#define HAVE_WCHAR_H HAVE_WCHAR_H281,7121
#define HAVE_WCTYPE_H HAVE_WCTYPE_H282,7144
#define HAVE_UNISTD_H HAVE_UNISTD_H283,7168
#define HAVE_UTIME_H HAVE_UTIME_H286,7256
#define HAVE_X11_SUNKEYSYM_H HAVE_X11_SUNKEYSYM_H287,7279
#define HAVE_X11_XPM_H HAVE_X11_XPM_H295,7526
#define HAVE_X11_SM_SMLIB_H HAVE_X11_SM_SMLIB_H297,7587
#define HAVE_SYS_WAIT_H HAVE_SYS_WAIT_H303,7770
#define HAVE_STDLIB_H HAVE_STDLIB_H313,8067
#define HAVE_STRING_H HAVE_STRING_H314,8091
#define FEAT_HUGE FEAT_HUGE332,8526
#define FEAT_PYTHON3 FEAT_PYTHON3353,9109
#define HAVE_POSIX_ACL HAVE_POSIX_ACL380,9861
#define HAVE_PANGO_SHAPE_FULL HAVE_PANGO_SHAPE_FULL386,10026
#define FEAT_XIM FEAT_XIM410,10760
#define HAVE_DLFCN_H HAVE_DLFCN_H422,11051
#define HAVE_GETTEXT HAVE_GETTEXT425,11121
#define HAVE_NL_MSG_CAT_CNTR HAVE_NL_MSG_CAT_CNTR428,11190
#define HAVE_DLOPEN HAVE_DLOPEN431,11255
#define HAVE_DLSYM HAVE_DLSYM434,11310
#define FEAT_NETBEANS_INTG FEAT_NETBEANS_INTG443,11507
#define FEAT_JOB_CHANNEL FEAT_JOB_CHANNEL446,11596
#define FEAT_TERMINAL FEAT_TERMINAL449,11687
#define USE_XSMP_INTERACT USE_XSMP_INTERACT461,12012
#define HAVE_FD_CLOEXEC HAVE_FD_CLOEXEC464,12106
#define PROC_EXE_LINK PROC_EXE_LINK467,12187
#define HAVE_XUTF8SETWMPROPERTIES HAVE_XUTF8SETWMPROPERTIES476,12508
#define USE_GRESOURCE USE_GRESOURCE479,12593
#define HAVE_ISINF HAVE_ISINF485,12729
#define HAVE_ISNAN HAVE_ISNAN488,12783

src/auto/gui_gtk_gresources.h,59
#define __RESOURCE_gui_gtk_H____RESOURCE_gui_gtk_H__2,31

src/beval.h,1457
#define BEVAL__HBEVAL__H11,335
    ShS_NEUTRAL,			// nothing showing or pendingShS_NEUTRAL27,550
    ShS_PENDING,			// data requested from debuggerShS_PENDING28,599
    ShS_UPDATE_PENDING,			// switching information displayedShS_UPDATE_PENDING29,650
    ShS_SHOWING				// the balloon is being displayedShS_SHOWING30,711
} BeState;BeState31,764
typedef struct BalloonEvalStructBalloonEvalStruct33,776
    GtkWidget		*target;	// widget we are monitoringtarget37,854
    GtkWidget		*balloonShell;balloonShell38,906
    GtkWidget		*balloonLabel;balloonLabel39,936
    unsigned int	timerID;	// timer for runtimerID40,966
    BeState		showState;	// tells us what's currently going onshowState41,1009
    int			x;x42,1071
    int			y;y43,1084
    unsigned int	state;		// Button/Modifier key statestate44,1097
    Dimension		screen_width;	// screen width in pixelsscreen_width67,1780
    Dimension		screen_height;	// screen height in pixelsscreen_height68,1835
    void		(*msgCB)(struct BalloonEvalStruct *, int);msgCB70,1900
    void		*clientData;	// For callbackclientData71,1953
    int			ts;		// tabstop setting for this bufferts74,2000
    int			*vts;		// vartabstop setting for this buffervts76,2070
    char_u		*msg;		// allocated: current textmsg78,2132
    void		*tofree;tofree80,2200
} BalloonEval;BalloonEval82,2226
#define EVAL_OFFSET_X EVAL_OFFSET_X84,2242
#define EVAL_OFFSET_Y EVAL_OFFSET_Y85,2320

src/dosinst.h,2466
# define vim_mkdir(vim_mkdir42,792
# define vim_mkdir(vim_mkdir44,845
#define sleep(sleep47,898
#define BUFSIZE BUFSIZE52,980
#define NUL NUL53,1050
#define FAIL FAIL55,1065
#define OK OK56,1080
# define FALSE FALSE59,1108
# define TRUE TRUE62,1145
#  define KEY_WOW64_64KEY KEY_WOW64_64KEY70,1312
#  define KEY_WOW64_32KEY KEY_WOW64_32KEY73,1378
#define VIM_STARTMENU VIM_STARTMENU76,1420
int	interactive;		// non-zero when running interactivelyinteractive78,1478
alloc(int len)alloc84,1607
mytoupper(int c)mytoupper101,1844
myexit(int n)myexit109,1949
typedef BOOL (WINAPI *LPFN_ISWOW64PROCESS)(HANDLE, PBOOL);LPFN_ISWOW64PROCESS122,2150
is_64bit_os(void)is_64bit_os127,2265
searchpath(char *name)searchpath144,2635
searchpath_save(char *name)searchpath_save167,3284
# define CSIDL_COMMON_PROGRAMS CSIDL_COMMON_PROGRAMS182,3496
# define CSIDL_COMMON_DESKTOPDIRECTORY CSIDL_COMMON_DESKTOPDIRECTORY185,3579
get_shell_folder_path(get_shell_folder_path194,3743
#define TARGET_COUNT TARGET_COUNT322,7030
    char	*name;		// Vim exe name (without .exe)name326,7064
    char	*batname;	// batch file namebatname327,7112
    char	*lnkname;	// shortcut file namelnkname328,7150
    char	*exename;	// exe file nameexename329,7191
    char	*exenamearg;	// exe file name when using exeargexenamearg330,7227
    char	*exearg;	// argument for vim.exe or gvim.exeexearg331,7284
    char	*oldbat;	// path to existing xxx.bat or NULLoldbat332,7338
    char	*oldexe;	// path to existing xxx.exe or NULLoldexe333,7392
    char	batpath[BUFSIZE];  // path of batch file to create; notbatpath334,7446
} targets[TARGET_COUNT] =targets336,7545
#define VIMBAT_UNINSTKEY VIMBAT_UNINSTKEY358,8302
#define ICON_COUNT ICON_COUNT360,8378
char *(icon_names[ICON_COUNT]) =icon_names361,8399
char *(icon_link_names[ICON_COUNT]) =icon_link_names365,8535
run_command(char *cmd)run_command376,8835
add_pathsep(char *name)add_pathsep410,9777
change_drive(int drive)change_drive422,10011
mch_chdir(char *path)mch_chdir434,10230
my_fullpath(char *buf, char *fname, int len)my_fullpath453,10664
remove_tail(char *path)remove_tail467,11082
char	installdir[MAX_PATH-9];	// top of the installation dir, where theinstalldir480,11246
int	runtimeidx;		// index in installdir[] where "vim60" startsruntimeidx483,11376
char	*sysdrive;		// system drive or "c:\"sysdrive484,11439
do_inits(char **argv)do_inits491,11562

src/ex_cmdidxs.h,180
static const unsigned short cmdidxs1[26] =cmdidxs16,175
static const unsigned char cmdidxs2[26][26] =cmdidxs242,823
static const int command_count = 568;command_count72,4058

src/ex_cmds.h,5051
#define EX_RANGE	EX_RANGE30,1017
#define EX_BANG	EX_BANG31,1061
#define EX_EXTRA	EX_EXTRA32,1120
#define EX_XFILE	EX_XFILE33,1182
#define EX_NOSPC	EX_NOSPC34,1239
#define	EX_DFLALL	EX_DFLALL35,1301
#define EX_WHOLEFOLD	EX_WHOLEFOLD36,1354
#define EX_NEEDARG	EX_NEEDARG38,1464
#define EX_TRLBAR	EX_TRLBAR39,1510
#define EX_REGSTR	EX_REGSTR40,1569
#define EX_COUNT	EX_COUNT41,1630
#define EX_NOTRLCOM	EX_NOTRLCOM42,1695
#define EX_ZEROR EX_ZEROR43,1752
#define EX_CTRLV EX_CTRLV44,1810
#define EX_CMDARG EX_CMDARG45,1878
#define EX_BUFNAME EX_BUFNAME46,1937
#define EX_BUFUNL EX_BUFUNL47,1990
#define EX_ARGOPT EX_ARGOPT48,2051
#define EX_SBOXOK EX_SBOXOK49,2111
#define EX_CMDWIN EX_CMDWIN50,2167
#define EX_MODIFY EX_MODIFY53,2311
#define EX_FLAGS EX_FLAGS54,2381
#define EX_RESTRICT EX_RESTRICT55,2450
#define EX_FILES EX_FILES56,2512
#define EX_FILE1 EX_FILE157,2583
#define EX_WORD1 EX_WORD158,2658
    ADDR_LINES,		 // buffer line numbersADDR_LINES65,2799
    ADDR_WINDOWS,	 // window numberADDR_WINDOWS66,2840
    ADDR_ARGUMENTS,	 // argument numberADDR_ARGUMENTS67,2876
    ADDR_LOADED_BUFFERS, // buffer number of loaded bufferADDR_LOADED_BUFFERS68,2916
    ADDR_BUFFERS,	 // buffer numberADDR_BUFFERS69,2975
    ADDR_TABS,		 // tab page numberADDR_TABS70,3011
    ADDR_TABS_RELATIVE,	 // Tab page that only relativeADDR_TABS_RELATIVE71,3047
    ADDR_QUICKFIX_VALID, // quickfix list valid entry numberADDR_QUICKFIX_VALID72,3103
    ADDR_QUICKFIX,	 // quickfix list entry numberADDR_QUICKFIX73,3164
    ADDR_UNSIGNED,	 // positive count or zero, defaults to 1ADDR_UNSIGNED74,3214
    ADDR_OTHER,		 // something else, use line number for '$', '%', etc.ADDR_OTHER75,3275
    ADDR_NONE		 // no range usedADDR_NONE76,3347
} cmd_addr_T;cmd_addr_T77,3380
typedef struct exarg exarg_T;exarg_T81,3427
# define EXCMD(EXCMD93,3854
typedef void (*ex_func_T) (exarg_T *eap);ex_func_T95,3919
static struct cmdnamecmdname97,3962
    char_u	*cmd_name;	// name of the commandcmd_name99,3986
    ex_func_T   cmd_func;	// function for this commandcmd_func100,4031
    long_u	cmd_argt;	// flags declared abovecmd_argt101,4086
    cmd_addr_T	cmd_addr_type;	// flag for address typecmd_addr_type102,4131
#undef EXCMDEXCMD1816,60336
} cmdnames[] =cmdnames103,4186
typedef enum CMD_index cmdidx_T;cmdidx_T1826,60567
struct exargexarg1831,60645
    char_u	*arg;		// argument of the commandarg1833,60660
    char_u	*nextcmd;	// next command (NULL if none)nextcmd1834,60705
    char_u	*cmd;		// the name of the command (except for :make)cmd1835,60757
    char_u	**cmdlinep;	// pointer to pointer of allocated cmdlinecmdlinep1836,60821
    cmdidx_T	cmdidx;		// the index for the commandcmdidx1837,60887
    long	argt;		// flags for the commandargt1838,60938
    int		skip;		// don't execute the command, only parse itskip1839,60979
    int		forceit;	// TRUE if ! presentforceit1840,61039
    int		addr_count;	// the number of addresses givenaddr_count1841,61078
    linenr_T	line1;		// the first line numberline11842,61132
    linenr_T	line2;		// the second line number or countline21843,61178
    cmd_addr_T	addr_type;	// type of the count/rangeaddr_type1844,61234
    int		flags;		// extra flags after count: EXFLAG_flags1845,61287
    char_u	*do_ecmd_cmd;	// +command arg to be used in edited filedo_ecmd_cmd1846,61340
    linenr_T	do_ecmd_lnum;	// the line number in an edited filedo_ecmd_lnum1847,61407
    int		append;		// TRUE with ":w >>file" commandappend1848,61471
    int		usefilter;	// TRUE with ":w !command" and ":r!command"usefilter1849,61522
    int		amount;		// number of '>' or '<' for shift commandamount1850,61586
    int		regname;	// register name (NUL if none)regname1851,61646
    int		force_bin;	// 0, FORCE_BIN or FORCE_NOBINforce_bin1852,61695
    int		read_edit;	// ++edit argumentread_edit1853,61746
    int		force_ff;	// ++ff= argument (first char of argument)force_ff1854,61785
    int		force_enc;	// ++enc= argument (index in cmd[])force_enc1855,61847
    int		bad_char;	// BAD_KEEP, BAD_DROP or replacement bytebad_char1856,61903
    int		useridx;	// user command indexuseridx1857,61964
    char	*errmsg;	// returned error messageerrmsg1858,62004
    char_u	*(*getline)(int, void *, int, int);getline1859,62048
    void	*cookie;	// argument for getline()cookie1860,62095
    cstack_T	*cstack;	// condition stack for ":if" etc.cstack1862,62156
    long	verbose_save;	 // saved value of p_verboseverbose_save1864,62219
    int		save_msg_silent; // saved value of msg_silentsave_msg_silent1865,62271
    int		did_esilent;	 // how many times emsg_silent was incrementeddid_esilent1866,62326
    int		did_sandbox;	// when TRUE did ++sandboxdid_sandbox1868,62415
#define FORCE_BIN FORCE_BIN1872,62475
#define FORCE_NOBIN FORCE_NOBIN1873,62518
#define EXFLAG_LIST	EXFLAG_LIST1876,62588
#define EXFLAG_NR	EXFLAG_NR1877,62626
#define EXFLAG_PRINT	EXFLAG_PRINT1878,62664

src/feature.h,6649
#  define FEAT_HUGEFEAT_HUGE65,2079
#   define FEAT_BIGFEAT_BIG68,2161
#   define FEAT_NORMALFEAT_NORMAL70,2189
# define FEAT_BIGFEAT_BIG79,2315
# define FEAT_NORMALFEAT_NORMAL82,2356
# define FEAT_SMALLFEAT_SMALL85,2403
# define FEAT_TINYFEAT_TINY88,2448
# define MAX_MSG_HIST_LEN MAX_MSG_HIST_LEN124,3638
# define MAX_MSG_HIST_LEN MAX_MSG_HIST_LEN126,3674
# define FEAT_JUMPLISTFEAT_JUMPLIST133,3788
# define FEAT_CMDWINFEAT_CMDWIN137,3843
# define FEAT_FOLDINGFEAT_FOLDING144,3923
# define FEAT_DIGRAPHSFEAT_DIGRAPHS155,4220
# define FEAT_LANGMAPFEAT_LANGMAP165,4430
# define FEAT_KEYMAPFEAT_KEYMAP173,4586
# define VIM_BACKTICK	VIM_BACKTICK177,4634
# define FEAT_CMDL_INFOFEAT_CMDL_INFO184,4770
# define FEAT_LINEBREAKFEAT_LINEBREAK192,4917
# define FEAT_SEARCH_EXTRAFEAT_SEARCH_EXTRA199,5028
# define FEAT_QUICKFIXFEAT_QUICKFIX206,5122
# define FEAT_SEARCHPATHFEAT_SEARCHPATH213,5225
#  define FEAT_FIND_IDFEAT_FIND_ID221,5399
# define FEAT_PATH_EXTRAFEAT_PATH_EXTRA229,5525
# define FEAT_RIGHTLEFTFEAT_RIGHTLEFT238,5743
# define FEAT_ARABICFEAT_ARABIC248,5980
#   define FEAT_RIGHTLEFTFEAT_RIGHTLEFT252,6051
# define FEAT_EMACS_TAGSFEAT_EMACS_TAGS261,6210
# define FEAT_TAG_BINSFEAT_TAG_BINS274,6632
# define FEAT_CSCOPEFEAT_CSCOPE281,6794
# define FEAT_EVALFEAT_EVAL290,6973
#  define FEAT_FLOATFEAT_FLOAT292,7061
# define HAVE_SANDBOXHAVE_SANDBOX297,7115
# define FEAT_PROFILEFEAT_PROFILE307,7337
# define FEAT_RELTIMEFEAT_RELTIME317,7543
# define FEAT_TIMERSFEAT_TIMERS324,7686
# define FEAT_TEXTOBJFEAT_TEXTOBJ331,7819
# define FEAT_COMPL_FUNCFEAT_COMPL_FUNC338,7928
# define FEAT_PRINTERFEAT_PRINTER347,8144
# define FEAT_POSTSCRIPTFEAT_POSTSCRIPT351,8287
# define FEAT_DIFFFEAT_DIFF359,8431
# define FEAT_TITLEFEAT_TITLE371,8768
# define FEAT_STL_OPTFEAT_STL_OPT375,8815
#  define FEAT_CMDL_INFO	FEAT_CMDL_INFO377,8861
# define FEAT_BYTEOFFFEAT_BYTEOFF382,8961
# define FEAT_WILDIGNFEAT_WILDIGN390,9142
# define FEAT_WILDMENUFEAT_WILDMENU397,9236
# define FEAT_VIMINFOFEAT_VIMINFO407,9503
# define FEAT_SYN_HLFEAT_SYN_HL417,9775
# define FEAT_CONCEALFEAT_CONCEAL425,9966
# define FEAT_SPELLFEAT_SPELL434,10147
#  define ALL_BUILTIN_TCAPSALL_BUILTIN_TCAPS458,10779
#  define SOME_BUILTIN_TCAPS	SOME_BUILTIN_TCAPS460,10814
# define FEAT_LISPFEAT_LISP472,11152
# define FEAT_CINDENTFEAT_CINDENT476,11222
# define FEAT_SMARTINDENTFEAT_SMARTINDENT480,11271
# define FEAT_CRYPTFEAT_CRYPT487,11437
# define FEAT_SESSIONFEAT_SESSION495,11560
# define FEAT_MULTI_LANGFEAT_MULTI_LANG504,11786
# define FEAT_GETTEXTFEAT_GETTEXT508,11924
# define FEAT_MBYTE_IMEFEAT_MBYTE_IME520,12257
# define USE_ICONVUSE_ICONV525,12402
# define USE_XIM USE_XIM538,12654
#  define FEAT_XFONTSETFEAT_XFONTSET551,12986
# define USE_DLOPENUSE_DLOPEN562,13204
# define FEAT_LIBCALLFEAT_LIBCALL566,13365
# define FEAT_MENUFEAT_MENU573,13447
#  define FEAT_TEAROFFFEAT_TEAROFF575,13489
# define FEAT_TERM_POPUP_MENUFEAT_TERM_POPUP_MENU583,13614
# define FEAT_SOUNDFEAT_SOUND590,13753
# define FEAT_SOUND_CANBERRAFEAT_SOUND_CANBERRA593,13830
# define HAVE_XPM HAVE_XPM599,13989
# define FEAT_TOOLBARFEAT_TOOLBAR614,14402
# define FEAT_MENUFEAT_MENU619,14482
# define FEAT_GUI_DARKTHEMEFEAT_GUI_DARKTHEME626,14589
# define FEAT_GUI_TABLINEFEAT_GUI_TABLINE639,14908
# define FEAT_BROWSE_CMDFEAT_BROWSE_CMD647,15049
#  define FEAT_BROWSEFEAT_BROWSE651,15269
# define ALWAYS_USE_GUIALWAYS_USE_GUI662,15604
#  define FEAT_CON_DIALOGFEAT_CON_DIALOG678,16033
#  define FEAT_GUI_DIALOGFEAT_GUI_DIALOG679,16059
#  define FEAT_CON_DIALOGFEAT_CON_DIALOG681,16092
# define FEAT_GUI_DIALOGFEAT_GUI_DIALOG688,16349
# define FEAT_GUI_TEXTDIALOGFEAT_GUI_TEXTDIALOG695,16614
#  define FEAT_CON_DIALOGFEAT_CON_DIALOG697,16667
# define FEAT_TERMGUICOLORSFEAT_TERMGUICOLORS705,16834
# define FEAT_CW_EDITORFEAT_CW_EDITOR710,16936
# define FEAT_VARTABSFEAT_VARTABS717,17047
# define FEAT_WRITEBACKUPFEAT_WRITEBACKUP737,17578
# define STARTUPTIME STARTUPTIME759,18069
#define SESSION_FILE	SESSION_FILE785,18536
# define SYS_OPTWIN_FILE	SYS_OPTWIN_FILE861,20589
# define RUNTIME_DIRNAME RUNTIME_DIRNAME873,20865
# define WANT_X11WANT_X11918,22164
# define USE_XSMPUSE_XSMP931,22690
# undef USE_XSMP_INTERACTUSE_XSMP_INTERACT934,22768
# define FEAT_MOUSE_XTERMFEAT_MOUSE_XTERM956,23626
#  define FEAT_MOUSE_NETFEAT_MOUSE_NET958,23669
#  define FEAT_MOUSE_DECFEAT_MOUSE_DEC961,23719
#  define FEAT_MOUSE_URXVTFEAT_MOUSE_URXVT964,23769
# define DOS_MOUSEDOS_MOUSE968,23830
# define FEAT_MOUSE_PTERMFEAT_MOUSE_PTERM971,23877
# define FEAT_MOUSE_GPMFEAT_MOUSE_GPM982,24088
# define FEAT_SYSMOUSEFEAT_SYSMOUSE986,24171
# define FEAT_MOUSE_XTERMFEAT_MOUSE_XTERM991,24328
# define FEAT_CLIPBOARDFEAT_CLIPBOARD1001,24570
#  define FEAT_CLIPBOARDFEAT_CLIPBOARD1006,24642
# define FEAT_XCLIPBOARDFEAT_XCLIPBOARD1013,24791
#  define FEAT_CLIPBOARDFEAT_CLIPBOARD1015,24840
# define FEAT_DNDFEAT_DND1023,25002
# define MSWIN_FIND_REPLACE	MSWIN_FIND_REPLACE1027,25079
# define MSWIN_FR_BUFSIZE MSWIN_FR_BUFSIZE1028,25147
# define FIND_REPLACE_DIALOG FIND_REPLACE_DIALOG1033,25272
# define FEAT_CLIENTSERVERFEAT_CLIENTSERVER1041,25483
#  define FEAT_AUTOSERVERNAMEFEAT_AUTOSERVERNAME1051,25770
# define FEAT_TERMRESPONSEFEAT_TERMRESPONSE1064,26091
#  define MCH_CURSOR_SHAPEMCH_CURSOR_SHAPE1074,26390
#  define FEAT_MOUSESHAPEFEAT_MOUSESHAPE1079,26568
# define CURSOR_SHAPECURSOR_SHAPE1090,26924
# define MZSCHEME_GUI_THREADSMZSCHEME_GUI_THREADS1096,27124
# define FEAT_ARPFEAT_ARP1103,27280
# undef FEAT_NETBEANS_INTGFEAT_NETBEANS_INTG1135,28050
# undef FEAT_JOB_CHANNELFEAT_JOB_CHANNEL1142,28185
# undef FEAT_TERMINALFEAT_TERMINAL1150,28370
# define CURSOR_SHAPECURSOR_SHAPE1153,28452
# define FEAT_SYN_HLFEAT_SYN_HL1157,28606
# define FEAT_PROP_POPUPFEAT_PROP_POPUP1164,28750
# define SYN_TIME_LIMIT SYN_TIME_LIMIT1169,28885
# define FEAT_SIGNSFEAT_SIGNS1178,29105
#  define FEAT_SIGN_ICONSFEAT_SIGN_ICONS1183,29289
# define FEAT_BEVAL_GUIFEAT_BEVAL_GUI1197,29778
#  define FEAT_XFONTSETFEAT_XFONTSET1200,29888
# define FEAT_BEVAL_TIP	FEAT_BEVAL_TIP1205,30013
# define FEAT_BEVAL_TERMFEAT_BEVAL_TERM1214,30327
# define FEAT_BEVALFEAT_BEVAL1218,30416
# define FEAT_GUI_X11FEAT_GUI_X111223,30553
#  define FEAT_MENUFEAT_MENU1229,30664
# define FEAT_AUTOCHDIRFEAT_AUTOCHDIR1245,30924
# define FEAT_PERSISTENT_UNDOFEAT_PERSISTENT_UNDO1253,31075
# define FEAT_FILTERPIPEFEAT_FILTERPIPE1261,31233
# define FEAT_VTPFEAT_VTP1268,31367

src/glbl_ime.h,49
#  define _INC_GLOBAL_IME_INC_GLOBAL_IME11,263

src/globals.h,54514
EXTERN long	Rows			// nr of rows in the screenRows20,588
EXTERN long	Columns INIT(= 80);	// nr of columns in the screenColumns29,727
EXTERN schar_T	*ScreenLines INIT(= NULL);ScreenLines42,1256
EXTERN sattr_T	*ScreenAttrs INIT(= NULL);ScreenAttrs43,1298
EXTERN unsigned	*LineOffset INIT(= NULL);LineOffset44,1340
EXTERN char_u	*LineWraps INIT(= NULL);	// line wraps to next lineLineWraps45,1382
EXTERN u8char_T	*ScreenLinesUC INIT(= NULL);	// decoded UTF-8 charactersScreenLinesUC55,1889
EXTERN u8char_T	*ScreenLinesC[MAX_MCO];		// composing charactersScreenLinesC56,1962
EXTERN int	Screen_mco INIT(= 0);		// value of p_mco used whenScreen_mco57,2027
EXTERN schar_T	*ScreenLines2 INIT(= NULL);ScreenLines262,2227
EXTERN schar_T	*current_ScreenLine INIT(= NULL);current_ScreenLine67,2337
EXTERN int	screen_cur_row INIT(= 0);screen_cur_row74,2544
EXTERN int	screen_cur_col INIT(= 0);screen_cur_col75,2581
EXTERN match_T	screen_search_hl; // used for 'hlsearch' highlight matchingscreen_search_hl78,2644
EXTERN foldinfo_T win_foldinfo;	// info for 'foldcolumn'win_foldinfo82,2747
EXTERN int redrawing_for_callback INIT(= 0);redrawing_for_callback87,2896
EXTERN short	*TabPageIdxs INIT(= NULL);TabPageIdxs96,3110
EXTERN short	*popup_mask INIT(= NULL);popup_mask100,3237
EXTERN short	*popup_mask_next INIT(= NULL);popup_mask_next101,3276
EXTERN char	*popup_transparent INIT(= NULL);popup_transparent103,3380
EXTERN int	popup_mask_refresh INIT(= TRUE);popup_mask_refresh106,3483
EXTERN tabpage_T *popup_mask_tab INIT(= NULL);popup_mask_tab109,3569
EXTERN int	screen_zindex INIT(= 0);screen_zindex113,3726
EXTERN int	screen_Rows INIT(= 0);	    // actual size of ScreenLines[]screen_Rows116,3770
EXTERN int	screen_Columns INIT(= 0);   // actual size of ScreenLines[]screen_Columns117,3840
EXTERN int	mod_mask INIT(= 0x0);		// current key modifiersmod_mask123,4062
EXTERN int	cmdline_row;cmdline_row134,4521
EXTERN int	redraw_cmdline INIT(= FALSE);	// cmdline must be redrawnredraw_cmdline136,4546
EXTERN int	redraw_mode INIT(= FALSE);	// mode must be redrawnredraw_mode137,4614
EXTERN int	clear_cmdline INIT(= FALSE);	// cmdline must be clearedclear_cmdline138,4676
EXTERN int	mode_displayed INIT(= FALSE);	// mode is being displayedmode_displayed139,4743
EXTERN int	no_win_do_lines_ins INIT(= FALSE); // don't insert linesno_win_do_lines_ins140,4811
EXTERN int	cmdline_star INIT(= FALSE);	// cmdline is cryptedcmdline_star142,4925
EXTERN int	exec_from_reg INIT(= FALSE);	// executing registerexec_from_reg145,4994
EXTERN int	screen_cleared INIT(= FALSE);	// screen has been clearedscreen_cleared147,5057
EXTERN colnr_T	dollar_vcol INIT(= -1);dollar_vcol155,5409
EXTERN int	compl_length INIT(= 0);compl_length163,5595
EXTERN int	compl_cont_status INIT(= 0);compl_cont_status166,5674
# define CONT_ADDING	CONT_ADDING167,5714
# define CONT_INTRPT	CONT_INTRPT168,5771
# define CONT_N_ADDS	CONT_N_ADDS170,5881
# define CONT_S_IPOS	CONT_S_IPOS171,5948
# define CONT_SOL	CONT_SOL173,6053
# define CONT_LOCAL	CONT_LOCAL175,6163
EXTERN char_u	*edit_submode INIT(= NULL); // msg for CTRL-X submodeedit_submode178,6268
EXTERN char_u	*edit_submode_pre INIT(= NULL); // prepended to edit_submodeedit_submode_pre179,6336
EXTERN char_u	*edit_submode_extra INIT(= NULL);// appended to edit_submodeedit_submode_extra180,6411
EXTERN hlf_T	edit_submode_highl;	// highl. method for extra infoedit_submode_highl181,6486
EXTERN int	cmdmsg_rl INIT(= FALSE);    // cmdline is drawn right to leftcmdmsg_rl188,6678
EXTERN int	msg_col;msg_col190,6758
EXTERN int	msg_row;msg_row191,6778
EXTERN int	msg_scrolled;	// Number of screen lines that windows havemsg_scrolled192,6798
EXTERN int	msg_scrolled_ign INIT(= FALSE);msg_scrolled_ign194,6913
EXTERN char_u	*keep_msg INIT(= NULL);	    // msg to be shown after redrawkeep_msg199,7064
EXTERN int	keep_msg_attr INIT(= 0);    // highlight attr for keep_msgkeep_msg_attr200,7138
EXTERN int	keep_msg_more INIT(= FALSE); // keep_msg was set by msgmore()keep_msg_more201,7208
EXTERN int	need_fileinfo INIT(= FALSE);// do fileinfo() after redrawneed_fileinfo202,7281
EXTERN int	msg_scroll INIT(= FALSE);   // msg_start() will scrollmsg_scroll203,7350
EXTERN int	msg_didout INIT(= FALSE);   // msg_outstr() was used in linemsg_didout204,7416
EXTERN int	msg_didany INIT(= FALSE);   // msg_outstr() was used at allmsg_didany205,7488
EXTERN int	msg_nowait INIT(= FALSE);   // don't wait for this msgmsg_nowait206,7559
EXTERN int	emsg_off INIT(= 0);	    // don't display errors for now,emsg_off207,7625
EXTERN int	info_message INIT(= FALSE); // printing informative messageinfo_message209,7728
EXTERN int      msg_hist_off INIT(= FALSE); // don't add messages to historymsg_hist_off210,7799
EXTERN int	need_clr_eos INIT(= FALSE); // need to clear text beforeneed_clr_eos212,7893
EXTERN int	emsg_skip INIT(= 0);	    // don't display errors foremsg_skip214,7995
EXTERN int	emsg_severe INIT(= FALSE);  // use message of next of severalemsg_severe216,8098
EXTERN int	did_endif INIT(= FALSE);    // just had ":endif"did_endif218,8206
EXTERN int	did_emsg;		    // set by emsg() when the messagedid_emsg220,8273
EXTERN int	called_vim_beep;	    // set if vim_beep() is calledcalled_vim_beep223,8385
EXTERN int	did_uncaught_emsg;	    // emsg() was called and did notdid_uncaught_emsg224,8448
EXTERN int	did_emsg_syntax;	    // did_emsg set because of adid_emsg_syntax227,8553
EXTERN int	called_emsg;		    // always incremented by emsg()called_emsg229,8639
EXTERN int	ex_exitval INIT(= 0);	    // exit value for ex modeex_exitval230,8700
EXTERN int	emsg_on_display INIT(= FALSE);	// there is an error messageemsg_on_display231,8763
EXTERN int	rc_did_emsg INIT(= FALSE);  // vim_regcomp() called emsg()rc_did_emsg232,8834
EXTERN int	no_wait_return INIT(= 0);   // don't wait for return for nowno_wait_return234,8905
EXTERN int	need_wait_return INIT(= 0); // need to wait for return laterneed_wait_return235,8977
EXTERN int	did_wait_return INIT(= FALSE);	// wait_return() was used anddid_wait_return236,9049
EXTERN int	need_maketitle INIT(= TRUE); // call maketitle() soonneed_maketitle239,9175
EXTERN int	quit_more INIT(= FALSE);    // 'q' hit at "--more--" msgquit_more242,9248
EXTERN int	newline_on_exit INIT(= FALSE);	// did msg in altern. screennewline_on_exit244,9370
EXTERN int	intr_char INIT(= 0);	    // extra interrupt characterintr_char245,9441
EXTERN int	x_no_connect INIT(= FALSE); // don't connect to X serverx_no_connect248,9570
EXTERN int	x_force_connect INIT(= FALSE);	// Do connect to X server.x_force_connect250,9670
EXTERN int	ex_keep_indent INIT(= FALSE); // getexmodeline(): keep indentex_keep_indent255,9825
EXTERN int	vgetc_busy INIT(= 0);	      // when inside vgetc() then > 0vgetc_busy256,9898
EXTERN int	didset_vim INIT(= FALSE);	    // did set $VIM ourselvesdidset_vim258,9970
EXTERN int	didset_vimruntime INIT(= FALSE);    // idem for $VIMRUNTIMEdidset_vimruntime259,10037
EXTERN int	lines_left INIT(= -1);	    // lines left for listinglines_left265,10223
EXTERN int	msg_no_more INIT(= FALSE);  // don't use more prompt, truncatemsg_no_more266,10287
#define SOURCING_NAME SOURCING_NAME275,10585
#define SOURCING_LNUM SOURCING_LNUM277,10714
EXTERN int	ex_nesting_level INIT(= 0);	// nesting levelex_nesting_level280,10816
EXTERN int	debug_break_level INIT(= -1);	// break below this leveldebug_break_level281,10872
EXTERN int	debug_did_msg INIT(= FALSE);	// did "debug mode" messagedebug_did_msg282,10939
EXTERN int	debug_tick INIT(= 0);		// breakpoint change countdebug_tick283,11007
EXTERN int	debug_backtrace_level INIT(= 0); // breakpoint backtrace leveldebug_backtrace_level284,11068
EXTERN int	do_profiling INIT(= PROF_NONE);	// PROF_ valuesdo_profiling286,11163
# define SCRIPT_ITEM(SCRIPT_ITEM289,11306
# define SCRIPT_SV(SCRIPT_SV290,11386
# define SCRIPT_VARS(SCRIPT_VARS291,11440
# define FUNCLINE(FUNCLINE293,11505
EXTERN except_T *current_exception;current_exception300,11786
EXTERN int did_throw INIT(= FALSE);did_throw306,11962
EXTERN int need_rethrow INIT(= FALSE);need_rethrow312,12162
EXTERN int check_cstack INIT(= FALSE);check_cstack319,12385
EXTERN int trylevel INIT(= 0);trylevel325,12520
EXTERN int force_abort INIT(= FALSE);force_abort335,12995
EXTERN struct msglist **msg_list INIT(= NULL);msg_list347,13599
EXTERN int suppress_errthrow INIT(= FALSE);suppress_errthrow355,13953
EXTERN except_T *caught_stack INIT(= NULL);caught_stack363,14309
EXTERN int	may_garbage_collect INIT(= FALSE);may_garbage_collect373,14776
EXTERN int	want_garbage_collect INIT(= FALSE);want_garbage_collect374,14822
EXTERN int	garbage_collect_at_exit INIT(= FALSE);garbage_collect_at_exit375,14869
EXTERN int	did_source_packages INIT(= FALSE);did_source_packages418,16610
EXTERN char_u	hash_removed;hash_removed422,16762
EXTERN int	scroll_region INIT(= FALSE); // term supports scroll regionscroll_region425,16792
EXTERN int	t_colors INIT(= 0);	    // int value of T_CCOt_colors426,16863
EXTERN int include_none INIT(= 0);	// when 1 include "None"include_none429,16994
EXTERN int include_default INIT(= 0);	// when 1 include "default"include_default430,17054
EXTERN int include_link INIT(= 0);	// when 2 include "link" and "clear"include_link431,17120
EXTERN int	highlight_match INIT(= FALSE);	// show search match poshighlight_match439,17480
EXTERN linenr_T	search_match_lines;		// lines of matched stringsearch_match_lines440,17547
EXTERN colnr_T	search_match_endcol;		// col nr of match endsearch_match_endcol441,17611
EXTERN linenr_T	search_first_line INIT(= 0);	  // for :{FIRST},{last}s/patsearch_first_line443,17696
EXTERN linenr_T	search_last_line INIT(= MAXLNUM); // for :{first},{LAST}s/patsearch_last_line444,17771
EXTERN int	no_smartcase INIT(= FALSE);	// don't use 'smartcase' onceno_smartcase447,17857
EXTERN int	need_check_timestamps INIT(= FALSE); // need to check fileneed_check_timestamps449,17927
EXTERN int	did_check_timestamps INIT(= FALSE); // did check timestampsdid_check_timestamps451,18027
EXTERN int	no_check_timestamps INIT(= 0);	// Don't check timestampsno_check_timestamps453,18120
EXTERN int	highlight_attr[HLF_COUNT];  // Highl. attr for each context.highlight_attr455,18189
# define USER_HIGHLIGHTUSER_HIGHLIGHT457,18281
EXTERN int	highlight_user[9];		// User[1-9] attributeshighlight_user460,18334
EXTERN int	highlight_stlnc[9];		// On top of userhighlight_stlnc462,18410
EXTERN int	highlight_stlterm[9];		// On top of userhighlight_stlterm464,18483
EXTERN int	highlight_stltermnc[9];		// On top of userhighlight_stltermnc465,18535
EXTERN int	skip_term_loop INIT(= FALSE);skip_term_loop472,18731
EXTERN char_u	*use_gvimrc INIT(= NULL);	// "-U" cmdline argumentuse_gvimrc475,18795
EXTERN int	cterm_normal_fg_color INIT(= 0);cterm_normal_fg_color477,18867
EXTERN int	cterm_normal_fg_bold INIT(= 0);cterm_normal_fg_bold478,18911
EXTERN int	cterm_normal_bg_color INIT(= 0);cterm_normal_bg_color479,18954
EXTERN guicolor_T cterm_normal_fg_gui_color INIT(= INVALCOLOR);cterm_normal_fg_gui_color481,19024
EXTERN guicolor_T cterm_normal_bg_gui_color INIT(= INVALCOLOR);cterm_normal_bg_gui_color482,19088
EXTERN int	is_mac_terminal INIT(= FALSE);  // recognized Terminal.appis_mac_terminal485,19184
EXTERN int	autocmd_busy INIT(= FALSE);	// Is apply_autocmds() busy?autocmd_busy488,19262
EXTERN int	autocmd_no_enter INIT(= FALSE); // *Enter autocmds disabledautocmd_no_enter489,19330
EXTERN int	autocmd_no_leave INIT(= FALSE); // *Leave autocmds disabledautocmd_no_leave490,19401
EXTERN int	modified_was_set;		// did ":set modified"modified_was_set492,19473
EXTERN int	did_filetype INIT(= FALSE);	// FileType event founddid_filetype493,19526
EXTERN int	keep_filetype INIT(= FALSE);	// value for did_filetype whenkeep_filetype494,19589
EXTERN int	au_did_filetype INIT(= FALSE);au_did_filetype504,20004
EXTERN buf_T	*au_pending_free_buf INIT(= NULL);au_pending_free_buf514,20491
EXTERN win_T	*au_pending_free_win INIT(= NULL);au_pending_free_win515,20539
EXTERN int	mouse_row;mouse_row520,20641
EXTERN int	mouse_col;mouse_col521,20663
EXTERN int	mouse_past_bottom INIT(= FALSE);// mouse below last linemouse_past_bottom522,20685
EXTERN int	mouse_past_eol INIT(= FALSE);	// mouse right of linemouse_past_eol523,20753
EXTERN int	mouse_dragging INIT(= 0);	// extending Visual area withmouse_dragging524,20817
EXTERN int	WantQueryMouse INIT(= FALSE);WantQueryMouse531,21058
EXTERN int	need_mouse_correct INIT(= FALSE);need_mouse_correct538,21324
EXTERN linenr_T gui_prev_topline INIT(= 0);gui_prev_topline541,21420
EXTERN int	gui_prev_topfill INIT(= 0);gui_prev_topfill543,21482
EXTERN int	drag_status_line INIT(= FALSE);	// dragging the status linedrag_status_line548,21561
EXTERN int	postponed_mouseshape INIT(= FALSE); // postponed updating thepostponed_mouseshape549,21632
EXTERN int	drag_sep_line INIT(= FALSE);	// dragging vert separatordrag_sep_line551,21738
EXTERN int	diff_context INIT(= 6);		// context for foldsdiff_context557,21861
EXTERN int	diff_foldcolumn INIT(= 2);	// 'foldcolumn' for diff modediff_foldcolumn558,21918
EXTERN int	diff_need_scrollbind INIT(= FALSE);diff_need_scrollbind559,21986
EXTERN int	updating_screen INIT(= FALSE);updating_screen564,22160
EXTERN vimmenu_T	*root_menu INIT(= NULL);root_menu568,22255
EXTERN int	sys_menu INIT(= FALSE);sys_menu573,22424
EXTERN vimmenu_T	*current_menu;current_menu579,22553
EXTERN int force_menu_update INIT(= FALSE);force_menu_update582,22656
EXTERN int	    current_tab;current_tab586,22797
EXTERN int	    current_tabmenu;current_tabmenu589,22902
#  define TABLINE_MENU_CLOSE	TABLINE_MENU_CLOSE590,22934
#  define TABLINE_MENU_NEW	TABLINE_MENU_NEW591,22965
#  define TABLINE_MENU_OPEN	TABLINE_MENU_OPEN592,22994
EXTERN int	current_scrollbar;current_scrollbar596,23091
EXTERN long_u	scrollbar_value;scrollbar_value597,23121
EXTERN int	found_reverse_arg INIT(= FALSE);found_reverse_arg600,23203
EXTERN char	*font_argument INIT(= NULL);font_argument603,23290
EXTERN char	*background_argument INIT(= NULL);background_argument607,23401
EXTERN char	*foreground_argument INIT(= NULL);foreground_argument610,23497
EXTERN volatile sig_atomic_t hold_gui_events INIT(= 0);hold_gui_events619,23766
EXTERN int	new_pixel_width INIT(= 0);new_pixel_width625,23932
EXTERN int	new_pixel_height INIT(= 0);new_pixel_height626,23970
EXTERN int	gui_win_x INIT(= -1);gui_win_x629,24085
EXTERN int	gui_win_y INIT(= -1);gui_win_y630,24118
EXTERN Clipboard_T clip_star;	// PRIMARY selection in X11clip_star634,24181
EXTERN Clipboard_T clip_plus;	// CLIPBOARD selection in X11clip_plus636,24256
#  define clip_plus clip_plus638,24323
#  define ONE_CLIPBOARDONE_CLIPBOARD639,24384
# define CLIP_UNNAMED CLIP_UNNAMED642,24417
# define CLIP_UNNAMED_PLUS CLIP_UNNAMED_PLUS643,24446
EXTERN int	clip_unnamed INIT(= 0); // above two values or'edclip_unnamed644,24475
EXTERN int	clip_autoselect_star INIT(= FALSE);clip_autoselect_star646,24537
EXTERN int	clip_autoselect_plus INIT(= FALSE);clip_autoselect_plus647,24584
EXTERN int	clip_autoselectml INIT(= FALSE);clip_autoselectml648,24631
EXTERN int	clip_html INIT(= FALSE);clip_html649,24675
EXTERN regprog_T *clip_exclude_prog INIT(= NULL);clip_exclude_prog650,24711
EXTERN int	clip_unnamed_saved INIT(= 0);clip_unnamed_saved651,24761
EXTERN win_T	*firstwin;		// first windowfirstwin660,25080
EXTERN win_T	*lastwin;		// last windowlastwin661,25121
EXTERN win_T	*prevwin INIT(= NULL);	// previous windowprevwin662,25160
#define ONE_WINDOW ONE_WINDOW663,25215
#define W_NEXT(W_NEXT664,25256
#define FOR_ALL_WINDOWS(FOR_ALL_WINDOWS665,25290
#define FOR_ALL_FRAMES(FOR_ALL_FRAMES666,25367
#define FOR_ALL_TABPAGES(FOR_ALL_TABPAGES668,25471
#define FOR_ALL_WINDOWS_IN_TAB(FOR_ALL_WINDOWS_IN_TAB669,25555
#define FOR_ALL_TAB_WINDOWS(FOR_ALL_TAB_WINDOWS676,25834
EXTERN win_T	*curwin;	// currently active windowcurwin682,26036
EXTERN win_T	*aucmd_win;	// window used in aucmd_prepbuf()aucmd_win684,26086
EXTERN int	aucmd_win_used INIT(= FALSE);	// aucmd_win is being usedaucmd_win_used685,26145
EXTERN win_T    *first_popupwin;		// first global popup windowfirst_popupwin688,26237
EXTERN win_T	*popup_dragwin INIT(= NULL);	// popup window being draggedpopup_dragwin689,26300
EXTERN int	popup_visible INIT(= FALSE);popup_visible692,26426
EXTERN int	text_prop_frozen INIT(= 0);text_prop_frozen694,26467
EXTERN frame_T	*topframe;	// top of the window frame treetopframe701,26615
EXTERN tabpage_T    *first_tabpage;first_tabpage707,26807
EXTERN tabpage_T    *curtab;curtab708,26843
EXTERN int	    redraw_tabline INIT(= FALSE);  // need to redraw tablineredraw_tabline709,26872
EXTERN buf_T	*firstbuf INIT(= NULL);	// first bufferfirstbuf715,27103
EXTERN buf_T	*lastbuf INIT(= NULL);	// last bufferlastbuf716,27156
EXTERN buf_T	*curbuf INIT(= NULL);	// currently active buffercurbuf717,27207
#define FOR_ALL_BUFFERS(FOR_ALL_BUFFERS719,27270
#define FOR_ALL_SIGNS_IN_BUF(FOR_ALL_SIGNS_IN_BUF722,27405
EXTERN int	mf_dont_release INIT(= FALSE);	// don't release blocksmf_dont_release727,27648
EXTERN alist_T	global_alist;		    // global argument listglobal_alist733,27862
EXTERN int	max_alist_id INIT(= 0);	    // the previous argument list idmax_alist_id734,27920
EXTERN int	arg_had_last INIT(= FALSE); // accessed last file inarg_had_last735,27992
EXTERN int	ru_col;		// column for rulerru_col738,28082
EXTERN int	ru_wid;		// 'rulerfmt' width of ruler when non-zeroru_wid740,28142
EXTERN int	sc_col;		// column for shown commandsc_col742,28212
EXTERN char_u	*vim_tempdir INIT(= NULL); // Name of Vim's own temp dir.vim_tempdir745,28281
EXTERN int	starting INIT(= NO_SCREEN);starting753,28484
EXTERN int	exiting INIT(= FALSE);exiting756,28614
EXTERN int	really_exiting INIT(= FALSE);really_exiting760,28760
EXTERN int	v_dying INIT(= 0); // internal value of v:dyingv_dying763,28874
EXTERN int	stdout_isatty INIT(= TRUE);	// is stdout a terminal?stdout_isatty764,28933
EXTERN int	test_autochdir INIT(= FALSE);test_autochdir767,29026
EXTERN int	entered_free_all_mem INIT(= FALSE);entered_free_all_mem770,29096
EXTERN volatile sig_atomic_t full_screen INIT(= FALSE);full_screen774,29256
EXTERN int	restricted INIT(= FALSE);restricted778,29399
EXTERN int	secure INIT(= FALSE);secure780,29471
EXTERN int	textlock INIT(= 0);textlock785,29630
EXTERN int	curbuf_lock INIT(= 0);curbuf_lock789,29759
EXTERN int	allbuf_lock INIT(= 0);allbuf_lock792,29883
EXTERN int	sandbox INIT(= 0);sandbox798,30102
EXTERN int	silent_mode INIT(= FALSE);silent_mode804,30254
EXTERN pos_T	VIsual;		// start position of active Visual selectionVIsual808,30362
EXTERN int	VIsual_active INIT(= FALSE);VIsual_active809,30429
EXTERN int	VIsual_select INIT(= FALSE);VIsual_select811,30506
EXTERN int	VIsual_reselect;VIsual_reselect813,30583
EXTERN int	VIsual_mode INIT(= 'v');VIsual_mode817,30695
EXTERN int	redo_VIsual_busy INIT(= FALSE);redo_VIsual_busy820,30759
EXTERN int	resel_VIsual_mode INIT(= NUL);	// 'v', 'V', or Ctrl-Vresel_VIsual_mode826,30892
EXTERN linenr_T	resel_VIsual_line_count;	// number of linesresel_VIsual_line_count827,30957
EXTERN colnr_T	resel_VIsual_vcol;		// nr of cols or end colresel_VIsual_vcol828,31017
EXTERN pos_T	where_paste_started;where_paste_started834,31226
EXTERN int     did_ai INIT(= FALSE);did_ai842,31552
EXTERN colnr_T	ai_col INIT(= 0);ai_col848,31737
EXTERN int     end_comment_pending INIT(= NUL);end_comment_pending856,32077
EXTERN int     did_syncbind INIT(= FALSE);did_syncbind864,32424
EXTERN int	did_si INIT(= FALSE);did_si871,32641
EXTERN int	can_si INIT(= FALSE);can_si877,32792
EXTERN int	can_si_back INIT(= FALSE);can_si_back883,32943
EXTERN int	old_indent INIT(= 0);	// for ^^D command in insert modeold_indent886,32989
EXTERN pos_T	saved_cursor		// w_cursor before formatting text.saved_cursor888,33057
EXTERN pos_T	Insstart;		// This is where the latestInsstart897,33192
EXTERN pos_T	Insstart_orig;Insstart_orig903,33492
EXTERN int	orig_line_count INIT(= 0);  // Line count when "gR" startedorig_line_count908,33556
EXTERN int	vr_lines_changed INIT(= 0); // #Lines changed by "gR" so farvr_lines_changed909,33627
EXTERN JMP_BUF x_jump_env;x_jump_env913,33799
#define DBCS_JPN	DBCS_JPN921,34034
#define DBCS_JPNU	DBCS_JPNU922,34064
#define DBCS_KOR	DBCS_KOR923,34097
#define DBCS_KORU	DBCS_KORU924,34127
#define DBCS_CHS	DBCS_CHS925,34160
#define DBCS_CHSU	DBCS_CHSU926,34192
#define DBCS_CHT	DBCS_CHT927,34225
#define DBCS_CHTU	DBCS_CHTU928,34256
#define DBCS_2BYTE	DBCS_2BYTE929,34289
#define DBCS_DEBUG	DBCS_DEBUG930,34320
EXTERN int	enc_dbcs INIT(= 0);		// One of DBCS_xxx values ifenc_dbcs932,34343
EXTERN int	enc_unicode INIT(= 0);	// 2: UCS-2 or UTF-16, 4: UCS-4enc_unicode934,34427
EXTERN int	enc_utf8 INIT(= FALSE);		// UTF-8 encoded Unicodeenc_utf8935,34493
EXTERN int	enc_latin1like INIT(= TRUE);	// 'encoding' is latin1 comp.enc_latin1like936,34554
EXTERN int	enc_codepage INIT(= -1);enc_codepage940,34802
EXTERN int	enc_latin9 INIT(= FALSE);	// 'encoding' is latin9enc_latin9941,34838
EXTERN int	has_mbyte INIT(= 0);		// any multi-byte encodinghas_mbyte943,34906
EXTERN char	mb_bytelen_tab[256];mb_bytelen_tab949,35079
EXTERN vimconv_T input_conv;			// type of input conversioninput_conv953,35202
EXTERN vimconv_T output_conv;			// type of output conversionoutput_conv954,35261
EXTERN size_t (*iconv) (iconv_t cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);iconv979,36498
EXTERN iconv_t (*iconv_open) (const char *tocode, const char *fromcode);iconv_open980,36613
EXTERN int (*iconv_close) (iconv_t cd);iconv_close981,36686
EXTERN int (*iconvctl) (iconv_t cd, int request, void *argument);iconvctl982,36726
EXTERN int* (*iconv_errno) (void);iconv_errno983,36792
EXTERN GtkIMContext	*xic INIT(= NULL);xic989,36874
EXTERN colnr_T		preedit_start_col INIT(= MAXCOL);preedit_start_col997,37292
EXTERN colnr_T		preedit_end_col INIT(= MAXCOL);preedit_end_col998,37342
EXTERN int		xim_changed_while_preediting INIT(= FALSE);xim_changed_while_preediting1002,37501
EXTERN XIC		xic INIT(= NULL);xic1004,37564
EXTERN guicolor_T	xim_fg_color INIT(= INVALCOLOR);xim_fg_color1007,37619
EXTERN guicolor_T	xim_bg_color INIT(= INVALCOLOR);xim_bg_color1008,37670
EXTERN int	State INIT(= NORMAL);	// This is the current state of theState1021,38096
EXTERN int	debug_mode INIT(= FALSE);debug_mode1024,38211
EXTERN int	finish_op INIT(= FALSE);// TRUE while an operator is pendingfinish_op1027,38256
EXTERN long	opcount INIT(= 0);	// count for pending operatoropcount1028,38328
EXTERN int	motion_force INIT(= 0); // motion force for pending operatormotion_force1029,38389
EXTERN int exmode_active INIT(= 0);	// zero, EXMODE_NORMAL or EXMODE_VIMexmode_active1034,38490
EXTERN int pending_exmode_active INIT(= FALSE);pending_exmode_active1037,38628
EXTERN int ex_no_reprint INIT(= FALSE); // no need to print after z or pex_no_reprint1039,38677
EXTERN int reg_recording INIT(= 0);	// register for recording  or zeroreg_recording1041,38751
EXTERN int reg_executing INIT(= 0);	// register being executed or zeroreg_executing1042,38822
EXTERN int seenModifyOtherKeys INIT(= FALSE);seenModifyOtherKeys1046,38995
EXTERN int no_mapping INIT(= FALSE);	// currently no mapping allowedno_mapping1048,39042
EXTERN int no_zero_mapping INIT(= 0);	// mapping zero not allowedno_zero_mapping1049,39111
EXTERN int allow_keys INIT(= FALSE);	// allow key codes when no_mappingallow_keys1050,39177
EXTERN int no_reduce_keys INIT(= FALSE);  // do not apply Ctrl, Shift and Altno_reduce_keys1052,39264
EXTERN int no_u_sync INIT(= 0);		// Don't call u_sync()no_u_sync1054,39363
EXTERN int u_sync_once INIT(= 0);	// Call u_sync() once when evaluatingu_sync_once1056,39436
EXTERN int restart_edit INIT(= 0);	// call edit when next cmd finishedrestart_edit1060,39539
EXTERN int arrow_used;			// Normally FALSE, set to TRUE afterarrow_used1061,39610
EXTERN int	ins_at_eol INIT(= FALSE); // put cursor after eol whenins_at_eol1065,39784
EXTERN int	no_abbr INIT(= TRUE);	// TRUE when no abbreviations loadedno_abbr1068,39890
EXTERN char_u	*exe_name;		// the name of the executableexe_name1071,39981
EXTERN int	dont_scroll INIT(= FALSE);// don't use scrollbars when TRUEdont_scroll1075,40070
EXTERN int	mapped_ctrl_c INIT(= FALSE); // modes where CTRL-C is mappedmapped_ctrl_c1077,40148
EXTERN int	ctrl_c_interrupts INIT(= TRUE);	// CTRL-C sets got_intctrl_c_interrupts1078,40220
EXTERN cmdmod_T	cmdmod;			// Ex command modifierscmdmod1080,40287
EXTERN int	is_export INIT(= FALSE);    // :export {cmd}is_export1082,40338
EXTERN int	msg_silent INIT(= 0);	// don't print messagesmsg_silent1084,40395
EXTERN int	emsg_silent INIT(= 0);	// don't print error messagesemsg_silent1085,40452
EXTERN int	emsg_noredir INIT(= 0);	// don't redirect error messagesemsg_noredir1086,40516
EXTERN int	cmd_silent INIT(= FALSE); // don't echo the command linecmd_silent1087,40584
EXTERN int	swap_exists_action INIT(= SEA_NONE);swap_exists_action1089,40653
EXTERN int	swap_exists_did_quit INIT(= FALSE);swap_exists_did_quit1092,40759
EXTERN char_u	*IObuff;		// sprintf's are done in this buffer,IObuff1095,40846
EXTERN char_u	*NameBuff;		// file names are expanded in thisNameBuff1097,40931
EXTERN char	msg_buf[MSG_BUF_LEN];	// small buffer for messagesmsg_buf1099,41025
EXTERN int	RedrawingDisabled INIT(= 0);RedrawingDisabled1102,41127
EXTERN int	readonlymode INIT(= FALSE); // Set to TRUE for "view"readonlymode1104,41168
EXTERN int	recoverymode INIT(= FALSE); // Set to TRUE for "-r" optionrecoverymode1105,41233
EXTERN typebuf_T typebuf		// typeahead buffertypebuf1107,41304
EXTERN int	ex_normal_busy INIT(= 0); // recursiveness of ex_normal()ex_normal_busy1112,41422
EXTERN int	ex_normal_lock INIT(= 0); // forbid use of ex_normal()ex_normal_lock1113,41491
EXTERN int	ignore_script INIT(= FALSE);  // ignore script inputignore_script1115,41574
EXTERN int	stop_insert_mode;	// for ":stopinsert" and 'insertmode'stop_insert_mode1117,41645
EXTERN int	KeyTyped;		// TRUE if user typed current charKeyTyped1119,41713
EXTERN int	KeyStuffed;		// TRUE if current char from stuffbufKeyStuffed1120,41770
EXTERN int	vgetc_im_active;	// Input Method was active for lastvgetc_im_active1122,41857
EXTERN int	maptick INIT(= 0);	// tick for each non-mapped charmaptick1125,41968
EXTERN int	must_redraw INIT(= 0);	    // type of redraw necessarymust_redraw1127,42032
EXTERN int	skip_redraw INIT(= FALSE);  // skip redraw onceskip_redraw1128,42098
EXTERN int	do_redraw INIT(= FALSE);    // extra redraw oncedo_redraw1129,42157
EXTERN int	need_diff_redraw INIT(= 0); // need to call diff_redraw()need_diff_redraw1131,42234
EXTERN int	need_highlight_changed INIT(= TRUE);need_highlight_changed1134,42311
#define NSCRIPT NSCRIPT1136,42360
EXTERN FILE	*scriptin[NSCRIPT];	    // streams to read script fromscriptin1137,42379
EXTERN int	curscript INIT(= 0);	    // index in scriptin[]curscript1138,42446
EXTERN FILE	*scriptout  INIT(= NULL);   // stream to write script toscriptout1139,42505
EXTERN int	read_cmd_fd INIT(= 0);	    // fd to read commands fromread_cmd_fd1140,42574
EXTERN volatile sig_atomic_t got_int INIT(= FALSE); // set to TRUE when interruptgot_int1143,42706
EXTERN int	term_console INIT(= FALSE); // set to TRUE when console usedterm_console1146,42837
EXTERN int	termcap_active INIT(= FALSE);	// set by starttermcap()termcap_active1148,42916
EXTERN int	cur_tmode INIT(= TMODE_COOK);	// input terminal modecur_tmode1149,42982
EXTERN int	bangredo INIT(= FALSE);	    // set to TRUE with ! commandbangredo1150,43046
EXTERN int	searchcmdlen;		    // length of previous search cmdsearchcmdlen1151,43115
EXTERN int	reg_do_extmatch INIT(= 0);  // Used when compiling regexp:reg_do_extmatch1153,43197
EXTERN reg_extmatch_T *re_extmatch_in INIT(= NULL); // Used by vim_regexec():re_extmatch_in1156,43348
EXTERN reg_extmatch_T *re_extmatch_out INIT(= NULL); // Set by vim_regexec()re_extmatch_out1158,43462
EXTERN int	did_outofmem_msg INIT(= FALSE);did_outofmem_msg1162,43586
EXTERN int	did_swapwrite_msg INIT(= FALSE);did_swapwrite_msg1164,43669
EXTERN int	undo_off INIT(= FALSE);	    // undo switched off for nowundo_off1166,43756
EXTERN int	global_busy INIT(= 0);	    // set when :global is executingglobal_busy1167,43824
EXTERN int	listcmd_busy INIT(= FALSE); // set when :argdo, :windo orlistcmd_busy1168,43895
EXTERN int	need_start_insertmode INIT(= FALSE);need_start_insertmode1170,43996
EXTERN char_u	*last_cmdline INIT(= NULL); // last command line (for ":)last_cmdline1172,44079
EXTERN char_u	*repeat_cmdline INIT(= NULL); // command line for "."repeat_cmdline1173,44151
EXTERN char_u	*new_last_cmdline INIT(= NULL);	// new value for last_cmdlinenew_last_cmdline1174,44219
EXTERN char_u	*autocmd_fname INIT(= NULL); // fname for <afile> on cmdlineautocmd_fname1175,44295
EXTERN int	autocmd_fname_full;	     // autocmd_fname is full pathautocmd_fname_full1176,44370
EXTERN int	autocmd_bufnr INIT(= 0);     // fnum for <abuf> on cmdlineautocmd_bufnr1177,44436
EXTERN char_u	*autocmd_match INIT(= NULL); // name for <amatch> on cmdlineautocmd_match1178,44506
EXTERN int	did_cursorhold INIT(= FALSE); // set when CursorHold t'gerddid_cursorhold1179,44581
EXTERN pos_T	last_cursormoved	      // for CursorMoved eventlast_cursormoved1180,44652
EXTERN int	postponed_split INIT(= 0);  // for CTRL-W CTRL-] commandpostponed_split1186,44758
EXTERN int	postponed_split_flags INIT(= 0);  // args for win_split()postponed_split_flags1187,44826
EXTERN int	postponed_split_tab INIT(= 0);  // cmdmod.tabpostponed_split_tab1188,44895
EXTERN int	g_do_tagpreview INIT(= 0);  // for tag preview commands:g_do_tagpreview1190,44973
EXTERN int	g_tag_at_cursor INIT(= FALSE); // whether the tag command comesg_tag_at_cursor1193,45085
EXTERN int	replace_offset INIT(= 0);   // offset for replace_push()replace_offset1197,45250
EXTERN char_u	*escape_chars INIT(= (char_u *)" \t\\\"|");escape_chars1199,45319
EXTERN int	keep_help_flag INIT(= FALSE); // doing :ta from help filekeep_help_flag1202,45417
EXTERN char_u	*empty_option INIT(= (char_u *)"");empty_option1209,45655
EXTERN int  redir_off INIT(= FALSE);	// no redirection for a momentredir_off1211,45706
EXTERN FILE *redir_fd INIT(= NULL);	// message redirection fileredir_fd1212,45774
EXTERN int  redir_reg INIT(= 0);	// message redirection registerredir_reg1214,45855
EXTERN int  redir_vname INIT(= 0);	// message redirection variableredir_vname1215,45920
EXTERN int  redir_execute INIT(= 0);	// execute() redirectionredir_execute1216,45987
EXTERN char_u	langmap_mapchar[256];	// mapping for language keyslangmap_mapchar1220,46077
EXTERN int  save_p_ls INIT(= -1);	// Save 'laststatus' settingsave_p_ls1224,46171
EXTERN int  save_p_wmh INIT(= -1);	// Save 'winminheight' settingsave_p_wmh1225,46234
EXTERN int  wild_menu_showing INIT(= 0);wild_menu_showing1226,46300
# define WM_SHOWN	WM_SHOWN1227,46341
# define WM_SCROLLED	WM_SCROLLED1228,46382
EXTERN char_u	toupper_tab[256];	// table for toupper()toupper_tab1232,46459
EXTERN char_u	tolower_tab[256];	// table for tolower()tolower_tab1233,46514
EXTERN char	breakat_flags[256];	// which characters are in 'breakat'breakat_flags1237,46599
EXTERN char *longVersion;longVersion1245,46855
EXTERN char_u	*homedir INIT(= NULL);homedir1265,47319
EXTERN char_u	*globaldir INIT(= NULL);globaldir1270,47562
EXTERN int	lcs_eol INIT(= '$');lcs_eol1273,47640
EXTERN int	lcs_ext INIT(= NUL);lcs_ext1274,47672
EXTERN int	lcs_prec INIT(= NUL);lcs_prec1275,47704
EXTERN int	lcs_nbsp INIT(= NUL);lcs_nbsp1276,47737
EXTERN int	lcs_space INIT(= NUL);lcs_space1277,47770
EXTERN int	lcs_tab1 INIT(= NUL);lcs_tab11278,47804
EXTERN int	lcs_tab2 INIT(= NUL);lcs_tab21279,47837
EXTERN int	lcs_tab3 INIT(= NUL);lcs_tab31280,47870
EXTERN int	lcs_trail INIT(= NUL);lcs_trail1281,47903
EXTERN int	lcs_conceal INIT(= ' ');lcs_conceal1283,47957
EXTERN int	fill_stl INIT(= ' ');fill_stl1287,48039
EXTERN int	fill_stlnc INIT(= ' ');fill_stlnc1288,48072
EXTERN int	fill_vert INIT(= ' ');fill_vert1289,48107
EXTERN int	fill_fold INIT(= '-');fill_fold1290,48141
EXTERN int	fill_diff INIT(= '-');fill_diff1291,48175
EXTERN int	disable_fold_update INIT(= 0);disable_fold_update1294,48230
EXTERN int	km_stopsel INIT(= FALSE);km_stopsel1298,48337
EXTERN int	km_startsel INIT(= FALSE);km_startsel1299,48374
EXTERN int	cmdwin_type INIT(= 0);	// type of cmdline window or 0cmdwin_type1302,48432
EXTERN int	cmdwin_result INIT(= 0); // result of cmdline window or 0cmdwin_result1303,48497
EXTERN char_u no_lines_msg[]	INIT(= N_("--No lines in buffer--"));no_lines_msg1306,48574
EXTERN long	sub_nsubs;	// total number of substitutionssub_nsubs1313,48792
EXTERN linenr_T	sub_nlines;	// total number of lines changedsub_nlines1314,48848
EXTERN char_u	wim_flags[4];wim_flags1317,48946
# define STL_IN_ICON	STL_IN_ICON1321,49089
# define STL_IN_TITLE	STL_IN_TITLE1322,49112
EXTERN int      stl_syntax INIT(= 0);stl_syntax1323,49136
EXTERN int	no_hlsearch INIT(= FALSE);no_hlsearch1328,49243
EXTERN BalloonEval	*balloonEval INIT(= NULL);balloonEval1332,49342
EXTERN int		balloonEvalForTerm INIT(= FALSE);balloonEvalForTerm1333,49388
EXTERN int bevalServers INIT(= 0);bevalServers1335,49467
#  define BEVAL_NETBEANS	BEVAL_NETBEANS1336,49502
# define OPT_PRINT_TOP	OPT_PRINT_TOP1349,49789
# define OPT_PRINT_BOT	OPT_PRINT_BOT1350,49815
# define OPT_PRINT_LEFT	OPT_PRINT_LEFT1351,49841
# define OPT_PRINT_RIGHT	OPT_PRINT_RIGHT1352,49868
# define OPT_PRINT_HEADERHEIGHT	OPT_PRINT_HEADERHEIGHT1353,49895
# define OPT_PRINT_SYNTAX	OPT_PRINT_SYNTAX1354,49929
# define OPT_PRINT_NUMBER	OPT_PRINT_NUMBER1355,49957
# define OPT_PRINT_WRAP	OPT_PRINT_WRAP1356,49985
# define OPT_PRINT_DUPLEX	OPT_PRINT_DUPLEX1357,50012
# define OPT_PRINT_PORTRAIT	OPT_PRINT_PORTRAIT1358,50040
# define OPT_PRINT_PAPER	OPT_PRINT_PAPER1359,50070
# define OPT_PRINT_COLLATE	OPT_PRINT_COLLATE1360,50098
# define OPT_PRINT_JOBSPLIT	OPT_PRINT_JOBSPLIT1361,50128
# define OPT_PRINT_FORMFEED	OPT_PRINT_FORMFEED1362,50159
# define OPT_PRINT_NUM_OPTIONS	OPT_PRINT_NUM_OPTIONS1364,50191
EXTERN option_table_T printer_opts[OPT_PRINT_NUM_OPTIONS]printer_opts1366,50226
# define PRT_UNIT_NONE	PRT_UNIT_NONE1389,50922
# define PRT_UNIT_PERC	PRT_UNIT_PERC1390,50948
# define PRT_UNIT_INCH	PRT_UNIT_INCH1391,50973
# define PRT_UNIT_MM	PRT_UNIT_MM1392,50998
# define PRT_UNIT_POINT	PRT_UNIT_POINT1393,51021
# define PRT_UNIT_NAMES PRT_UNIT_NAMES1394,51047
EXTERN linenr_T printer_page_num;printer_page_num1400,51255
EXTERN char	*xterm_display INIT(= NULL);xterm_display1405,51342
EXTERN int	xterm_display_allocated INIT(= FALSE);xterm_display_allocated1408,51457
EXTERN Display	*xterm_dpy INIT(= NULL);xterm_dpy1411,51533
EXTERN XtAppContext app_context INIT(= (XtAppContext)NULL);app_context1414,51634
EXTERN guint32	gtk_socket_id INIT(= 0);gtk_socket_id1418,51722
EXTERN int	echo_wid_arg INIT(= FALSE);	// --echo-wid argumentecho_wid_arg1419,51762
EXTERN long_u	win_socket_id INIT(= 0);win_socket_id1427,51952
EXTERN int	typebuf_was_filled INIT(= FALSE); // received text from clienttypebuf_was_filled1431,52052
EXTERN char_u	*serverName INIT(= NULL);	// name of the serverserverName1436,52189
EXTERN Window	commWindow INIT(= None);commWindow1438,52268
EXTERN Window	clientWindow INIT(= None);clientWindow1439,52307
EXTERN Atom	commProperty INIT(= None);commProperty1440,52348
EXTERN char_u	*serverDelayedStartName INIT(= NULL);serverDelayedStartName1441,52387
typedef int HWND;HWND1444,52461
EXTERN HWND	clientWindow INIT(= 0);clientWindow1446,52488
EXTERN int	term_is_xterm INIT(= FALSE);	// xterm-like 'term'term_is_xterm1451,52574
EXTERN char	psepc INIT(= '\\');	// normal path separator characterpsepc1455,52672
EXTERN char	psepcN INIT(= '/');	// abnormal path separator characterpsepcN1456,52739
EXTERN int	virtual_op INIT(= MAYBE);virtual_op1463,53019
EXTERN disptick_T	display_tick INIT(= 0);display_tick1467,53138
EXTERN linenr_T		spell_redraw_lnum INIT(= 0);spell_redraw_lnum1473,53315
EXTERN int		need_cursor_line_redraw INIT(= FALSE);need_cursor_line_redraw1478,53438
EXTERN garray_T error_gaerror_ga1483,53591
EXTERN char *netbeansArg INIT(= NULL);	// the -nb[:host:port:passwd] argnetbeansArg1491,53699
EXTERN int netbeansFireChanges INIT(= 1); // send buffer changes if != 0netbeansFireChanges1492,53772
EXTERN int netbeansForcedQuit INIT(= 0);// don't write modified filesnetbeansForcedQuit1493,53845
EXTERN int netbeansReadFile INIT(= 1);	// OK to read from disk if != 0netbeansReadFile1494,53915
EXTERN int netbeansSuppressNoLines INIT(= 0); // skip "No lines in buffer"netbeansSuppressNoLines1495,53986
EXTERN char e_abort[]		INIT(= N_("E470: Command aborted"));e_abort1502,54207
EXTERN char e_argreq[]		INIT(= N_("E471: Argument required"));e_argreq1503,54267
EXTERN char e_backslash[]	INIT(= N_("E10: \\ should be followed by /, ? or &"));e_backslash1504,54330
EXTERN char e_cmdwin[]	INIT(= N_("E11: Invalid in command-line window; <CR> executes, CTRL-C quits"));e_cmdwin1506,54430
EXTERN char e_curdir[]	INIT(= N_("E12: Command not allowed from exrc/vimrc in current dir or tag search"));e_curdir1508,54540
EXTERN char e_endif[]		INIT(= N_("E171: Missing :endif"));e_endif1510,54665
EXTERN char e_catch[]		INIT(= N_("E603: :catch without :try"));e_catch1511,54724
EXTERN char e_finally[]		INIT(= N_("E606: :finally without :try"));e_finally1512,54788
EXTERN char e_finally_dup[]	INIT(= N_("E607: multiple :finally"));e_finally_dup1513,54856
EXTERN char e_endtry[]		INIT(= N_("E600: Missing :endtry"));e_endtry1514,54923
EXTERN char e_no_endtry[]	INIT(= N_("E602: :endtry without :try"));e_no_endtry1515,54984
EXTERN char e_endwhile[]	INIT(= N_("E170: Missing :endwhile"));e_endwhile1516,55052
EXTERN char e_endfor[]		INIT(= N_("E170: Missing :endfor"));e_endfor1517,55116
EXTERN char e_while[]		INIT(= N_("E588: :endwhile without :while"));e_while1518,55177
EXTERN char e_for[]		INIT(= N_("E588: :endfor without :for"));e_for1519,55246
EXTERN char e_exists[]	INIT(= N_("E13: File exists (add ! to override)"));e_exists1521,55316
EXTERN char e_failed[]	INIT(= N_("E472: Command failed"));e_failed1522,55391
EXTERN char e_fontset[]	INIT(= N_("E234: Unknown fontset: %s"));e_fontset1524,55498
EXTERN char e_font[]		INIT(= N_("E235: Unknown font: %s"));e_font1528,55731
EXTERN char e_fontwidth[]	INIT(= N_("E236: Font \"%s\" is not fixed-width"));e_fontwidth1531,55850
EXTERN char e_internal[]	INIT(= N_("E473: Internal error"));e_internal1533,55935
EXTERN char e_intern2[]	INIT(= N_("E685: Internal error: %s"));e_intern21534,55996
EXTERN char e_interr[]	INIT(= N_("Interrupted"));e_interr1535,56060
EXTERN char e_invarg[]	INIT(= N_("E474: Invalid argument"));e_invarg1536,56110
EXTERN char e_invarg2[]	INIT(= N_("E475: Invalid argument: %s"));e_invarg21537,56171
EXTERN char e_duparg2[]	INIT(= N_("E983: Duplicate argument: %s"));e_duparg21538,56237
EXTERN char e_invargval[]	INIT(= N_("E475: Invalid value for argument %s"));e_invargval1539,56305
EXTERN char e_invargNval[]	INIT(= N_("E475: Invalid value for argument %s: %s"));e_invargNval1540,56382
EXTERN char e_invexpr2[]	INIT(= N_("E15: Invalid expression: %s"));e_invexpr21542,56481
EXTERN char e_invrange[]	INIT(= N_("E16: Invalid range"));e_invrange1544,56556
EXTERN char e_invcmd[]	INIT(= N_("E476: Invalid command"));e_invcmd1545,56615
EXTERN char e_isadir2[]	INIT(= N_("E17: \"%s\" is a directory"));e_isadir21547,56740
EXTERN char e_libcall[]	INIT(= N_("E364: Library call failed for \"%s()\""));e_libcall1550,56833
EXTERN char e_fsync[]		INIT(= N_("E667: Fsync failed"));e_fsync1553,56936
EXTERN char e_loadlib[]	INIT(= N_("E370: Could not load library %s"));e_loadlib1564,57287
EXTERN char e_loadfunc[]	INIT(= N_("E448: Could not load library function %s"));e_loadfunc1565,57358
EXTERN char e_markinval[]	INIT(= N_("E19: Mark has invalid line number"));e_markinval1567,57446
EXTERN char e_marknotset[]	INIT(= N_("E20: Mark not set"));e_marknotset1568,57521
EXTERN char e_modifiable[]	INIT(= N_("E21: Cannot make changes, 'modifiable' is off"));e_modifiable1569,57581
EXTERN char e_nesting[]	INIT(= N_("E22: Scripts nested too deep"));e_nesting1570,57669
EXTERN char e_noalt[]		INIT(= N_("E23: No alternate file"));e_noalt1571,57737
EXTERN char e_noabbr[]	INIT(= N_("E24: No such abbreviation"));e_noabbr1572,57798
EXTERN char e_nobang[]	INIT(= N_("E477: No ! allowed"));e_nobang1573,57862
EXTERN char e_nogvim[]	INIT(= N_("E25: GUI cannot be used: Not enabled at compile time"));e_nogvim1575,57961
EXTERN char e_nohebrew[]	INIT(= N_("E26: Hebrew cannot be used: Not enabled at compile time\n"));e_nohebrew1578,58082
EXTERN char e_nofarsi[]		INIT(= N_("E27: Farsi support has been removed\n"));e_nofarsi1580,58187
EXTERN char e_noarabic[]	INIT(= N_("E800: Arabic cannot be used: Not enabled at compile time\n"));e_noarabic1582,58285
EXTERN char e_nogroup[]	INIT(= N_("E28: No such highlight group name: %s"));e_nogroup1585,58446
EXTERN char e_noinstext[]	INIT(= N_("E29: No inserted text yet"));e_noinstext1587,58530
EXTERN char e_nolastcmd[]	INIT(= N_("E30: No previous command line"));e_nolastcmd1588,58597
EXTERN char e_nomap[]		INIT(= N_("E31: No such mapping"));e_nomap1589,58668
EXTERN char e_nomatch[]	INIT(= N_("E479: No match"));e_nomatch1590,58727
EXTERN char e_nomatch2[]	INIT(= N_("E480: No match: %s"));e_nomatch21591,58781
EXTERN char e_noname[]	INIT(= N_("E32: No file name"));e_noname1592,58840
EXTERN char e_nopresub[]	INIT(= N_("E33: No previous substitute regular expression"));e_nopresub1593,58896
EXTERN char e_noprev[]	INIT(= N_("E34: No previous command"));e_noprev1594,58983
EXTERN char e_noprevre[]	INIT(= N_("E35: No previous regular expression"));e_noprevre1595,59046
EXTERN char e_norange[]	INIT(= N_("E481: No range allowed"));e_norange1596,59122
EXTERN char e_noroom[]	INIT(= N_("E36: Not enough room"));e_noroom1597,59184
EXTERN char e_noserver[]	INIT(= N_("E247: no registered server named \"%s\""));e_noserver1599,59268
EXTERN char e_notcreate[]	INIT(= N_("E482: Can't create file %s"));e_notcreate1601,59355
EXTERN char e_notmp[]		INIT(= N_("E483: Can't get temp file name"));e_notmp1602,59423
EXTERN char e_notopen[]	INIT(= N_("E484: Can't open file %s"));e_notopen1603,59492
EXTERN char e_notread[]	INIT(= N_("E485: Can't read file %s"));e_notread1604,59556
EXTERN char e_null[]		INIT(= N_("E38: Null argument"));e_null1605,59620
EXTERN char e_number_exp[]	INIT(= N_("E39: Number expected"));e_number_exp1607,59749
EXTERN char e_openerrf[]	INIT(= N_("E40: Can't open errorfile %s"));e_openerrf1610,59840
EXTERN char e_opendisp[]	INIT(= N_("E233: cannot open display"));e_opendisp1613,59967
EXTERN char e_outofmem[]	INIT(= N_("E41: Out of memory!"));e_outofmem1615,60040
EXTERN char e_patnotf[]		INIT(= N_("Pattern not found"));e_patnotf1616,60100
EXTERN char e_patnotf2[]	INIT(= N_("E486: Pattern not found: %s"));e_patnotf21617,60158
EXTERN char e_positive[]	INIT(= N_("E487: Argument must be positive"));e_positive1618,60226
EXTERN char e_prev_dir[]	INIT(= N_("E459: Cannot go back to previous directory"));e_prev_dir1620,60341
EXTERN char e_quickfix[]	INIT(= N_("E42: No Errors"));e_quickfix1624,60453
EXTERN char e_loclist[]		INIT(= N_("E776: No location list"));e_loclist1625,60508
EXTERN char e_re_damg[]		INIT(= N_("E43: Damaged match string"));e_re_damg1627,60578
EXTERN char e_re_corr[]		INIT(= N_("E44: Corrupted regexp program"));e_re_corr1628,60644
EXTERN char e_readonly[]	INIT(= N_("E45: 'readonly' option is set (add ! to override)"));e_readonly1629,60714
EXTERN char e_undefvar[]	INIT(= N_("E121: Undefined variable: %s"));e_undefvar1631,60821
EXTERN char e_letwrong[]	INIT(= N_("E734: Wrong variable type for %s="));e_letwrong1632,60890
EXTERN char e_illvar[]		INIT(= N_("E461: Illegal variable name: %s"));e_illvar1633,60964
EXTERN char e_cannot_mod[]	INIT(= N_("E995: Cannot modify existing variable"));e_cannot_mod1634,61035
EXTERN char e_readonlyvar[]	INIT(= N_("E46: Cannot change read-only variable \"%s\""));e_readonlyvar1635,61115
EXTERN char e_readonlysbx[]	INIT(= N_("E794: Cannot set variable in the sandbox: \"%s\""));e_readonlysbx1636,61203
EXTERN char e_stringreq[]	INIT(= N_("E928: String required"));e_stringreq1637,61295
EXTERN char e_emptykey[]	INIT(= N_("E713: Cannot use empty key for Dictionary"));e_emptykey1638,61358
EXTERN char e_dictreq[]		INIT(= N_("E715: Dictionary required"));e_dictreq1639,61440
EXTERN char e_listidx[]		INIT(= N_("E684: list index out of range: %ld"));e_listidx1640,61506
EXTERN char e_blobidx[]		INIT(= N_("E979: Blob index out of range: %ld"));e_blobidx1641,61581
EXTERN char e_invalblob[]	INIT(= N_("E978: Invalid operation for Blob"));e_invalblob1642,61656
EXTERN char e_toomanyarg[]	INIT(= N_("E118: Too many arguments for function: %s"));e_toomanyarg1643,61730
EXTERN char e_toofewarg[]	INIT(= N_("E119: Not enough arguments for function: %s"));e_toofewarg1644,61814
EXTERN char e_func_deleted[]	INIT(= N_("E933: Function was deleted: %s"));e_func_deleted1645,61899
EXTERN char e_dictkey[]		INIT(= N_("E716: Key not present in Dictionary: %s"));e_dictkey1646,61974
EXTERN char e_listreq[]		INIT(= N_("E714: List required"));e_listreq1647,62054
EXTERN char e_listblobreq[]	INIT(= N_("E897: List or Blob required"));e_listblobreq1648,62114
EXTERN char e_listdictarg[]	INIT(= N_("E712: Argument of %s must be a List or Dictionary"));e_listdictarg1649,62185
EXTERN char e_listdictblobarg[]	INIT(= N_("E896: Argument of %s must be a List, Dictionary or Blob"));e_listdictblobarg1650,62278
EXTERN char e_modulus[]		INIT(= N_("E804: Cannot use '%' with Float"));e_modulus1651,62381
EXTERN char e_inval_string[]	INIT(= N_("E908: using an invalid value as a String"));e_inval_string1652,62453
EXTERN char e_const_option[]	INIT(= N_("E996: Cannot lock an option"));e_const_option1653,62538
EXTERN char e_unknown_option[]	INIT(= N_("E113: Unknown option: %s"));e_unknown_option1654,62610
EXTERN char e_letunexp[]	INIT(= N_("E18: Unexpected characters in :let"));e_letunexp1655,62681
EXTERN char e_readerrf[]	INIT(= N_("E47: Error while reading errorfile"));e_readerrf1658,62784
EXTERN char e_sandbox[]	INIT(= N_("E48: Not allowed in sandbox"));e_sandbox1661,62886
EXTERN char e_secure[]	INIT(= N_("E523: Not allowed here"));e_secure1663,62960
EXTERN char e_screenmode[]	INIT(= N_("E359: Screen mode setting not supported"));e_screenmode1666,63115
EXTERN char e_scroll[]	INIT(= N_("E49: Invalid scroll size"));e_scroll1668,63204
EXTERN char e_shellempty[]	INIT(= N_("E91: 'shell' option is empty"));e_shellempty1669,63267
EXTERN char e_signdata[]	INIT(= N_("E255: Couldn't read in sign data!"));e_signdata1671,63393
EXTERN char e_swapclose[]	INIT(= N_("E72: Close error on swap file"));e_swapclose1673,63474
EXTERN char e_tagstack[]	INIT(= N_("E73: tag stack empty"));e_tagstack1674,63545
EXTERN char e_toocompl[]	INIT(= N_("E74: Command too complex"));e_toocompl1675,63606
EXTERN char e_longname[]	INIT(= N_("E75: Name too long"));e_longname1676,63671
EXTERN char e_toomsbra[]	INIT(= N_("E76: Too many ["));e_toomsbra1677,63730
EXTERN char e_toomany[]	INIT(= N_("E77: Too many file names"));e_toomany1678,63786
EXTERN char e_trailing[]	INIT(= N_("E488: Trailing characters"));e_trailing1679,63850
EXTERN char e_umark[]		INIT(= N_("E78: Unknown mark"));e_umark1680,63916
EXTERN char e_wildexpand[]	INIT(= N_("E79: Cannot expand wildcards"));e_wildexpand1681,63972
EXTERN char e_winheight[]	INIT(= N_("E591: 'winheight' cannot be smaller than 'winminheight'"));e_winheight1682,64043
EXTERN char e_winwidth[]	INIT(= N_("E592: 'winwidth' cannot be smaller than 'winminwidth'"));e_winwidth1683,64140
EXTERN char e_write[]		INIT(= N_("E80: Error while writing"));e_write1684,64234
EXTERN char e_zerocount[]	INIT(= N_("E939: Positive count required"));e_zerocount1685,64297
EXTERN char e_usingsid[]	INIT(= N_("E81: Using <SID> not in a script context"));e_usingsid1687,64385
EXTERN char e_missing_paren[]	INIT(= N_("E107: Missing parentheses: %s"));e_missing_paren1688,64466
EXTERN char e_missing_close[]	INIT(= N_("E110: Missing ')'"));e_missing_close1689,64541
EXTERN char e_missing_dict_colon[] INIT(= N_("E720: Missing colon in Dictionary: %s"));e_missing_dict_colon1690,64604
EXTERN char e_duplicate_key[]	INIT(= N_("E721: Duplicate key in Dictionary: \"%s\""));e_duplicate_key1691,64692
EXTERN char e_missing_dict_comma[] INIT(= N_("E722: Missing comma in Dictionary: %s"));e_missing_dict_comma1692,64779
EXTERN char e_missing_dict_end[]    INIT(= N_("E723: Missing end of Dictionary '}': %s"));e_missing_dict_end1693,64867
EXTERN char e_invexprmsg[]	INIT(= N_("E449: Invalid expression received"));e_invexprmsg1696,64990
EXTERN char e_guarded[]	INIT(= N_("E463: Region is guarded, cannot modify"));e_guarded1699,65099
EXTERN char e_nbreadonly[]	INIT(= N_("E744: NetBeans does not allow changes in read-only files"));e_nbreadonly1700,65177
EXTERN char e_maxmempat[]	INIT(= N_("E363: pattern uses more memory than 'maxmempattern'"));e_maxmempat1702,65283
EXTERN char e_emptybuf[]	INIT(= N_("E749: empty buffer"));e_emptybuf1703,65376
EXTERN char e_nobufnr[]	INIT(= N_("E86: Buffer %ld does not exist"));e_nobufnr1704,65435
EXTERN char e_invalpat[]	INIT(= N_("E682: Invalid search pattern or delimiter"));e_invalpat1706,65506
EXTERN char e_bufloaded[]	INIT(= N_("E139: File is loaded in another buffer"));e_bufloaded1707,65588
EXTERN char e_notset[]	INIT(= N_("E764: Option '%s' is not set"));e_notset1709,65721
EXTERN char e_invalidreg[]    INIT(= N_("E850: Invalid register name"));e_invalidreg1712,65818
EXTERN char e_dirnotf[]	INIT(= N_("E919: Directory not found in '%s': \"%s\""));e_dirnotf1714,65898
EXTERN char e_au_recursive[]	INIT(= N_("E952: Autocommand caused recursive behavior"));e_au_recursive1715,65979
EXTERN char e_menuothermode[]	INIT(= N_("E328: Menu only exists in another mode"));e_menuothermode1717,66084
EXTERN char e_invalwindow[]	INIT(= N_("E957: Invalid window number"));e_invalwindow1719,66175
EXTERN char e_listarg[]		INIT(= N_("E686: Argument of %s must be a List"));e_listarg1720,66246
EXTERN char e_missing_colon[]	INIT(= N_("E109: Missing ':' after '?'"));e_missing_colon1722,66339
EXTERN char e_missing_in[]	INIT(= N_("E690: Missing \"in\" after :for"));e_missing_in1723,66412
EXTERN char e_unknownfunc[]	INIT(= N_("E117: Unknown function: %s"));e_unknownfunc1724,66486
EXTERN char e_missbrac[]	INIT(= N_("E111: Missing ']'"));e_missbrac1725,66556
EXTERN char e_else_without_if[] INIT(= N_("E581: :else without :if"));e_else_without_if1726,66614
EXTERN char e_elseif_without_if[] INIT(= N_("E582: :elseif without :if"));e_elseif_without_if1727,66685
EXTERN char e_endif_without_if[] INIT(= N_("E580: :endif without :if"));e_endif_without_if1728,66760
EXTERN char e_continue[]	INIT(= N_("E586: :continue without :while or :for"));e_continue1729,66833
EXTERN char e_break[]		INIT(= N_("E587: :break without :while or :for"));e_break1730,66912
EXTERN char e_nowhitespace[]	INIT(= N_("E274: No white space allowed before parenthesis"));e_nowhitespace1731,66986
EXTERN short disallow_gui	INIT(= FALSE);disallow_gui1735,67106
EXTERN char top_bot_msg[] INIT(= N_("search hit TOP, continuing at BOTTOM"));top_bot_msg1738,67155
EXTERN char bot_top_msg[] INIT(= N_("search hit BOTTOM, continuing at TOP"));bot_top_msg1739,67233
EXTERN char line_msg[]		INIT(= N_(" line "));line_msg1741,67312
EXTERN char need_key_msg[] INIT(= N_("Need encryption key for \"%s\""));need_key_msg1744,67377
EXTERN int xsmp_icefd INIT(= -1);   // The actual connectionxsmp_icefd1751,67523
EXTERN time_T starttime;starttime1755,67646
EXTERN FILE *time_fd INIT(= NULL);  // where to write startup timingtime_fd1758,67691
EXTERN int vim_ignored;vim_ignored1766,67948
EXTERN char *vim_ignoredp;vim_ignoredp1767,67972
EXTERN alloc_id_T  alloc_fail_id INIT(= aid_none);alloc_fail_id1771,68044
EXTERN int  alloc_fail_countdown INIT(= -1);alloc_fail_countdown1773,68150
EXTERN int  alloc_fail_repeat INIT(= 0);alloc_fail_repeat1775,68256
EXTERN int  disable_char_avail_for_testing INIT(= FALSE);disable_char_avail_for_testing1778,68330
EXTERN int  disable_redraw_for_testing INIT(= FALSE);disable_redraw_for_testing1779,68388
EXTERN int  ignore_redraw_flag_for_testing INIT(= FALSE);ignore_redraw_flag_for_testing1780,68442
EXTERN int  nfa_fail_for_testing INIT(= FALSE);nfa_fail_for_testing1781,68500
EXTERN int  no_query_mouse_for_testing INIT(= FALSE);no_query_mouse_for_testing1782,68548
EXTERN int  in_free_unref_items INIT(= FALSE);in_free_unref_items1784,68603
EXTERN int  did_add_timer INIT(= FALSE);did_add_timer1788,68677
EXTERN int  timer_busy INIT(= 0);   // when timer is inside vgetc() then > 0timer_busy1789,68718
EXTERN int  bevalexpr_due_set INIT(= FALSE);bevalexpr_due_set1793,68826
EXTERN proftime_T bevalexpr_due;bevalexpr_due1794,68871
EXTERN time_T time_for_testing INIT(= 0);time_for_testing1798,68929
EXTERN int  did_echo_string_emsg INIT(= FALSE);did_echo_string_emsg1801,69027
EXTERN int *eval_lavars_used INIT(= NULL);eval_lavars_used1804,69147
EXTERN char windowsVersion[20] INIT(= {0});windowsVersion1807,69217
EXTERN listitem_T range_list_item;range_list_item1810,69319
typedef int HINSTANCE;HINSTANCE1815,69389
EXTERN int ctrl_break_was_pressed INIT(= FALSE);ctrl_break_was_pressed1817,69420
EXTERN HINSTANCE g_hinst INIT(= NULL);g_hinst1818,69469
EXTERN int did_repeated_msg INIT(= 0);did_repeated_msg1822,69546
# define REPEATED_MSG_LOOKING	REPEATED_MSG_LOOKING1823,69585
# define REPEATED_MSG_SAFESTATE	REPEATED_MSG_SAFESTATE1824,69621

src/gui_at_sb.h,3738
#define _Scrollbar_h_Scrollbar_h60,2776
#define XtCMinimumThumb	XtCMinimumThumb75,3098
#define XtCShown	XtCShown76,3138
#define XtCTopOfThumb	XtCTopOfThumb77,3164
#define XtCMaxOfThumb	XtCMaxOfThumb78,3200
#define XtCShadowWidth	XtCShadowWidth79,3236
#define XtCTopShadowPixel	XtCTopShadowPixel80,3274
#define XtCBottomShadowPixel	XtCBottomShadowPixel81,3317
#define XtCLimitThumb	XtCLimitThumb82,3366
#define XtNminimumThumb	XtNminimumThumb84,3403
#define XtNtopOfThumb	XtNtopOfThumb85,3443
#define XtNmaxOfThumb	XtNmaxOfThumb86,3479
#define XtNshadowWidth	XtNshadowWidth87,3515
#define XtNtopShadowPixel	XtNtopShadowPixel88,3553
#define XtNbottomShadowPixel	XtNbottomShadowPixel89,3596
#define XtNlimitThumb	XtNlimitThumb90,3645
typedef struct _ScrollbarRec	  *ScrollbarWidget;ScrollbarWidget92,3682
typedef struct _ScrollbarClassRec *ScrollbarWidgetClass;ScrollbarWidgetClass93,3731
    Pixel	  foreground;	// thumb foreground colorforeground102,3938
    XtOrientation orientation;	// horizontal or verticalorientation103,3988
    XtCallbackList scrollProc;	// proportional scrollscrollProc104,4045
    XtCallbackList thumbProc;	// jump (to position) scrollthumbProc105,4099
    XtCallbackList jumpProc;	// same as thumbProc but pass data by refjumpProc106,4158
    Pixmap	  thumb;	// thumb colorthumb107,4229
    float	  top;		// What percent is above the win's toptop108,4264
    float	  shown;	// What percent is shown in the winshown109,4321
    float	  max;		// Maximum value for topmax110,4376
    Dimension	  length;	// either height or widthlength111,4419
    Dimension	  thickness;	// either width or heightthickness112,4469
    Dimension	  min_thumb;	// minimum size for the thumb.min_thumb113,4522
    XtIntervalId  timer_id;	// autorepeat timer; remove on destructiontimer_id116,4597
    char	  scroll_mode;	// see belowscroll_mode117,4668
    float	  scroll_off;	// offset from event to top of thumbscroll_off118,4705
    GC		  gc;		// a (shared) gcgc119,4766
    Position	  topLoc;	// Pixel that corresponds to toptopLoc120,4798
    Dimension	  shownLength;	// Num pixels corresponding to shownshownLength121,4854
    Dimension	shadow_width;shadow_width124,4943
    Pixel	top_shadow_pixel;top_shadow_pixel125,4971
    Pixel	bot_shadow_pixel;bot_shadow_pixel126,4999
    Bool	limit_thumb;	// limit thumb to inside scrollbarlimit_thumb127,5027
    int		top_shadow_contrast;top_shadow_contrast128,5084
    int		bot_shadow_contrast;bot_shadow_contrast129,5114
    GC		top_shadow_GC;top_shadow_GC130,5144
    GC		bot_shadow_GC;bot_shadow_GC131,5167
} ScrollbarPart;ScrollbarPart132,5190
#define SMODE_NONE	SMODE_NONE134,5208
#define SMODE_CONT	SMODE_CONT135,5230
#define SMODE_PAGE_UP	SMODE_PAGE_UP136,5252
#define SMODE_PAGE_DOWN	SMODE_PAGE_DOWN137,5277
#define SMODE_LINE_UP	SMODE_LINE_UP138,5304
#define SMODE_LINE_DOWN	SMODE_LINE_DOWN139,5329
#define ONE_LINE_DATA	ONE_LINE_DATA141,5357
#define ONE_PAGE_DATA	ONE_PAGE_DATA142,5382
#define END_PAGE_DATA	END_PAGE_DATA143,5408
typedef struct _ScrollbarRec {_ScrollbarRec145,5437
    CorePart		core;core146,5468
    SimplePart		simple;simple147,5488
    ScrollbarPart	scrollbar;scrollbar148,5512
} ScrollbarRec;ScrollbarRec149,5541
typedef struct {int empty;} ScrollbarClassPart;empty151,5558
typedef struct {int empty;} ScrollbarClassPart;ScrollbarClassPart151,5558
typedef struct _ScrollbarClassRec {_ScrollbarClassRec153,5607
    CoreClassPart		core_class;core_class154,5643
    SimpleClassPart		simple_class;simple_class155,5674
    ScrollbarClassPart		scrollbar_class;scrollbar_class156,5709
} ScrollbarClassRec;ScrollbarClassRec157,5750

src/gui_dwrite.h,501
#define GUI_DWRITE_HGUI_DWRITE_H14,291
typedef struct DWriteContext DWriteContext;DWriteContext20,353
typedef struct DWriteRenderingParams {DWriteRenderingParams22,398
    float gamma;gamma23,437
    float enhancedContrast;enhancedContrast24,454
    float clearTypeLevel;clearTypeLevel25,482
    int pixelGeometry;pixelGeometry32,657
    int renderingMode;renderingMode43,1062
    int textAntialiasMode;textAntialiasMode51,1302
} DWriteRenderingParams;DWriteRenderingParams52,1329

src/gui_gtk_f.h,855
#define __GTK_FORM_H____GTK_FORM_H__10,243
#define GTK_TYPE_FORM	GTK_TYPE_FORM24,410
#define GTK_FORM(GTK_FORM26,479
#define GTK_FORM_CLASS(GTK_FORM_CLASS27,569
#define GTK_IS_FORM(GTK_IS_FORM28,670
#define GTK_IS_FORM_CLASS(GTK_IS_FORM_CLASS29,753
#define GTK_FORM(GTK_FORM31,848
#define GTK_FORM_CLASS(GTK_FORM_CLASS32,927
#define GTK_IS_FORM(GTK_IS_FORM33,1026
#define GTK_IS_FORM_CLASS(GTK_IS_FORM_CLASS34,1098
typedef struct _GtkForm GtkForm;GtkForm38,1194
typedef struct _GtkFormClass GtkFormClass;GtkFormClass39,1227
struct _GtkForm_GtkForm41,1271
    GtkContainer container;container43,1289
    GList *children;children45,1318
    GdkWindow *bin_window;bin_window46,1339
    gint freeze_count;freeze_count47,1366
struct _GtkFormClass_GtkFormClass50,1393
    GtkContainerClass parent_class;parent_class52,1416

src/gui_gtk_vms.h,33953
#define _XRegisterFilterByType _XRegisterFilterByType83,3972
#define XAllocClassHint XAllocClassHint85,4027
#define XAllocColor XAllocColor86,4067
#define XAllocColorCells XAllocColorCells87,4099
#define XAllocSizeHints XAllocSizeHints88,4141
#define XAllocWMHints XAllocWMHints89,4181
#define XAutoRepeatOff XAutoRepeatOff90,4217
#define XAutoRepeatOn XAutoRepeatOn91,4255
#define XBaseFontNameListOfFontSet XBaseFontNameListOfFontSet92,4291
#define XBell XBell93,4353
#define XBitmapPad XBitmapPad94,4373
#define XChangeActivePointerGrab XChangeActivePointerGrab95,4403
#define XChangeGC XChangeGC96,4461
#define XChangeProperty XChangeProperty97,4489
#define XChangeWindowAttributes XChangeWindowAttributes98,4529
#define XCheckIfEvent XCheckIfEvent99,4585
#define XCheckMaskEvent XCheckMaskEvent100,4621
#define XCheckTypedEvent XCheckTypedEvent101,4661
#define XCheckTypedWindowEvent XCheckTypedWindowEvent102,4703
#define XCheckWindowEvent XCheckWindowEvent103,4757
#define XClearArea XClearArea104,4801
#define XClearWindow XClearWindow105,4831
#define XClipBox XClipBox106,4865
#define XCloseDisplay XCloseDisplay107,4891
#define XCloseIM XCloseIM108,4927
#define XConfigureWindow XConfigureWindow109,4953
#define XConvertSelection XConvertSelection110,4995
#define XCopyArea XCopyArea111,5039
#define XCopyGC XCopyGC112,5067
#define XCopyPlane XCopyPlane113,5091
#define XCreateBitmapFromData XCreateBitmapFromData114,5121
#define XCreateColormap XCreateColormap115,5173
#define XCreateFontCursor XCreateFontCursor116,5213
#define XCreateFontSet XCreateFontSet117,5257
#define XCreateGC XCreateGC118,5295
#define XCreateIC XCreateIC119,5323
#define XCreateImage XCreateImage120,5351
#define XCreatePixmap XCreatePixmap121,5385
#define XCreatePixmapCursor XCreatePixmapCursor122,5421
#define XCreatePixmapFromBitmapData XCreatePixmapFromBitmapData123,5469
#define XCreateRegion XCreateRegion124,5533
#define XCreateSimpleWindow XCreateSimpleWindow125,5569
#define XCreateWindow XCreateWindow126,5617
#define XDefaultRootWindow XDefaultRootWindow127,5653
#define XDefaultScreenOfDisplay XDefaultScreenOfDisplay128,5699
#define XDefineCursor XDefineCursor129,5755
#define XDeleteProperty XDeleteProperty130,5791
#define XDestroyIC XDestroyIC131,5831
#define XDestroyRegion XDestroyRegion132,5861
#define XDestroyWindow XDestroyWindow133,5899
#define XDisplayName XDisplayName134,5937
#define XDisplayOfScreen XDisplayOfScreen135,5971
#define XDisplayString XDisplayString136,6013
#define XDrawArc XDrawArc137,6051
#define XDrawImageString XDrawImageString138,6077
#define XDrawImageString16 XDrawImageString16139,6119
#define XDrawLine XDrawLine140,6165
#define XDrawLines XDrawLines141,6193
#define XDrawPoint XDrawPoint142,6223
#define XDrawPoints XDrawPoints143,6253
#define XDrawRectangle XDrawRectangle144,6285
#define XDrawSegments XDrawSegments145,6323
#define XDrawString XDrawString146,6359
#define XDrawString16 XDrawString16147,6391
#define XEmptyRegion XEmptyRegion148,6427
#define XEqualRegion XEqualRegion149,6461
#define XEventsQueued XEventsQueued150,6495
#define XExtentsOfFontSet XExtentsOfFontSet151,6531
#define XFetchBuffer XFetchBuffer152,6575
#define XFillArc XFillArc153,6609
#define XFillPolygon XFillPolygon154,6635
#define XFillRectangle XFillRectangle155,6669
#define XFillRectangles XFillRectangles156,6707
#define XFilterEvent XFilterEvent157,6747
#define XFlush XFlush158,6781
#define XFontsOfFontSet XFontsOfFontSet159,6803
#define XFree XFree160,6843
#define XFreeColormap XFreeColormap161,6863
#define XFreeColors XFreeColors162,6899
#define XFreeCursor XFreeCursor163,6931
#define XFreeFont XFreeFont164,6963
#define XFreeFontInfo XFreeFontInfo165,6991
#define XFreeFontNames XFreeFontNames166,7027
#define XFreeFontSet XFreeFontSet167,7065
#define XFreeGC XFreeGC168,7099
#define XFreeModifiermap XFreeModifiermap169,7123
#define XFreePixmap XFreePixmap170,7165
#define XFreeStringList XFreeStringList171,7197
#define XGetAtomName XGetAtomName172,7237
#define XGetDefault XGetDefault173,7271
#define XGetErrorDatabaseText XGetErrorDatabaseText174,7303
#define XGetErrorText XGetErrorText175,7355
#define XGetFontProperty XGetFontProperty176,7391
#define XGetGCValues XGetGCValues177,7433
#define XGetGeometry XGetGeometry178,7467
#define XGetIconSizes XGetIconSizes179,7501
#define XGetICValues XGetICValues180,7537
#define XGetIMValues XGetIMValues181,7571
#define XGetImage XGetImage182,7605
#define XGetKeyboardControl XGetKeyboardControl183,7633
#define XGetModifierMapping XGetModifierMapping184,7681
#define XGetMotionEvents XGetMotionEvents185,7729
#define XGetNormalHints XGetNormalHints186,7771
#define XGetSelectionOwner XGetSelectionOwner187,7811
#define XGetSubImage XGetSubImage188,7857
#define XGetVisualInfo XGetVisualInfo189,7891
#define XGetWMColormapWindows XGetWMColormapWindows190,7929
#define XGetWMIconName XGetWMIconName191,7981
#define XGetWMProtocols XGetWMProtocols192,8019
#define XGetWMHints XGetWMHints193,8059
#define XGetWMName XGetWMName194,8091
#define XGetWMNormalHints XGetWMNormalHints195,8121
#define XGetWindowAttributes XGetWindowAttributes196,8165
#define XGetWindowProperty XGetWindowProperty197,8215
#define XGrabKeyboard XGrabKeyboard198,8261
#define XGrabPointer XGrabPointer199,8297
#define XGrabServer XGrabServer200,8331
#define XHeightOfScreen XHeightOfScreen201,8363
#define XIconifyWindow XIconifyWindow202,8403
#define XIfEvent XIfEvent203,8441
#define XInternAtom XInternAtom204,8467
#define XIntersectRegion XIntersectRegion205,8499
#define XKeycodeToKeysym XKeycodeToKeysym206,8541
#define XKeysymToKeycode XKeysymToKeycode207,8583
#define XKeysymToString XKeysymToString208,8625
#define XListFonts XListFonts209,8665
#define XListFontsWithInfo XListFontsWithInfo210,8695
#define XListPixmapFormats XListPixmapFormats211,8741
#define XListProperties XListProperties212,8787
#define XLoadQueryFont XLoadQueryFont213,8827
#define XLookupString XLookupString214,8865
#define XLowerWindow XLowerWindow215,8901
#define XMapRaised XMapRaised216,8935
#define XMapWindow XMapWindow217,8965
#define XMatchVisualInfo XMatchVisualInfo218,8995
#define XMoveResizeWindow XMoveResizeWindow219,9037
#define XMoveWindow XMoveWindow220,9081
#define XNextEvent XNextEvent221,9113
#define XOffsetRegion XOffsetRegion222,9143
#define XOpenDisplay XOpenDisplay223,9179
#define XOpenIM XOpenIM224,9213
#define XParseColor XParseColor225,9237
#define XParseGeometry XParseGeometry226,9269
#define XPeekEvent XPeekEvent227,9307
#define XPending XPending228,9337
#define XPointInRegion XPointInRegion229,9363
#define XPolygonRegion XPolygonRegion230,9401
#define XPutBackEvent XPutBackEvent231,9439
#define XPutImage XPutImage232,9475
#define XRootWindow XRootWindow233,9503
#define XQueryColor XQueryColor234,9535
#define XQueryColors XQueryColors235,9567
#define XQueryExtension XQueryExtension236,9601
#define XQueryPointer XQueryPointer237,9641
#define XQueryTree XQueryTree238,9677
#define XRaiseWindow XRaiseWindow239,9707
#define XReconfigureWMWindow XReconfigureWMWindow240,9741
#define XRectInRegion XRectInRegion241,9791
#define XRefreshKeyboardMapping XRefreshKeyboardMapping242,9827
#define XReparentWindow XReparentWindow243,9883
#define XResizeWindow XResizeWindow244,9923
#define XRestackWindows XRestackWindows245,9959
#define XRootWindowOfScreen XRootWindowOfScreen246,9999
#define XScreenNumberOfScreen XScreenNumberOfScreen247,10047
#define XSelectAsyncEvent XSelectAsyncEvent248,10099
#define XSelectAsyncInput XSelectAsyncInput249,10143
#define XSelectInput XSelectInput250,10187
#define XSendEvent XSendEvent251,10221
#define XServerVendor XServerVendor252,10251
#define XSetBackground XSetBackground253,10287
#define XSetClassHint XSetClassHint254,10325
#define XSetClipMask XSetClipMask255,10361
#define XSetClipOrigin XSetClipOrigin256,10395
#define XSetClipRectangles XSetClipRectangles257,10433
#define XSetCloseDownMode XSetCloseDownMode258,10479
#define XSetCommand XSetCommand259,10523
#define XSetDashes XSetDashes260,10555
#define XSetErrorHandler XSetErrorHandler261,10585
#define XSetFillStyle XSetFillStyle262,10627
#define XSetFont XSetFont263,10663
#define XSetForeground XSetForeground264,10689
#define XSetFunction XSetFunction265,10727
#define XSetGraphicsExposures XSetGraphicsExposures266,10761
#define XSetICFocus XSetICFocus267,10813
#define XSetICValues XSetICValues268,10845
#define XSetIOErrorHandler XSetIOErrorHandler269,10879
#define XSetInputFocus XSetInputFocus270,10925
#define XSetLineAttributes XSetLineAttributes271,10963
#define XSetLocaleModifiers XSetLocaleModifiers272,11009
#define XSetNormalHints XSetNormalHints273,11057
#define XSetRegion XSetRegion274,11097
#define XSetSelectionOwner XSetSelectionOwner275,11127
#define XSetStipple XSetStipple276,11173
#define XSetSubwindowMode XSetSubwindowMode277,11205
#define XSetTSOrigin XSetTSOrigin278,11249
#define XSetTile XSetTile279,11283
#define XSetTransientForHint XSetTransientForHint280,11309
#define XSetWMColormapWindows XSetWMColormapWindows281,11359
#define XSetWMHints XSetWMHints282,11411
#define XSetWMIconName XSetWMIconName283,11443
#define XSetWMName XSetWMName284,11481
#define XSetWMNormalHints XSetWMNormalHints285,11511
#define XSetWMProperties XSetWMProperties286,11555
#define XSetWMProtocols XSetWMProtocols287,11597
#define XSetWindowBackground XSetWindowBackground288,11637
#define XSetWindowBackgroundPixmap XSetWindowBackgroundPixmap289,11687
#define XSetWindowColormap XSetWindowColormap290,11749
#define XShapeCombineMask XShapeCombineMask291,11795
#define XShapeCombineRectangles XShapeCombineRectangles292,11839
#define XShapeGetRectangles XShapeGetRectangles293,11895
#define XShrinkRegion XShrinkRegion294,11943
#define XStoreBuffer XStoreBuffer295,11979
#define XStoreColor XStoreColor296,12013
#define XStoreColors XStoreColors297,12045
#define XStoreName XStoreName298,12079
#define XStringToKeysym XStringToKeysym299,12109
#define XSubtractRegion XSubtractRegion300,12149
#define XSupportsLocale XSupportsLocale301,12189
#define XSync XSync302,12229
#define XSynchronize XSynchronize303,12249
#define XTextExtents XTextExtents304,12283
#define XTextExtents16 XTextExtents16305,12317
#define XTextWidth XTextWidth306,12355
#define XTextWidth16 XTextWidth16307,12385
#define XTranslateCoordinates XTranslateCoordinates308,12419
#define XUndefineCursor XUndefineCursor309,12471
#define XUngrabKeyboard XUngrabKeyboard310,12511
#define XUngrabPointer XUngrabPointer311,12551
#define XUngrabServer XUngrabServer312,12589
#define XUnionRectWithRegion XUnionRectWithRegion313,12625
#define XUnionRegion XUnionRegion314,12675
#define XUnmapWindow XUnmapWindow315,12709
#define _XUnregisterFilter _XUnregisterFilter316,12743
#define XUnsetICFocus XUnsetICFocus317,12789
#define XVaCreateNestedList XVaCreateNestedList318,12825
#define XVisualIDFromVisual XVisualIDFromVisual319,12873
#define XWarpPointer XWarpPointer320,12921
#define XWidthOfScreen XWidthOfScreen321,12955
#define XWindowEvent XWindowEvent322,12993
#define XWithdrawWindow XWithdrawWindow323,13027
#define XXorRegion XXorRegion324,13067
#define XmAddProtocolCallback XmAddProtocolCallback325,13097
#define XmAddProtocols XmAddProtocols326,13149
#define XmChangeColor XmChangeColor327,13187
#define XmClipboardCopy XmClipboardCopy328,13223
#define XmClipboardEndCopy XmClipboardEndCopy329,13263
#define XmClipboardInquireLength XmClipboardInquireLength330,13309
#define XmClipboardLock XmClipboardLock331,13367
#define XmClipboardRetrieve XmClipboardRetrieve332,13407
#define XmClipboardStartCopy XmClipboardStartCopy333,13455
#define XmClipboardUnlock XmClipboardUnlock334,13505
#define XmCreateArrowButton XmCreateArrowButton335,13549
#define XmCreateArrowButtonGadget XmCreateArrowButtonGadget336,13597
#define XmCreateCascadeButton XmCreateCascadeButton337,13657
#define XmCreateDialogShell XmCreateDialogShell338,13709
#define XmCreateDragIcon XmCreateDragIcon339,13757
#define XmCreateDrawingArea XmCreateDrawingArea340,13799
#define XmCreateDrawnButton XmCreateDrawnButton341,13847
#define XmCreateFileSelectionBox XmCreateFileSelectionBox342,13895
#define XmCreateFileSelectionDialog XmCreateFileSelectionDialog343,13953
#define XmCreateForm XmCreateForm344,14017
#define XmCreateFormDialog XmCreateFormDialog345,14051
#define XmCreateFrame XmCreateFrame346,14097
#define XmCreateInformationDialog XmCreateInformationDialog347,14133
#define XmCreateLabelGadget XmCreateLabelGadget348,14193
#define XmCreateMainWindow XmCreateMainWindow349,14241
#define XmCreateMenuBar XmCreateMenuBar350,14287
#define XmCreateMessageBox XmCreateMessageBox351,14327
#define XmCreateMessageDialog XmCreateMessageDialog352,14373
#define XmCreateOptionMenu XmCreateOptionMenu353,14425
#define XmCreatePanedWindow XmCreatePanedWindow354,14471
#define XmCreatePopupMenu XmCreatePopupMenu355,14519
#define XmCreatePromptDialog XmCreatePromptDialog356,14563
#define XmCreatePulldownMenu XmCreatePulldownMenu357,14613
#define XmCreatePushButton XmCreatePushButton358,14663
#define XmCreatePushButtonGadget XmCreatePushButtonGadget359,14709
#define XmCreateQuestionDialog XmCreateQuestionDialog360,14767
#define XmCreateRadioBox XmCreateRadioBox361,14821
#define XmCreateRowColumn XmCreateRowColumn362,14863
#define XmCreateScale XmCreateScale363,14907
#define XmCreateScrollBar XmCreateScrollBar364,14943
#define XmCreateScrolledList XmCreateScrolledList365,14987
#define XmCreateScrolledText XmCreateScrolledText366,15037
#define XmCreateScrolledWindow XmCreateScrolledWindow367,15087
#define XmCreateSelectionDialog XmCreateSelectionDialog368,15141
#define XmCreateSeparator XmCreateSeparator369,15197
#define XmCreateSeparatorGadget XmCreateSeparatorGadget370,15241
#define XmCreateTemplateDialog XmCreateTemplateDialog371,15297
#define XmCreateText XmCreateText372,15351
#define XmCreateTextField XmCreateTextField373,15385
#define XmCreateToggleButton XmCreateToggleButton374,15429
#define XmCreateToggleButtonGadget XmCreateToggleButtonGadget375,15479
#define XmDragStart XmDragStart376,15541
#define XmDropSiteRegister XmDropSiteRegister377,15573
#define XmDropSiteUnregister XmDropSiteUnregister378,15619
#define XmDropSiteUpdate XmDropSiteUpdate379,15669
#define XmDropTransferStart XmDropTransferStart380,15711
#define XmFileSelectionBoxGetChild XmFileSelectionBoxGetChild381,15759
#define XmFileSelectionDoSearch XmFileSelectionDoSearch382,15821
#define XmFontListAppendEntry XmFontListAppendEntry383,15877
#define XmFontListCopy XmFontListCopy384,15929
#define XmFontListCreate XmFontListCreate385,15967
#define XmFontListEntryCreate XmFontListEntryCreate386,16009
#define XmFontListEntryFree XmFontListEntryFree387,16061
#define XmFontListEntryGetFont XmFontListEntryGetFont388,16109
#define XmFontListEntryGetTag XmFontListEntryGetTag389,16163
#define XmFontListEntryLoad XmFontListEntryLoad390,16215
#define XmFontListFree XmFontListFree391,16263
#define XmFontListFreeFontContext XmFontListFreeFontContext392,16301
#define XmFontListGetNextFont XmFontListGetNextFont393,16361
#define XmFontListInitFontContext XmFontListInitFontContext394,16413
#define XmFontListNextEntry XmFontListNextEntry395,16473
#define XmGetColors XmGetColors396,16521
#define XmGetFocusWidget XmGetFocusWidget397,16553
#define XmGetMenuCursor XmGetMenuCursor398,16595
#define XmGetPixmapByDepth XmGetPixmapByDepth399,16635
#define XmGetTearOffControl XmGetTearOffControl400,16681
#define XmGetXmDisplay XmGetXmDisplay401,16729
#define XmImMbLookupString XmImMbLookupString402,16767
#define XmImRegister XmImRegister403,16813
#define XmImSetFocusValues XmImSetFocusValues404,16847
#define XmImSetValues XmImSetValues405,16893
#define XmImUnregister XmImUnregister406,16929
#define XmImUnsetFocus XmImUnsetFocus407,16967
#define XmInternAtom XmInternAtom408,17005
#define XmIsMotifWMRunning XmIsMotifWMRunning409,17039
#define XmListAddItem XmListAddItem410,17085
#define XmListAddItemUnselected XmListAddItemUnselected411,17121
#define XmListAddItemsUnselected XmListAddItemsUnselected412,17177
#define XmListDeleteAllItems XmListDeleteAllItems413,17235
#define XmListDeleteItemsPos XmListDeleteItemsPos414,17285
#define XmListDeletePos XmListDeletePos415,17335
#define XmListDeselectAllItems XmListDeselectAllItems416,17375
#define XmListDeselectPos XmListDeselectPos417,17429
#define XmListGetKbdItemPos XmListGetKbdItemPos418,17473
#define XmListGetMatchPos XmListGetMatchPos419,17521
#define XmListGetSelectedPos XmListGetSelectedPos420,17565
#define XmListPosSelected XmListPosSelected421,17615
#define XmListSelectItem XmListSelectItem422,17659
#define XmListSelectPos XmListSelectPos423,17701
#define XmListSetBottomPos XmListSetBottomPos424,17741
#define XmListSetItem XmListSetItem425,17787
#define XmListSetKbdItemPos XmListSetKbdItemPos426,17823
#define XmListSetPos XmListSetPos427,17871
#define XmMainWindowSetAreas XmMainWindowSetAreas428,17905
#define XmMenuPosition XmMenuPosition429,17955
#define XmMessageBoxGetChild XmMessageBoxGetChild430,17993
#define XmOptionButtonGadget XmOptionButtonGadget431,18043
#define XmOptionLabelGadget XmOptionLabelGadget432,18093
#define XmProcessTraversal XmProcessTraversal433,18141
#define XmQmotif XmQmotif434,18187
#define XmRemoveProtocolCallback XmRemoveProtocolCallback435,18213
#define XmRepTypeGetId XmRepTypeGetId436,18271
#define XmRepTypeGetRecord XmRepTypeGetRecord437,18309
#define XmRepTypeRegister XmRepTypeRegister438,18355
#define XmRepTypeValidValue XmRepTypeValidValue439,18399
#define XmScrollBarSetValues XmScrollBarSetValues440,18447
#define XmScrolledWindowSetAreas XmScrolledWindowSetAreas441,18497
#define XmSelectionBoxGetChild XmSelectionBoxGetChild442,18555
#define XmStringByteCompare XmStringByteCompare443,18609
#define XmStringCompare XmStringCompare444,18657
#define XmStringConcat XmStringConcat445,18697
#define XmStringCopy XmStringCopy446,18735
#define XmStringCreate XmStringCreate447,18769
#define XmStringCreateLocalized XmStringCreateLocalized448,18807
#define XmStringCreateLtoR XmStringCreateLtoR449,18863
#define XmStringCreateSimple XmStringCreateSimple450,18909
#define XmStringDraw XmStringDraw451,18959
#define XmStringDrawUnderline XmStringDrawUnderline452,18993
#define XmStringExtent XmStringExtent453,19045
#define XmStringFree XmStringFree454,19083
#define XmStringFreeContext XmStringFreeContext455,19117
#define XmStringGetLtoR XmStringGetLtoR456,19165
#define XmStringGetNextComponent XmStringGetNextComponent457,19205
#define XmStringGetNextSegment XmStringGetNextSegment458,19263
#define XmStringInitContext XmStringInitContext459,19317
#define XmStringLength XmStringLength460,19365
#define XmStringLtoRCreate XmStringLtoRCreate461,19403
#define XmStringNConcat XmStringNConcat462,19449
#define XmStringSegmentCreate XmStringSegmentCreate463,19489
#define XmStringWidth XmStringWidth464,19541
#define XmTextClearSelection XmTextClearSelection465,19577
#define XmTextFieldGetEditable XmTextFieldGetEditable466,19627
#define XmTextFieldGetInsertionPosition XmTextFieldGetInsertionPosition467,19681
#define XmTextFieldGetLastPosition XmTextFieldGetLastPosition468,19753
#define XmTextFieldGetSelection XmTextFieldGetSelection469,19815
#define XmTextFieldGetString XmTextFieldGetString470,19871
#define XmTextFieldInsert XmTextFieldInsert471,19921
#define XmTextFieldRemove XmTextFieldRemove472,19965
#define XmTextFieldSetSelection XmTextFieldSetSelection473,20009
#define XmTextFieldSetString XmTextFieldSetString474,20065
#define XmTextGetCursorPosition XmTextGetCursorPosition475,20115
#define XmTextGetInsertionPosition XmTextGetInsertionPosition476,20171
#define XmTextGetLastPosition XmTextGetLastPosition477,20233
#define XmTextGetMaxLength XmTextGetMaxLength478,20285
#define XmTextGetSelection XmTextGetSelection479,20331
#define XmTextGetSelectionPosition XmTextGetSelectionPosition480,20377
#define XmTextGetString XmTextGetString481,20439
#define XmTextInsert XmTextInsert482,20479
#define XmTextRemove XmTextRemove483,20513
#define XmTextReplace XmTextReplace484,20547
#define XmTextSetCursorPosition XmTextSetCursorPosition485,20583
#define XmTextSetHighlight XmTextSetHighlight486,20639
#define XmTextSetInsertionPosition XmTextSetInsertionPosition487,20685
#define XmTextSetSelection XmTextSetSelection488,20747
#define XmTextSetString XmTextSetString489,20793
#define XmToggleButtonGadgetGetState XmToggleButtonGadgetGetState490,20833
#define XmToggleButtonGadgetSetState XmToggleButtonGadgetSetState491,20899
#define XmToggleButtonGetState XmToggleButtonGetState492,20965
#define XmToggleButtonSetState XmToggleButtonSetState493,21019
#define XmUpdateDisplay XmUpdateDisplay494,21073
#define XmVaCreateSimpleRadioBox XmVaCreateSimpleRadioBox495,21113
#define XmbDrawString XmbDrawString496,21171
#define XmbLookupString XmbLookupString497,21207
#define XmbResetIC XmbResetIC498,21247
#define XmbSetWMProperties XmbSetWMProperties499,21277
#define XmbTextEscapement XmbTextEscapement500,21323
#define XmbTextExtents XmbTextExtents501,21367
#define XmbTextListToTextProperty XmbTextListToTextProperty502,21405
#define XmbTextPropertyToTextList XmbTextPropertyToTextList503,21465
#define XmuClientWindow XmuClientWindow504,21525
#define XmuPrintDefaultErrorMessage XmuPrintDefaultErrorMessage505,21565
#define XrmGetDatabase XrmGetDatabase506,21629
#define XrmGetResource XrmGetResource507,21667
#define XrmPutStringResource XrmPutStringResource508,21705
#define XrmQuarkToString XrmQuarkToString509,21755
#define XrmStringToQuark XrmStringToQuark510,21797
#define XtAddCallback XtAddCallback511,21839
#define XtAddCallbacks XtAddCallbacks512,21875
#define XtAddEventHandler XtAddEventHandler513,21913
#define XtAddGrab XtAddGrab514,21957
#define XtAllocateGC XtAllocateGC515,21985
#define XtAppAddActions XtAppAddActions516,22019
#define XtAppAddInput XtAppAddInput517,22059
#define XtAppAddTimeOut XtAppAddTimeOut518,22095
#define XtAppCreateShell XtAppCreateShell519,22135
#define XtAppInitialize XtAppInitialize520,22177
#define XtAppNextEvent XtAppNextEvent521,22217
#define XtAppPeekEvent XtAppPeekEvent522,22255
#define XtAppPending XtAppPending523,22293
#define XtAppProcessEvent XtAppProcessEvent524,22327
#define XtAppSetErrorHandler XtAppSetErrorHandler525,22371
#define XtAppSetFallbackResources XtAppSetFallbackResources526,22421
#define XtAppSetWarningHandler XtAppSetWarningHandler527,22481
#define XtAppSetWarningMsgHandler XtAppSetWarningMsgHandler528,22535
#define XtAppWarning XtAppWarning529,22595
#define XtCallActionProc XtCallActionProc530,22629
#define XtCallCallbackList XtCallCallbackList531,22671
#define XtCallCallbacks XtCallCallbacks532,22717
#define XtConfigureWidget XtConfigureWidget533,22757
#define XtConvertAndStore XtConvertAndStore534,22801
#define XtCreateApplicationContext XtCreateApplicationContext535,22845
#define XtCreateManagedWidget XtCreateManagedWidget536,22907
#define XtCreatePopupShell XtCreatePopupShell537,22959
#define XtCreateWidget XtCreateWidget538,23005
#define XtDatabase XtDatabase539,23043
#define XtDestroyWidget XtDestroyWidget540,23073
#define XtDisownSelection XtDisownSelection541,23113
#define XtDispatchEvent XtDispatchEvent542,23157
#define XtDisplayOfObject XtDisplayOfObject543,23197
#define XtDisplayStringConvWarning XtDisplayStringConvWarning544,23241
#define XtDisplayToApplicationContext XtDisplayToApplicationContext545,23303
#define XtFree XtFree546,23371
#define XtGetActionKeysym XtGetActionKeysym547,23393
#define XtGetActionList XtGetActionList548,23437
#define XtGetApplicationNameAndClass XtGetApplicationNameAndClass549,23477
#define XtGetApplicationResources XtGetApplicationResources550,23543
#define XtGetGC XtGetGC551,23603
#define XtGetMultiClickTime XtGetMultiClickTime552,23627
#define XtGetSelectionValue XtGetSelectionValue553,23675
#define XtGetSelectionValues XtGetSelectionValues554,23723
#define XtGetSubresources XtGetSubresources555,23773
#define XtGetValues XtGetValues556,23817
#define XtGrabKeyboard XtGrabKeyboard557,23849
#define XtGrabPointer XtGrabPointer558,23887
#define XtHasCallbacks XtHasCallbacks559,23923
#define XtInitializeWidgetClass XtInitializeWidgetClass560,23961
#define XtInsertEventHandler XtInsertEventHandler561,24017
#define XtIsManaged XtIsManaged562,24067
#define XtIsObject XtIsObject563,24099
#define XtIsSensitive XtIsSensitive564,24129
#define XtIsSubclass XtIsSubclass565,24165
#define XtLastTimestampProcessed XtLastTimestampProcessed566,24199
#define XtMakeGeometryRequest XtMakeGeometryRequest567,24257
#define XtMakeResizeRequest XtMakeResizeRequest568,24309
#define XtMalloc XtMalloc569,24357
#define XtManageChild XtManageChild570,24383
#define XtManageChildren XtManageChildren571,24419
#define XtMergeArgLists XtMergeArgLists572,24461
#define XtMoveWidget XtMoveWidget573,24501
#define XtName XtName574,24535
#define XtNameToWidget XtNameToWidget575,24557
#define XtOpenDisplay XtOpenDisplay576,24595
#define XtOverrideTranslations XtOverrideTranslations577,24631
#define XtOwnSelection XtOwnSelection578,24685
#define XtParent XtParent579,24723
#define XtParseTranslationTable XtParseTranslationTable580,24749
#define XtPopdown XtPopdown581,24805
#define XtPopup XtPopup582,24833
#define XtQueryGeometry XtQueryGeometry583,24857
#define XtRealizeWidget XtRealizeWidget584,24897
#define XtRealloc XtRealloc585,24937
#define XtReleaseGC XtReleaseGC586,24965
#define XtRemoveAllCallbacks XtRemoveAllCallbacks587,24997
#define XtRemoveCallback XtRemoveCallback588,25047
#define XtRemoveEventHandler XtRemoveEventHandler589,25089
#define XtRemoveGrab XtRemoveGrab590,25139
#define XtRemoveInput XtRemoveInput591,25173
#define XtRemoveTimeOut XtRemoveTimeOut592,25209
#define XtResizeWidget XtResizeWidget593,25249
#define XtResolvePathname XtResolvePathname594,25287
#define XtSetKeyboardFocus XtSetKeyboardFocus595,25331
#define XtSetMappedWhenManaged XtSetMappedWhenManaged596,25377
#define XtSetSensitive XtSetSensitive597,25431
#define XtSetTypeConverter XtSetTypeConverter598,25469
#define XtSetValues XtSetValues599,25515
#define XtShellStrings XtShellStrings600,25547
#define XtStrings XtStrings601,25585
#define XtToolkitInitialize XtToolkitInitialize602,25613
#define XtTranslateCoords XtTranslateCoords603,25661
#define XtTranslateKeycode XtTranslateKeycode604,25705
#define XtUngrabKeyboard XtUngrabKeyboard605,25751
#define XtUngrabPointer XtUngrabPointer606,25793
#define XtUnmanageChild XtUnmanageChild607,25833
#define XtUnmanageChildren XtUnmanageChildren608,25873
#define XtUnrealizeWidget XtUnrealizeWidget609,25919
#define XtVaAppCreateShell XtVaAppCreateShell610,25963
#define XtVaCreateManagedWidget XtVaCreateManagedWidget611,26009
#define XtVaCreatePopupShell XtVaCreatePopupShell612,26065
#define XtVaCreateWidget XtVaCreateWidget613,26115
#define XtVaGetValues XtVaGetValues614,26157
#define XtVaSetValues XtVaSetValues615,26193
#define XtWarning XtWarning616,26229
#define XtWidgetToApplicationContext XtWidgetToApplicationContext617,26257
#define XtWindow XtWindow618,26323
#define XtWindowOfObject XtWindowOfObject619,26349
#define XtWindowToWidget XtWindowToWidget620,26391
#define XwcDrawString XwcDrawString621,26433
#define XwcFreeStringList XwcFreeStringList622,26469
#define XwcTextEscapement XwcTextEscapement623,26513
#define XwcTextExtents XwcTextExtents624,26557
#define XwcTextListToTextProperty XwcTextListToTextProperty625,26595
#define XwcTextPropertyToTextList XwcTextPropertyToTextList626,26655
#define _XmBottomShadowColorDefault _XmBottomShadowColorDefault627,26715
#define _XmClearBorder _XmClearBorder628,26779
#define _XmConfigureObject _XmConfigureObject629,26817
#define _XmDestroyParentCallback _XmDestroyParentCallback630,26863
#define _XmDrawArrow _XmDrawArrow631,26921
#define _XmDrawShadows _XmDrawShadows632,26955
#define _XmFontListGetDefaultFont _XmFontListGetDefaultFont633,26993
#define _XmFromHorizontalPixels _XmFromHorizontalPixels634,27053
#define _XmFromVerticalPixels _XmFromVerticalPixels635,27109
#define _XmGetClassExtensionPtr _XmGetClassExtensionPtr636,27161
#define _XmGetDefaultFontList _XmGetDefaultFontList637,27217
#define _XmGetTextualDragIcon _XmGetTextualDragIcon638,27269
#define _XmGetWidgetExtData _XmGetWidgetExtData639,27321
#define _XmGrabKeyboard _XmGrabKeyboard640,27369
#define _XmGrabPointer _XmGrabPointer641,27409
#define _XmInheritClass _XmInheritClass642,27447
#define _XmInputInGadget _XmInputInGadget643,27487
#define _XmMakeGeometryRequest _XmMakeGeometryRequest644,27529
#define _XmMenuPopDown _XmMenuPopDown645,27583
#define _XmMoveObject _XmMoveObject646,27621
#define _XmNavigChangeManaged _XmNavigChangeManaged647,27657
#define _XmOSBuildFileList _XmOSBuildFileList648,27709
#define _XmOSFileCompare _XmOSFileCompare649,27755
#define _XmOSFindPatternPart _XmOSFindPatternPart650,27797
#define _XmOSQualifyFileSpec _XmOSQualifyFileSpec651,27847
#define _XmPostPopupMenu _XmPostPopupMenu652,27897
#define _XmPrimitiveEnter _XmPrimitiveEnter653,27939
#define _XmPrimitiveLeave _XmPrimitiveLeave654,27983
#define _XmRedisplayGadgets _XmRedisplayGadgets655,28027
#define _XmShellIsExclusive _XmShellIsExclusive656,28075
#define _XmStringDraw _XmStringDraw657,28123
#define _XmStringGetTextConcat _XmStringGetTextConcat658,28159
#define _XmStrings _XmStrings659,28213
#define _XmToHorizontalPixels _XmToHorizontalPixels660,28243
#define _XmToVerticalPixels _XmToVerticalPixels661,28295
#define _XmTopShadowColorDefault _XmTopShadowColorDefault662,28343
#define _Xm_fastPtr _Xm_fastPtr663,28401
#define _XtCheckSubclassFlag _XtCheckSubclassFlag664,28433
#define _XtInherit _XtInherit665,28483
#define _XtInheritTranslations _XtInheritTranslations666,28513
#define applicationShellWidgetClass applicationShellWidgetClass667,28567
#define compositeWidgetClass compositeWidgetClass668,28631
#define overrideShellWidgetClass overrideShellWidgetClass669,28681
#define shellWidgetClass shellWidgetClass670,28739
#define topLevelShellClassRec topLevelShellClassRec671,28781
#define topLevelShellWidgetClass topLevelShellWidgetClass672,28833
#define transientShellWidgetClass transientShellWidgetClass673,28891
#define vendorShellClassRec vendorShellClassRec674,28951
#define vendorShellWidgetClass vendorShellWidgetClass675,28999
#define wmShellWidgetClass wmShellWidgetClass676,29053
#define xmArrowButtonWidgetClass xmArrowButtonWidgetClass677,29099
#define xmCascadeButtonClassRec xmCascadeButtonClassRec678,29157
#define xmCascadeButtonGadgetClass xmCascadeButtonGadgetClass679,29213
#define xmCascadeButtonWidgetClass xmCascadeButtonWidgetClass680,29275
#define xmDialogShellWidgetClass xmDialogShellWidgetClass681,29337
#define xmDrawingAreaWidgetClass xmDrawingAreaWidgetClass682,29395
#define xmDrawnButtonWidgetClass xmDrawnButtonWidgetClass683,29453
#define xmFileSelectionBoxWidgetClass xmFileSelectionBoxWidgetClass684,29511
#define xmFormWidgetClass xmFormWidgetClass685,29579
#define xmFrameWidgetClass xmFrameWidgetClass686,29623
#define xmGadgetClass xmGadgetClass687,29669
#define xmLabelGadgetClass xmLabelGadgetClass688,29705
#define xmLabelWidgetClass xmLabelWidgetClass689,29751
#define xmListWidgetClass xmListWidgetClass690,29797
#define xmMainWindowWidgetClass xmMainWindowWidgetClass691,29841
#define xmManagerClassRec xmManagerClassRec692,29897
#define xmManagerWidgetClass xmManagerWidgetClass693,29941
#define xmMenuShellWidgetClass xmMenuShellWidgetClass694,29991
#define xmMessageBoxWidgetClass xmMessageBoxWidgetClass695,30045
#define xmPrimitiveClassRec xmPrimitiveClassRec696,30101
#define xmPrimitiveWidgetClass xmPrimitiveWidgetClass697,30149
#define xmPushButtonClassRec xmPushButtonClassRec698,30203
#define xmPushButtonGadgetClass xmPushButtonGadgetClass699,30253
#define xmPushButtonWidgetClass xmPushButtonWidgetClass700,30309
#define xmRowColumnWidgetClass xmRowColumnWidgetClass701,30365
#define xmSashWidgetClass xmSashWidgetClass702,30419
#define xmScrollBarWidgetClass xmScrollBarWidgetClass703,30463
#define xmScrolledWindowClassRec xmScrolledWindowClassRec704,30517
#define xmScrolledWindowWidgetClass xmScrolledWindowWidgetClass705,30575
#define xmSeparatorGadgetClass xmSeparatorGadgetClass706,30639
#define xmSeparatorWidgetClass xmSeparatorWidgetClass707,30693
#define xmTextFieldWidgetClass xmTextFieldWidgetClass708,30747
#define xmTextWidgetClass xmTextWidgetClass709,30801
#define xmToggleButtonGadgetClass xmToggleButtonGadgetClass710,30845
#define xmToggleButtonWidgetClass xmToggleButtonWidgetClass711,30905
#define _XtRegisterWindow _XtRegisterWindow723,31399
#define _XtUnregisterWindow _XtUnregisterWindow724,31443
#define XtRegisterDrawable XtRegisterDrawable738,31900
#define XtUnregisterDrawable XtUnregisterDrawable739,31946

src/gui.h,16303
#   undef MAXMAX22,501
#   undef MINMIN25,537
# define USE_ON_FLY_SCROLLUSE_ON_FLY_SCROLL72,1577
# define HAVE_DROP_FILEHAVE_DROP_FILE82,1810
# define FONTSET_ALWAYSFONTSET_ALWAYS90,1989
# define TEXT_X(TEXT_X105,2601
# define TEXT_Y(TEXT_Y106,2647
# define FILL_X(FILL_X107,2712
# define FILL_Y(FILL_Y108,2758
# define X_2_COL(X_2_COL109,2805
# define Y_2_ROW(Y_2_ROW110,2848
# define TEXT_X(TEXT_X112,2898
# define FILL_X(FILL_X113,2965
# define X_2_COL(X_2_COL114,3032
# define TEXT_Y(TEXT_Y115,3097
# define FILL_Y(FILL_Y117,3191
# define Y_2_ROW(Y_2_ROW118,3258
#define SBAR_NONE	SBAR_NONE122,3368
#define SBAR_LEFT	SBAR_LEFT123,3393
#define SBAR_RIGHT	SBAR_RIGHT124,3417
#define SBAR_BOTTOM	SBAR_BOTTOM125,3442
#define SBAR_VERT	SBAR_VERT128,3500
#define SBAR_HORIZ	SBAR_HORIZ129,3524
#define SB_DEFAULT_WIDTH SB_DEFAULT_WIDTH132,3579
#define MENU_DEFAULT_HEIGHT MENU_DEFAULT_HEIGHT135,3645
#define GUI_MON_WRAP_CURSOR	GUI_MON_WRAP_CURSOR138,3742
#define GUI_MON_INVERT	GUI_MON_INVERT139,3805
#define GUI_MON_IS_CURSOR	GUI_MON_IS_CURSOR140,3859
#define GUI_MON_TRS_CURSOR	GUI_MON_TRS_CURSOR141,3908
#define GUI_MON_NOCLEAR	GUI_MON_NOCLEAR142,3970
#define DRAW_TRANSP	DRAW_TRANSP145,4061
#define DRAW_BOLD	DRAW_BOLD146,4115
#define DRAW_UNDERL	DRAW_UNDERL147,4157
#define DRAW_UNDERC	DRAW_UNDERC148,4206
# define DRAW_ITALIC	DRAW_ITALIC150,4281
#define DRAW_CURSOR	DRAW_CURSOR152,4335
#define DRAW_STRIKE	DRAW_STRIKE153,4393
#define TEAR_STRING	TEAR_STRING156,4470
#define TEAR_LEN	TEAR_LEN157,4503
#define TOOLBAR_BUTTON_HEIGHT	TOOLBAR_BUTTON_HEIGHT160,4571
#define TOOLBAR_BUTTON_WIDTH	TOOLBAR_BUTTON_WIDTH161,4604
#define TOOLBAR_BORDER_HEIGHT	TOOLBAR_BORDER_HEIGHT162,4636
# define TABLINE_HEIGHT TABLINE_HEIGHT165,4735
# define TABLINE_HEIGHT TABLINE_HEIGHT168,4791
# define NO_CONSOLE_INPUT	NO_CONSOLE_INPUT172,4900
typedef struct GuiScrollbarGuiScrollbar176,5014
    long	ident;		// Unique identifier for each scrollbarident178,5044
    win_T	*wp;		// Scrollbar's window, NULL for bottomwp179,5101
    int		type;		// one of SBAR_{LEFT,RIGHT,BOTTOM}type180,5156
    long	value;		// Represents top line number visiblevalue181,5207
    int		pixval;		// pixel count of valuepixval183,5285
    long	size;		// Size of scrollbar thumbsize185,5334
    long	max;		// Number of lines in buffermax186,5377
    int		top;		// Top of scroll bar (chars from row 0)top189,5460
    int		height;		// Current height of scroll bar in rowsheight190,5515
    int		width;		// Current width of scroll bar in colswidth191,5573
    int		status_height;	// Height of status linestatus_height192,5629
    Widget	id;		// Id of real scroll barid194,5698
    GtkWidget *id;		// Id of real scroll barid197,5766
    unsigned long handler_id;   // Id of "value_changed" signal handlerhandler_id198,5811
    HWND	id;		// Id of real scroll barid202,5913
    int		scroll_shift;	// The scrollbar stuff can handle only up toscroll_shift203,5952
    VimScrollBar *id;		// Pointer to real scroll barid210,6172
    ControlHandle id;		// A handle to the scrollbarid213,6252
    PtWidget_t	*id;id216,6334
} scrollbar_T;scrollbar_T218,6361
typedef long	    guicolor_T;	// handle for a GUI color; for X11 this shouldguicolor_T220,6377
#define INVALCOLOR INVALCOLOR223,6529
#define CTERMCOLOR CTERMCOLOR226,6682
  typedef PangoFontDescription	*GuiFont;       // handle for a GUI fontGuiFont230,6813
  typedef PangoFontDescription  *GuiFontset;    // handle for a GUI fontsetGuiFontset231,6885
# define NOFONT	NOFONT232,6961
# define NOFONTSET	NOFONTSET233,6992
  typedef char		*GuiFont;GuiFont236,7058
  typedef char		*GuiFontset;GuiFontset237,7084
#  define NOFONT	NOFONT238,7113
#  define NOFONTSET	NOFONTSET239,7144
  typedef XFontStruct	*GuiFont;	// handle for a GUI fontGuiFont242,7210
  typedef XFontSet	GuiFontset;	// handle for a GUI fontsetGuiFontset243,7267
#   define NOFONT	NOFONT244,7326
#   define NOFONTSET	NOFONTSET245,7355
  typedef long_u	GuiFont;	// handle for a GUI fontGuiFont247,7398
  typedef long_u	GuiFontset;	// handle for a GUI fontsetGuiFontset248,7449
#   define NOFONT	NOFONT249,7506
#   define NOFONTSET	NOFONTSET250,7535
# define GUI_MAY_SPAWNGUI_MAY_SPAWN257,7644
typedef struct GuiGui265,7915
    int		in_focus;	    // Vim has input focusin_focus267,7936
    int		in_use;		    // Is the GUI being used?in_use268,7982
    int		starting;	    // GUI will start in a little whilestarting269,8030
    int		shell_created;	    // Has the shell been created yet?shell_created270,8089
    int		dying;		    // Is vim dying? Then output to terminaldying271,8152
    int		dofork;		    // Use fork() when GUI is startingdofork272,8214
    int		dospawn;	    // Use spawn() when GUI is startingdospawn274,8292
    int		dragged_sb;	    // Which scrollbar being dragged, if any?dragged_sb276,8357
    win_T	*dragged_wp;	    // Which WIN's sb being dragged, if any?dragged_wp277,8424
    int		pointer_hidden;	    // Is the mouse pointer hidden?pointer_hidden278,8492
    int		col;		    // Current cursor column in GUI displaycol279,8553
    int		row;		    // Current cursor row in GUI displayrow280,8612
    int		cursor_col;	    // Physical cursor column in GUI displaycursor_col281,8668
    int		cursor_row;	    // Physical cursor row in GUI displaycursor_row282,8734
    char	cursor_is_valid;    // There is a cursor at cursor_row/colcursor_is_valid283,8797
    int		num_cols;	    // Number of columnsnum_cols284,8865
    int		num_rows;	    // Number of rowsnum_rows285,8909
    int		scroll_region_top;  // Top (first) line of scroll regionscroll_region_top286,8950
    int		scroll_region_bot;  // Bottom (last) line of scroll regionscroll_region_bot287,9016
    int		scroll_region_left;  // Left (first) column of scroll regionscroll_region_left288,9084
    int		scroll_region_right;  // Right (last) col. of scroll regionscroll_region_right289,9154
    int		highlight_mask;	    // Highlight attribute maskhighlight_mask290,9223
    int		scrollbar_width;    // Width of vertical scrollbarsscrollbar_width291,9280
    int		scrollbar_height;   // Height of horizontal scrollbarscrollbar_height292,9341
    int		left_sbar_x;	    // Calculated x coord for left scrollbarleft_sbar_x293,9404
    int		right_sbar_x;	    // Calculated x coord for right scrollbarright_sbar_x294,9471
    int		menu_height;	    // Height of the menu barmenu_height298,9580
    int		menu_width;	    // Width of the menu barmenu_width299,9632
    char	menu_is_active;	    // TRUE if menu is presentmenu_is_active301,9690
    char	menu_height_fixed;  // TRUE if menu height fixedmenu_height_fixed303,9770
    scrollbar_T bottom_sbar;	    // Bottom scrollbarbottom_sbar307,9844
    int		which_scrollbars[3];// Which scrollbar boxes are active?which_scrollbars308,9897
    int		prev_wrap;	    // For updating the horizontal scrollbarprev_wrap309,9963
    int		char_width;	    // Width of char cell in pixelschar_width310,10028
    int		char_height;	    // Height of char cell in pixels, includeschar_height311,10085
    int		char_ascent;	    // Ascent of char in pixelschar_ascent313,10177
    int		border_width;	    // Width of our border around text areaborder_width314,10231
    int		border_offset;	    // Total pixel offset for all bordersborder_offset315,10298
    GuiFont	norm_font;	    // Normal fontnorm_font317,10365
    GuiFont	bold_font;	    // Bold fontbold_font319,10428
    GuiFont	ital_font;	    // Italic fontital_font320,10468
    GuiFont	boldital_font;	    // Bold-Italic fontboldital_font321,10510
    int		font_can_bold;	    // Whether norm_font supports bold weight.font_can_bold323,10567
    GuiFontset	menu_fontset;	    // set of fonts for multi-byte charsmenu_fontset329,10768
    GuiFont	menu_font;	    // menu item fontmenu_font331,10845
    GuiFont	wide_font;	    // Normal 'guifontwide' fontwide_font334,10905
    GuiFont	wide_bold_font;	    // Bold 'guifontwide' fontwide_bold_font336,10982
    GuiFont	wide_ital_font;	    // Italic 'guifontwide' fontwide_ital_font337,11041
    GuiFont	wide_boldital_font; // Bold-Italic 'guifontwide' fontwide_boldital_font338,11102
    GuiFontset	fontset;	    // set of fonts for multi-byte charsfontset341,11196
    guicolor_T	back_pixel;	    // Color of backgroundback_pixel343,11268
    guicolor_T	norm_pixel;	    // Color of normal textnorm_pixel344,11322
    guicolor_T	def_back_pixel;	    // default Color of backgrounddef_back_pixel345,11377
    guicolor_T	def_norm_pixel;	    // default Color of normal textdef_norm_pixel346,11443
    char	*rsrc_menu_fg_name;	// Color of menu & dialog foregroundrsrc_menu_fg_name349,11531
    guicolor_T	menu_fg_pixel;		// Same in Pixel formatmenu_fg_pixel350,11597
    char	*rsrc_menu_bg_name;	// Color of menu & dialog backgroundrsrc_menu_bg_name351,11652
    guicolor_T	menu_bg_pixel;		// Same in Pixel formatmenu_bg_pixel352,11718
    char	*rsrc_scroll_fg_name;	// Color of scrollbar foregroundrsrc_scroll_fg_name353,11773
    guicolor_T	scroll_fg_pixel;	// Same in Pixel formatscroll_fg_pixel354,11837
    char	*rsrc_scroll_bg_name;	// Color of scrollbar backgroundrsrc_scroll_bg_name355,11893
    guicolor_T	scroll_bg_pixel;	// Same in Pixel formatscroll_bg_pixel356,11957
    guicolor_T	menu_def_fg_pixel;  // Default menu foregroundmenu_def_fg_pixel359,12037
    guicolor_T	menu_def_bg_pixel;  // Default menu backgroundmenu_def_bg_pixel360,12099
    guicolor_T	scroll_def_fg_pixel;  // Default scrollbar foregroundscroll_def_fg_pixel361,12161
    guicolor_T	scroll_def_bg_pixel;  // Default scrollbar backgroundscroll_def_bg_pixel362,12230
    Display	*dpy;		    // X displaydpy364,12307
    Window	wid;		    // Window id of text areawid365,12343
    int		visibility;	    // Is shell partially/fully obscured?visibility366,12390
    GC		text_gc;text_gc367,12453
    GC		back_gc;back_gc368,12470
    GC		invert_gc;invert_gc369,12487
    Cursor	blank_pointer;	    // Blank pointerblank_pointer370,12506
    char_u	*rsrc_font_name;    // Resource font name, used if 'guifont'rsrc_font_name373,12573
    char_u	*rsrc_bold_font_name; // Resource bold font namersrc_bold_font_name375,12664
    char_u	*rsrc_ital_font_name; // Resource italic font namersrc_ital_font_name376,12724
    char_u	*rsrc_boldital_font_name;  // Resource bold-italic font namersrc_boldital_font_name377,12786
    char_u	*rsrc_menu_font_name;    // Resource menu Font namersrc_menu_font_name378,12858
    Bool	rsrc_rev_video;	    // Use reverse video?rsrc_rev_video379,12921
    char_u	*geom;		    // Geometry, eg "80x24"geom381,12973
    Bool	color_approx;	    // Some color was approximatedcolor_approx382,13020
    int		visibility;	    // Is shell partially/fully obscured?visibility387,13124
    GdkCursor	*blank_pointer;	    // Blank pointerblank_pointer389,13195
    char_u	*geom;		    // Geometry, eg "80x24"geom392,13266
    GtkWidget	*mainwin;	    // top level GTK windowmainwin394,13314
    GtkWidget	*formwin;	    // manages all the windows belowformwin395,13366
    GtkWidget	*drawarea;	    // the "text" areadrawarea396,13427
    GtkWidget	*menubar;	    // menubarmenubar398,13493
    GtkWidget	*toolbar;	    // toolbartoolbar401,13561
    GtkWidget	*menubar_h;	    // menubar handlemenubar_h404,13631
    GtkWidget	*toolbar_h;	    // toolbar handletoolbar_h405,13679
    GdkRGBA	*fgcolor;	    // GDK-styled foreground colorfgcolor408,13752
    GdkRGBA	*bgcolor;	    // GDK-styled background colorbgcolor409,13809
    GdkRGBA	*spcolor;	    // GDK-styled special colorspcolor410,13866
    GdkColor	*fgcolor;	    // GDK-styled foreground colorfgcolor412,13927
    GdkColor	*bgcolor;	    // GDK-styled background colorbgcolor413,13985
    GdkColor	*spcolor;	    // GDK-styled special colorspcolor414,14043
    cairo_surface_t *surface;       // drawarea surfacesurface417,14123
    gboolean	     by_signal;     // cause of draw operationby_signal418,14179
    GdkGC	*text_gc;	    // cached GC for normal texttext_gc420,14246
    PangoContext     *text_context; // the context used for all texttext_context422,14307
    PangoFont	     *ascii_font;   // cached font for ASCII stringsascii_font423,14376
    PangoGlyphString *ascii_glyphs; // cached code point -> glyph mapascii_glyphs424,14443
    GtkWidget	*tabline;	    // tab pages line handletabline426,14538
    GtkAccelGroup *accel_group;accel_group429,14600
    GtkWidget	*filedlg;	    // file selection dialogfiledlg430,14632
    char_u	*browse_fname;	    // file name from filedlgbrowse_fname431,14685
    guint32	event_time;event_time433,14742
    int		tabline_height;tabline_height439,14935
    int		footer_height;	    // height of the message footerfooter_height443,14987
    int		toolbar_height;	    // height of the toolbartoolbar_height448,15168
    char_u	*rsrc_tooltip_font_name; // tooltip font namersrc_tooltip_font_name453,15312
    char	*rsrc_tooltip_fg_name;	// tooltip foreground color namersrc_tooltip_fg_name454,15369
    char	*rsrc_tooltip_bg_name;	// tooltip background color namersrc_tooltip_bg_name455,15434
    guicolor_T	tooltip_fg_pixel;	// tooltip foreground colortooltip_fg_pixel456,15499
    guicolor_T	tooltip_bg_pixel;	// tooltip background colortooltip_bg_pixel457,15560
    XFontSet	tooltip_fontset;	// tooltip fontsettooltip_fontset458,15621
    GuiFont	currFont;	    // Current fontcurrFont462,15700
    guicolor_T	currFgColor;	    // Current foreground text colorcurrFgColor463,15742
    guicolor_T	currBgColor;	    // Current background text colorcurrBgColor464,15807
    guicolor_T	currSpColor;	    // Current special text colorcurrSpColor465,15872
    VimApp     *vimApp;vimApp469,15964
    VimWindow  *vimWindow;vimWindow470,15988
    VimFormView *vimForm;vimForm471,16015
    VimTextAreaView *vimTextArea;vimTextArea472,16041
    int	vdcmp;			    // Vim Direct Communication Message Portvdcmp473,16075
    WindowPtr	VimWindow;VimWindow477,16165
    MenuHandle	MacOSHelpMenu;	    // Help menu provided by the MacOSMacOSHelpMenu478,16190
    int		MacOSHelpItems;	    // Nr of help-items supplied by MacOSMacOSHelpItems479,16259
    WindowPtr	wid;		    // Window id of text areawid480,16326
    int		visibility;	    // Is window partially/fully obscured?visibility481,16376
    PtWidget_t	*vimWindow;		// PtWindowvimWindow485,16471
    PtWidget_t	*vimTextArea;		// PtRawvimTextArea486,16511
    PtWidget_t	*vimContainer;		// PtPanelvimContainer487,16550
    PtWidget_t	*vimToolBarGroup;vimToolBarGroup489,16641
    PtWidget_t	*vimMenuBar;vimMenuBar492,16700
    PtWidget_t	*vimToolBar;vimToolBar495,16757
    int		toolbar_height;toolbar_height496,16785
    PhEvent_t	*event_buffer;event_buffer498,16818
    char	*rsrc_input_method;rsrc_input_method502,16871
    char	*rsrc_preedit_type_name;rsrc_preedit_type_name503,16900
} gui_T;gui_T505,16941
    VW_POS_MOUSE,VW_POS_MOUSE512,17094
    VW_POS_CENTER,VW_POS_CENTER513,17112
    VW_POS_TOP_CENTERVW_POS_TOP_CENTER514,17131
} gui_win_pos_T;gui_win_pos_T515,17153
# define FRD_FINDNEXT	FRD_FINDNEXT522,17310
# define FRD_R_FINDNEXT	FRD_R_FINDNEXT523,17362
# define FRD_REPLACE	FRD_REPLACE524,17416
# define FRD_REPLACEALL	FRD_REPLACEALL525,17455
# define FRD_UNDO	FRD_UNDO526,17510
# define FRD_TYPE_MASK FRD_TYPE_MASK527,17552
# define FRD_WHOLE_WORD	FRD_WHOLE_WORD529,17658
# define FRD_MATCH_CASE	FRD_MATCH_CASE530,17712
# define CONVERT_TO_UTF8(CONVERT_TO_UTF8549,18518
# define CONVERT_TO_UTF8_FREE(CONVERT_TO_UTF8_FREE554,18695
# define CONVERT_FROM_UTF8(CONVERT_FROM_UTF8559,18860
# define CONVERT_FROM_UTF8_FREE(CONVERT_FROM_UTF8_FREE564,19037
# define CONVERT_TO_UTF8(CONVERT_TO_UTF8570,19209
# define CONVERT_TO_UTF8_FREE(CONVERT_TO_UTF8_FREE571,19251
# define CONVERT_FROM_UTF8(CONVERT_FROM_UTF8572,19317
# define CONVERT_FROM_UTF8_FREE(CONVERT_FROM_UTF8_FREE573,19361
#  define FUNC2GENERIC(FUNC2GENERIC596,20439
#  define FUNC2GENERIC(FUNC2GENERIC598,20490
# define GUI_MAY_FORKGUI_MAY_FORK603,20612

src/gui_haiku.h,454
typedef struct BMenu BMenu;BMenu42,843
typedef struct BMenuItem BMenuItem;BMenuItem43,871
typedef struct BPictureButton BPictureButton;BPictureButton44,907
typedef struct VimWindow VimWindow;VimWindow45,953
typedef struct VimFormView VimFormView;VimFormView46,989
typedef struct VimTextAreaView VimTextAreaView;VimTextAreaView47,1029
typedef struct VimApp VimApp;VimApp48,1077
typedef struct VimScrollBar VimScrollBar;VimScrollBar49,1107

src/gui_w32_rc.h,41
#define IDR_TOOLBAR1	IDR_TOOLBAR15,101

src/gui_x11_pm.h,261
static char **(built_in_pixmaps[]) =built_in_pixmaps51,1613
#define BACKGROUND	BACKGROUND88,2295
#define FOREGROUND	FOREGROUND89,2316
#define BOTTOM_SHADOW	BOTTOM_SHADOW90,2337
#define TOP_SHADOW	TOP_SHADOW91,2361
#define HIGHLIGHT	HIGHLIGHT92,2382

src/gui_xmebw.h,679
#define EnhancedB_HEnhancedB_H21,712
# define XmNshift	XmNshift28,810
# define XmCShift	XmCShift31,861
# define XmNlabelLocation	XmNlabelLocation35,921
# define XmCLocation	XmCLocation38,990
# define XmNpixmapData	XmNpixmapData42,1053
# define XmNpixmapFile	XmNpixmapFile46,1120
# define XmLEFT	XmLEFT55,1264
# define XmRIGHT XmRIGHT56,1286
# define XmTOP	XmTOP57,1308
# define XmBOTTOM XmBOTTOM58,1329
#define XmIsEnhancedButton(XmIsEnhancedButton61,1359
typedef struct _XmEnhancedButtonClassRec *XmEnhancedButtonWidgetClass;XmEnhancedButtonWidgetClass69,1601
typedef struct _XmEnhancedButtonRec *XmEnhancedButtonWidget;XmEnhancedButtonWidget70,1672

src/gui_xmebwp.h,1695
#define EnhancedBP_HEnhancedBP_H21,713
typedef struct _XmEnhancedButtonClassPart_XmEnhancedButtonClassPart31,826
    Pixmap stipple_bitmap;stipple_bitmap33,870
} XmEnhancedButtonClassPart;XmEnhancedButtonClassPart34,897
    CoreClassPart core_class;core_class41,1010
    XmPrimitiveClassPart primitive_class;primitive_class42,1040
    XmLabelClassPart label_class;label_class43,1082
    XmPushButtonClassPart pushbutton_class;pushbutton_class44,1116
    XmEnhancedButtonClassPart enhancedbutton_class;enhancedbutton_class45,1160
} XmEnhancedButtonClassRec;XmEnhancedButtonClassRec46,1212
typedef struct _XmEnhancedButtonPart_XmEnhancedButtonPart54,1343
    String pixmap_data;pixmap_data57,1406
    String pixmap_file;pixmap_file58,1430
    Dimension spacing;spacing59,1454
    int label_location;label_location60,1477
    int pixmap_depth;pixmap_depth63,1527
    Dimension pixmap_width;pixmap_width64,1549
    Dimension pixmap_height;pixmap_height65,1577
    Pixmap normal_pixmap;normal_pixmap66,1606
    Pixmap armed_pixmap;armed_pixmap67,1632
    Pixmap insensitive_pixmap;insensitive_pixmap68,1657
    Pixmap highlight_pixmap;highlight_pixmap69,1688
    int doing_setvalues;doing_setvalues71,1718
    int doing_destroy;doing_destroy72,1743
} XmEnhancedButtonPart;XmEnhancedButtonPart73,1766
typedef struct _XmEnhancedButtonRec_XmEnhancedButtonRec79,1836
    CorePart core;core81,1874
    XmPrimitivePart primitive;primitive82,1893
    XmLabelPart label;label83,1924
    XmPushButtonPart pushbutton;pushbutton84,1947
    XmEnhancedButtonPart enhancedbutton;enhancedbutton85,1980
} XmEnhancedButtonRec;XmEnhancedButtonRec86,2021

src/GvimExt/gvimext.h,1129
#define AFX_STDAFX_H__3389658B_AD83_11D3_9C1E_0090278BBD99__INCLUDED_AFX_STDAFX_H__3389658B_AD83_11D3_9C1E_0090278BBD99__INCLUDED_15,420
# define STRICTSTRICT31,850
#define INC_OLE2	INC_OLE234,874
# define _CRT_SECURE_NO_DEPRECATE_CRT_SECURE_NO_DEPRECATE38,1050
# define _CRT_NONSTDC_NO_DEPRECATE_CRT_NONSTDC_NO_DEPRECATE39,1084
# undef  UINT_PTRUINT_PTR49,1354
# define UINT_PTR UINT_PTR50,1372
#define ResultFromShort(ResultFromShort53,1403
#define INITGUIDINITGUID58,1595
class CShellExtClassFactory : public IClassFactoryCShellExtClassFactory87,2520
	ULONG	m_cRef;m_cRef90,2584
typedef CShellExtClassFactory *LPCSHELLEXTCLASSFACTORY;LPCSHELLEXTCLASSFACTORY106,2928
#define MAX_HWND MAX_HWND107,2984
class CShellExt : public IContextMenu,CShellExt110,3059
    ULONG	 m_cRef;m_cRef117,3164
    LPDATAOBJECT m_pDataObj;m_pDataObj118,3183
    UINT	 m_edit_existing_off;m_edit_existing_off119,3212
    HBITMAP	 m_hVimIconBitmap;m_hVimIconBitmap120,3243
    int		 m_cntOfHWnd;m_cntOfHWnd146,3844
    HWND	 m_hWnd[MAX_HWND];m_hWnd147,3867
typedef CShellExt *LPCSHELLEXT;LPCSHELLEXT177,4560

src/GvimExt/resource.h,254
#define _APS_NEXT_RESOURCE_VALUE	_APS_NEXT_RESOURCE_VALUE10,202
#define _APS_NEXT_COMMAND_VALUE	_APS_NEXT_COMMAND_VALUE11,239
#define _APS_NEXT_CONTROL_VALUE	_APS_NEXT_CONTROL_VALUE12,278
#define _APS_NEXT_SYMED_VALUE	_APS_NEXT_SYMED_VALUE13,316

src/if_cscope.h,2035
#  define WIN32_LEAN_AND_MEANWIN32_LEAN_AND_MEAN16,524
#define CSCOPE_SUCCESS	CSCOPE_SUCCESS21,592
#define CSCOPE_FAILURE	CSCOPE_FAILURE22,618
#define	CSCOPE_DBFILE	CSCOPE_DBFILE24,646
#define	CSCOPE_PROMPT	CSCOPE_PROMPT25,682
    char *  name;name32,790
    int     (*func)(exarg_T *eap);func33,808
    char *  help;help34,843
    char *  usage;usage35,861
    int	    cansplit;		// if supports splitting windowcansplit36,880
} cscmd_T;cscmd_T37,935
typedef struct csi {csi39,947
    char *	    fname;	// cscope db namefname40,968
    char *	    ppath;	// path to prepend (the -P option)ppath41,1008
    char *	    flags;	// additional cscope flags/options (e.g, -p2)flags42,1065
    pid_t	    pid;	// PID of the connected cscope process.pid44,1151
    dev_t	    st_dev;	// ID of dev containing cscope dbst_dev45,1210
    ino_t	    st_ino;	// inode number of cscope dbst_ino46,1266
    DWORD	    pid;	// PID of the connected cscope process.pid49,1343
    HANDLE	    hProc;	// cscope process handlehProc50,1402
    DWORD	    nVolume;	// Volume serial number, instead of st_devnVolume51,1449
    DWORD	    nIndexHigh;	// st_ino has no meaning in the WindowsnIndexHigh52,1515
    DWORD	    nIndexLow;nIndexLow53,1581
    FILE *	    fr_fp;	// from cscope: FILE.fr_fp57,1622
    FILE *	    to_fp;	// to cscope: FILE.to_fp58,1666
} csinfo_T;csinfo_T59,1708
typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;Add61,1721
typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;Find61,1721
typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;Help61,1721
typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;Kill61,1721
typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;Reset61,1721
typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;Show61,1721
typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;csid_e61,1721
    Store,Store64,1797
    Get,Get65,1808
    Free,Free66,1817
    PrintPrint67,1827
} mcmd_e;mcmd_e68,1837

src/if_mzsch.h,1289
#define _IF_MZSCH_H__IF_MZSCH_H_6,115
# define __CYGWIN32____CYGWIN32__9,198
# define __thread __thread15,321
# undef __CYGWIN32____CYGWIN32__25,482
# define SCHEME_STRINGP(SCHEME_STRINGP29,545
# define BYTE_STRING_VALUE(BYTE_STRING_VALUE30,629
# define scheme_current_config(scheme_current_config33,752
# define scheme_make_sized_byte_string scheme_make_sized_byte_string34,799
# define scheme_format_utf8 scheme_format_utf835,863
#  define scheme_get_sized_byte_string_output scheme_get_sized_byte_string_output38,1004
#  define scheme_make_byte_string scheme_make_byte_string39,1081
#  define scheme_make_byte_string_output_port scheme_make_byte_string_output_port40,1134
# define SCHEME_BYTE_STRLEN_VAL SCHEME_BYTE_STRLEN_VAL43,1220
# define BYTE_STRING_VALUE(BYTE_STRING_VALUE44,1270
# define scheme_byte_string_to_char_string(scheme_byte_string_to_char_string45,1334
# define SCHEME_BYTE_STRINGP SCHEME_BYTE_STRINGP46,1388
# define MZ_GC_DECL_REG(MZ_GC_DECL_REG51,1484
# define MZ_GC_VAR_IN_REG(MZ_GC_VAR_IN_REG54,1557
# define MZ_GC_ARRAY_VAR_IN_REG(MZ_GC_ARRAY_VAR_IN_REG57,1638
# define MZ_GC_REG(MZ_GC_REG60,1713
# define MZ_GC_UNREG(MZ_GC_UNREG63,1773
# define MZ_GC_CHECK(MZ_GC_CHECK71,1963
# define MZ_GC_CHECK(MZ_GC_CHECK73,2018

src/if_ole.h,2062
#define __if_ole_h____if_ole_h__18,446
#define __IVim_FWD_DEFINED____IVim_FWD_DEFINED__27,561
typedef interface IVim IVim;IVim28,590
#define __Vim_FWD_DEFINED____Vim_FWD_DEFINED__33,680
typedef class Vim Vim;Vim36,728
typedef struct Vim Vim;Vim38,757
#define __MIDL_user_allocate_free_DEFINED____MIDL_user_allocate_free_DEFINED__48,935
#define __IVim_INTERFACE_DEFINED____IVim_INTERFACE_DEFINED__54,1138
EXTERN_C const IID IID_IVim;IID_IVim65,1412
    typedef struct IVimVtblIVimVtbl89,2008
	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )(QueryInterface93,2060
	ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )(AddRef98,2240
	ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )(Release101,2318
	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )(GetTypeInfoCount104,2397
	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )(GetTypeInfo108,2529
	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )(GetIDsOfNames114,2728
	/* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )(Invoke122,3010
	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SendKeys )(SendKeys133,3423
	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Eval )(Eval137,3532
	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetForeground )(SetForeground142,3686
	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetHwnd )(GetHwnd145,3773
    } IVimVtbl;IVimVtbl150,3922
#define IVim_QueryInterface(IVim_QueryInterface160,4039
#define IVim_AddRef(IVim_AddRef163,4149
#define IVim_Release(IVim_Release166,4213
#define IVim_GetTypeInfoCount(IVim_GetTypeInfoCount170,4280
#define IVim_GetTypeInfo(IVim_GetTypeInfo173,4380
#define IVim_GetIDsOfNames(IVim_GetIDsOfNames176,4494
#define IVim_Invoke(IVim_Invoke179,4644
#define IVim_SendKeys(IVim_SendKeys183,4855
#define IVim_Eval(IVim_Eval186,4933
#define IVim_SetForeground(IVim_SetForeground189,5017
#define IVim_GetHwnd(IVim_GetHwnd192,5095
#define __Vim_LIBRARY_DEFINED____Vim_LIBRARY_DEFINED__256,6422
EXTERN_C const IID LIBID_Vim;LIBID_Vim267,6662
EXTERN_C const CLSID CLSID_Vim;CLSID_Vim270,6712

src/if_perl_msvc/stdbool.h,25
#define bool bool3,113

src/if_py_both.h,24361
static char_u e_py_systemexit[]	= "E880: Can't handle SystemExit of %s exception in vim";e_py_systemexit16,423
typedef int Py_ssize_t;  // Python 2.4 and earlier don't have this type.Py_ssize_t19,546
#define ENC_OPT ENC_OPT23,692
#define DOPY_FUNC DOPY_FUNC24,767
static const char *vim_special_path = "_vim_path_";vim_special_path26,798
#define PyErr_SET_STRING(PyErr_SET_STRING28,851
#define PyErr_SetVim(PyErr_SetVim29,915
#define PyErr_SET_VIM(PyErr_SET_VIM30,972
#define PyErr_FORMAT(PyErr_FORMAT31,1031
#define PyErr_FORMAT2(PyErr_FORMAT232,1098
#define PyErr_VIM_FORMAT(PyErr_VIM_FORMAT33,1179
#define Py_TYPE_NAME(Py_TYPE_NAME35,1248
#define RAISE_NO_EMPTY_KEYS RAISE_NO_EMPTY_KEYS39,1348
#define RAISE_LOCKED_DICTIONARY RAISE_LOCKED_DICTIONARY41,1456
#define RAISE_LOCKED_LIST RAISE_LOCKED_LIST42,1530
#define RAISE_UNDO_FAIL RAISE_UNDO_FAIL43,1592
#define RAISE_DELETE_LINE_FAIL RAISE_DELETE_LINE_FAIL44,1666
#define RAISE_INSERT_LINE_FAIL RAISE_INSERT_LINE_FAIL45,1737
#define RAISE_REPLACE_LINE_FAIL RAISE_REPLACE_LINE_FAIL46,1808
#define RAISE_KEY_ADD_FAIL(RAISE_KEY_ADD_FAIL47,1881
#define RAISE_INVALID_INDEX_TYPE(RAISE_INVALID_INDEX_TYPE49,1985
#define INVALID_BUFFER_VALUE INVALID_BUFFER_VALUE53,2129
#define INVALID_WINDOW_VALUE INVALID_WINDOW_VALUE54,2174
#define INVALID_TABPAGE_VALUE INVALID_TABPAGE_VALUE55,2219
typedef void (*rangeinitializer)(void *);rangeinitializer57,2270
typedef void (*runner)(const char *, void *runner58,2312
static PyInt RangeStart;RangeStart72,2786
static PyInt RangeEnd;RangeEnd73,2811
static PyObject *globals;globals75,2835
static PyObject *py_chdir;py_chdir77,2862
static PyObject *py_fchdir;py_fchdir78,2889
static PyObject *py_getcwd;py_getcwd79,2917
static PyObject *vim_module;vim_module80,2945
static PyObject *vim_special_path_object;vim_special_path_object81,2974
static PyObject *py_find_spec;py_find_spec84,3050
static PyObject *py_load_module;py_load_module86,3087
static PyObject *py_find_module;py_find_module88,3127
static PyObject *VimError;VimError90,3161
Python_Lock_Vim(void)Python_Lock_Vim96,3256
Python_Release_Vim(void)Python_Release_Vim104,3351
StringToChars(PyObject *obj, PyObject **todecref)StringToChars116,3658
#define NUMBER_LONG NUMBER_LONG162,4508
#define NUMBER_INT NUMBER_INT163,4534
#define NUMBER_NATURAL NUMBER_NATURAL164,4560
#define NUMBER_UNSIGNED NUMBER_UNSIGNED165,4586
NumberToLong(PyObject *obj, long *result, int flags)NumberToLong168,4628
add_string(PyObject *list, char *s)add_string254,6227
ObjectDir(PyObject *self, char **attributes)ObjectDir272,6489
typedef void (*writefn)(char_u *);writefn310,7184
static PyTypeObject OutputType;OutputType312,7220
    long softspace;softspace317,7288
    long error;error318,7308
} OutputObject;OutputObject319,7324
static char *OutputAttrs[] = {OutputAttrs321,7341
OutputDir(PyObject *self)OutputDir327,7424
OutputSetattr(OutputObject *self, char *name, PyObject *valObject)OutputSetattr333,7511
static garray_T io_ga = {0, 0, 1, 80, NULL};io_ga354,8008
static writefn old_fn = NULL;old_fn355,8053
PythonIO_Flush(void)PythonIO_Flush358,8100
writer(writefn fn, char_u *str, PyInt n)writer369,8302
write_output(OutputObject *self, PyObject *string)write_output409,9445
OutputWrite(OutputObject *self, PyObject *string)OutputWrite431,9907
OutputWritelines(OutputObject *self, PyObject *seq)OutputWritelines441,10079
AlwaysNone(PyObject *self UNUSED)AlwaysNone471,10605
AlwaysFalse(PyObject *self UNUSED)AlwaysFalse479,10728
AlwaysTrue(PyObject *self UNUSED)AlwaysTrue488,10874
static struct PyMethodDef OutputMethods[] = {OutputMethods498,11015
static OutputObject Output =Output513,11777
static OutputObject Error =Error520,11861
PythonIO_Init_io(void)PythonIO_Init_io528,11959
    char	*fullname;fullname550,12416
    PyObject	*result;result551,12436
} LoaderObject;LoaderObject552,12458
static PyTypeObject LoaderType;LoaderType553,12474
LoaderDestructor(LoaderObject *self)LoaderDestructor556,12523
LoaderLoadModule(LoaderObject *self, PyObject *args UNUSED)LoaderLoadModule564,12676
static struct PyMethodDef LoaderMethods[] = {LoaderMethods598,13271
VimTryStart(void)VimTryStart610,13600
VimTryEnd(void)VimTryEnd616,13654
VimCheckInterrupt(void)VimCheckInterrupt671,14824
VimCommand(PyObject *self UNUSED, PyObject *string)VimCommand684,15002
VimToPython(typval_T *our_tv, int depth, PyObject *lookup_dict)VimToPython721,15750
VimEval(PyObject *self UNUSED, PyObject *args)VimEval882,19052
VimEvalPy(PyObject *self UNUSED, PyObject *string)VimEvalPy938,20151
VimStrwidth(PyObject *self UNUSED, PyObject *string)VimStrwidth977,20869
_VimChdir(PyObject *_chdir, PyObject *args, PyObject *kwargs)_VimChdir994,21182
VimChdir(PyObject *self UNUSED, PyObject *args, PyObject *kwargs)VimChdir1049,22076
VimFchdir(PyObject *self UNUSED, PyObject *args, PyObject *kwargs)VimFchdir1055,22215
    PyObject	*callable;callable1061,22351
    PyObject	*result;result1062,22375
} map_rtp_data;map_rtp_data1063,22397
map_rtp_callback(char_u *path, void *_data)map_rtp_callback1066,22430
VimForeachRTP(PyObject *self UNUSED, PyObject *callable)VimForeachRTP1093,22987
map_finder_callback(char_u *path, void *_data)map_finder_callback1120,23425
# define PY_MAIN_DIR_STRING PY_MAIN_DIR_STRING1131,23688
#define PY_ALTERNATE_DIR_STRING PY_ALTERNATE_DIR_STRING1135,23777
#define PYTHONX_STRING_LENGTH PYTHONX_STRING_LENGTH1137,23820
Vim_GetPaths(PyObject *self UNUSED)Vim_GetPaths1182,24787
FinderFindSpec(PyObject *self, PyObject *args)FinderFindSpec1202,25096
FinderFindModule(PyObject* self UNUSED, PyObject* args UNUSED)FinderFindModule1232,25622
call_load_module(char *name, int len, PyObject *find_module_result)call_load_module1240,25801
find_module(char *fullname, char *tail, PyObject *new_path)find_module1274,26806
FinderFindModule(PyObject *self, PyObject *args)FinderFindModule1337,28139
VimPathHook(PyObject *self UNUSED, PyObject *args)VimPathHook1385,28982
static struct PyMethodDef VimMethods[] = {VimMethods1405,29310
static PyTypeObject IterType;IterType1427,30620
typedef PyObject *(*nextfun)(void **);nextfun1429,30651
typedef void (*destructorfun)(void *);destructorfun1430,30690
typedef int (*traversefun)(void *, visitproc, void *);traversefun1431,30729
typedef int (*clearfun)(void **);clearfun1432,30784
    void *cur;cur1440,31017
    nextfun next;next1441,31032
    destructorfun destruct;destruct1442,31050
    traversefun traverse;traverse1443,31078
    clearfun clear;clear1444,31104
} IterObject;IterObject1445,31124
IterNew(void *start, destructorfun destruct, nextfun next, traversefun traverse,IterNew1448,31161
IterDestructor(IterObject *self)IterDestructor1464,31519
IterTraverse(IterObject *self, visitproc visit, void *arg)IterTraverse1472,31681
# undef clearclear1482,31895
IterClear(IterObject *self)IterClear1486,31932
IterNext(IterObject *self)IterNext1495,32069
IterIter(PyObject *self)IterIter1501,32158
typedef struct pylinkedlist_S {pylinkedlist_S1507,32226
    struct pylinkedlist_S	*pll_next;pll_next1508,32258
    struct pylinkedlist_S	*pll_prev;pll_prev1509,32295
    PyObject			*pll_obj;pll_obj1510,32332
} pylinkedlist_T;pylinkedlist_T1511,32357
static pylinkedlist_T *lastdict = NULL;lastdict1513,32376
static pylinkedlist_T *lastlist = NULL;lastlist1514,32416
static pylinkedlist_T *lastfunc = NULL;lastfunc1515,32456
pyll_remove(pylinkedlist_T *ref, pylinkedlist_T **last)pyll_remove1518,32513
pyll_add(PyObject *self, pylinkedlist_T *ref, pylinkedlist_T **last)pyll_add1538,32857
static PyTypeObject DictionaryType;DictionaryType1552,33116
    dict_T	*dict;dict1557,33188
    pylinkedlist_T	ref;ref1558,33206
} DictionaryObject;DictionaryObject1559,33230
#define NEW_DICTIONARY(NEW_DICTIONARY1563,33331
DictionaryNew(PyTypeObject *subtype, dict_T *dict)DictionaryNew1566,33420
py_dict_alloc(void)py_dict_alloc1582,33762
DictionaryConstructor(PyTypeObject *subtype, PyObject *args, PyObject *kwargs)DictionaryConstructor1597,33944
DictionaryDestructor(DictionaryObject *self)DictionaryDestructor1625,34444
static char *DictionaryAttrs[] = {DictionaryAttrs1633,34592
DictionaryDir(PyObject *self)DictionaryDir1639,34685
DictionarySetattr(DictionaryObject *self, char *name, PyObject *valObject)DictionarySetattr1645,34780
DictionaryLength(DictionaryObject *self)DictionaryLength1682,35521
#define DICT_FLAG_HAS_DEFAULT	DICT_FLAG_HAS_DEFAULT1687,35622
#define DICT_FLAG_POP	DICT_FLAG_POP1688,35657
#define DICT_FLAG_NONE_DEFAULT	DICT_FLAG_NONE_DEFAULT1689,35685
#define DICT_FLAG_RETURN_BOOL	DICT_FLAG_RETURN_BOOL1690,35721
#define DICT_FLAG_RETURN_PAIR	DICT_FLAG_RETURN_PAIR1691,35791
_DictionaryItem(DictionaryObject *self, PyObject *args, int flags)_DictionaryItem1694,35849
DictionaryItem(DictionaryObject *self, PyObject *keyObject)DictionaryItem1772,37231
DictionaryContains(DictionaryObject *self, PyObject *keyObject)DictionaryContains1778,37359
    hashitem_T	*ht_array;ht_array1795,37641
    long_u	ht_used;ht_used1796,37667
    hashtab_T	*ht;ht1797,37687
    hashitem_T	*hi;hi1798,37706
    long_u	todo;todo1799,37726
} dictiterinfo_T;dictiterinfo_T1800,37743
DictionaryIterNext(dictiterinfo_T **dii)DictionaryIterNext1803,37784
DictionaryIter(DictionaryObject *self)DictionaryIter1830,38309
DictionaryAssItem(DictionaryAssItem1854,38792
typedef PyObject *(*hi_to_py)(hashitem_T *);hi_to_py1933,40122
DictionaryListObjects(DictionaryObject *self, hi_to_py hiconvert)DictionaryListObjects1936,40190
dict_key(hashitem_T *hi)dict_key1964,40731
DictionaryListKeys(DictionaryObject *self)DictionaryListKeys1970,40836
dict_val(hashitem_T *hi)dict_val1976,40956
DictionaryListValues(DictionaryObject *self)DictionaryListValues1985,41097
dict_item(hashitem_T *hi)dict_item1991,41219
DictionaryListItems(DictionaryObject *self)DictionaryListItems2015,41606
DictionaryUpdate(DictionaryObject *self, PyObject *args, PyObject *kwargs)DictionaryUpdate2021,41728
DictionaryGet(DictionaryObject *self, PyObject *args)DictionaryGet2153,44203
DictionaryPop(DictionaryObject *self, PyObject *args)DictionaryPop2160,44377
DictionaryPopItem(DictionaryObject *self)DictionaryPopItem2166,44535
DictionaryHasKey(DictionaryObject *self, PyObject *keyObject)DictionaryHasKey2201,45184
static PySequenceMethods DictionaryAsSeq = {DictionaryAsSeq2206,45319
static PyMappingMethods DictionaryAsMapping = {DictionaryAsMapping2219,45654
static struct PyMethodDef DictionaryMethods[] = {DictionaryMethods2225,45819
static PyTypeObject ListType;ListType2238,46495
    list_T	*list;list2243,46561
    pylinkedlist_T	ref;ref2244,46579
} ListObject;ListObject2245,46603
#define NEW_LIST(NEW_LIST2247,46618
ListNew(PyTypeObject *subtype, list_T *list)ListNew2250,46689
py_list_alloc(void)py_list_alloc2267,47047
list_py_concat(list_T *l, PyObject *obj, PyObject *lookup_dict)list_py_concat2282,47222
ListConstructor(PyTypeObject *subtype, PyObject *args, PyObject *kwargs)ListConstructor2326,48008
ListDestructor(ListObject *self)ListDestructor2368,48719
ListLength(ListObject *self)ListLength2377,48872
ListIndex(ListObject *self, Py_ssize_t index)ListIndex2383,48971
ListSlice(ListObject *self, Py_ssize_t first, Py_ssize_t step,ListSlice2404,49473
ListItem(ListObject *self, PyObject* idx)ListItem2438,50030
list_restore(Py_ssize_t numadded, Py_ssize_t numreplaced, Py_ssize_t slicelen,list_restore2470,50669
ListAssSlice(ListObject *self, Py_ssize_t first,ListAssSlice2489,51115
ListAssIndex(ListObject *self, Py_ssize_t index, PyObject *obj)ListAssIndex2678,55041
ListAssItem(ListObject *self, PyObject *idx, PyObject *obj)ListAssItem2728,55965
ListConcatInPlace(ListObject *self, PyObject *obj)ListConcatInPlace2761,56650
    listwatch_T	lw;lw2788,57083
    list_T	*list;list2789,57103
} listiterinfo_T;listiterinfo_T2790,57121
ListIterDestruct(listiterinfo_T *lii)ListIterDestruct2793,57156
ListIterNext(listiterinfo_T **lii)ListIterNext2800,57283
ListIter(ListObject *self)ListIter2816,57563
static char *ListAttrs[] = {ListAttrs2837,57966
ListDir(PyObject *self)ListDir2843,58044
ListSetattr(ListObject *self, char *name, PyObject *valObject)ListSetattr2849,58127
static PySequenceMethods ListAsSeq = {ListAsSeq2884,58821
static PyMappingMethods ListAsMapping = {ListAsMapping2897,59321
static struct PyMethodDef ListMethods[] = {ListMethods2903,59515
    char_u	*name;name2912,59747
    int		argc;argc2913,59765
    typval_T	*argv;argv2914,59780
    dict_T	*self;self2915,59800
    pylinkedlist_T	ref;ref2916,59818
    int		auto_rebind;auto_rebind2917,59842
} FunctionObject;FunctionObject2918,59864
static PyTypeObject FunctionType;FunctionType2920,59883
#define NEW_FUNCTION(NEW_FUNCTION2922,59918
FunctionNew(PyTypeObject *subtype, char_u *name, int argc, typval_T *argv,FunctionNew2926,60071
FunctionConstructor(PyTypeObject *subtype, PyObject *args, PyObject *kwargs)FunctionConstructor2989,61426
FunctionDestructor(FunctionObject *self)FunctionDestructor3077,63390
static char *FunctionAttrs[] = {FunctionAttrs3092,63722
FunctionDir(PyObject *self)FunctionDir3098,63838
FunctionAttr(FunctionObject *self, char *name)FunctionAttr3104,63936
set_partial(FunctionObject *self, partial_T *pt, int exported)set_partial3139,64910
FunctionCall(FunctionObject *self, PyObject *argsObject, PyObject *kwargs)FunctionCall3171,65586
FunctionRepr(FunctionObject *self)FunctionRepr3236,66903
static struct PyMethodDef FunctionMethods[] = {FunctionMethods3285,68104
static PyTypeObject OptionsType;OptionsType3294,68277
typedef int (*checkfun)(void *);checkfun3296,68311
    int		opt_type;opt_type3301,68380
    void	*from;from3302,68399
    checkfun	Check;Check3303,68415
    PyObject	*fromObj;fromObj3304,68435
} OptionsObject;OptionsObject3305,68458
dummy_check(void *arg UNUSED)dummy_check3308,68491
OptionsNew(int opt_type, void *from, checkfun Check, PyObject *fromObj)OptionsNew3314,68562
OptionsDestructor(OptionsObject *self)OptionsDestructor3333,68953
OptionsTraverse(OptionsObject *self, visitproc visit, void *arg)OptionsTraverse3341,69121
OptionsClear(OptionsObject *self)OptionsClear3348,69249
OptionsItem(OptionsObject *self, PyObject *keyObject)OptionsItem3355,69353
OptionsContains(OptionsObject *self, PyObject *keyObject)OptionsContains3424,70599
    void	*lastoption;lastoption3452,71029
    int		opt_type;opt_type3453,71051
} optiterinfo_T;optiterinfo_T3454,71070
OptionsIterNext(optiterinfo_T **oii)OptionsIterNext3457,71110
OptionsIter(OptionsObject *self)OptionsIter3468,71330
set_option_value_err(char_u *key, int numval, char_u *stringval, int opt_flags)set_option_value_err3487,71667
set_option_value_for(set_option_value_for3502,71958
OptionsAssItem(OptionsObject *self, PyObject *keyObject, PyObject *valObject)OptionsAssItem3546,73044
static PySequenceMethods OptionsAsSeq = {OptionsAsSeq3647,74986
static PyMappingMethods OptionsAsMapping = {OptionsAsMapping3660,75315
    tabpage_T	*tab;tab3671,75513
} TabPageObject;TabPageObject3672,75533
static PyTypeObject TabPageType;TabPageType3676,75607
CheckTabPage(TabPageObject *self)CheckTabPage3679,75656
TabPageNew(tabpage_T *tab)TabPageNew3691,75860
TabPageDestructor(TabPageObject *self)TabPageDestructor3713,76210
static char *TabPageAttrs[] = {TabPageAttrs3721,76376
TabPageDir(PyObject *self)TabPageDir3727,76495
TabPageAttrValid(TabPageObject *self, char *name)TabPageAttrValid3733,76591
TabPageAttr(TabPageObject *self, char *name)TabPageAttr3746,76846
TabPageRepr(TabPageObject *self)TabPageRepr3768,77523
static struct PyMethodDef TabPageMethods[] = {TabPageMethods3784,77893
static PyTypeObject TabListType;TabListType3794,78123
static PySequenceMethods TabListAsSeq;TabListAsSeq3795,78156
} TabListObject;TabListObject3800,78231
TabListLength(PyObject *self UNUSED)TabListLength3803,78266
TabListItem(PyObject *self UNUSED, PyInt n)TabListItem3818,78458
    win_T	*win;win3837,78774
    TabPageObject	*tabObject;tabObject3838,78790
} WindowObject;WindowObject3839,78820
static PyTypeObject WindowType;WindowType3841,78837
CheckWindow(WindowObject *self)CheckWindow3844,78885
WindowNew(win_T *win, tabpage_T *tab)WindowNew3856,79084
WindowDestructor(WindowObject *self)WindowDestructor3896,80260
WindowTraverse(WindowObject *self, visitproc visit, void *arg)WindowTraverse3906,80536
WindowClear(WindowObject *self)WindowClear3913,80680
get_firstwin(TabPageObject *tabObject)get_firstwin3920,80781
static char *WindowAttrs[] = {WindowAttrs3937,81165
WindowDir(PyObject *self)WindowDir3953,81377
WindowAttrValid(WindowObject *self, char *name)WindowAttrValid3959,81471
WindowAttr(WindowObject *self, char *name)WindowAttr3972,81723
WindowSetattr(WindowObject *self, char *name, PyObject *valObject)WindowSetattr4014,83054
WindowRepr(WindowObject *self)WindowRepr4104,84765
static struct PyMethodDef WindowMethods[] = {WindowMethods4120,85148
static PyTypeObject WinListType;WinListType4130,85376
static PySequenceMethods WinListAsSeq;WinListAsSeq4131,85409
    TabPageObject	*tabObject;tabObject4136,85484
} WinListObject;WinListObject4137,85514
WinListNew(TabPageObject *tabObject)WinListNew4140,85554
WinListDestructor(WinListObject *self)WinListDestructor4152,85783
WinListLength(WinListObject *self)WinListLength4165,85991
WinListItem(WinListObject *self, PyInt n)WinListItem4183,86215
StringToLine(PyObject *obj)StringToLine4208,86851
GetBufferLine(buf_T *buf, PyInt n)GetBufferLine4300,88739
GetBufferLineList(buf_T *buf, PyInt lo, PyInt hi)GetBufferLineList4312,89089
py_fix_cursor(linenr_T lo, linenr_T hi, linenr_T extra)py_fix_cursor4349,89884
SetBufferLine(buf_T *buf, PyInt n, PyObject *line, PyInt *len_change)SetBufferLine4382,90747
SetBufferLineList(SetBufferLineList4484,93440
InsertBufferLines(buf_T *buf, PyInt n, PyObject *lines, PyInt *len_change)InsertBufferLines4689,98642
    buf_T *buf;buf4815,101384
} BufferObject;BufferObject4816,101400
CheckBuffer(BufferObject *self)CheckBuffer4819,101432
RBItem(BufferObject *self, PyInt n, PyInt start, PyInt end)RBItem4831,101631
RBSlice(BufferObject *self, PyInt lo, PyInt hi, PyInt start, PyInt end)RBSlice4852,102033
RBAsItem(RBAsItem4879,102484
RBAsSlice(RBAsSlice4914,103050
RBAppend(RBAppend4959,103755
static PyTypeObject RangeType;RangeType5000,104449
static PySequenceMethods RangeAsSeq;RangeAsSeq5001,104480
static PyMappingMethods RangeAsMapping;RangeAsMapping5002,104517
    BufferObject *buf;buf5007,104593
    PyInt start;start5008,104616
    PyInt end;end5009,104633
} RangeObject;RangeObject5010,104648
RangeNew(buf_T *buf, PyInt start, PyInt end)RangeNew5013,104686
RangeDestructor(RangeObject *self)RangeDestructor5037,105120
RangeTraverse(RangeObject *self, visitproc visit, void *arg)RangeTraverse5045,105280
RangeClear(RangeObject *self)RangeClear5052,105416
RangeLength(RangeObject *self)RangeLength5059,105507
RangeItem(RangeObject *self, PyInt n)RangeItem5069,105712
RangeSlice(RangeObject *self, PyInt lo, PyInt hi)RangeSlice5075,105834
static char *RangeAttrs[] = {RangeAttrs5080,105952
RangeDir(PyObject *self)RangeDir5086,106037
RangeAppend(RangeObject *self, PyObject *args)RangeAppend5092,106129
RangeRepr(RangeObject *self)RangeRepr5098,106277
static struct PyMethodDef RangeMethods[] = {RangeMethods5115,106653
static PyTypeObject BufferType;BufferType5122,106928
static PySequenceMethods BufferAsSeq;BufferAsSeq5123,106960
static PyMappingMethods BufferAsMapping;BufferAsMapping5124,106998
BufferNew(buf_T *buf)BufferNew5127,107062
BufferDestructor(BufferObject *self)BufferDestructor5167,108290
BufferLength(BufferObject *self)BufferLength5176,108470
BufferItem(BufferObject *self, PyInt n)BufferItem5186,108681
BufferSlice(BufferObject *self, PyInt lo, PyInt hi)BufferSlice5192,108783
static char *BufferAttrs[] = {BufferAttrs5197,108881
BufferDir(PyObject *self)BufferDir5203,108997
BufferAttrValid(BufferObject *self, char *name)BufferAttrValid5209,109091
BufferAttr(BufferObject *self, char *name)BufferAttr5222,109343
BufferSetattr(BufferObject *self, char *name, PyObject *valObject)BufferSetattr5241,109965
BufferAppend(BufferObject *self, PyObject *args)BufferAppend5280,110694
BufferMark(BufferObject *self, PyObject *pmarkObject)BufferMark5286,110816
BufferRange(BufferObject *self, PyObject *args)BufferRange5336,111758
BufferRepr(BufferObject *self)BufferRepr5351,112020
static struct PyMethodDef BufferMethods[] = {BufferMethods5366,112319
static PyTypeObject BufMapType;BufMapType5379,112924
} BufMapObject;BufMapObject5384,112992
BufMapLength(PyObject *self UNUSED)BufMapLength5387,113026
BufMapItem(PyObject *self UNUSED, PyObject *keyObject)BufMapItem5402,113195
BufMapIterDestruct(PyObject *buffer)BufMapIterDestruct5422,113530
BufMapIterTraverse(PyObject *buffer, visitproc visit, void *arg)BufMapIterTraverse5432,113698
BufMapIterClear(PyObject **buffer)BufMapIterClear5440,113832
BufMapIterNext(PyObject **buffer)BufMapIterNext5448,113945
BufMapIter(PyObject *self UNUSED)BufMapIter5475,114514
static PyMappingMethods BufMapAsMapping = {BufMapAsMapping5485,114772
static char *CurrentAttrs[] = {CurrentAttrs5493,114934
CurrentDir(PyObject *self)CurrentDir5499,115053
CurrentGetattr(PyObject *self UNUSED, char *name)CurrentGetattr5505,115149
CurrentSetattr(PyObject *self UNUSED, char *name, PyObject *valObject)CurrentSetattr5528,115854
static struct PyMethodDef CurrentMethods[] = {CurrentMethods5634,118192
init_range_cmd(exarg_T *eap)init_range_cmd5641,118408
init_range_eval(typval_T *rettv UNUSED)init_range_eval5648,118514
run_cmd(const char *cmd, void *arg UNUSEDrun_cmd5655,118650
static const char	*code_hdr = "def " DOPY_FUNC "(line, linenr):\n ";code_hdr5676,119092
static int		code_hdr_len = 30;code_hdr_len5677,119161
run_do(const char *cmd, void *arg UNUSEDrun_do5680,119209
run_eval(const char *cmd, typval_T *rettvrun_eval5802,121715
set_ref_in_py(const int copyID)set_ref_in_py5835,122443
set_string_copy(char_u *str, typval_T *tv)set_string_copy5876,123381
pydict_to_tv(PyObject *obj, typval_T *tv, PyObject *lookup_dict)pydict_to_tv5888,123578
pymap_to_tv(PyObject *obj, typval_T *tv, PyObject *lookup_dict)pymap_to_tv5960,124777
pyseq_to_tv(PyObject *obj, typval_T *tv, PyObject *lookup_dict)pyseq_to_tv6061,126563
typedef int (*pytotvfunc)(PyObject *, typval_T *, PyObject *);pytotvfunc6081,126874
convert_dl(PyObject *obj, typval_T *tv,convert_dl6084,126953
ConvertFromPyMapping(PyObject *obj, typval_T *tv)ConvertFromPyMapping6140,128152
ConvertFromPySequence(PyObject *obj, typval_T *tv)ConvertFromPySequence6171,128861
ConvertFromPyObject(PyObject *obj, typval_T *tv)ConvertFromPyObject6200,129488
_ConvertFromPyObject(PyObject *obj, typval_T *tv, PyObject *lookup_dict)_ConvertFromPyObject6213,129748
ConvertToPyObject(typval_T *tv)ConvertToPyObject6344,132752
} CurrentObject;CurrentObject6416,134716
static PyTypeObject CurrentType;CurrentType6417,134733
init_structs(void)init_structs6420,134783
#define PYTYPE_READY(PYTYPE_READY6658,144916
init_types(void)init_types6663,145004
init_sys_path(void)init_sys_path6686,145550
static BufMapObject TheBufferMap =TheBufferMap6757,147107
static WinListObject TheWindowList =TheWindowList6762,147184
static CurrentObject TheCurrent =TheCurrent6768,147273
static TabListObject TheTabPageList =TheTabPageList6773,147350
static struct numeric_constant {numeric_constant6778,147431
    char	*name;name6779,147464
    int		val;val6780,147480
} numeric_constants[] = {numeric_constants6781,147494
static struct object_constant {object_constant6788,147654
    char	*name;name6789,147686
    PyObject	*valObject;valObject6790,147702
} object_constants[] = {object_constants6791,147727
#define ADD_OBJECT(ADD_OBJECT6810,148419
#define ADD_CHECKED_OBJECT(ADD_CHECKED_OBJECT6814,148511
populate_module(PyObject *m)populate_module6823,148686

src/iscygpty.h,124
#define _ISCYGPTY_H_ISCYGPTY_H31,1352
#define is_cygpty(is_cygpty37,1442
#define is_cygpty_used(is_cygpty_used38,1467

src/keymap.h,13047
#define K_NUL	K_NUL19,482
#define K_SPECIAL	K_SPECIAL29,831
#define IS_SPECIAL(IS_SPECIAL37,1081
#define ABBR_OFF	ABBR_OFF43,1268
#define KS_ZERO	KS_ZERO49,1399
#define KS_SPECIAL	KS_SPECIAL55,1537
#define KS_EXTRA	KS_EXTRA61,1655
#define KS_MODIFIER	KS_MODIFIER67,1788
#define KS_MOUSE	KS_MOUSE73,1883
#define KS_MENU	KS_MENU74,1905
#define KS_VER_SCROLLBAR	KS_VER_SCROLLBAR75,1927
#define KS_HOR_SCROLLBAR	KS_HOR_SCROLLBAR76,1956
#define KS_NETTERM_MOUSE	KS_NETTERM_MOUSE81,2025
#define KS_DEC_MOUSE	KS_DEC_MOUSE82,2054
#define KS_SELECT	KS_SELECT87,2155
#define K_SELECT_STRING	K_SELECT_STRING88,2178
#define KS_TEAROFF	KS_TEAROFF93,2265
#define KS_JSBTERM_MOUSE	KS_JSBTERM_MOUSE96,2318
#define KS_KEY	KS_KEY99,2406
#define KS_PTERM_MOUSE	KS_PTERM_MOUSE102,2461
#define KS_TABLINE	KS_TABLINE105,2530
#define KS_TABMENU	KS_TABMENU108,2593
#define KS_URXVT_MOUSE	KS_URXVT_MOUSE111,2647
#define KS_SGR_MOUSE	KS_SGR_MOUSE114,2703
#define KS_SGR_MOUSE_RELEASE	KS_SGR_MOUSE_RELEASE115,2729
#define KS_GPM_MOUSE	KS_GPM_MOUSE118,2790
#define KE_FILLER	KE_FILLER123,2867
#define TERMCAP2KEY(TERMCAP2KEY128,2976
#define KEY2TERMCAP0(KEY2TERMCAP0129,3029
#define KEY2TERMCAP1(KEY2TERMCAP1130,3070
#define K_SECOND(K_SECOND135,3215
#define K_THIRD(K_THIRD137,3309
#define TO_SPECIAL(TO_SPECIAL142,3457
enum key_extrakey_extra151,3778
    KE_NAME = 3		// name of this terminal entryKE_NAME153,3795
    , KE_S_UP = 4		// shift-upKE_S_UP155,3844
    , KE_S_DOWN = 5		// shift-downKE_S_DOWN156,3875
    , KE_S_F1 = 6		// shifted function keysKE_S_F1158,3911
    , KE_S_F2 = 7KE_S_F2159,3955
    , KE_S_F3 = 8KE_S_F3160,3973
    , KE_S_F4 = 9KE_S_F4161,3991
    , KE_S_F5 = 10KE_S_F5162,4009
    , KE_S_F6 = 11KE_S_F6163,4028
    , KE_S_F7 = 12KE_S_F7164,4047
    , KE_S_F8 = 13KE_S_F8165,4066
    , KE_S_F9 = 14KE_S_F9166,4085
    , KE_S_F10 = 15KE_S_F10167,4104
    , KE_S_F11 = 16KE_S_F11169,4125
    , KE_S_F12 = 17KE_S_F12170,4145
    , KE_S_F13 = 18KE_S_F13171,4165
    , KE_S_F14 = 19KE_S_F14172,4185
    , KE_S_F15 = 20KE_S_F15173,4205
    , KE_S_F16 = 21KE_S_F16174,4225
    , KE_S_F17 = 22KE_S_F17175,4245
    , KE_S_F18 = 23KE_S_F18176,4265
    , KE_S_F19 = 24KE_S_F19177,4285
    , KE_S_F20 = 25KE_S_F20178,4305
    , KE_S_F21 = 26KE_S_F21180,4326
    , KE_S_F22 = 27KE_S_F22181,4346
    , KE_S_F23 = 28KE_S_F23182,4366
    , KE_S_F24 = 29KE_S_F24183,4386
    , KE_S_F25 = 30KE_S_F25184,4406
    , KE_S_F26 = 31KE_S_F26185,4426
    , KE_S_F27 = 32KE_S_F27186,4446
    , KE_S_F28 = 33KE_S_F28187,4466
    , KE_S_F29 = 34KE_S_F29188,4486
    , KE_S_F30 = 35KE_S_F30189,4506
    , KE_S_F31 = 36KE_S_F31191,4527
    , KE_S_F32 = 37KE_S_F32192,4547
    , KE_S_F33 = 38KE_S_F33193,4567
    , KE_S_F34 = 39KE_S_F34194,4587
    , KE_S_F35 = 40KE_S_F35195,4607
    , KE_S_F36 = 41KE_S_F36196,4627
    , KE_S_F37 = 42KE_S_F37197,4647
    , KE_MOUSE = 43		// mouse event startKE_MOUSE199,4668
    , KE_LEFTMOUSE = 44		// Left mouse button clickKE_LEFTMOUSE205,4802
    , KE_LEFTDRAG = 45		// Drag with left mouse button downKE_LEFTDRAG206,4854
    , KE_LEFTRELEASE = 46	// Left mouse button releaseKE_LEFTRELEASE207,4914
    , KE_MIDDLEMOUSE = 47	// Middle mouse button clickKE_MIDDLEMOUSE208,4969
    , KE_MIDDLEDRAG = 48	// Drag with middle mouse button downKE_MIDDLEDRAG209,5024
    , KE_MIDDLERELEASE = 49	// Middle mouse button releaseKE_MIDDLERELEASE210,5087
    , KE_RIGHTMOUSE = 50	// Right mouse button clickKE_RIGHTMOUSE211,5146
    , KE_RIGHTDRAG = 51		// Drag with right mouse button downKE_RIGHTDRAG212,5199
    , KE_RIGHTRELEASE = 52	// Right mouse button releaseKE_RIGHTRELEASE213,5261
    , KE_IGNORE = 53		// Ignored mouse drag/releaseKE_IGNORE215,5319
    , KE_TAB = 54		// unshifted TAB keyKE_TAB217,5372
    , KE_S_TAB_OLD = 55		// shifted TAB key (no longer used)KE_S_TAB_OLD218,5412
    , KE_SNIFF_UNUSED = 56	// obsoleteKE_SNIFF_UNUSED220,5474
    , KE_XF1 = 57		// extra vt100 function keys for xtermKE_XF1221,5513
    , KE_XF2 = 58KE_XF2222,5571
    , KE_XF3 = 59KE_XF3223,5589
    , KE_XF4 = 60KE_XF4224,5607
    , KE_XEND = 61		// extra (vt100) end key for xtermKE_XEND225,5625
    , KE_ZEND = 62		// extra (vt100) end key for xtermKE_ZEND226,5680
    , KE_XHOME = 63		// extra (vt100) home key for xtermKE_XHOME227,5735
    , KE_ZHOME = 64		// extra (vt100) home key for xtermKE_ZHOME228,5792
    , KE_XUP = 65		// extra vt100 cursor keys for xtermKE_XUP229,5849
    , KE_XDOWN = 66KE_XDOWN230,5905
    , KE_XLEFT = 67KE_XLEFT231,5925
    , KE_XRIGHT = 68KE_XRIGHT232,5945
    , KE_LEFTMOUSE_NM = 69	// non-mappable Left mouse button clickKE_LEFTMOUSE_NM234,5967
    , KE_LEFTRELEASE_NM = 70	// non-mappable left mouse button releaseKE_LEFTRELEASE_NM235,6034
    , KE_S_XF1 = 71		// vt100 shifted function keys for xtermKE_S_XF1237,6106
    , KE_S_XF2 = 72KE_S_XF2238,6168
    , KE_S_XF3 = 73KE_S_XF3239,6188
    , KE_S_XF4 = 74KE_S_XF4240,6208
    , KE_MOUSEDOWN = 75		// scroll wheel pseudo-button DownKE_MOUSEDOWN245,6405
    , KE_MOUSEUP = 76		// scroll wheel pseudo-button UpKE_MOUSEUP246,6465
    , KE_MOUSELEFT = 77		// scroll wheel pseudo-button LeftKE_MOUSELEFT247,6521
    , KE_MOUSERIGHT = 78	// scroll wheel pseudo-button RightKE_MOUSERIGHT248,6581
    , KE_KINS = 79		// keypad Insert keyKE_KINS250,6643
    , KE_KDEL = 80		// keypad Delete keyKE_KDEL251,6684
    , KE_CSI = 81		// CSI typed directlyKE_CSI253,6726
    , KE_SNR = 82		// <SNR>KE_SNR254,6767
    , KE_PLUG = 83		// <Plug>KE_PLUG255,6795
    , KE_CMDWIN = 84		// open command-line window from Command-line ModeKE_CMDWIN256,6825
    , KE_C_LEFT = 85		// control-leftKE_C_LEFT258,6899
    , KE_C_RIGHT = 86		// control-rightKE_C_RIGHT259,6937
    , KE_C_HOME = 87		// control-homeKE_C_HOME260,6977
    , KE_C_END = 88		// control-endKE_C_END261,7015
    , KE_X1MOUSE = 89		// X1/X2 mouse-buttonsKE_X1MOUSE263,7052
    , KE_X1DRAG = 90KE_X1DRAG264,7098
    , KE_X1RELEASE = 91KE_X1RELEASE265,7119
    , KE_X2MOUSE = 92KE_X2MOUSE266,7143
    , KE_X2DRAG = 93KE_X2DRAG267,7165
    , KE_X2RELEASE = 94KE_X2RELEASE268,7186
    , KE_DROP = 95		// DnD data is availableKE_DROP270,7211
    , KE_CURSORHOLD = 96	// CursorHold eventKE_CURSORHOLD271,7256
    , KE_NOP = 97		// doesn't do somethingKE_NOP272,7301
    , KE_FOCUSGAINED = 98	// focus gainedKE_FOCUSGAINED273,7344
    , KE_FOCUSLOST = 99		// focus lostKE_FOCUSLOST274,7386
    , KE_MOUSEMOVE = 100	// mouse moved with no button downKE_MOUSEMOVE275,7425
    , KE_CANCEL = 101		// return from vgetc()KE_CANCEL276,7485
#define K_ZERO	K_ZERO282,7621
#define K_UP	K_UP284,7670
#define K_DOWN	K_DOWN285,7706
#define K_LEFT	K_LEFT286,7744
#define K_RIGHT	K_RIGHT287,7782
#define K_S_UP	K_S_UP288,7821
#define K_S_DOWN	K_S_DOWN289,7868
#define K_S_LEFT	K_S_LEFT290,7918
#define K_C_LEFT	K_C_LEFT291,7957
#define K_S_RIGHT	K_S_RIGHT292,8007
#define K_C_RIGHT	K_C_RIGHT293,8047
#define K_S_HOME	K_S_HOME294,8099
#define K_C_HOME	K_C_HOME295,8138
#define K_S_END	K_S_END296,8188
#define K_C_END	K_C_END297,8227
#define K_TAB	K_TAB298,8276
#define K_S_TAB	K_S_TAB299,8321
#define K_XF1	K_XF1302,8425
#define K_XF2	K_XF2303,8470
#define K_XF3	K_XF3304,8515
#define K_XF4	K_XF4305,8560
#define K_XUP	K_XUP308,8661
#define K_XDOWN	K_XDOWN309,8706
#define K_XLEFT	K_XLEFT310,8755
#define K_XRIGHT	K_XRIGHT311,8804
#define K_F1	K_F1313,8855
#define K_F2	K_F2314,8908
#define K_F3	K_F3315,8944
#define K_F4	K_F4316,8980
#define K_F5	K_F5317,9016
#define K_F6	K_F6318,9052
#define K_F7	K_F7319,9088
#define K_F8	K_F8320,9124
#define K_F9	K_F9321,9160
#define K_F10	K_F10322,9196
#define K_F11	K_F11324,9234
#define K_F12	K_F12325,9271
#define K_F13	K_F13326,9308
#define K_F14	K_F14327,9345
#define K_F15	K_F15328,9382
#define K_F16	K_F16329,9419
#define K_F17	K_F17330,9456
#define K_F18	K_F18331,9493
#define K_F19	K_F19332,9530
#define K_F20	K_F20333,9567
#define K_F21	K_F21335,9605
#define K_F22	K_F22336,9642
#define K_F23	K_F23337,9679
#define K_F24	K_F24338,9716
#define K_F25	K_F25339,9753
#define K_F26	K_F26340,9790
#define K_F27	K_F27341,9827
#define K_F28	K_F28342,9864
#define K_F29	K_F29343,9901
#define K_F30	K_F30344,9938
#define K_F31	K_F31346,9976
#define K_F32	K_F32347,10013
#define K_F33	K_F33348,10050
#define K_F34	K_F34349,10087
#define K_F35	K_F35350,10124
#define K_F36	K_F36351,10161
#define K_F37	K_F37352,10198
#define K_S_XF1	K_S_XF1355,10308
#define K_S_XF2	K_S_XF2356,10357
#define K_S_XF3	K_S_XF3357,10406
#define K_S_XF4	K_S_XF4358,10455
#define K_S_F1	K_S_F1360,10505
#define K_S_F2	K_S_F2361,10574
#define K_S_F3	K_S_F3362,10621
#define K_S_F4	K_S_F4363,10668
#define K_S_F5	K_S_F5364,10715
#define K_S_F6	K_S_F6365,10762
#define K_S_F7	K_S_F7366,10809
#define K_S_F8	K_S_F8367,10856
#define K_S_F9	K_S_F9368,10903
#define K_S_F10	K_S_F10369,10950
#define K_S_F11	K_S_F11371,11000
#define K_S_F12	K_S_F12372,11049
#define K_HELP	K_HELP375,11145
#define K_UNDO	K_UNDO376,11183
#define K_BS	K_BS378,11222
#define K_INS	K_INS380,11259
#define K_KINS	K_KINS381,11296
#define K_DEL	K_DEL382,11343
#define K_KDEL	K_KDEL383,11380
#define K_HOME	K_HOME384,11427
#define K_KHOME	K_KHOME385,11465
#define K_XHOME	K_XHOME386,11532
#define K_ZHOME	K_ZHOME387,11581
#define K_END	K_END388,11630
#define K_KEND	K_KEND389,11667
#define K_XEND	K_XEND390,11732
#define K_ZEND	K_ZEND391,11779
#define K_PAGEUP	K_PAGEUP392,11826
#define K_PAGEDOWN	K_PAGEDOWN393,11865
#define K_KPAGEUP	K_KPAGEUP394,11906
#define K_KPAGEDOWN	K_KPAGEDOWN395,11974
#define K_KPLUS	K_KPLUS397,12047
#define K_KMINUS	K_KMINUS398,12101
#define K_KDIVIDE	K_KDIVIDE399,12156
#define K_KMULTIPLY	K_KMULTIPLY400,12208
#define K_KENTER	K_KENTER401,12262
#define K_KPOINT	K_KPOINT402,12317
#define K_PS	K_PS403,12373
#define K_PE	K_PE404,12424
#define K_K0	K_K0406,12474
#define K_K1	K_K1407,12522
#define K_K2	K_K2408,12570
#define K_K3	K_K3409,12618
#define K_K4	K_K4410,12666
#define K_K5	K_K5411,12714
#define K_K6	K_K6412,12762
#define K_K7	K_K7413,12810
#define K_K8	K_K8414,12858
#define K_K9	K_K9415,12906
#define K_MOUSE	K_MOUSE417,12955
#define K_MENU	K_MENU418,13005
#define K_VER_SCROLLBAR	K_VER_SCROLLBAR419,13053
#define K_HOR_SCROLLBAR K_HOR_SCROLLBAR420,13118
#define K_NETTERM_MOUSE	K_NETTERM_MOUSE422,13186
#define K_DEC_MOUSE	K_DEC_MOUSE423,13251
#define K_JSBTERM_MOUSE	K_JSBTERM_MOUSE424,13308
#define K_PTERM_MOUSE	K_PTERM_MOUSE425,13373
#define K_URXVT_MOUSE	K_URXVT_MOUSE426,13434
#define K_SGR_MOUSE	K_SGR_MOUSE427,13495
#define K_SGR_MOUSERELEASE K_SGR_MOUSERELEASE428,13552
#define K_SELECT	K_SELECT430,13625
#define K_TEAROFF	K_TEAROFF431,13676
#define K_TABLINE	K_TABLINE433,13730
#define K_TABMENU	K_TABMENU434,13783
#define K_LEFTMOUSE	K_LEFTMOUSE440,13928
#define K_LEFTMOUSE_NM	K_LEFTMOUSE_NM441,13984
#define K_LEFTDRAG	K_LEFTDRAG442,14046
#define K_LEFTRELEASE	K_LEFTRELEASE443,14100
#define K_LEFTRELEASE_NM K_LEFTRELEASE_NM444,14160
#define K_MOUSEMOVE	K_MOUSEMOVE445,14226
#define K_MIDDLEMOUSE	K_MIDDLEMOUSE446,14282
#define K_MIDDLEDRAG	K_MIDDLEDRAG447,14342
#define K_MIDDLERELEASE	K_MIDDLERELEASE448,14400
#define K_RIGHTMOUSE	K_RIGHTMOUSE449,14464
#define K_RIGHTDRAG	K_RIGHTDRAG450,14522
#define K_RIGHTRELEASE	K_RIGHTRELEASE451,14578
#define K_X1MOUSE K_X1MOUSE452,14640
#define K_X1MOUSE K_X1MOUSE453,14698
#define K_X1DRAG	K_X1DRAG454,14756
#define K_X1RELEASE K_X1RELEASE455,14806
#define K_X2MOUSE K_X2MOUSE456,14866
#define K_X2DRAG	K_X2DRAG457,14924
#define K_X2RELEASE K_X2RELEASE458,14974
#define K_IGNORE	K_IGNORE460,15035
#define K_NOP	K_NOP461,15085
#define K_CANCEL	K_CANCEL462,15130
#define K_MOUSEDOWN	K_MOUSEDOWN464,15181
#define K_MOUSEUP	K_MOUSEUP465,15237
#define K_MOUSELEFT	K_MOUSELEFT466,15289
#define K_MOUSERIGHT	K_MOUSERIGHT467,15345
#define K_CSI	K_CSI469,15404
#define K_SNR	K_SNR470,15449
#define K_PLUG	K_PLUG471,15494
#define K_CMDWIN	K_CMDWIN472,15541
#define K_DROP	K_DROP474,15592
#define K_FOCUSGAINED	K_FOCUSGAINED475,15639
#define K_FOCUSLOST	K_FOCUSLOST476,15699
#define K_CURSORHOLD	K_CURSORHOLD478,15756
#define MOD_MASK_SHIFT	MOD_MASK_SHIFT482,15909
#define MOD_MASK_CTRL	MOD_MASK_CTRL483,15941
#define MOD_MASK_ALT	MOD_MASK_ALT484,15972
#define MOD_MASK_META	MOD_MASK_META485,16014
#define MOD_MASK_2CLICK	MOD_MASK_2CLICK486,16082
#define MOD_MASK_3CLICK	MOD_MASK_3CLICK487,16143
#define MOD_MASK_4CLICK	MOD_MASK_4CLICK488,16204
# define MOD_MASK_CMD	MOD_MASK_CMD490,16280
#define MOD_MASK_MULTI_CLICK	MOD_MASK_MULTI_CLICK493,16319
#define MAX_KEY_NAME_LEN MAX_KEY_NAME_LEN500,16563
#define MAX_KEY_CODE_LEN MAX_KEY_CODE_LEN511,16946

src/libvterm/include/vterm.h,9665
#define __VTERM_H____VTERM_H__5,97
#define TRUE TRUE15,208
#define FALSE FALSE16,223
typedef unsigned char		uint8_t;uint8_t19,257
typedef unsigned int		uint32_t;uint32_t20,289
typedef struct VTerm VTerm;VTerm22,322
typedef struct VTermState VTermState;VTermState23,350
typedef struct VTermScreen VTermScreen;VTermScreen24,388
  int row;row28,475
  int col;col29,486
} VTermPos;VTermPos30,497
INLINE int vterm_pos_cmp(VTermPos a, VTermPos b)vterm_pos_cmp45,830
  int start_row;start_row53,1007
  int end_row;end_row54,1024
  int start_col;start_col55,1039
  int end_col;end_col56,1056
} VTermRect;VTermRect57,1071
INLINE int vterm_rect_contains(VTermRect r, VTermPos p)vterm_rect_contains63,1233
INLINE void vterm_rect_move(VTermRect *rect, int row_delta, int col_delta)vterm_rect_move75,1604
#define VTERM_ANSI_INDEX_DEFAULT VTERM_ANSI_INDEX_DEFAULT84,1896
#define VTERM_ANSI_INDEX_MIN VTERM_ANSI_INDEX_MIN85,1948
#define VTERM_ANSI_INDEX_MAX VTERM_ANSI_INDEX_MAX86,1979
#define VTERM_ANSI_INDEX_NONE VTERM_ANSI_INDEX_NONE87,2011
  uint8_t red, green, blue;red90,2101
  uint8_t red, green, blue;green90,2101
  uint8_t red, green, blue;blue90,2101
  uint8_t ansi_index;ansi_index91,2129
} VTermColor;VTermColor92,2151
  VTERM_VALUETYPE_BOOL = 1,VTERM_VALUETYPE_BOOL96,2211
  VTERM_VALUETYPE_INT,VTERM_VALUETYPE_INT97,2239
  VTERM_VALUETYPE_STRING,VTERM_VALUETYPE_STRING98,2262
  VTERM_VALUETYPE_COLOR,VTERM_VALUETYPE_COLOR99,2288
  VTERM_N_VALUETYPESVTERM_N_VALUETYPES101,2314
} VTermValueType;VTermValueType102,2335
  int boolean;boolean105,2370
  int number;number106,2385
  char *string;string107,2399
  VTermColor color;color108,2415
} VTermValue;VTermValue109,2435
  VTERM_ATTR_BOLD = 1,   // bool:   1, 22VTERM_ATTR_BOLD113,2490
  VTERM_ATTR_UNDERLINE,  // number: 4, 21, 24VTERM_ATTR_UNDERLINE114,2532
  VTERM_ATTR_ITALIC,     // bool:   3, 23VTERM_ATTR_ITALIC115,2578
  VTERM_ATTR_BLINK,      // bool:   5, 25VTERM_ATTR_BLINK116,2620
  VTERM_ATTR_REVERSE,    // bool:   7, 27VTERM_ATTR_REVERSE117,2662
  VTERM_ATTR_STRIKE,     // bool:   9, 29VTERM_ATTR_STRIKE118,2704
  VTERM_ATTR_FONT,       // number: 10-19VTERM_ATTR_FONT119,2746
  VTERM_ATTR_FOREGROUND, // color:  30-39 90-97VTERM_ATTR_FOREGROUND120,2788
  VTERM_ATTR_BACKGROUND, // color:  40-49 100-107VTERM_ATTR_BACKGROUND121,2836
  VTERM_N_ATTRSVTERM_N_ATTRS123,2887
} VTermAttr;VTermAttr124,2903
  VTERM_PROP_CURSORVISIBLE = 1, // boolVTERM_PROP_CURSORVISIBLE128,2957
  VTERM_PROP_CURSORBLINK,       // boolVTERM_PROP_CURSORBLINK129,2997
  VTERM_PROP_ALTSCREEN,         // boolVTERM_PROP_ALTSCREEN130,3037
  VTERM_PROP_TITLE,             // stringVTERM_PROP_TITLE131,3077
  VTERM_PROP_ICONNAME,          // stringVTERM_PROP_ICONNAME132,3119
  VTERM_PROP_REVERSE,           // boolVTERM_PROP_REVERSE133,3161
  VTERM_PROP_CURSORSHAPE,       // numberVTERM_PROP_CURSORSHAPE134,3201
  VTERM_PROP_MOUSE,             // numberVTERM_PROP_MOUSE135,3243
  VTERM_PROP_CURSORCOLOR,       // stringVTERM_PROP_CURSORCOLOR136,3285
  VTERM_N_PROPSVTERM_N_PROPS138,3328
} VTermProp;VTermProp139,3344
  VTERM_PROP_CURSORSHAPE_BLOCK = 1,VTERM_PROP_CURSORSHAPE_BLOCK142,3365
  VTERM_PROP_CURSORSHAPE_UNDERLINE,VTERM_PROP_CURSORSHAPE_UNDERLINE143,3401
  VTERM_PROP_CURSORSHAPE_BAR_LEFT,VTERM_PROP_CURSORSHAPE_BAR_LEFT144,3437
  VTERM_N_PROP_CURSORSHAPESVTERM_N_PROP_CURSORSHAPES146,3473
  VTERM_PROP_MOUSE_NONE = 0,VTERM_PROP_MOUSE_NONE150,3512
  VTERM_PROP_MOUSE_CLICK,VTERM_PROP_MOUSE_CLICK151,3541
  VTERM_PROP_MOUSE_DRAG,VTERM_PROP_MOUSE_DRAG152,3567
  VTERM_PROP_MOUSE_MOVE,VTERM_PROP_MOUSE_MOVE153,3592
  VTERM_N_PROP_MOUSESVTERM_N_PROP_MOUSES155,3618
  const uint32_t *chars;chars159,3661
  int             width;width160,3686
  unsigned int    protected_cell:1;  // DECSCA-protected against DECSEL/DECSEDprotected_cell161,3711
  unsigned int    dwl:1;             // DECDWL or DECDHL double-width linedwl162,3790
  unsigned int    dhl:2;             // DECDHL double-height line (1=top 2=bottom)dhl163,3865
} VTermGlyphInfo;VTermGlyphInfo164,3948
  unsigned int    doublewidth:1;     // DECDWL or DECDHL linedoublewidth167,3984
  unsigned int    doubleheight:2;    // DECDHL line (1=top 2=bottom)doubleheight168,4046
} VTermLineInfo;VTermLineInfo169,4115
  void *(*malloc)(size_t size, void *allocdata);malloc174,4257
  void  (*free)(void *ptr, void *allocdata);free175,4306
} VTermAllocatorFunctions;VTermAllocatorFunctions176,4351
#define CSI_ARG_FLAG_MORE CSI_ARG_FLAG_MORE226,6165
#define CSI_ARG_MASK CSI_ARG_MASK227,6200
#define CSI_ARG_HAS_MORE(CSI_ARG_HAS_MORE229,6239
#define CSI_ARG(CSI_ARG230,6293
#define CSI_ARG_MISSING CSI_ARG_MISSING233,6408
#define CSI_ARG_IS_MISSING(CSI_ARG_IS_MISSING235,6445
#define CSI_ARG_OR(CSI_ARG_OR236,6507
#define CSI_ARG_COUNT(CSI_ARG_COUNT237,6590
  int (*text)(const char *bytes, size_t len, void *user);text240,6706
  int (*control)(unsigned char control, void *user);control241,6764
  int (*escape)(const char *bytes, size_t len, void *user);escape242,6817
  int (*csi)(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user);csi243,6877
  int (*osc)(const char *command, size_t cmdlen, void *user);osc244,6992
  int (*dcs)(const char *command, size_t cmdlen, void *user);dcs245,7054
  int (*resize)(int rows, int cols, void *user);resize246,7116
} VTermParserCallbacks;VTermParserCallbacks247,7165
  int (*putglyph)(VTermGlyphInfo *info, VTermPos pos, void *user);putglyph257,7392
  int (*movecursor)(VTermPos pos, VTermPos oldpos, int visible, void *user);movecursor258,7459
  int (*scrollrect)(VTermRect rect, int downward, int rightward, void *user);scrollrect259,7536
  int (*moverect)(VTermRect dest, VTermRect src, void *user);moverect260,7614
  int (*erase)(VTermRect rect, int selective, void *user);erase261,7676
  int (*initpen)(void *user);initpen262,7735
  int (*setpenattr)(VTermAttr attr, VTermValue *val, void *user);setpenattr263,7765
  int (*settermprop)(VTermProp prop, VTermValue *val, void *user);settermprop266,7940
  int (*bell)(void *user);bell267,8007
  int (*resize)(int rows, int cols, VTermPos *delta, void *user);resize268,8034
  int (*setlineinfo)(int row, const VTermLineInfo *newinfo, const VTermLineInfo *oldinfo, void *user);setlineinfo269,8100
} VTermStateCallbacks;VTermStateCallbacks270,8203
  VTermPos pos;pos273,8244
  int	   buttons;buttons274,8260
#define MOUSE_BUTTON_LEFT MOUSE_BUTTON_LEFT275,8278
#define MOUSE_BUTTON_MIDDLE MOUSE_BUTTON_MIDDLE276,8309
#define MOUSE_BUTTON_RIGHT MOUSE_BUTTON_RIGHT277,8342
  int      flags;flags278,8374
#define MOUSE_WANT_CLICK MOUSE_WANT_CLICK279,8392
#define MOUSE_WANT_DRAG MOUSE_WANT_DRAG280,8422
#define MOUSE_WANT_MOVE MOUSE_WANT_MOVE281,8452
} VTermMouseState;VTermMouseState283,8511
    unsigned int bold      : 1;bold315,10086
    unsigned int underline : 2;underline316,10118
    unsigned int italic    : 1;italic317,10150
    unsigned int blink     : 1;blink318,10182
    unsigned int reverse   : 1;reverse319,10214
    unsigned int strike    : 1;strike320,10246
    unsigned int font      : 4; // 0 to 9font321,10278
    unsigned int dwl       : 1; // On a DECDWL or DECDHL linedwl322,10320
    unsigned int dhl       : 2; // On a DECDHL line (1=top 2=bottom)dhl323,10382
} VTermScreenCellAttrs;VTermScreenCellAttrs324,10451
#define VTERM_MAX_CHARS_PER_CELL VTERM_MAX_CHARS_PER_CELL327,10493
  uint32_t chars[VTERM_MAX_CHARS_PER_CELL];chars328,10528
  char     width;width329,10572
  VTermScreenCellAttrs attrs;attrs330,10590
  VTermColor fg, bg;fg331,10620
  VTermColor fg, bg;bg331,10620
} VTermScreenCell;VTermScreenCell332,10641
  int (*damage)(VTermRect rect, void *user);damage336,10726
  int (*moverect)(VTermRect dest, VTermRect src, void *user);moverect337,10771
  int (*movecursor)(VTermPos pos, VTermPos oldpos, int visible, void *user);movecursor338,10833
  int (*settermprop)(VTermProp prop, VTermValue *val, void *user);settermprop339,10910
  int (*bell)(void *user);bell340,10977
  int (*resize)(int rows, int cols, void *user);resize341,11004
  int (*sb_pushline)(int cols, const VTermScreenCell *cells, void *user);sb_pushline345,11184
  int (*sb_popline)(int cols, VTermScreenCell *cells, void *user);sb_popline346,11258
} VTermScreenCallbacks;VTermScreenCallbacks347,11325
  VTERM_DAMAGE_CELL,    // every cellVTERM_DAMAGE_CELL369,12223
  VTERM_DAMAGE_ROW,     // entire rowsVTERM_DAMAGE_ROW370,12261
  VTERM_DAMAGE_SCREEN,  // entire screenVTERM_DAMAGE_SCREEN371,12300
  VTERM_DAMAGE_SCROLL,  // entire screen + scrollrectVTERM_DAMAGE_SCROLL372,12341
  VTERM_N_DAMAGESVTERM_N_DAMAGES374,12396
} VTermDamageSize;VTermDamageSize375,12414
  VTERM_ATTR_BOLD_MASK       = 1 << 0,VTERM_ATTR_BOLD_MASK393,13078
  VTERM_ATTR_UNDERLINE_MASK  = 1 << 1,VTERM_ATTR_UNDERLINE_MASK394,13117
  VTERM_ATTR_ITALIC_MASK     = 1 << 2,VTERM_ATTR_ITALIC_MASK395,13156
  VTERM_ATTR_BLINK_MASK      = 1 << 3,VTERM_ATTR_BLINK_MASK396,13195
  VTERM_ATTR_REVERSE_MASK    = 1 << 4,VTERM_ATTR_REVERSE_MASK397,13234
  VTERM_ATTR_STRIKE_MASK     = 1 << 5,VTERM_ATTR_STRIKE_MASK398,13273
  VTERM_ATTR_FONT_MASK       = 1 << 6,VTERM_ATTR_FONT_MASK399,13312
  VTERM_ATTR_FOREGROUND_MASK = 1 << 7,VTERM_ATTR_FOREGROUND_MASK400,13351
  VTERM_ATTR_BACKGROUND_MASK = 1 << 8,VTERM_ATTR_BACKGROUND_MASK401,13390
  VTERM_ALL_ATTRS_MASK = (1 << 9) - 1VTERM_ALL_ATTRS_MASK403,13430
} VTermAttrMask;VTermAttrMask404,13468

src/libvterm/include/vterm_keycodes.h,2071
#define __VTERM_INPUT_H____VTERM_INPUT_H__2,26
  VTERM_MOD_NONE  = 0x00,VTERM_MOD_NONE5,68
  VTERM_MOD_SHIFT = 0x01,VTERM_MOD_SHIFT6,94
  VTERM_MOD_ALT   = 0x02,VTERM_MOD_ALT7,120
  VTERM_MOD_CTRL  = 0x04,VTERM_MOD_CTRL8,146
  VTERM_ALL_MODS_MASK = 0x07VTERM_ALL_MODS_MASK10,173
} VTermModifier;VTermModifier11,202
  VTERM_KEY_NONE,VTERM_KEY_NONE15,294
  VTERM_KEY_ENTER,VTERM_KEY_ENTER17,313
  VTERM_KEY_TAB,VTERM_KEY_TAB18,332
  VTERM_KEY_BACKSPACE,VTERM_KEY_BACKSPACE19,349
  VTERM_KEY_ESCAPE,VTERM_KEY_ESCAPE20,372
  VTERM_KEY_UP,VTERM_KEY_UP22,393
  VTERM_KEY_DOWN,VTERM_KEY_DOWN23,409
  VTERM_KEY_LEFT,VTERM_KEY_LEFT24,427
  VTERM_KEY_RIGHT,VTERM_KEY_RIGHT25,445
  VTERM_KEY_INS,VTERM_KEY_INS27,465
  VTERM_KEY_DEL,VTERM_KEY_DEL28,482
  VTERM_KEY_HOME,VTERM_KEY_HOME29,499
  VTERM_KEY_END,VTERM_KEY_END30,517
  VTERM_KEY_PAGEUP,VTERM_KEY_PAGEUP31,534
  VTERM_KEY_PAGEDOWN,VTERM_KEY_PAGEDOWN32,554
  VTERM_KEY_FUNCTION_0   = 256,VTERM_KEY_FUNCTION_035,642
  VTERM_KEY_FUNCTION_MAX = VTERM_KEY_FUNCTION_0 + 255,VTERM_KEY_FUNCTION_MAX36,674
  VTERM_KEY_KP_0,VTERM_KEY_KP_039,747
  VTERM_KEY_KP_1,VTERM_KEY_KP_140,765
  VTERM_KEY_KP_2,VTERM_KEY_KP_241,783
  VTERM_KEY_KP_3,VTERM_KEY_KP_342,801
  VTERM_KEY_KP_4,VTERM_KEY_KP_443,819
  VTERM_KEY_KP_5,VTERM_KEY_KP_544,837
  VTERM_KEY_KP_6,VTERM_KEY_KP_645,855
  VTERM_KEY_KP_7,VTERM_KEY_KP_746,873
  VTERM_KEY_KP_8,VTERM_KEY_KP_847,891
  VTERM_KEY_KP_9,VTERM_KEY_KP_948,909
  VTERM_KEY_KP_MULT,VTERM_KEY_KP_MULT49,927
  VTERM_KEY_KP_PLUS,VTERM_KEY_KP_PLUS50,948
  VTERM_KEY_KP_COMMA,VTERM_KEY_KP_COMMA51,969
  VTERM_KEY_KP_MINUS,VTERM_KEY_KP_MINUS52,991
  VTERM_KEY_KP_PERIOD,VTERM_KEY_KP_PERIOD53,1013
  VTERM_KEY_KP_DIVIDE,VTERM_KEY_KP_DIVIDE54,1036
  VTERM_KEY_KP_ENTER,VTERM_KEY_KP_ENTER55,1059
  VTERM_KEY_KP_EQUAL,VTERM_KEY_KP_EQUAL56,1081
  VTERM_KEY_MAX, // Must be lastVTERM_KEY_MAX58,1104
  VTERM_N_KEYS = VTERM_KEY_MAXVTERM_N_KEYS59,1137
} VTermKey;VTermKey60,1168
#define VTERM_KEY_FUNCTION(VTERM_KEY_FUNCTION62,1181

src/libvterm/src/rect.h,441
#define STRFrect STRFrect5,58
#define ARGSrect(ARGSrect6,91
static void rect_expand(VTermRect *dst, VTermRect *src)rect_expand9,204
static void rect_clip(VTermRect *dst, VTermRect *bounds)rect_clip18,606
static int rect_equal(VTermRect *a, VTermRect *b)rect_equal30,1193
static int rect_contains(VTermRect *big, VTermRect *small)rect_contains39,1466
static int rect_intersects(VTermRect *a, VTermRect *b)rect_intersects49,1783

src/libvterm/src/utf8.h,131
INLINE unsigned int utf8_seqlen(long codepoint)utf8_seqlen8,200
INLINE int fill_utf8(long codepoint, char *str)fill_utf823,584

src/libvterm/src/vterm_internal.h,7165
#define __VTERM_INTERNAL_H____VTERM_INTERNAL_H__2,29
# define INTERNAL INTERNAL9,147
# define UNUSED UNUSED10,205
# define INTERNALINTERNAL12,251
# define UNUSEDUNUSED13,269
# define DEBUG_LOG(DEBUG_LOG17,306
# define DEBUG_LOG1(DEBUG_LOG118,347
# define DEBUG_LOG2(DEBUG_LOG219,395
# define DEBUG_LOG3(DEBUG_LOG320,449
# define DEBUG_LOG(DEBUG_LOG22,515
# define DEBUG_LOG1(DEBUG_LOG123,537
# define DEBUG_LOG2(DEBUG_LOG224,563
# define DEBUG_LOG3(DEBUG_LOG325,592
#define ESC_S ESC_S28,632
#define INTERMED_MAX INTERMED_MAX30,654
#define CSI_ARGS_MAX CSI_ARGS_MAX32,679
#define CSI_LEADER_MAX CSI_LEADER_MAX33,703
typedef struct VTermEncoding VTermEncoding;VTermEncoding35,730
  VTermEncoding *enc;enc38,792
  char           data[4*sizeof(uint32_t)];data41,890
} VTermEncodingInstance;VTermEncodingInstance42,933
struct VTermPenVTermPen44,959
  VTermColor fg;fg46,977
  VTermColor bg;bg47,994
  unsigned int bold:1;bold48,1011
  unsigned int underline:2;underline49,1034
  unsigned int italic:1;italic50,1062
  unsigned int blink:1;blink51,1087
  unsigned int reverse:1;reverse52,1111
  unsigned int strike:1;strike53,1137
  unsigned int font:4; // To store 0-9font54,1162
INLINE int vterm_color_equal(VTermColor a, VTermColor b)vterm_color_equal60,1299
struct VTermStateVTermState66,1435
  VTerm *vt;vt68,1455
  const VTermStateCallbacks *callbacks;callbacks70,1469
  void *cbdata;cbdata71,1509
  const VTermParserCallbacks *fallbacks;fallbacks73,1526
  void *fbdata;fbdata74,1567
  int rows;rows76,1584
  int cols;cols77,1596
  VTermPos pos;pos80,1638
  int at_phantom; // True if we're on the "81st" phantom column to defer a wraparoundat_phantom82,1655
  int scrollregion_top;scrollregion_top84,1742
  int scrollregion_bottom; // -1 means unboundedscrollregion_bottom85,1766
#define SCROLLREGION_BOTTOM(SCROLLREGION_BOTTOM86,1815
  int scrollregion_left;scrollregion_left87,1933
#define SCROLLREGION_LEFT(SCROLLREGION_LEFT88,1958
  int scrollregion_right; // -1 means unboundedscrollregion_right89,2057
#define SCROLLREGION_RIGHT(SCROLLREGION_RIGHT90,2105
  unsigned char *tabstops;tabstops93,2282
  VTermLineInfo *lineinfo;lineinfo95,2310
#define ROWWIDTH(ROWWIDTH96,2337
#define THISROWWIDTH(THISROWWIDTH97,2442
  int mouse_col, mouse_row;mouse_col100,2522
  int mouse_col, mouse_row;mouse_row100,2522
  int mouse_buttons;mouse_buttons101,2550
  int mouse_flags;mouse_flags102,2571
  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;MOUSE_X10104,2591
  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;MOUSE_UTF8104,2591
  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;MOUSE_SGR104,2591
  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;MOUSE_RXVT104,2591
  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;mouse_protocol104,2591
  uint32_t *combine_chars;combine_chars107,2721
  size_t combine_chars_size; // Number of ELEMENTS in the abovecombine_chars_size108,2748
  int combine_width; // The width of the glyph abovecombine_width109,2812
  VTermPos combine_pos;   // Position before movementcombine_pos110,2865
    unsigned int keypad:1;keypad113,2931
    unsigned int cursor:1;cursor114,2958
    unsigned int autowrap:1;autowrap115,2985
    unsigned int insert:1;insert116,3014
    unsigned int newline:1;newline117,3041
    unsigned int cursor_visible:1;cursor_visible118,3069
    unsigned int cursor_blink:1;cursor_blink119,3104
    unsigned int cursor_shape:2;cursor_shape120,3137
    unsigned int alt_screen:1;alt_screen121,3170
    unsigned int origin:1;origin122,3201
    unsigned int screen:1;screen123,3228
    unsigned int leftrightmargin:1;leftrightmargin124,3255
    unsigned int bracketpaste:1;bracketpaste125,3291
    unsigned int report_focus:1;report_focus126,3324
    unsigned int modify_other_keys:1;modify_other_keys127,3357
  } mode;mode128,3395
  VTermEncodingInstance encoding[4], encoding_utf8;encoding130,3406
  VTermEncodingInstance encoding[4], encoding_utf8;encoding_utf8130,3406
  int gl_set, gr_set, gsingle_set;gl_set131,3458
  int gl_set, gr_set, gsingle_set;gr_set131,3458
  int gl_set, gr_set, gsingle_set;gsingle_set131,3458
  struct VTermPen pen;pen133,3494
  VTermColor default_fg;default_fg135,3518
  VTermColor default_bg;default_bg136,3543
  VTermColor colors[16]; // Store the 8 ANSI and the 8 ANSI high-brights onlycolors137,3568
  int fg_index;fg_index139,3647
  int bg_index;bg_index140,3663
  int bold_is_highbright;bold_is_highbright141,3679
  unsigned int protected_cell : 1;protected_cell143,3706
    VTermPos pos;pos147,3795
    struct VTermPen pen;pen148,3813
      unsigned int cursor_visible:1;cursor_visible151,3852
      unsigned int cursor_blink:1;cursor_blink152,3889
      unsigned int cursor_shape:2;cursor_shape153,3924
    } mode;mode154,3959
  } saved;saved155,3971
  VTERM_PARSER_OSC,VTERM_PARSER_OSC159,4001
  VTERM_PARSER_DCS,VTERM_PARSER_DCS160,4021
  VTERM_N_PARSER_TYPESVTERM_N_PARSER_TYPES162,4042
} VTermParserStringType;VTermParserStringType163,4065
struct VTermVTerm165,4091
  VTermAllocatorFunctions *allocator;allocator167,4106
  void *allocdata;allocdata168,4144
  int rows;rows170,4164
  int cols;cols171,4176
    unsigned int utf8:1;utf8174,4200
    unsigned int ctrl8bit:1;ctrl8bit175,4225
  } mode;mode176,4254
    enum VTermParserState {VTermParserState179,4276
      NORMAL,NORMAL180,4304
      CSI_LEADER,CSI_LEADER181,4318
      CSI_ARGS,CSI_ARGS182,4336
      CSI_INTERMED,CSI_INTERMED183,4352
      ESC,ESC184,4372
      STRING,STRING186,4427
      ESC_IN_STRING,ESC_IN_STRING187,4441
    } state;state188,4462
    int intermedlen;intermedlen190,4476
    char intermed[INTERMED_MAX];intermed191,4497
    int csi_leaderlen;csi_leaderlen193,4531
    char csi_leader[CSI_LEADER_MAX];csi_leader194,4554
    int csi_argi;csi_argi196,4592
    long csi_args[CSI_ARGS_MAX];csi_args197,4610
    const VTermParserCallbacks *callbacks;callbacks199,4644
    void *cbdata;cbdata200,4687
    VTermParserStringType stringtype;stringtype202,4706
    char  *strbuffer;strbuffer203,4744
    size_t strbuffer_len;strbuffer_len204,4766
    size_t strbuffer_cur;strbuffer_cur205,4792
  } parser;parser206,4818
  char  *outbuffer;outbuffer210,4890
  size_t outbuffer_len;outbuffer_len211,4910
  size_t outbuffer_cur;outbuffer_cur212,4934
  VTermState *state;state214,4959
  VTermScreen *screen;screen215,4980
  int in_backspace;in_backspace217,5004
struct VTermEncoding {VTermEncoding220,5028
  void (*init) (VTermEncoding *enc, void *data);init221,5051
  void (*decode)(VTermEncoding *enc, void *data,decode222,5100
  ENC_UTF8,ENC_UTF8228,5284
  ENC_SINGLE_94ENC_SINGLE_94229,5296
} VTermEncodingType;VTermEncodingType230,5312
  C1_SS3 = 0x8f,C1_SS3250,6161
  C1_DCS = 0x90,C1_DCS251,6178
  C1_CSI = 0x9b,C1_CSI252,6195
  C1_ST  = 0x9c,C1_ST253,6212
  C1_OSC = 0x9d,C1_OSC254,6229

src/macros.h,4972
#define PBYTE(PBYTE19,463
#define LT_POS(LT_POS24,574
#define LT_POSP(LT_POSP29,745
#define EQUAL_POS(EQUAL_POS34,927
#define CLEAR_POS(CLEAR_POS35,1030
#define LTOREQ_POS(LTOREQ_POS37,1113
#define VIM_ISWHITE(VIM_ISWHITE43,1311
#define LINEEMPTY(LINEEMPTY48,1420
#define BUFEMPTY(BUFEMPTY53,1528
#  define TOUPPER_LOC(TOUPPER_LOC65,2108
#  define TOLOWER_LOC(TOLOWER_LOC66,2156
#  define TOUPPER_LOC(TOUPPER_LOC69,2233
#  define TOLOWER_LOC(TOLOWER_LOC70,2290
#  define TOUPPER_LOC	TOUPPER_LOC72,2354
#  define TOLOWER_LOC	TOLOWER_LOC73,2385
# define TOUPPER_ASC(TOUPPER_ASC79,2519
# define TOLOWER_ASC(TOLOWER_ASC80,2575
# define TOUPPER_ASC(TOUPPER_ASC82,2637
# define TOLOWER_ASC(TOLOWER_ASC83,2714
#define MB_ISLOWER(MB_ISLOWER90,2924
#define MB_ISUPPER(MB_ISUPPER91,2961
#define MB_TOLOWER(MB_TOLOWER92,2998
#define MB_TOUPPER(MB_TOUPPER93,3035
#define VIM_ISDIGIT(VIM_ISDIGIT98,3256
# define ASCII_ISALPHA(ASCII_ISALPHA103,3427
# define ASCII_ISALNUM(ASCII_ISALNUM104,3464
# define ASCII_ISLOWER(ASCII_ISLOWER105,3501
# define ASCII_ISUPPER(ASCII_ISUPPER106,3538
# define ASCII_ISLOWER(ASCII_ISLOWER108,3581
# define ASCII_ISUPPER(ASCII_ISUPPER109,3634
# define ASCII_ISALPHA(ASCII_ISALPHA110,3687
# define ASCII_ISALNUM(ASCII_ISALNUM111,3752
#define EMPTY_IF_NULL(EMPTY_IF_NULL115,3862
# define LANGMAP_ADJUST(LANGMAP_ADJUST126,4313
# define LANGMAP_ADJUST(LANGMAP_ADJUST141,4600
#define VIM_ISBREAK(VIM_ISBREAK148,4796
# define mch_access(mch_access155,4987
# define mch_fopen(mch_fopen157,5075
# define mch_fstat(mch_fstat158,5131
# define mch_stat(mch_stat160,5217
# define mch_rmdir(mch_rmdir161,5272
#   define mch_access(mch_access164,5342
# define mch_fstat(mch_fstat166,5395
#  define mch_stat(mch_stat168,5485
#   define mch_stat(mch_stat171,5564
#   define mch_stat(mch_stat173,5617
# define mch_lstat(mch_lstat179,5701
# define mch_lstat(mch_lstat181,5748
# define mch_open(mch_open190,6035
# define mch_open_rw(mch_open_rw195,6236
#  define mch_open_rw(mch_open_rw198,6342
#  define mch_open_rw(mch_open_rw200,6416
# define TIME_MSG(TIME_MSG205,6501
# define TIME_MSG(TIME_MSG207,6585
#define REPLACE_NORMAL(REPLACE_NORMAL210,6636
# define ARABIC_CHAR(ARABIC_CHAR213,6731
# define UTF_COMPOSINGLIKE(UTF_COMPOSINGLIKE214,6795
# define UTF_COMPOSINGLIKE(UTF_COMPOSINGLIKE216,6867
# define CURSOR_BAR_RIGHT CURSOR_BAR_RIGHT221,7038
#define MB_PTR_ADV(MB_PTR_ADV233,7535
#define MB_CPTR_ADV(MB_CPTR_ADV235,7648
#define MB_PTR_BACK(MB_PTR_BACK237,7781
#define MB_CPTR2LEN(MB_CPTR2LEN239,7924
#define MB_COPY_CHAR(MB_COPY_CHAR241,7999
#define MB_CHARLEN(MB_CHARLEN242,8098
#define MB_CHAR2LEN(MB_CHAR2LEN243,8169
#define PTR2CHAR(PTR2CHAR244,8229
# define DO_AUTOCHDIR DO_AUTOCHDIR247,8317
# define DO_AUTOCHDIR DO_AUTOCHDIR249,8389
#define RESET_BINDING(RESET_BINDING252,8441
# define PLINES_NOFILL(PLINES_NOFILL256,8558
# define PLINES_NOFILL(PLINES_NOFILL258,8607
# define MESSAGE_QUEUEMESSAGE_QUEUE262,8711
#    define isnan(isnan274,8950
     static __inline int isinf(double x) { return !_finite(x) && !_isnan(x); }isinf275,8981
     static inline int isnan(double x) { return x != x; }isnan279,9100
     static inline int isinf(double x) { return !isnan(x) && isnan(x - x); }isinf282,9190
#     define INFINITY INFINITY288,9350
#     define INFINITY INFINITY290,9390
#    define INFINITY INFINITY293,9450
#   define NAN NAN297,9522
#   define DBL_EPSILON DBL_EPSILON300,9594
# define FUNCARG(FUNCARG306,9682
#define DI2HIKEY(DI2HIKEY316,10076
#define HIKEY2DI(HIKEY2DI317,10112
#define HI2DI(HI2DI318,10184
# define mch_enable_flush(mch_enable_flush324,10281
# define mch_disable_flush(mch_disable_flush325,10328
# define mch_enable_flush(mch_enable_flush327,10383
# define mch_disable_flush(mch_disable_flush328,10411
#define VIM_CLEAR(VIM_CLEAR334,10509
#define IS_USER_CMDIDX(IS_USER_CMDIDX343,10679
# define WIN_IS_POPUP(WIN_IS_POPUP347,10815
# define ERROR_IF_POPUP_WINDOW ERROR_IF_POPUP_WINDOW348,10868
# define ERROR_IF_ANY_POPUP_WINDOW ERROR_IF_ANY_POPUP_WINDOW349,10928
# define WIN_IS_POPUP(WIN_IS_POPUP351,10997
# define ERROR_IF_POPUP_WINDOW ERROR_IF_POPUP_WINDOW352,11025
# define ERROR_IF_ANY_POPUP_WINDOW ERROR_IF_ANY_POPUP_WINDOW353,11058
# define ERROR_IF_TERM_POPUP_WINDOW ERROR_IF_TERM_POPUP_WINDOW356,11157
# define ERROR_IF_TERM_POPUP_WINDOW ERROR_IF_TERM_POPUP_WINDOW358,11228
# define ESTACK_CHECK_DECLARATION ESTACK_CHECK_DECLARATION363,11306
# define ESTACK_CHECK_SETUP ESTACK_CHECK_SETUP364,11363
# define ESTACK_CHECK_NOW ESTACK_CHECK_NOW365,11428
# define CHECK_CURBUF CHECK_CURBUF367,11587
# define ESTACK_CHECK_DECLARATIONESTACK_CHECK_DECLARATION370,11705
# define ESTACK_CHECK_SETUPESTACK_CHECK_SETUP371,11739
# define ESTACK_CHECK_NOWESTACK_CHECK_NOW372,11767
# define CHECK_CURBUFCHECK_CURBUF373,11793

src/nbdebug.h,647
#define NBDEBUG_HNBDEBUG_H12,282
#  define ASSERT(ASSERT17,333
# define nbdebug(nbdebug26,503
# define NB_TRACE	NB_TRACE28,532
# define NB_TRACE_VERBOSE	NB_TRACE_VERBOSE29,562
# define NB_TRACE_COLONCMD	NB_TRACE_COLONCMD30,599
# define NB_PRINT	NB_PRINT31,637
# define NB_DEBUG_ALL	NB_DEBUG_ALL32,667
# define NBDLEVEL(NBDLEVEL34,702
# define NBDEBUG_TRACE	NBDEBUG_TRACE36,772
		WT_ENV = 1,		// look for env var if setWT_ENV39,813
		WT_WAIT,		// look for ~/.gvimwait if setWT_WAIT40,855
		WT_STOP			// look for ~/.gvimstop if setWT_STOP41,898
} WtWait;WtWait42,941
#  define ASSERT(ASSERT60,1310
nbdbg(nbdbg69,1467

src/optiondefs.h,6242
#define PV_BOTH PV_BOTH19,548
#define PV_WIN PV_WIN20,571
#define PV_BUF PV_BUF21,594
#define PV_MASK PV_MASK22,617
#define OPT_WIN(OPT_WIN23,640
#define OPT_BUF(OPT_BUF24,689
#define OPT_BOTH(OPT_BOTH25,738
#define PV_AI	PV_AI29,890
#define PV_AR	PV_AR30,920
#define PV_BKC	PV_BKC31,960
#define PV_BH	PV_BH32,1002
#define PV_BT	PV_BT33,1032
# define PV_EFM	PV_EFM35,1083
# define PV_GP	PV_GP36,1126
# define PV_MP	PV_MP37,1167
#define PV_BIN	PV_BIN39,1215
#define PV_BL	PV_BL40,1247
#define PV_BOMB	PV_BOMB41,1277
#define PV_CI	PV_CI42,1311
# define PV_CIN	PV_CIN44,1361
# define PV_CINK	PV_CINK45,1394
# define PV_CINO	PV_CINO46,1428
# define PV_CINW	PV_CINW49,1524
#define PV_CM	PV_CM51,1565
# define PV_CMS	PV_CMS53,1625
#define PV_COM	PV_COM55,1665
#define PV_CPT	PV_CPT56,1697
#define PV_DICT	PV_DICT57,1729
#define PV_TSR	PV_TSR58,1772
#define PV_CSL	PV_CSL59,1814
# define PV_CFU	PV_CFU61,1869
# define PV_DEF	PV_DEF64,1929
# define PV_INC	PV_INC65,1972
#define PV_EOL	PV_EOL67,2022
#define PV_FIXEOL	PV_FIXEOL68,2054
#define PV_EP	PV_EP69,2091
#define PV_ET	PV_ET70,2131
#define PV_FENC	PV_FENC71,2161
# define PV_BEXPR	PV_BEXPR73,2241
#define PV_FP	PV_FP75,2294
# define PV_FEX	PV_FEX77,2351
#define PV_FF	PV_FF79,2391
#define PV_FLP	PV_FLP80,2421
#define PV_FO	PV_FO81,2453
#define PV_FT	PV_FT82,2483
#define PV_IMI	PV_IMI83,2513
#define PV_IMS	PV_IMS84,2545
# define PV_INDE	PV_INDE86,2625
# define PV_INDK	PV_INDK87,2659
# define PV_INEX	PV_INEX90,2748
#define PV_INF	PV_INF92,2789
#define PV_ISK	PV_ISK93,2821
# define PV_KEY	PV_KEY95,2871
# define PV_KMAP	PV_KMAP98,2930
#define PV_KP	PV_KP100,2971
# define PV_LISP	PV_LISP102,3028
# define PV_LW	PV_LW103,3062
#define PV_MENC	PV_MENC105,3110
#define PV_MA	PV_MA106,3154
#define PV_ML	PV_ML107,3184
#define PV_MOD	PV_MOD108,3214
#define PV_MPS	PV_MPS109,3246
#define PV_NF	PV_NF110,3278
# define PV_OFU	PV_OFU112,3331
#define PV_PATH	PV_PATH114,3371
#define PV_PI	PV_PI115,3415
# define PV_QE	PV_QE117,3465
#define PV_RO	PV_RO119,3503
# define PV_SI	PV_SI121,3557
#define PV_SN	PV_SN123,3595
# define PV_SMC	PV_SMC125,3644
# define PV_SYN	PV_SYN126,3677
# define PV_SPC	PV_SPC129,3735
# define PV_SPF	PV_SPF130,3768
# define PV_SPL	PV_SPL131,3801
#define PV_STS	PV_STS133,3841
# define PV_SUA	PV_SUA135,3896
#define PV_SW	PV_SW137,3936
#define PV_SWF	PV_SWF138,3966
# define PV_TFU	PV_TFU140,4015
#define PV_TAGS	PV_TAGS142,4055
#define PV_TC	PV_TC143,4099
#define PV_TS	PV_TS144,4139
#define PV_TW	PV_TW145,4169
#define PV_TX	PV_TX146,4199
# define PV_UDF	PV_UDF148,4257
#define PV_WM	PV_WM150,4297
# define PV_VSTS	PV_VSTS152,4347
# define PV_VTS	PV_VTS153,4382
#define PV_LIST	PV_LIST158,4524
# define PV_ARAB	PV_ARAB160,4577
# define PV_BRI	PV_BRI163,4640
# define PV_BRIOPT	PV_BRIOPT164,4673
# define PV_WCR	PV_WCR166,4718
# define PV_DIFF	PV_DIFF168,4768
# define PV_FDC	PV_FDC171,4829
# define PV_FEN	PV_FEN172,4862
# define PV_FDI	PV_FDI173,4895
# define PV_FDL	PV_FDL174,4928
# define PV_FDM	PV_FDM175,4961
# define PV_FML	PV_FML176,4994
# define PV_FDN	PV_FDN177,5027
#  define PV_FDE	PV_FDE179,5078
#  define PV_FDT	PV_FDT180,5111
# define PV_FMR	PV_FMR182,5152
# define PV_LBR	PV_LBR185,5214
#define PV_NU	PV_NU187,5254
#define PV_RNU	PV_RNU188,5284
# define PV_NUW	PV_NUW190,5338
# define PV_PVW	PV_PVW193,5405
# define PV_RL	PV_RL196,5467
# define PV_RLC	PV_RLC197,5498
#define PV_SCBIND	PV_SCBIND199,5538
#define PV_SCROLL	PV_SCROLL200,5575
#define PV_SISO	PV_SISO201,5612
#define PV_SO	PV_SO202,5656
# define PV_SPELL	PV_SPELL204,5714
# define PV_CUC	PV_CUC207,5776
# define PV_CUL	PV_CUL208,5809
# define PV_CULOPT	PV_CULOPT209,5842
# define PV_CC	PV_CC210,5880
# define PV_SBR	PV_SBR213,5940
# define PV_STL	PV_STL216,6010
#define PV_UL	PV_UL218,6060
# define PV_WFH	PV_WFH219,6100
# define PV_WFW	PV_WFW220,6133
#define PV_WRAP	PV_WRAP221,6166
#define PV_CRBIND	PV_CRBIND222,6200
# define PV_COCU	PV_COCU224,6257
# define PV_COLE	PV_COLE225,6291
# define PV_TWK	PV_TWK228,6353
# define PV_TWS	PV_TWS229,6386
# define PV_TWSL	PV_TWSL230,6419
# define PV_SCL	PV_SCL233,6478
    PV_NONE = 0,PV_NONE239,6601
    PV_MAXVAL = 0xffff    // to avoid warnings for value out of rangePV_MAXVAL240,6618
} idopt_T;idopt_T241,6688
#define VAR_WIN VAR_WIN245,6834
static int	p_et_nobin;p_et_nobin248,6905
static int	p_ml_nobin;p_ml_nobin249,6928
static long	p_tw_nobin;p_tw_nobin250,6951
static long	p_wm_nobin;p_wm_nobin251,6975
static int	p_ai_nopaste;p_ai_nopaste254,7040
static int	p_et_nopaste;p_et_nopaste255,7065
static long	p_sts_nopaste;p_sts_nopaste256,7090
static long	p_tw_nopaste;p_tw_nopaste257,7117
static long	p_wm_nopaste;p_wm_nopaste258,7143
static char_u	*p_vsts_nopaste;p_vsts_nopaste260,7189
struct vimoptionvimoption263,7228
    char	*fullname;	// full option namefullname265,7247
    char	*shortname;	// permissible abbreviationshortname266,7287
    long_u	flags;		// see belowflags267,7336
    char_u	*var;		// global option: pointer to variable;var268,7368
    idopt_T	indir;		// global option: PV_NONE;indir271,7503
    char_u	*def_val[2];	// default values for variable (vi and vim)def_val273,7593
    sctx_T	script_ctx;	// script context where the option was last setscript_ctx275,7678
# define SCTX_INIT SCTX_INIT276,7749
# define SCTX_INITSCTX_INIT278,7789
#define VI_DEFAULT VI_DEFAULT282,7819
#define VIM_DEFAULT VIM_DEFAULT283,7888
#define ISK_LATIN1 ISK_LATIN1285,7960
# define ISP_LATIN1 ISP_LATIN1290,8135
# define ISP_LATIN1 ISP_LATIN1292,8181
# define HIGHLIGHT_INIT HIGHLIGHT_INIT295,8231
# define DEFAULT_PYTHON_VER	DEFAULT_PYTHON_VER299,8922
# define DEFAULT_PYTHON_VER	DEFAULT_PYTHON_VER301,8980
# define DEFAULT_PYTHON_VER	DEFAULT_PYTHON_VER303,9037
# define DEFAULT_PYTHON_VER	DEFAULT_PYTHON_VER305,9073
#define INDENTKEYS_DEFAULT INDENTKEYS_DEFAULT309,9150
#define p_term(p_term2921,93763
static struct vimoption options[] =options317,9562
#define OPTION_COUNT OPTION_COUNT3012,96082

src/option.h,38641
#define _OPTION_H__OPTION_H_14,311
#define P_BOOL	P_BOOL19,346
#define P_NUM	P_NUM20,392
#define P_STRING	P_STRING21,437
#define P_ALLOCED	P_ALLOCED22,485
#define P_EXPAND	P_EXPAND26,662
#define P_NODEFAULT	P_NODEFAULT28,780
#define P_DEF_ALLOCED	P_DEF_ALLOCED29,835
#define P_WAS_SET	P_WAS_SET31,956
#define P_NO_MKRC	P_NO_MKRC32,1009
#define P_VI_DEF	P_VI_DEF33,1069
#define P_VIM	P_VIM34,1118
#define P_RSTAT	P_RSTAT37,1220
#define P_RWIN	P_RWIN38,1267
#define P_RBUF	P_RBUF39,1334
#define P_RALL	P_RALL40,1401
#define P_RCLR	P_RCLR41,1446
#define P_COMMA	P_COMMA43,1494
#define P_ONECOMMA	P_ONECOMMA44,1544
#define P_NODUP	P_NODUP46,1630
#define P_FLAGLIST	P_FLAGLIST47,1689
#define P_SECURE	P_SECURE49,1747
#define P_GETTEXT P_GETTEXT50,1817
#define P_NOGLOB P_NOGLOB51,1883
#define P_NFNAME P_NFNAME52,1959
#define P_INSECURE P_INSECURE53,2031
#define P_PRI_MKRC P_PRI_MKRC54,2098
#define P_NO_ML P_NO_ML56,2198
#define P_CURSWANT P_CURSWANT57,2258
#define P_NDNAME P_NDNAME59,2367
#define P_RWINONLY P_RWINONLY60,2438
#define P_MLE	P_MLE61,2501
# define DFLT_EFM	DFLT_EFM69,2726
#  define DFLT_EFM	DFLT_EFM72,2875
#   define DFLT_EFM	DFLT_EFM75,3050
#    define DFLT_EFM	DFLT_EFM78,3131
#define DFLT_EFM	DFLT_EFM81,3259
#define DFLT_EFM	DFLT_EFM83,3544
#define DFLT_GREPFORMAT	DFLT_GREPFORMAT90,4236
#define FF_DOS	FF_DOS93,4355
#define FF_MAC	FF_MAC94,4377
#define FF_UNIX	FF_UNIX95,4399
# define DFLT_FF	DFLT_FF98,4440
# define DFLT_FFS_VIM	DFLT_FFS_VIM99,4463
# define DFLT_FFS_VI	DFLT_FFS_VI100,4496
# define DFLT_TEXTAUTO	DFLT_TEXTAUTO101,4566
# define DFLT_FF	DFLT_FF103,4600
# define DFLT_FFS_VIM	DFLT_FFS_VIM104,4624
#  define DFLT_FFS_VI	DFLT_FFS_VI106,4676
#  define DFLT_TEXTAUTO DFLT_TEXTAUTO107,4747
#  define DFLT_FFS_VI	DFLT_FFS_VI109,4783
#  define DFLT_TEXTAUTO DFLT_TEXTAUTO110,4808
#define ENC_UCSBOM	ENC_UCSBOM116,4889
#define ENC_DFLT	ENC_DFLT119,4985
#define EOL_UNKNOWN	EOL_UNKNOWN122,5033
#define EOL_UNIX	EOL_UNIX123,5075
#define EOL_DOS	EOL_DOS124,5100
#define EOL_MAC	EOL_MAC125,5128
#define FO_WRAP	FO_WRAP128,5201
#define FO_WRAP_COMS	FO_WRAP_COMS129,5222
#define FO_RET_COMS	FO_RET_COMS130,5247
#define FO_OPEN_COMS	FO_OPEN_COMS131,5271
#define FO_Q_COMS	FO_Q_COMS132,5296
#define FO_Q_NUMBER	FO_Q_NUMBER133,5318
#define FO_Q_SECOND	FO_Q_SECOND134,5342
#define FO_INS_VI	FO_INS_VI135,5366
#define FO_INS_LONG	FO_INS_LONG136,5388
#define FO_INS_BLANK	FO_INS_BLANK137,5412
#define FO_MBYTE_BREAK	FO_MBYTE_BREAK138,5437
#define FO_MBYTE_JOIN	FO_MBYTE_JOIN139,5502
#define FO_MBYTE_JOIN2	FO_MBYTE_JOIN2140,5569
#define FO_ONE_LETTER	FO_ONE_LETTER141,5633
#define FO_WHITE_PAR	FO_WHITE_PAR142,5659
#define FO_AUTO	FO_AUTO143,5726
#define FO_REMOVE_COMS	FO_REMOVE_COMS144,5771
#define FO_PERIOD_ABBR	FO_PERIOD_ABBR145,5843
#define DFLT_FO_VI	DFLT_FO_VI147,5916
#define DFLT_FO_VIM	DFLT_FO_VIM148,5940
#define FO_ALL	FO_ALL149,5966
#define CPO_ALTREAD	CPO_ALTREAD152,6057
#define CPO_ALTWRITE	CPO_ALTWRITE153,6117
#define CPO_BAR	CPO_BAR154,6179
#define CPO_BSLASH	CPO_BSLASH155,6223
#define CPO_SEARCH	CPO_SEARCH156,6285
#define CPO_CONCAT	CPO_CONCAT157,6308
#define CPO_DOTTAG	CPO_DOTTAG158,6366
#define CPO_DIGRAPH	CPO_DIGRAPH159,6429
#define CPO_EXECBUF	CPO_EXECBUF160,6488
#define CPO_EMPTYREGION	CPO_EMPTYREGION161,6512
#define CPO_FNAMER	CPO_FNAMER162,6581
#define CPO_FNAMEW	CPO_FNAMEW163,6635
#define CPO_GOTO1	CPO_GOTO1164,6689
#define CPO_INSEND	CPO_INSEND165,6738
#define CPO_INTMOD	CPO_INTMOD166,6802
#define CPO_INDENT	CPO_INDENT167,6867
#define CPO_JOINSP	CPO_JOINSP168,6923
#define CPO_ENDOFSENT	CPO_ENDOFSENT169,6988
#define CPO_KEYCODE	CPO_KEYCODE170,7059
#define CPO_KOFFSET	CPO_KOFFSET171,7127
#define CPO_LITERAL	CPO_LITERAL172,7190
#define CPO_LISTWM	CPO_LISTWM173,7257
#define CPO_SHOWMATCH	CPO_SHOWMATCH174,7309
#define CPO_MATCHBSL	CPO_MATCHBSL175,7335
#define CPO_NUMCOL	CPO_NUMCOL176,7394
#define CPO_LINEOFF	CPO_LINEOFF177,7455
#define CPO_OVERNEW	CPO_OVERNEW178,7479
#define CPO_LISP	CPO_LISP179,7534
#define CPO_FNAMEAPP	CPO_FNAMEAPP180,7575
#define CPO_JOINCOL	CPO_JOINCOL181,7633
#define CPO_REDO	CPO_REDO182,7698
#define CPO_REMMARK	CPO_REMMARK183,7719
#define CPO_BUFOPT	CPO_BUFOPT184,7774
#define CPO_BUFOPTGLOB	CPO_BUFOPTGLOB185,7797
#define CPO_TAGPAT	CPO_TAGPAT186,7824
#define CPO_UNDO	CPO_UNDO187,7847
#define CPO_BACKSPACE	CPO_BACKSPACE188,7889
#define CPO_CW	CPO_CW189,7940
#define CPO_FWRITE	CPO_FWRITE190,7991
#define CPO_ESC	CPO_ESC191,8055
#define CPO_REPLCNT	CPO_REPLCNT192,8076
#define CPO_YANK	CPO_YANK193,8144
#define CPO_KEEPRO	CPO_KEEPRO194,8165
#define CPO_DOLLAR	CPO_DOLLAR195,8223
#define CPO_FILTER	CPO_FILTER196,8246
#define CPO_MATCH	CPO_MATCH197,8269
#define CPO_STAR	CPO_STAR198,8291
#define CPO_PLUS	CPO_PLUS199,8331
#define CPO_MINUS	CPO_MINUS200,8387
#define CPO_SPECI	CPO_SPECI201,8444
#define CPO_REGAPPEND	CPO_REGAPPEND202,8500
#define CPO_HASH	CPO_HASH204,8583
#define CPO_PARA	CPO_PARA205,8643
#define CPO_TSIZE	CPO_TSIZE206,8700
#define CPO_PRESERVE	CPO_PRESERVE207,8764
#define CPO_SUBPERCENT	CPO_SUBPERCENT208,8823
#define CPO_BACKSL	CPO_BACKSL209,8886
#define CPO_CHDIR	CPO_CHDIR210,8936
#define CPO_SCOLON	CPO_SCOLON211,8995
#define CPO_VIM	CPO_VIM214,9131
#define CPO_VI	CPO_VI215,9158
#define CPO_ALL	CPO_ALL216,9229
#define WW_ALL	WW_ALL219,9341
#define MOUSE_NORMAL	MOUSE_NORMAL222,9405
#define MOUSE_VISUAL	MOUSE_VISUAL223,9459
#define MOUSE_INSERT	MOUSE_INSERT224,9520
#define MOUSE_COMMAND	MOUSE_COMMAND225,9574
#define MOUSE_HELP	MOUSE_HELP226,9635
#define MOUSE_RETURN	MOUSE_RETURN227,9688
#define MOUSE_A	MOUSE_A228,9750
#define MOUSE_ALL	MOUSE_ALL229,9797
#define MOUSE_NONE	MOUSE_NONE230,9852
#define MOUSE_NONEF	MOUSE_NONEF231,9906
#define COCU_ALL	COCU_ALL233,9961
#define SHM_RO	SHM_RO236,10048
#define SHM_MOD	SHM_MOD237,10081
#define SHM_FILE	SHM_FILE238,10115
#define SHM_LAST	SHM_LAST239,10154
#define SHM_TEXT	SHM_TEXT240,10200
#define SHM_LINES	SHM_LINES241,10248
#define SHM_NEW	SHM_NEW242,10297
#define SHM_WRI	SHM_WRI243,10354
#define SHM_A	SHM_A244,10406
#define SHM_WRITE	SHM_WRITE245,10459
#define SHM_TRUNC	SHM_TRUNC246,10512
#define SHM_TRUNCALL	SHM_TRUNCALL247,10561
#define SHM_OVER	SHM_OVER248,10612
#define SHM_OVERALL	SHM_OVERALL249,10661
#define SHM_SEARCH	SHM_SEARCH250,10713
#define SHM_ATTENTION	SHM_ATTENTION251,10770
#define SHM_INTRO	SHM_INTRO252,10822
#define SHM_COMPLETIONMENU SHM_COMPLETIONMENU253,10863
#define SHM_RECORDING	SHM_RECORDING254,10924
#define SHM_FILEINFO	SHM_FILEINFO255,10978
#define SHM_SEARCHCOUNT SHM_SEARCHCOUNT256,11029
#define SHM_POSIX SHM_POSIX257,11092
#define SHM_ALL	SHM_ALL258,11147
#define GO_TERMINAL	GO_TERMINAL261,11245
#define GO_ASEL	GO_ASEL262,11306
#define GO_ASELML	GO_ASELML263,11342
#define GO_BOT	GO_BOT264,11398
#define GO_CONDIALOG	GO_CONDIALOG265,11443
#define GO_DARKTHEME	GO_DARKTHEME266,11491
#define GO_TABLINE	GO_TABLINE267,11543
#define GO_FORG	GO_FORG268,11587
#define GO_GREY	GO_GREY269,11636
#define GO_HORSCROLL	GO_HORSCROLL270,11681
#define GO_ICON	GO_ICON271,11740
#define GO_LEFT	GO_LEFT272,11778
#define GO_VLEFT	GO_VLEFT273,11822
#define GO_MENUS	GO_MENUS274,11878
#define GO_NOSYSMENU	GO_NOSYSMENU275,11916
#define GO_POINTER	GO_POINTER276,11970
#define GO_ASELPLUS	GO_ASELPLUS277,12027
#define GO_RIGHT	GO_RIGHT278,12070
#define GO_VRIGHT	GO_VRIGHT279,12115
#define GO_TEAROFF	GO_TEAROFF280,12173
#define GO_TOOLBAR	GO_TOOLBAR281,12224
#define GO_FOOTER	GO_FOOTER282,12263
#define GO_VERTICAL	GO_VERTICAL283,12300
#define GO_KEEPWINSIZE	GO_KEEPWINSIZE284,12362
#define GO_ALL	GO_ALL285,12414
#define COM_NEST	COM_NEST288,12517
#define COM_BLANK	COM_BLANK289,12564
#define COM_START	COM_START290,12615
#define COM_MIDDLE	COM_MIDDLE291,12658
#define COM_END	COM_END292,12703
#define COM_AUTO_END	COM_AUTO_END293,12743
#define COM_FIRST	COM_FIRST294,12804
#define COM_LEFT	COM_LEFT295,12854
#define COM_RIGHT	COM_RIGHT296,12893
#define COM_NOBACK	COM_NOBACK297,12934
#define COM_ALL	COM_ALL298,12987
#define COM_MAX_LEN	COM_MAX_LEN299,13052
#define STL_FILEPATH	STL_FILEPATH302,13138
#define STL_FULLPATH	STL_FULLPATH303,13190
#define STL_FILENAME	STL_FILENAME304,13247
#define STL_COLUMN	STL_COLUMN305,13306
#define STL_VIRTCOL	STL_VIRTCOL306,13350
#define STL_VIRTCOL_ALT	STL_VIRTCOL_ALT307,13393
#define STL_LINE	STL_LINE308,13455
#define STL_NUMLINES	STL_NUMLINES309,13502
#define STL_BUFNO	STL_BUFNO310,13557
#define STL_KEYMAP	STL_KEYMAP311,13605
#define STL_OFFSET	STL_OFFSET312,13653
#define STL_OFFSET_X	STL_OFFSET_X313,13713
#define STL_BYTEVAL	STL_BYTEVAL314,13759
#define STL_BYTEVAL_X	STL_BYTEVAL_X315,13811
#define STL_ROFLAG	STL_ROFLAG316,13858
#define STL_ROFLAG_ALT	STL_ROFLAG_ALT317,13899
#define STL_HELPFLAG	STL_HELPFLAG318,13946
#define STL_HELPFLAG_ALT STL_HELPFLAG_ALT319,14005
#define STL_FILETYPE	STL_FILETYPE320,14054
#define STL_FILETYPE_ALT STL_FILETYPE_ALT321,14094
#define STL_PREVIEWFLAG	STL_PREVIEWFLAG322,14143
#define STL_PREVIEWFLAG_ALT STL_PREVIEWFLAG_ALT323,14209
#define STL_MODIFIED	STL_MODIFIED324,14261
#define STL_MODIFIED_ALT STL_MODIFIED_ALT325,14304
#define STL_QUICKFIX	STL_QUICKFIX326,14353
#define STL_PERCENTAGE	STL_PERCENTAGE327,14410
#define STL_ALTPERCENT	STL_ALTPERCENT328,14465
#define STL_ARGLISTSTAT	STL_ARGLISTSTAT329,14529
#define STL_PAGENUM	STL_PAGENUM330,14594
#define STL_VIM_EXPR	STL_VIM_EXPR331,14650
#define STL_MIDDLEMARK	STL_MIDDLEMARK332,14713
#define STL_TRUNCMARK	STL_TRUNCMARK333,14778
#define STL_USER_HL	STL_USER_HL334,14844
#define STL_HIGHLIGHT	STL_HIGHLIGHT335,14903
#define STL_TABPAGENR	STL_TABPAGENR336,14948
#define STL_TABCLOSENR	STL_TABCLOSENR337,14996
#define STL_ALL	STL_ALL338,15045
#define WIM_FULL	WIM_FULL341,15146
#define WIM_LONGEST	WIM_LONGEST342,15168
#define WIM_LIST	WIM_LIST343,15193
#define WIM_BUFLASTUSED	WIM_BUFLASTUSED344,15215
#define BS_INDENT	BS_INDENT347,15271
#define BS_EOL	BS_EOL348,15305
#define BS_START	BS_START349,15334
#define CULOPT_LINE	CULOPT_LINE352,15400
#define CULOPT_SCRLINE	CULOPT_SCRLINE353,15452
#define CULOPT_NBR	CULOPT_NBR354,15505
#define LISPWORD_VALUE	LISPWORD_VALUE356,15557
EXTERN long	p_aleph;	// 'aleph'p_aleph363,16413
EXTERN char_u	*p_ambw;	// 'ambiwidth'p_ambw365,16452
EXTERN int	p_acd;		// 'autochdir'p_acd367,16512
EXTERN int	p_ai;		// 'autoindent'p_ai369,16553
EXTERN int	p_bin;		// 'binary'p_bin370,16587
EXTERN int	p_bomb;		// 'bomb'p_bomb371,16618
EXTERN int	p_bl;		// 'buflisted'p_bl372,16648
EXTERN int	p_cin;		// 'cindent'p_cin374,16701
EXTERN char_u	*p_cink;	// 'cinkeys'p_cink375,16733
EXTERN char_u	*p_cinw;	// 'cinwords'p_cinw378,16831
EXTERN char_u	*p_cfu;		// 'completefunc'p_cfu381,16898
EXTERN char_u	*p_ofu;		// 'omnifunc'p_ofu382,16939
EXTERN int	p_ci;		// 'copyindent'p_ci384,16983
EXTERN int	*p_antialias;	// 'antialias'p_antialias386,17059
EXTERN int	p_ar;		// 'autoread'p_ar388,17106
EXTERN int	p_aw;		// 'autowrite'p_aw389,17138
EXTERN int	p_awa;		// 'autowriteall'p_awa390,17171
EXTERN char_u	*p_bs;		// 'backspace'p_bs391,17208
EXTERN char_u	*p_bg;		// 'background'p_bg392,17245
EXTERN int	p_bk;		// 'backup'p_bk393,17283
EXTERN char_u	*p_bkc;		// 'backupcopy'p_bkc394,17313
EXTERN unsigned	bkc_flags;	// flags from 'backupcopy'bkc_flags395,17352
# define BKC_YES	BKC_YES396,17406
# define BKC_AUTO	BKC_AUTO397,17430
# define BKC_NO	BKC_NO398,17455
# define BKC_BREAKSYMLINK	BKC_BREAKSYMLINK399,17479
# define BKC_BREAKHARDLINK	BKC_BREAKHARDLINK400,17511
EXTERN char_u	*p_bdir;	// 'backupdir'p_bdir401,17544
EXTERN char_u	*p_bex;		// 'backupext'p_bex402,17582
EXTERN char_u	*p_bo;		// 'belloff'p_bo403,17620
EXTERN unsigned	bo_flags;bo_flags404,17655
#define BO_ALL	BO_ALL407,17716
#define BO_BS	BO_BS408,17739
#define BO_CRSR	BO_CRSR409,17761
#define BO_COMPL	BO_COMPL410,17785
#define BO_COPY	BO_COPY411,17809
#define BO_CTRLG	BO_CTRLG412,17833
#define BO_ERROR	BO_ERROR413,17857
#define BO_ESC	BO_ESC414,17881
#define BO_EX	BO_EX415,17904
#define BO_HANGUL	BO_HANGUL416,17926
#define BO_IM	BO_IM417,17951
#define BO_LANG	BO_LANG418,17973
#define BO_MESS	BO_MESS419,17997
#define BO_MATCH	BO_MATCH420,18021
#define BO_OPER	BO_OPER421,18045
#define BO_REG	BO_REG422,18069
#define BO_SH	BO_SH423,18092
#define BO_SPELL	BO_SPELL424,18115
#define BO_WILD	BO_WILD425,18140
EXTERN char_u	*p_bsk;		// 'backupskip'p_bsk428,18186
EXTERN char_u	*p_cm;		// 'cryptmethod'p_cm431,18250
EXTERN int	p_beval;	// 'ballooneval'p_beval435,18337
EXTERN long	p_bdlay;	// 'balloondelay'p_bdlay437,18382
EXTERN char_u	*p_bexpr;p_bexpr439,18439
EXTERN int	p_bevalterm;	// 'balloonevalterm'p_bevalterm442,18495
EXTERN char_u	*p_bsdir;	// 'browsedir'p_bsdir446,18574
EXTERN char_u	*p_breakat;	// 'breakat'p_breakat449,18642
EXTERN char_u	*p_bh;		// 'bufhidden'p_bh451,18688
EXTERN char_u	*p_bt;		// 'buftype'p_bt452,18725
EXTERN char_u	*p_cmp;		// 'casemap'p_cmp453,18760
EXTERN unsigned	cmp_flags;cmp_flags454,18796
#define CMP_INTERNAL	CMP_INTERNAL455,18823
#define CMP_KEEPASCII	CMP_KEEPASCII456,18851
EXTERN char_u	*p_enc;		// 'encoding'p_enc457,18880
EXTERN int	p_deco;		// 'delcombine'p_deco458,18917
EXTERN char_u	*p_ccv;		// 'charconvert'p_ccv460,18970
EXTERN char_u	*p_cino;	// 'cinoptions'p_cino462,19017
EXTERN char_u	*p_cedit;	// 'cedit'p_cedit464,19075
EXTERN long	p_cwh;		// 'cmdwinheight'p_cwh465,19110
EXTERN char_u	*p_cb;		// 'clipboard'p_cb468,19177
EXTERN long	p_ch;		// 'cmdheight'p_ch470,19221
EXTERN char_u	*p_cms;		// 'commentstring'p_cms472,19275
EXTERN char_u	*p_cpt;		// 'complete'p_cpt474,19324
EXTERN int	p_confirm;	// 'confirm'p_confirm476,19418
EXTERN int	p_cp;		// 'compatible'p_cp478,19460
EXTERN char_u	*p_cot;		// 'completeopt'p_cot479,19494
EXTERN char_u	*p_csl;		// 'completeslash'p_csl481,19563
EXTERN long	p_ph;		// 'pumheight'p_ph483,19612
EXTERN long	p_pw;		// 'pumwidth'p_pw484,19646
EXTERN char_u	*p_com;		// 'comments'p_com485,19679
EXTERN char_u	*p_cpo;		// 'cpoptions'p_cpo486,19716
EXTERN char_u	*p_csprg;	// 'cscopeprg'p_csprg488,19773
EXTERN int	p_csre;		// 'cscoperelative'p_csre489,19812
EXTERN char_u	*p_csqf;	// 'cscopequickfix'p_csqf491,19874
#  define	CSQF_CMDS CSQF_CMDS492,19917
#  define	CSQF_FLAGS CSQF_FLAGS493,19951
EXTERN int	p_cst;		// 'cscopetag'p_cst495,19987
EXTERN long	p_csto;		// 'cscopetagorder'p_csto496,20021
EXTERN long	p_cspc;		// 'cscopepathcomp'p_cspc497,20062
EXTERN int	p_csverbose;	// 'cscopeverbose'p_csverbose498,20103
EXTERN char_u	*p_debug;	// 'debug'p_debug500,20153
EXTERN char_u	*p_def;		// 'define'p_def502,20208
EXTERN char_u	*p_inc;p_inc503,20243
EXTERN char_u	*p_dip;		// 'diffopt'p_dip506,20289
EXTERN char_u	*p_dex;		// 'diffexpr'p_dex508,20343
EXTERN char_u	*p_dict;	// 'dictionary'p_dict511,20395
EXTERN int	p_dg;		// 'digraph'p_dg513,20455
EXTERN char_u	*p_dir;		// 'directory'p_dir515,20493
EXTERN char_u	*p_dy;		// 'display'p_dy516,20531
EXTERN unsigned	dy_flags;dy_flags517,20566
#define DY_LASTLINE	DY_LASTLINE518,20592
#define DY_TRUNCATE	DY_TRUNCATE519,20619
#define DY_UHEX	DY_UHEX520,20646
EXTERN int	p_ed;		// 'edcompatible'p_ed521,20670
EXTERN char_u	*p_ead;		// 'eadirection'p_ead522,20706
EXTERN char_u	*p_emoji;	// 'emoji'p_emoji523,20746
EXTERN int	p_ea;		// 'equalalways'p_ea524,20781
EXTERN char_u	*p_ep;		// 'equalprg'p_ep525,20816
EXTERN int	p_eb;		// 'errorbells'p_eb526,20852
EXTERN char_u	*p_ef;		// 'errorfile'p_ef528,20907
EXTERN char_u	*p_efm;		// 'errorformat'p_efm529,20944
EXTERN char_u	*p_gefm;	// 'grepformat'p_gefm530,20984
EXTERN char_u	*p_gp;		// 'grepprg'p_gp531,21023
EXTERN int	p_eol;		// 'endofline'p_eol533,21065
EXTERN int	p_ek;		// 'esckeys'p_ek534,21099
EXTERN char_u	*p_ei;		// 'eventignore'p_ei535,21130
EXTERN int	p_et;		// 'expandtab'p_et536,21169
EXTERN int	p_exrc;		// 'exrc'p_exrc537,21202
EXTERN char_u	*p_fenc;	// 'fileencoding'p_fenc538,21232
EXTERN char_u	*p_fencs;	// 'fileencodings'p_fencs539,21273
EXTERN char_u	*p_ff;		// 'fileformat'p_ff540,21316
EXTERN char_u	*p_ffs;		// 'fileformats'p_ffs541,21354
EXTERN long	p_fic;		// 'fileignorecase'p_fic542,21394
EXTERN char_u	*p_ft;		// 'filetype'p_ft543,21434
EXTERN char_u	*p_fcs;		// 'fillchar'p_fcs544,21470
EXTERN int	p_fixeol;	// 'fixendofline'p_fixeol545,21507
EXTERN char_u	*p_fcl;		// 'foldclose'p_fcl547,21566
EXTERN long	p_fdls;		// 'foldlevelstart'p_fdls548,21604
EXTERN char_u	*p_fdo;		// 'foldopen'p_fdo549,21645
EXTERN unsigned	fdo_flags;fdo_flags550,21682
# define FDO_ALL	FDO_ALL551,21709
# define FDO_BLOCK	FDO_BLOCK552,21733
# define FDO_HOR	FDO_HOR553,21759
# define FDO_MARK	FDO_MARK554,21783
# define FDO_PERCENT	FDO_PERCENT555,21808
# define FDO_QUICKFIX	FDO_QUICKFIX556,21836
# define FDO_SEARCH	FDO_SEARCH557,21865
# define FDO_TAG	FDO_TAG558,21892
# define FDO_INSERT	FDO_INSERT559,21916
# define FDO_UNDO	FDO_UNDO560,21943
# define FDO_JUMP	FDO_JUMP561,21968
EXTERN char_u	*p_fex;		// 'formatexpr'p_fex564,22023
EXTERN char_u	*p_flp;		// 'formatlistpat'p_flp566,22069
EXTERN char_u	*p_fo;		// 'formatoptions'p_fo567,22111
EXTERN char_u	*p_fp;		// 'formatprg'p_fp568,22152
EXTERN int	p_fs;		// 'fsync'p_fs570,22207
EXTERN int	p_gd;		// 'gdefault'p_gd572,22243
EXTERN char_u	*p_cpp;		// 'completepopup'p_cpp575,22320
EXTERN char_u	*p_pvp;		// 'previewpopup'p_pvp577,22370
EXTERN char_u	*p_pdev;	// 'printdevice'p_pdev580,22438
EXTERN char_u	*p_penc;	// 'printencoding'p_penc582,22502
EXTERN char_u	*p_pexpr;	// 'printexpr'p_pexpr583,22544
EXTERN char_u	*p_pmfn;	// 'printmbfont'p_pmfn584,22583
EXTERN char_u	*p_pmcs;	// 'printmbcharset'p_pmcs585,22623
EXTERN char_u	*p_pfn;		// 'printfont'p_pfn587,22674
EXTERN char_u	*p_popt;	// 'printoptions'p_popt588,22712
EXTERN char_u	*p_header;	// 'printheader'p_header589,22753
EXTERN int	p_prompt;	// 'prompt'p_prompt591,22802
EXTERN char_u	*p_guifont;	// 'guifont'p_guifont593,22851
EXTERN char_u	*p_guifontset;	// 'guifontset'p_guifontset595,22912
EXTERN char_u	*p_guifontwide;	// 'guifontwide'p_guifontwide597,22965
EXTERN int	p_guipty;	// 'guipty'p_guipty598,23012
EXTERN long	p_ghr;		// 'guiheadroom'p_ghr601,23103
EXTERN char_u	*p_guicursor;	// 'guicursor'p_guicursor604,23167
EXTERN char_u	*p_mouseshape;	// 'mouseshape'p_mouseshape607,23240
EXTERN char_u	*p_go;		// 'guioptions'p_go610,23314
EXTERN char_u	*p_gtl;		// 'guitablabel'p_gtl613,23389
EXTERN char_u	*p_gtt;		// 'guitabtooltip'p_gtt614,23429
EXTERN char_u	*p_hf;		// 'helpfile'p_hf616,23478
EXTERN long	p_hh;		// 'helpheight'p_hh617,23514
EXTERN char_u	*p_hlg;		// 'helplang'p_hlg619,23572
EXTERN int	p_hid;		// 'hidden'p_hid621,23616
EXTERN char_u	*p_hl;		// 'highlight'p_hl622,23647
EXTERN int	p_hls;		// 'hlsearch'p_hls623,23684
EXTERN long	p_hi;		// 'history'p_hi624,23717
EXTERN int	p_hkmap;	// 'hkmap'p_hkmap626,23771
EXTERN int	p_hkmapp;	// 'hkmapp'p_hkmapp627,23802
EXTERN int	p_arshape;	// 'arabicshape'p_arshape629,23855
EXTERN int	p_icon;		// 'icon'p_icon633,23927
EXTERN char_u	*p_iconstring;	// 'iconstring'p_iconstring634,23957
EXTERN int	p_ic;		// 'ignorecase'p_ic636,24009
EXTERN char_u	*p_imak;	// 'imactivatekey'p_imak638,24090
#define IM_ON_THE_SPOT	IM_ON_THE_SPOT639,24132
#define IM_OVER_THE_SPOT	IM_OVER_THE_SPOT640,24159
EXTERN long	p_imst;		// 'imstyle'p_imst641,24187
EXTERN char_u	*p_imaf;	// 'imactivatefunc'p_imaf644,24251
EXTERN char_u	*p_imsf;	// 'imstatusfunc'p_imsf645,24294
EXTERN int	p_imcmdline;	// 'imcmdline'p_imcmdline647,24342
EXTERN int	p_imdisable;	// 'imdisable'p_imdisable648,24381
EXTERN long	p_iminsert;	// 'iminsert'p_iminsert649,24420
EXTERN long	p_imsearch;	// 'imsearch'p_imsearch650,24458
EXTERN int	p_inf;		// 'infercase'p_inf651,24496
EXTERN char_u	*p_inex;	// 'includeexpr'p_inex653,24578
EXTERN int	p_is;		// 'incsearch'p_is655,24625
EXTERN char_u	*p_inde;	// 'indentexpr'p_inde657,24706
EXTERN char_u	*p_indk;	// 'indentkeys'p_indk658,24745
EXTERN int	p_im;		// 'insertmode'p_im660,24791
EXTERN char_u	*p_isf;		// 'isfname'p_isf661,24825
EXTERN char_u	*p_isi;		// 'isident'p_isi662,24861
EXTERN char_u	*p_isk;		// 'iskeyword'p_isk663,24897
EXTERN char_u	*p_isp;		// 'isprint'p_isp664,24935
EXTERN int	p_js;		// 'joinspaces'p_js665,24971
EXTERN char_u	*p_key;		// 'key'p_key667,25023
EXTERN char_u	*p_keymap;	// 'keymap'p_keymap670,25081
EXTERN char_u	*p_kp;		// 'keywordprg'p_kp672,25125
EXTERN char_u	*p_km;		// 'keymodel'p_km673,25163
EXTERN char_u	*p_langmap;	// 'langmap'p_langmap675,25219
EXTERN int	p_lnr;		// 'langnoremap'p_lnr676,25258
EXTERN int	p_lrm;		// 'langremap'p_lrm677,25294
EXTERN char_u	*p_lm;		// 'langmenu'p_lm680,25386
EXTERN long	p_linespace;	// 'linespace'p_linespace683,25445
EXTERN int	p_lisp;		// 'lisp'p_lisp686,25509
EXTERN char_u	*p_lispwords;	// 'lispwords'p_lispwords687,25539
EXTERN long	p_ls;		// 'laststatus'p_ls689,25589
EXTERN long	p_stal;		// 'showtabline'p_stal690,25624
EXTERN char_u	*p_lcs;		// 'listchars'p_lcs691,25662
EXTERN int	p_lz;		// 'lazyredraw'p_lz693,25701
EXTERN int	p_lpl;		// 'loadplugins'p_lpl694,25735
EXTERN char_u	*p_luadll;	// 'luadll'p_luadll696,25796
EXTERN int	p_macatsui;	// 'macatsui'p_macatsui699,25860
EXTERN int	p_magic;	// 'magic'p_magic701,25904
EXTERN char_u	*p_menc;	// 'makeencoding'p_menc702,25935
EXTERN char_u	*p_mef;		// 'makeef'p_mef704,25997
EXTERN char_u	*p_mp;		// 'makeprg'p_mp705,26032
EXTERN char_u	*p_mps;		// 'matchpairs'p_mps707,26074
EXTERN char_u  *p_scl;		// signcolumnp_scl709,26131
EXTERN char_u   *p_cc;		// 'colorcolumn'p_cc712,26195
EXTERN int      p_cc_cols[256]; // array for 'colorcolumn' columnsp_cc_cols713,26236
EXTERN long	p_mat;		// 'matchtime'p_mat715,26310
EXTERN long	p_mco;		// 'maxcombine'p_mco716,26345
EXTERN long	p_mfd;		// 'maxfuncdepth'p_mfd718,26398
EXTERN long	p_mmd;		// 'maxmapdepth'p_mmd720,26443
EXTERN long	p_mm;		// 'maxmem'p_mm721,26480
EXTERN long	p_mmp;		// 'maxmempattern'p_mmp722,26511
EXTERN long	p_mmt;		// 'maxmemtot'p_mmt723,26550
EXTERN long	p_mis;		// 'menuitems'p_mis725,26602
EXTERN char_u	*p_msm;		// 'mkspellmem'p_msm728,26662
EXTERN int	p_ml;		// 'modeline'p_ml730,26708
EXTERN long	p_mle;		// 'modelineexpr'p_mle731,26740
EXTERN long	p_mls;		// 'modelines'p_mls732,26778
EXTERN int	p_ma;		// 'modifiable'p_ma733,26813
EXTERN int	p_mod;		// 'modified'p_mod734,26847
EXTERN char_u	*p_mouse;	// 'mouse'p_mouse735,26880
EXTERN int	p_mousef;	// 'mousefocus'p_mousef737,26931
EXTERN int	p_mh;		// 'mousehide'p_mh738,26968
EXTERN char_u	*p_mousem;	// 'mousemodel'p_mousem740,27008
EXTERN long	p_mouset;	// 'mousetime'p_mouset741,27049
EXTERN int	p_more;		// 'more'p_more742,27086
EXTERN long	p_mzq;		// 'mzquantump_mzq744,27137
EXTERN char_u	*p_mzschemedll;	// 'mzschemedll'p_mzschemedll746,27202
EXTERN char_u	*p_mzschemegcdll; // 'mzschemegcdll'p_mzschemegcdll747,27249
EXTERN char_u	*p_nf;		// 'nrformats'p_nf750,27315
EXTERN int	p_odev;		// 'opendevice'p_odev752,27371
EXTERN char_u	*p_opfunc;	// 'operatorfunc'p_opfunc754,27414
EXTERN char_u	*p_para;	// 'paragraphs'p_para755,27457
EXTERN int	p_paste;	// 'paste'p_paste756,27496
EXTERN char_u	*p_pt;		// 'pastetoggle'p_pt757,27527
EXTERN char_u	*p_pex;		// 'patchexpr'p_pex759,27611
EXTERN char_u	*p_pm;		// 'patchmode'p_pm761,27656
EXTERN char_u	*p_path;	// 'path'p_path762,27693
EXTERN char_u	*p_cdpath;	// 'cdpath'p_cdpath764,27749
EXTERN char_u	*p_perldll;	// 'perldll'p_perldll767,27819
EXTERN int	p_pi;		// 'preserveindent'p_pi769,27865
EXTERN char_u	*p_py3dll;	// 'pythonthreedll'p_py3dll771,27932
EXTERN char_u	*p_py3home;	// 'pythonthreehome'p_py3home774,28004
EXTERN char_u	*p_pydll;	// 'pythondll'p_pydll777,28086
EXTERN char_u	*p_pyhome;	// 'pythonhome'p_pyhome780,28151
EXTERN long	p_pyx;		// 'pyxversion'p_pyx783,28249
EXTERN char_u	*p_qe;		// 'quoteescape'p_qe786,28312
EXTERN int	p_ro;		// 'readonly'p_ro788,28358
EXTERN long	p_rdt;		// 'redrawtime'p_rdt790,28410
EXTERN int	p_remap;	// 'remap'p_remap792,28453
EXTERN long	p_re;		// 'regexpengine'p_re793,28484
EXTERN char_u	*p_rop;		// 'renderoptions'p_rop795,28548
EXTERN long	p_report;	// 'report'p_report797,28597
EXTERN long	p_pvh;		// 'previewheight'p_pvh799,28658
EXTERN int	p_rs;		// 'restorescreen'p_rs802,28717
EXTERN int	p_ari;		// 'allowrevins'p_ari805,28783
EXTERN int	p_ri;		// 'revins'p_ri806,28819
EXTERN char_u	*p_rubydll;	// 'rubydll'p_rubydll809,28882
EXTERN int	p_ru;		// 'ruler'p_ru812,28950
EXTERN char_u	*p_ruf;		// 'rulerformat'p_ruf815,29006
EXTERN char_u	*p_pp;		// 'packpath'p_pp817,29053
EXTERN char_u	*p_rtp;		// 'runtimepath'p_rtp818,29089
EXTERN long	p_sj;		// 'scrolljump'p_sj819,29129
EXTERN int	p_scf;		// 'scrollfocus'p_scf821,29204
EXTERN long	p_so;		// 'scrolloff'p_so823,29247
EXTERN char_u	*p_sbo;		// 'scrollopt'p_sbo824,29281
EXTERN char_u	*p_sections;	// 'sections'p_sections825,29319
EXTERN int	p_secure;	// 'secure'p_secure826,29360
EXTERN char_u	*p_sel;		// 'selection'p_sel827,29393
EXTERN char_u	*p_slm;		// 'selectmode'p_slm828,29431
EXTERN char_u	*p_ssop;	// 'sessionoptions'p_ssop830,29490
EXTERN unsigned	ssop_flags;ssop_flags831,29533
# define SSOP_BUFFERS	SSOP_BUFFERS832,29561
# define SSOP_WINPOS	SSOP_WINPOS833,29590
# define SSOP_RESIZE	SSOP_RESIZE834,29618
# define SSOP_WINSIZE	SSOP_WINSIZE835,29646
# define SSOP_LOCALOPTIONS	SSOP_LOCALOPTIONS836,29675
# define SSOP_OPTIONS	SSOP_OPTIONS837,29708
# define SSOP_HELP	SSOP_HELP838,29737
# define SSOP_BLANK	SSOP_BLANK839,29763
# define SSOP_GLOBALS	SSOP_GLOBALS840,29790
# define SSOP_SLASH	SSOP_SLASH841,29819
# define SSOP_UNIX	SSOP_UNIX842,29846
# define SSOP_SESDIR	SSOP_SESDIR843,29872
# define SSOP_CURDIR	SSOP_CURDIR844,29900
# define SSOP_FOLDS	SSOP_FOLDS845,29929
# define SSOP_CURSOR	SSOP_CURSOR846,29957
# define SSOP_TABPAGES	SSOP_TABPAGES847,29986
# define SSOP_TERMINAL	SSOP_TERMINAL848,30017
EXTERN char_u	*p_sh;		// 'shell'p_sh850,30056
EXTERN char_u	*p_shcf;	// 'shellcmdflag'p_shcf851,30089
EXTERN char_u	*p_sp;		// 'shellpipe'p_sp853,30151
EXTERN char_u	*p_shq;		// 'shellquote'p_shq855,30195
EXTERN char_u	*p_sxq;		// 'shellxquote'p_sxq856,30234
EXTERN char_u	*p_sxe;		// 'shellxescape'p_sxe857,30274
EXTERN char_u	*p_srr;		// 'shellredir'p_srr858,30315
EXTERN long	p_st;		// 'shelltype'p_st860,30367
EXTERN int	p_stmp;		// 'shelltemp'p_stmp862,30408
EXTERN int	p_ssl;		// 'shellslash'p_ssl864,30472
EXTERN char_u	*p_stl;		// 'statusline'p_stl867,30534
EXTERN int	p_sr;		// 'shiftround'p_sr869,30580
EXTERN long	p_sw;		// 'shiftwidth'p_sw870,30614
EXTERN char_u	*p_shm;		// 'shortmess'p_shm871,30649
EXTERN int	p_sn;		// 'shortname'p_sn872,30687
EXTERN char_u	*p_sbr;		// 'showbreak'p_sbr874,30742
EXTERN int	p_sc;		// 'showcmd'p_sc877,30809
EXTERN int	p_sft;		// 'showfulltag'p_sft879,30847
EXTERN int	p_sm;		// 'showmatch'p_sm880,30883
EXTERN int	p_smd;		// 'showmode'p_smd881,30916
EXTERN long	p_ss;		// 'sidescroll'p_ss882,30949
EXTERN long	p_siso;		// 'sidescrolloff'p_siso883,30984
EXTERN int	p_scs;		// 'smartcase'p_scs884,31024
EXTERN int	p_si;		// 'smartindent'p_si886,31082
EXTERN int	p_sta;		// 'smarttab'p_sta888,31124
EXTERN long	p_sts;		// 'softtabstop'p_sts889,31157
EXTERN int	p_sb;		// 'splitbelow'p_sb890,31194
EXTERN char_u	*p_sua;		// 'suffixesadd'p_sua892,31257
EXTERN int	p_swf;		// 'swapfile'p_swf894,31304
EXTERN long	p_smc;		// 'synmaxcol'p_smc896,31356
EXTERN long	p_tpm;		// 'tabpagemax'p_tpm898,31398
EXTERN char_u	*p_tal;		// 'tabline'p_tal900,31454
EXTERN char_u	*p_tfu;		// 'tagfunc'p_tfu903,31514
EXTERN char_u	*p_spc;		// 'spellcapcheck'p_spc906,31575
EXTERN char_u	*p_spf;		// 'spellfile'p_spf907,31617
EXTERN char_u	*p_spl;		// 'spelllang'p_spl908,31655
EXTERN char_u	*p_sps;		// 'spellsuggest'p_sps909,31693
EXTERN int	p_spr;		// 'splitright'p_spr911,31741
EXTERN int	p_sol;		// 'startofline'p_sol912,31776
EXTERN char_u	*p_su;		// 'suffixes'p_su913,31812
EXTERN char_u	*p_sws;		// 'swapsync'p_sws914,31848
EXTERN char_u	*p_swb;		// 'switchbuf'p_swb915,31885
EXTERN unsigned	swb_flags;swb_flags916,31923
#define SWB_USEOPEN	SWB_USEOPEN918,31999
#define SWB_USETAB	SWB_USETAB919,32026
#define SWB_SPLIT	SWB_SPLIT920,32052
#define SWB_NEWTAB	SWB_NEWTAB921,32077
#define SWB_VSPLIT	SWB_VSPLIT922,32103
#define SWB_USELAST	SWB_USELAST923,32129
EXTERN char_u	*p_syn;		// 'syntax'p_syn924,32156
EXTERN long	p_ts;		// 'tabstop'p_ts925,32191
EXTERN int	p_tbs;		// 'tagbsearch'p_tbs926,32223
EXTERN char_u	*p_tc;		// 'tagcase'p_tc927,32258
EXTERN unsigned tc_flags;       // flags from 'tagcase'tc_flags928,32293
#define TC_FOLLOWIC	TC_FOLLOWIC929,32349
#define TC_IGNORE	TC_IGNORE930,32375
#define TC_MATCH	TC_MATCH931,32399
#define TC_FOLLOWSCS	TC_FOLLOWSCS932,32422
#define TC_SMART	TC_SMART933,32449
EXTERN long	p_tl;		// 'taglength'p_tl934,32472
EXTERN int	p_tr;		// 'tagrelative'p_tr935,32506
EXTERN char_u	*p_tags;	// 'tags'p_tags936,32541
EXTERN int	p_tgst;		// 'tagstack'p_tgst937,32574
EXTERN char_u	*p_tcldll;	// 'tcldll'p_tcldll939,32633
EXTERN int	p_tbidi;	// 'termbidi'p_tbidi942,32696
EXTERN char_u	*p_tenc;	// 'termencoding'p_tenc944,32737
EXTERN int	p_tgc;		// 'termguicolors'p_tgc946,32804
EXTERN long	p_twsl;		// 'termwinscroll'p_twsl949,32870
EXTERN char_u	*p_twt;		// 'termwintype'p_twt952,32962
EXTERN int	p_terse;	// 'terse'p_terse954,33009
EXTERN int	p_ta;		// 'textauto'p_ta955,33040
EXTERN int	p_tx;		// 'textmode'p_tx956,33072
EXTERN long	p_tw;		// 'textwidth'p_tw957,33104
EXTERN int	p_to;		// 'tildeop'p_to958,33138
EXTERN int	p_timeout;	// 'timeout'p_timeout959,33169
EXTERN long	p_tm;		// 'timeoutlen'p_tm960,33204
EXTERN int	p_title;	// 'title'p_title962,33257
EXTERN long	p_titlelen;	// 'titlelen'p_titlelen963,33288
EXTERN char_u	*p_titleold;	// 'titleold'p_titleold964,33326
EXTERN char_u	*p_titlestring;	// 'titlestring'p_titlestring965,33367
EXTERN char_u	*p_tsr;		// 'thesaurus'p_tsr967,33421
EXTERN int	p_ttimeout;	// 'ttimeout'p_ttimeout968,33459
EXTERN long	p_ttm;		// 'ttimeoutlen'p_ttm969,33496
EXTERN int	p_tbi;		// 'ttybuiltin'p_tbi970,33533
EXTERN int	p_tf;		// 'ttyfast'p_tf971,33568
EXTERN char_u	*p_toolbar;	// 'toolbar'p_toolbar973,33653
EXTERN unsigned toolbar_flags;toolbar_flags974,33692
# define TOOLBAR_TEXT	TOOLBAR_TEXT975,33723
# define TOOLBAR_ICONS	TOOLBAR_ICONS976,33751
# define TOOLBAR_TOOLTIPS	TOOLBAR_TOOLTIPS977,33780
# define TOOLBAR_HORIZ	TOOLBAR_HORIZ978,33811
EXTERN char_u	*p_tbis;	// 'toolbariconsize'p_tbis981,33898
EXTERN unsigned tbis_flags;tbis_flags982,33942
# define TBIS_TINY	TBIS_TINY983,33970
# define TBIS_SMALL	TBIS_SMALL984,33995
# define TBIS_MEDIUM	TBIS_MEDIUM985,34021
# define TBIS_LARGE	TBIS_LARGE986,34048
# define TBIS_HUGE	TBIS_HUGE987,34074
# define TBIS_GIANT	TBIS_GIANT988,34099
EXTERN long	p_ttyscroll;	// 'ttyscroll'p_ttyscroll990,34132
EXTERN char_u	*p_ttym;	// 'ttymouse'p_ttym992,34206
EXTERN unsigned ttym_flags;ttym_flags993,34243
# define TTYM_XTERM	TTYM_XTERM994,34271
# define TTYM_XTERM2	TTYM_XTERM2995,34297
# define TTYM_DEC	TTYM_DEC996,34324
# define TTYM_NETTERM	TTYM_NETTERM997,34348
# define TTYM_JSBTERM	TTYM_JSBTERM998,34376
# define TTYM_PTERM	TTYM_PTERM999,34404
# define TTYM_URXVT	TTYM_URXVT1000,34430
# define TTYM_SGR	TTYM_SGR1001,34456
EXTERN char_u	*p_udir;	// 'undodir'p_udir1003,34487
EXTERN int	p_udf;		// 'undofile'p_udf1005,34551
EXTERN long	p_ul;		// 'undolevels'p_ul1007,34591
EXTERN long	p_ur;		// 'undoreload'p_ur1008,34626
EXTERN long	p_uc;		// 'updatecount'p_uc1009,34661
EXTERN long	p_ut;		// 'updatetime'p_ut1010,34697
EXTERN char_u	*p_vsts;	// 'varsofttabstop'p_vsts1012,34752
EXTERN char_u	*p_vts;		// 'vartabstop'p_vts1013,34795
EXTERN char_u	*p_viminfo;	// 'viminfo'p_viminfo1016,34861
EXTERN char_u	*p_viminfofile;	// 'viminfofile'p_viminfofile1017,34900
EXTERN char_u	*p_vdir;	// 'viewdir'p_vdir1020,34974
EXTERN char_u	*p_vop;		// 'viewoptions'p_vop1021,35010
EXTERN unsigned	vop_flags;	// uses SSOP_ flagsvop_flags1022,35050
EXTERN int	p_vb;		// 'visualbell'p_vb1024,35104
EXTERN char_u	*p_ve;		// 'virtualedit'p_ve1025,35138
EXTERN unsigned ve_flags;ve_flags1026,35177
#define VE_BLOCK	VE_BLOCK1027,35203
#define VE_INSERT	VE_INSERT1028,35240
#define VE_ALL	VE_ALL1029,35278
#define VE_ONEMORE	VE_ONEMORE1030,35296
EXTERN long	p_verbose;	// 'verbose'p_verbose1031,35317
char_u	*p_vfile = (char_u *)""; // used before options are initializedp_vfile1033,35372
EXTERN int	p_warn;		// 'warn'p_warn1037,35497
EXTERN char_u	*p_wop;		// 'wildoptions'p_wop1038,35527
EXTERN long	p_window;	// 'window'p_window1039,35567
#define FEAT_WAKFEAT_WAK1042,35730
EXTERN char_u	*p_wak;		// 'winaltkeys'p_wak1043,35747
EXTERN char_u	*p_wig;		// 'wildignore'p_wig1046,35813
EXTERN int	p_wiv;		// 'weirdinvert'p_wiv1048,35859
EXTERN char_u	*p_ww;		// 'whichwrap'p_ww1049,35895
EXTERN long	p_wc;		// 'wildchar'p_wc1050,35932
EXTERN long	p_wcm;		// 'wildcharm'p_wcm1051,35965
EXTERN long	p_wic;		// 'wildignorecase'p_wic1052,36000
EXTERN char_u	*p_wim;		// 'wildmode'p_wim1053,36040
EXTERN int	p_wmnu;		// 'wildmenu'p_wmnu1055,36098
EXTERN long	p_wh;		// 'winheight'p_wh1057,36139
EXTERN long	p_wmh;		// 'winminheight'p_wmh1058,36173
EXTERN long	p_wmw;		// 'winminwidth'p_wmw1059,36211
EXTERN long	p_wiw;		// 'winwidth'p_wiw1060,36248
EXTERN char_u	*p_winptydll;	// 'winptydll'p_winptydll1062,36327
EXTERN long	p_wm;		// 'wrapmargin'p_wm1064,36377
EXTERN int	p_ws;		// 'wrapscan'p_ws1065,36412
EXTERN int	p_write;	// 'write'p_write1066,36444
EXTERN int	p_wa;		// 'writeany'p_wa1067,36475
EXTERN int	p_wb;		// 'writebackup'p_wb1068,36507
EXTERN long	p_wd;		// 'writedelay'p_wd1069,36542
    BV_AI = 0BV_AI1078,36731
    , BV_ARBV_AR1079,36745
    , BV_BHBV_BH1080,36757
    , BV_BKCBV_BKC1081,36769
    , BV_BTBV_BT1082,36782
    , BV_EFMBV_EFM1084,36815
    , BV_GPBV_GP1085,36828
    , BV_MPBV_MP1086,36840
    , BV_BINBV_BIN1088,36859
    , BV_BLBV_BL1089,36872
    , BV_BOMBBV_BOMB1090,36884
    , BV_CIBV_CI1091,36898
    , BV_CINBV_CIN1093,36930
    , BV_CINKBV_CINK1094,36943
    , BV_CINOBV_CINO1095,36957
    , BV_CINWBV_CINW1098,37033
    , BV_CMBV_CM1100,37054
    , BV_CMSBV_CMS1102,37086
    , BV_COMBV_COM1104,37106
    , BV_CPTBV_CPT1105,37119
    , BV_DICTBV_DICT1106,37132
    , BV_TSRBV_TSR1107,37146
    , BV_CSLBV_CSL1109,37188
    , BV_CFUBV_CFU1112,37231
    , BV_DEFBV_DEF1115,37271
    , BV_INCBV_INC1116,37284
    , BV_EOLBV_EOL1118,37304
    , BV_FIXEOLBV_FIXEOL1119,37317
    , BV_EPBV_EP1120,37333
    , BV_ETBV_ET1121,37345
    , BV_FENCBV_FENC1122,37357
    , BV_FPBV_FP1123,37371
    , BV_BEXPRBV_BEXPR1125,37400
    , BV_FEXBV_FEX1126,37415
    , BV_FFBV_FF1128,37435
    , BV_FLPBV_FLP1129,37447
    , BV_FOBV_FO1130,37460
    , BV_FTBV_FT1131,37472
    , BV_IMIBV_IMI1132,37484
    , BV_IMSBV_IMS1133,37497
    , BV_INDEBV_INDE1135,37558
    , BV_INDKBV_INDK1136,37572
    , BV_INEXBV_INEX1139,37641
    , BV_INFBV_INF1141,37662
    , BV_ISKBV_ISK1142,37675
    , BV_KEYBV_KEY1144,37706
    , BV_KMAPBV_KMAP1147,37745
    , BV_KPBV_KP1149,37766
    , BV_LISPBV_LISP1151,37795
    , BV_LWBV_LW1152,37809
    , BV_MENCBV_MENC1154,37828
    , BV_MABV_MA1155,37842
    , BV_MLBV_ML1156,37854
    , BV_MODBV_MOD1157,37866
    , BV_MPSBV_MPS1158,37879
    , BV_NFBV_NF1159,37892
    , BV_OFUBV_OFU1161,37927
    , BV_PATHBV_PATH1163,37947
    , BV_PIBV_PI1164,37961
    , BV_QEBV_QE1166,37993
    , BV_ROBV_RO1168,38012
    , BV_SIBV_SI1170,38048
    , BV_SNBV_SN1172,38067
    , BV_SMCBV_SMC1174,38098
    , BV_SYNBV_SYN1175,38111
    , BV_SPCBV_SPC1178,38149
    , BV_SPFBV_SPF1179,38162
    , BV_SPLBV_SPL1180,38175
    , BV_STSBV_STS1182,38195
    , BV_SUABV_SUA1184,38231
    , BV_SWBV_SW1186,38251
    , BV_SWFBV_SWF1187,38263
    , BV_TFUBV_TFU1189,38293
    , BV_TAGSBV_TAGS1191,38313
    , BV_TCBV_TC1192,38327
    , BV_TSBV_TS1193,38339
    , BV_TWBV_TW1194,38351
    , BV_TXBV_TX1195,38363
    , BV_UDFBV_UDF1196,38375
    , BV_ULBV_UL1197,38388
    , BV_WMBV_WM1198,38400
    , BV_TWSLBV_TWSL1200,38433
    , BV_VSTSBV_VSTS1203,38474
    , BV_VTSBV_VTS1204,38488
    , BV_COUNT	    // must be the last oneBV_COUNT1206,38508
    WV_LIST = 0WV_LIST1216,38712
    , WV_ARABWV_ARAB1218,38747
    , WV_COCUWV_COCU1221,38788
    , WV_COLEWV_COLE1222,38802
    , WV_TWKWV_TWK1225,38844
    , WV_TWSWV_TWS1226,38857
    , WV_CRBINDWV_CRBIND1228,38877
    , WV_BRIWV_BRI1230,38915
    , WV_BRIOPTWV_BRIOPT1231,38928
    , WV_WCRWV_WCR1233,38951
    , WV_DIFFWV_DIFF1235,38981
    , WV_FDCWV_FDC1238,39022
    , WV_FENWV_FEN1239,39035
    , WV_FDIWV_FDI1240,39048
    , WV_FDLWV_FDL1241,39061
    , WV_FDMWV_FDM1242,39074
    , WV_FMLWV_FML1243,39087
    , WV_FDNWV_FDN1244,39100
    , WV_FDEWV_FDE1246,39131
    , WV_FDTWV_FDT1247,39144
    , WV_FMRWV_FMR1249,39165
    , WV_LBRWV_LBR1252,39207
    , WV_NUWV_NU1254,39227
    , WV_RNUWV_RNU1255,39239
    , WV_NUWWV_NUW1257,39274
    , WV_PVWWV_PVW1260,39321
    , WV_RLWV_RL1263,39363
    , WV_RLCWV_RLC1264,39375
    , WV_SCBINDWV_SCBIND1266,39395
    , WV_SCROLLWV_SCROLL1267,39411
    , WV_SISOWV_SISO1268,39427
    , WV_SOWV_SO1269,39441
    , WV_SPELLWV_SPELL1271,39471
    , WV_CUCWV_CUC1274,39512
    , WV_CULWV_CUL1275,39525
    , WV_CULOPTWV_CULOPT1276,39538
    , WV_CCWV_CC1277,39554
    , WV_SBRWV_SBR1280,39595
    , WV_STLWV_STL1283,39635
    , WV_WFHWV_WFH1285,39655
    , WV_WFWWV_WFW1286,39668
    , WV_WRAPWV_WRAP1287,39681
    , WV_SCLWV_SCL1289,39713
    , WV_COUNT	    // must be the last oneWV_COUNT1291,39733
#define NO_LOCAL_UNDOLEVEL NO_LOCAL_UNDOLEVEL1295,39842

src/os_amiga.h,2801
#define CASE_INSENSITIVE_FILENAME CASE_INSENSITIVE_FILENAME13,261
#define SPACE_IN_FILENAMESPACE_IN_FILENAME14,338
#define USE_FNAME_CASE	USE_FNAME_CASE15,364
#define USE_TERM_CONSOLEUSE_TERM_CONSOLE16,421
#define HAVE_AVAIL_MEMHAVE_AVAIL_MEM17,446
#  define HAVE_STAT_HHAVE_STAT_H21,539
# define HAVE_STDLIB_HHAVE_STDLIB_H23,569
# define HAVE_STRING_HHAVE_STRING_H24,592
# define HAVE_FCNTL_HHAVE_FCNTL_H25,615
# define HAVE_STRCSPNHAVE_STRCSPN26,637
# define HAVE_STRICMPHAVE_STRICMP27,659
# define HAVE_STRNICMPHAVE_STRNICMP28,681
# define HAVE_STRFTIME	HAVE_STRFTIME29,704
# define HAVE_SETENVHAVE_SETENV30,742
# define HAVE_MEMSETHAVE_MEMSET31,763
# define HAVE_QSORTHAVE_QSORT32,784
#  define HAVE_DATE_TIMEHAVE_DATE_TIME34,848
# define DFLT_ERRORFILE	DFLT_ERRORFILE40,930
# define DFLT_RUNTIMEPATH DFLT_RUNTIMEPATH44,1024
# define CLEAN_RUNTIMEPATH CLEAN_RUNTIMEPATH47,1165
# define BASENAMELEN	BASENAMELEN51,1268
# define TEMPNAME	TEMPNAME55,1326
# define TEMPNAMELEN	TEMPNAMELEN56,1357
#define FNAME_ILLEGAL FNAME_ILLEGAL75,1713
typedef long off_t;off_t81,1848
# define USE_TMPNAM	USE_TMPNAM85,1891
# define SYS_VIMRC_FILE SYS_VIMRC_FILE120,2560
# define SYS_GVIMRC_FILE SYS_GVIMRC_FILE123,2628
# define SYS_MENU_FILE	SYS_MENU_FILE126,2696
# define DFLT_HELPFILE	DFLT_HELPFILE129,2771
# define FILETYPE_FILE	FILETYPE_FILE132,2850
# define FTPLUGIN_FILE	FTPLUGIN_FILE135,2917
# define INDENT_FILE	INDENT_FILE138,2982
# define FTOFF_FILE	FTOFF_FILE141,3042
# define FTPLUGOF_FILE	FTPLUGOF_FILE144,3103
# define INDOFF_FILE	INDOFF_FILE147,3168
# define SYNTAX_FNAME	SYNTAX_FNAME150,3230
# define USR_EXRC_FILE	USR_EXRC_FILE154,3310
# define USR_EXRC_FILE2	USR_EXRC_FILE2157,3373
# define USR_VIMRC_FILE	USR_VIMRC_FILE161,3441
# define USR_VIMRC_FILE2 USR_VIMRC_FILE2164,3507
# define USR_VIMRC_FILE3 USR_VIMRC_FILE3167,3577
# define USR_VIMRC_FILE4 USR_VIMRC_FILE4170,3655
# define VIM_DEFAULTS_FILE VIM_DEFAULTS_FILE173,3727
# define EVIM_FILE	EVIM_FILE176,3806
# define USR_GVIMRC_FILE USR_GVIMRC_FILE180,3880
# define USR_GVIMRC_FILE2 USR_GVIMRC_FILE2183,3949
# define USR_GVIMRC_FILE3 USR_GVIMRC_FILE3186,4022
# define USR_GVIMRC_FILE4 USR_GVIMRC_FILE4189,4103
#  define VIMINFO_FILE	VIMINFO_FILE194,4194
# define EXRC_FILE	EXRC_FILE199,4264
# define VIMRC_FILE	VIMRC_FILE203,4318
# define GVIMRC_FILE	GVIMRC_FILE207,4375
# define DFLT_BDIR	DFLT_BDIR211,4432
# define DFLT_DIR	DFLT_DIR215,4511
# define DFLT_VDIR	DFLT_VDIR219,4590
# define DFLT_MAXMEM	DFLT_MAXMEM223,4683
# define DFLT_MAXMEMTOT	DFLT_MAXMEMTOT226,4772
#define mch_remove(mch_remove233,4895
#define mch_rename(mch_rename234,4937
#define mch_chdir(mch_chdir235,4983
#define vim_mkdir(vim_mkdir236,5013

src/os_beos.h,297
#undef USE_SYSTEMUSE_SYSTEM14,272
#define USE_THREAD_FOR_INPUT_WITH_TIMEOUT	USE_THREAD_FOR_INPUT_WITH_TIMEOUT15,290
#define USE_TERM_CONSOLEUSE_TERM_CONSOLE16,334
#define HAVE_DROP_FILEHAVE_DROP_FILE18,360
#undef	BEOS_DR8BEOS_DR820,384
#define	BEOS_PR_OR_BETTERBEOS_PR_OR_BETTER21,400

src/os_dos.h,1817
# define SYS_VIMRC_FILE	SYS_VIMRC_FILE17,435
# define USR_VIMRC_FILE	USR_VIMRC_FILE20,504
# define USR_VIMRC_FILE2	USR_VIMRC_FILE223,576
# define USR_VIMRC_FILE3	USR_VIMRC_FILE326,657
# define VIM_DEFAULTS_FILE	VIM_DEFAULTS_FILE29,730
# define EVIM_FILE	EVIM_FILE32,810
# define USR_EXRC_FILE	USR_EXRC_FILE36,884
# define USR_EXRC_FILE2	USR_EXRC_FILE239,953
#  define SYS_GVIMRC_FILE	SYS_GVIMRC_FILE44,1041
#  define USR_GVIMRC_FILE	USR_GVIMRC_FILE47,1115
#  define USR_GVIMRC_FILE2	USR_GVIMRC_FILE250,1192
#  define USR_GVIMRC_FILE3	USR_GVIMRC_FILE353,1279
#  define SYS_MENU_FILE	SYS_MENU_FILE56,1353
# define SYS_OPTWIN_FILE	SYS_OPTWIN_FILE61,1442
#  define VIMINFO_FILE	VIMINFO_FILE66,1543
#  define VIMINFO_FILE2	VIMINFO_FILE269,1616
# define VIMRC_FILE	VIMRC_FILE74,1693
# define EXRC_FILE	EXRC_FILE78,1748
#  define GVIMRC_FILE	GVIMRC_FILE83,1820
# define DFLT_HELPFILE	DFLT_HELPFILE88,1890
# define FILETYPE_FILE	FILETYPE_FILE92,1972
# define FTPLUGIN_FILE	FTPLUGIN_FILE95,2039
# define INDENT_FILE	INDENT_FILE98,2104
# define FTOFF_FILE	FTOFF_FILE101,2164
# define FTPLUGOF_FILE	FTPLUGOF_FILE104,2225
# define INDOFF_FILE	INDOFF_FILE107,2290
# define SYNTAX_FNAME	SYNTAX_FNAME111,2353
# define DFLT_BDIR	DFLT_BDIR115,2431
# define DFLT_VDIR	DFLT_VDIR119,2530
# define DFLT_DIR	DFLT_DIR123,2620
#define DFLT_ERRORFILE	DFLT_ERRORFILE126,2700
#define DFLT_RUNTIMEPATH	DFLT_RUNTIMEPATH127,2737
#define CLEAN_RUNTIMEPATH	CLEAN_RUNTIMEPATH128,2846
#define CASE_INSENSITIVE_FILENAME CASE_INSENSITIVE_FILENAME130,2921
#define SPACE_IN_FILENAMESPACE_IN_FILENAME131,2998
#define BACKSLASH_IN_FILENAMEBACKSLASH_IN_FILENAME132,3024
#define USE_CRNL	USE_CRNL133,3054
#define HAVE_DUP	HAVE_DUP134,3108
#define HAVE_ST_MODE	HAVE_ST_MODE135,3140

src/os_haiku.h,732
#define USE_TERM_CONSOLEUSE_TERM_CONSOLE14,272
#define USR_VIM_DIR USR_VIM_DIR16,298
#define USR_EXRC_FILE	USR_EXRC_FILE18,343
#define USR_EXRC_FILE2	USR_EXRC_FILE219,385
#define USR_VIMRC_FILE	USR_VIMRC_FILE20,432
#define USR_VIMRC_FILE2	USR_VIMRC_FILE221,476
#define USR_GVIMRC_FILE	USR_GVIMRC_FILE22,525
#define USR_GVIMRC_FILE2	USR_GVIMRC_FILE223,571
#define VIMINFO_FILE	VIMINFO_FILE24,622
#  define DFLT_RUNTIMEPATH	DFLT_RUNTIMEPATH28,718
#  define CLEAN_RUNTIMEPATH	CLEAN_RUNTIMEPATH29,838
#  define DFLT_RUNTIMEPATH	DFLT_RUNTIMEPATH31,925
#  define CLEAN_RUNTIMEPATH	CLEAN_RUNTIMEPATH32,1045
# define DFLT_RUNTIMEPATH	DFLT_RUNTIMEPATH35,1142
# define CLEAN_RUNTIMEPATH	CLEAN_RUNTIMEPATH36,1251

src/os_mac.h,3704
# undef regreg53,1430
# undef ospeedospeed54,1442
# undef OKOK56,1534
#define USE_CMD_KEYUSE_CMD_KEY70,1750
#define USE_UNIXFILENAMEUSE_UNIXFILENAME76,2052
#define FEAT_SOURCE_FFSFEAT_SOURCE_FFS83,2110
#define FEAT_SOURCE_FF_MACFEAT_SOURCE_FF_MAC84,2134
#define USE_EXE_NAME	USE_EXE_NAME86,2162
#define CASE_INSENSITIVE_FILENAME CASE_INSENSITIVE_FILENAME87,2205
#define SPACE_IN_FILENAMESPACE_IN_FILENAME88,2282
#define BREAKCHECK_SKIP	BREAKCHECK_SKIP89,2308
#define USE_FNAME_CASE	USE_FNAME_CASE93,2453
#define BINARY_FILE_IOBINARY_FILE_IO95,2556
#define EOL_DEFAULT EOL_DEFAULT96,2579
#define HAVE_AVAIL_MEMHAVE_AVAIL_MEM97,2607
# define HAVE_STRING_HHAVE_STRING_H100,2653
# define HAVE_STRCSPNHAVE_STRCSPN101,2676
# define HAVE_MEMSETHAVE_MEMSET102,2698
# define USE_TMPNAM	USE_TMPNAM103,2719
# define HAVE_FCNTL_HHAVE_FCNTL_H104,2776
# define HAVE_QSORTHAVE_QSORT105,2798
# define HAVE_ST_MODE	HAVE_ST_MODE106,2818
# define HAVE_MATH_HHAVE_MATH_H107,2862
#  define HAVE_DATE_TIMEHAVE_DATE_TIME110,2928
# define HAVE_STRFTIMEHAVE_STRFTIME112,2961
# define SYS_VIMRC_FILE SYS_VIMRC_FILE121,3128
# define SYS_GVIMRC_FILE SYS_GVIMRC_FILE124,3196
# define SYS_MENU_FILE	SYS_MENU_FILE127,3264
# define SYS_OPTWIN_FILE SYS_OPTWIN_FILE130,3341
# define VIM_DEFAULTS_FILE VIM_DEFAULTS_FILE133,3424
# define EVIM_FILE	EVIM_FILE136,3503
#  define USR_GVIMRC_FILE USR_GVIMRC_FILE141,3594
#  define GVIMRC_FILE	GVIMRC_FILE144,3661
# define USR_VIMRC_FILE	USR_VIMRC_FILE148,3731
# define USR_EXRC_FILE	USR_EXRC_FILE152,3796
# define VIMRC_FILE	VIMRC_FILE156,3856
# define EXRC_FILE	EXRC_FILE160,3911
# define DFLT_HELPFILE	DFLT_HELPFILE164,3968
# define FILETYPE_FILE	FILETYPE_FILE168,4048
# define FTPLUGIN_FILE	FTPLUGIN_FILE171,4115
# define INDENT_FILE	INDENT_FILE174,4180
# define FTOFF_FILE	FTOFF_FILE177,4240
# define FTPLUGOF_FILE	FTPLUGOF_FILE180,4301
# define INDOFF_FILE	INDOFF_FILE183,4366
# define SYNTAX_FNAME	SYNTAX_FNAME187,4429
#  define VIMINFO_FILE	VIMINFO_FILE192,4529
# define DFLT_BDIR	DFLT_BDIR197,4615
# define DFLT_DIR	DFLT_DIR201,4690
# define DFLT_VDIR	DFLT_VDIR205,4765
#define DFLT_ERRORFILE	DFLT_ERRORFILE208,4838
# define DFLT_RUNTIMEPATH	DFLT_RUNTIMEPATH211,4901
# define CLEAN_RUNTIMEPATH	CLEAN_RUNTIMEPATH214,5028
#define CMDBUFFSIZE CMDBUFFSIZE220,5171
# define DFLT_MAXMEM	DFLT_MAXMEM223,5258
# define DFLT_MAXMEMTOT	DFLT_MAXMEMTOT227,5349
#define WILDCHAR_LIST WILDCHAR_LIST230,5418
#define mch_rename(mch_rename233,5467
#define mch_remove(mch_remove234,5513
#  define mch_getenv(mch_getenv237,5601
#  define mch_setenv(mch_setenv238,5664
#  define USE_VIMPTY_GETENVUSE_VIMPTY_GETENV241,5757
#  define mch_getenv(mch_getenv242,5785
#  define mch_setenv(mch_setenv243,5826
#  define HAVE_TGETENTHAVE_TGETENT251,6021
#  define OSPEED_EXTERNOSPEED_EXTERN252,6044
#  define UP_BC_PC_EXTERNUP_BC_PC_EXTERN253,6068
# define SIGPROTOARG	SIGPROTOARG262,6302
# define SIGDEFARG(SIGDEFARG265,6354
# define SIGDUMMYARG	SIGDUMMYARG268,6421
#undef  HAVE_AVAIL_MEMHAVE_AVAIL_MEM270,6451
# define RETSIGTYPE RETSIGTYPE272,6496
# define SIGRETURN SIGRETURN273,6521
# define HAVE_SYS_WAIT_H HAVE_SYS_WAIT_H275,6618
# define HAVE_TERMIOS_H HAVE_TERMIOS_H276,6656
# define SYS_SELECT_WITH_SYS_TIME SYS_SELECT_WITH_SYS_TIME277,6682
# define HAVE_SELECT HAVE_SELECT278,6718
# define HAVE_SYS_SELECT_H HAVE_SYS_SELECT_H279,6741
# define HAVE_PUTENVHAVE_PUTENV280,6770
# define HAVE_SETENVHAVE_SETENV281,6791
# define HAVE_RENAMEHAVE_RENAME282,6812
# define HAVE_PUTENVHAVE_PUTENV286,6869
#define UNKNOWN_CREATOR UNKNOWN_CREATOR290,6959

src/os_mint.h,45
#define BINARY_FILE_IOBINARY_FILE_IO13,267

src/os_qnx.h,65
#define	USE_TMPNAMUSE_TMPNAM13,271
#define POSIX	POSIX15,291

src/os_unix.h,4941
#  undef HAVE_UTIMEHAVE_UTIME14,322
#  undef HAVE_SYS_UTSNAME_HHAVE_SYS_UTSNAME_H17,377
# define WIN32UNIX	WIN32UNIX37,640
# define BINARY_FILE_IOBINARY_FILE_IO38,700
# define CASE_INSENSITIVE_FILENAMECASE_INSENSITIVE_FILENAME40,725
# define USE_FNAME_CASE	USE_FNAME_CASE41,760
# define _NO_PROTO_NO_PROTO48,1110
# define USE_GETCWDUSE_GETCWD70,1652
#  define mch_remove(mch_remove76,1745
#  define vim_mkdir(vim_mkdir77,1789
#  define vim_mkdir(vim_mkdir79,1844
#  define mch_rmdir(mch_rmdir80,1892
#  define mch_remove(mch_remove81,1934
#define SIGHASARGSIGHASARG88,2160
# define SIGHAS3ARGSSIGHAS3ARGS92,2301
#  define SIGPROTOARG	SIGPROTOARG97,2367
#  define SIGDEFARG(SIGDEFARG98,2421
#  define SIGDUMMYARG	SIGDUMMYARG99,2500
#  define SIGPROTOARG	SIGPROTOARG101,2558
#  define SIGDEFARG(SIGDEFARG102,2586
#  define SIGDUMMYARG	SIGDUMMYARG103,2627
# define SIGPROTOARG SIGPROTOARG106,2665
# define SIGDEFARG(SIGDEFARG107,2695
# define SIGDUMMYARGSIGDUMMYARG108,2721
#  define NAMLEN(NAMLEN114,2808
# define dirent dirent117,2872
# define NAMLEN(NAMLEN118,2895
# define MAXNAMLEN MAXNAMLEN141,3374
# define MAXNAMLEN MAXNAMLEN145,3458
# define MAXNAMLEN MAXNAMLEN149,3564
# define MAXNAMLEN MAXNAMLEN157,3778
#define BASENAMELEN	BASENAMELEN160,3836
# define HAVE_TOTAL_MEMHAVE_TOTAL_MEM169,4092
typedef struct dsc$descriptor   DESC;DESC210,4774
# define SYS_VIMRC_FILE SYS_VIMRC_FILE217,4886
# define SYS_GVIMRC_FILE SYS_GVIMRC_FILE220,4954
# define DFLT_HELPFILE	DFLT_HELPFILE223,5022
# define FILETYPE_FILE	FILETYPE_FILE226,5101
# define FTPLUGIN_FILE	FTPLUGIN_FILE229,5168
# define INDENT_FILE	INDENT_FILE232,5233
# define FTOFF_FILE	FTOFF_FILE235,5293
# define FTPLUGOF_FILE	FTPLUGOF_FILE238,5354
# define INDOFF_FILE	INDOFF_FILE241,5419
# define SYS_MENU_FILE	SYS_MENU_FILE244,5482
#  define USR_EXRC_FILE USR_EXRC_FILE249,5570
#  define USR_EXRC_FILE USR_EXRC_FILE251,5619
# define USR_EXRC_FILE2 USR_EXRC_FILE2256,5718
# define USR_VIMRC_FILE USR_VIMRC_FILE261,5803
#  define USR_VIMRC_FILE USR_VIMRC_FILE263,5854
#  define USR_VIMRC_FILE2	USR_VIMRC_FILE2270,5953
#   define USR_VIMRC_FILE2	USR_VIMRC_FILE2272,6013
# define USR_VIMRC_FILE3 USR_VIMRC_FILE3277,6117
#  define USR_GVIMRC_FILE USR_GVIMRC_FILE282,6205
#  define USR_GVIMRC_FILE USR_GVIMRC_FILE284,6258
#  define USR_GVIMRC_FILE2	USR_GVIMRC_FILE2290,6353
#  define USR_GVIMRC_FILE2	USR_GVIMRC_FILE2292,6415
#  define USR_GVIMRC_FILE3 USR_GVIMRC_FILE3298,6511
# define VIM_DEFAULTS_FILE VIM_DEFAULTS_FILE303,6601
# define EVIM_FILE	EVIM_FILE307,6681
#   define VIMINFO_FILE VIMINFO_FILE313,6786
#   define VIMINFO_FILE VIMINFO_FILE315,6840
#  define VIMINFO_FILE2 VIMINFO_FILE2319,6943
# define EXRC_FILE	EXRC_FILE324,7022
# define VIMRC_FILE	VIMRC_FILE328,7076
#  define GVIMRC_FILE	GVIMRC_FILE333,7150
# define SYNTAX_FNAME	SYNTAX_FNAME338,7219
#  define DFLT_BDIR DFLT_BDIR343,7307
#  define DFLT_BDIR DFLT_BDIR345,7358
#  define DFLT_DIR DFLT_DIR351,7469
#  define DFLT_DIR DFLT_DIR353,7520
#  define DFLT_VDIR DFLT_VDIR359,7640
#  define DFLT_VDIR DFLT_VDIR361,7696
#define DFLT_ERRORFILE	DFLT_ERRORFILE365,7784
#  define DFLT_RUNTIMEPATH DFLT_RUNTIMEPATH370,7860
#  define CLEAN_RUNTIMEPATH CLEAN_RUNTIMEPATH371,7984
#    define DFLT_RUNTIMEPATH	DFLT_RUNTIMEPATH375,8127
#    define CLEAN_RUNTIMEPATH	CLEAN_RUNTIMEPATH376,8234
#    define DFLT_RUNTIMEPATH	DFLT_RUNTIMEPATH378,8325
#    define CLEAN_RUNTIMEPATH	CLEAN_RUNTIMEPATH379,8432
#   define DFLT_RUNTIMEPATH	DFLT_RUNTIMEPATH382,8535
#   define CLEAN_RUNTIMEPATH	CLEAN_RUNTIMEPATH383,8631
#  define VMS_TEMPNAM VMS_TEMPNAM391,8758
# define TEMPNAME TEMPNAME393,8824
# define TEMPNAMELEN TEMPNAMELEN394,8867
# define TEMPDIRNAMES TEMPDIRNAMES397,8950
# define TEMPNAMELEN TEMPNAMELEN398,9005
#define SPECIAL_WILDCHAR SPECIAL_WILDCHAR402,9099
#define CMDBUFFSIZE CMDBUFFSIZE407,9189
# define MAXPATHL	MAXPATHL411,9348
# define MAXPATHL	MAXPATHL413,9381
#define CHECK_INODE	CHECK_INODE416,9412
#  define DFLT_MAXMEM DFLT_MAXMEM420,9580
#  define DFLT_MAXMEMTOT DFLT_MAXMEMTOT423,9643
#  define DFLT_MAXMEM	DFLT_MAXMEM427,9712
#  define DFLT_MAXMEMTOT	DFLT_MAXMEMTOT430,9810
# define mch_memmove(mch_memmove438,10134
#  define mch_memmove(mch_memmove441,10236
#   define mch_memmove(mch_memmove444,10344
#  define mch_rename(mch_rename450,10474
#   define mch_getenv(mch_getenv458,10716
#   define mch_getenv(mch_getenv460,10781
#  define mch_setenv(mch_setenv462,10845
#  define JMP_BUF JMP_BUF478,11275
#  define SETJMP(SETJMP479,11304
#  define LONGJMP LONGJMP480,11342
#  define JMP_BUF JMP_BUF482,11378
#  define SETJMP(SETJMP483,11404
#  define LONGJMP LONGJMP484,11434
# define HAVE_DUP	HAVE_DUP489,11493
#define HAVE_ST_MODE	HAVE_ST_MODE491,11533
#define HAVE_ACL HAVE_ACL494,11616

src/os_unixx.h,364
# define signal signal17,363
#   define WEXITSTATUS(WEXITSTATUS33,733
#   define WEXITSTATUS(WEXITSTATUS35,801
#   define WIFEXITED(WIFEXITED41,923
#   define WIFEXITED(WIFEXITED43,994
#define buf_T buf_T51,1127
#undef buf_Tbuf_T55,1200
#  define SYS_NMLN SYS_NMLN74,1516
#  define _IO_PTEM_H_IO_PTEM_H101,2218
#  define __SUSV3__SUSV3109,2425

src/os_vms_conf.h,4570
#define CASE_INSENSITIVE_FILENAME CASE_INSENSITIVE_FILENAME5,58
#define SPACE_IN_FILENAME	SPACE_IN_FILENAME6,126
#define FNAME_ILLEGAL FNAME_ILLEGAL7,204
#define BINARY_FILE_IO	BINARY_FILE_IO8,277
#define USE_GETCWDUSE_GETCWD9,326
#define USE_SYSTEMUSE_SYSTEM10,345
#define XPMATTRIBUTES_TYPE XPMATTRIBUTES_TYPE11,364
#undef TERMINFOTERMINFO14,444
#define HAVE_DATE_TIMEHAVE_DATE_TIME26,720
#define VIM_SIZEOF_INT VIM_SIZEOF_INT29,777
#define USEMEMMOVEUSEMEMMOVE32,823
#define UINT32_T UINT32_T57,1401
#define TIME_WITH_SYS_TIMETIME_WITH_SYS_TIME69,1713
#define RETSIGTYPE RETSIGTYPE75,1914
#define SIGRETURN SIGRETURN78,2015
#define HAVE_SIGCONTEXTHAVE_SIGCONTEXT81,2083
#define TGETENT_ZERO_ERRTGETENT_ZERO_ERR101,2566
#define HAVE_GETCWDHAVE_GETCWD102,2591
#define HAVE_STRCSPNHAVE_STRCSPN103,2611
#define HAVE_STRTOLHAVE_STRTOL104,2632
#define HAVE_TGETENTHAVE_TGETENT105,2652
#define HAVE_MEMSETHAVE_MEMSET106,2673
#define HAVE_STRERRORHAVE_STRERROR107,2693
#define HAVE_FCHOWNHAVE_FCHOWN108,2715
#define HAVE_RENAMEHAVE_RENAME109,2735
#define HAVE_QSORTHAVE_QSORT110,2755
#define HAVE_FSYNCHAVE_FSYNC111,2774
#define HAVE_GETPWUIDHAVE_GETPWUID112,2793
#define HAVE_GETPWNAMHAVE_GETPWNAM113,2815
#define	HAVE_STDLIB_HHAVE_STDLIB_H114,2837
#define	HAVE_STRING_HHAVE_STRING_H115,2859
#define	HAVE_ERRNO_HHAVE_ERRNO_H116,2881
#define HAVE_OPENDIRHAVE_OPENDIR117,2902
#define HAVE_PUTENVHAVE_PUTENV118,2923
#define HAVE_SETENVHAVE_SETENV119,2943
#define HAVE_SETJMP_HHAVE_SETJMP_H120,2963
#define HAVE_MATH_HHAVE_MATH_H121,2985
#define HAVE_FLOAT_FUNCSHAVE_FLOAT_FUNCS122,3005
#define HAVE_GETTIMEOFDAYHAVE_GETTIMEOFDAY123,3030
#define HAVE_PWD_HHAVE_PWD_H124,3056
#define HAVE_NETDB_HHAVE_NETDB_H125,3075
#define	HAVE_DIRENT_HHAVE_DIRENT_H126,3096
#undef	HAVE_SYS_NDIR_HHAVE_SYS_NDIR_H128,3119
#undef	HAVE_SYS_DIR_HHAVE_SYS_DIR_H129,3142
#undef	HAVE_NDIR_HHAVE_NDIR_H130,3164
#undef	HAVE_SYS_WAIT_HHAVE_SYS_WAIT_H131,3183
#undef	HAVE_UNION_WAITHAVE_UNION_WAIT132,3206
#undef  HAVE_SYS_SELECT_HHAVE_SYS_SELECT_H133,3229
#undef  HAVE_SYS_UTSNAME_HHAVE_SYS_UTSNAME_H134,3255
#undef  HAVE_SYS_SYSTEMINFO_HHAVE_SYS_SYSTEMINFO_H135,3282
#undef  HAVE_TERMCAP_HHAVE_TERMCAP_H136,3312
#undef	HAVE_SGTTY_HHAVE_SGTTY_H137,3335
#undef	HAVE_SYS_IOCTL_HHAVE_SYS_IOCTL_H138,3355
#undef	HAVE_TERMIO_HHAVE_TERMIO_H139,3379
#undef	HAVE_STROPTS_HHAVE_STROPTS_H140,3400
#undef	HAVE_SYS_STREAM_HHAVE_SYS_STREAM_H141,3422
#undef	HAVE_SYS_PTEM_HHAVE_SYS_PTEM_H142,3447
#undef	HAVE_TERMIOS_HHAVE_TERMIOS_H143,3470
#undef	HAVE_LIBC_HHAVE_LIBC_H144,3492
#undef	HAVE_SYS_STATFS_HHAVE_SYS_STATFS_H145,3511
#undef	HAVE_SYS_POLL_HHAVE_SYS_POLL_H146,3536
#undef  HAVE_FCHDIRHAVE_FCHDIR147,3559
#undef  HAVE_LSTATHAVE_LSTAT148,3579
#undef  HAVE_GETTIMEOFDAYHAVE_GETTIMEOFDAY152,3632
#undef  HAVE_USLEEPHAVE_USLEEP153,3658
#undef  HAVE_STRCASECMPHAVE_STRCASECMP154,3678
#undef  HAVE_STRINGS_HHAVE_STRINGS_H155,3702
#undef  HAVE_SIGSETJMPHAVE_SIGSETJMP156,3725
#undef  HAVE_ISNANHAVE_ISNAN157,3748
#define HAVE_NO_LONG_LONGHAVE_NO_LONG_LONG158,3767
#define VIM_SIZEOF_LONG VIM_SIZEOF_LONG159,3793
#define HAVE_GETTIMEOFDAYHAVE_GETTIMEOFDAY161,3841
#define HAVE_USLEEPHAVE_USLEEP162,3867
#define HAVE_STRCASECMPHAVE_STRCASECMP163,3887
#define HAVE_STRINGS_HHAVE_STRINGS_H164,3911
#define HAVE_SIGSETJMPHAVE_SIGSETJMP165,3934
#define HAVE_ISNANHAVE_ISNAN166,3957
#define VIM_SIZEOF_LONG VIM_SIZEOF_LONG167,3976
#undef  HAVE_SELECTHAVE_SELECT172,4044
#undef  HAVE_FCNTL_HHAVE_FCNTL_H173,4064
#undef  HAVE_UNISTD_HHAVE_UNISTD_H174,4085
#undef  HAVE_SYS_TIME_HHAVE_SYS_TIME_H175,4107
#undef  HAVE_LOCALE_HHAVE_LOCALE_H176,4131
#define BROKEN_LOCALEBROKEN_LOCALE177,4153
#undef  DYNAMIC_ICONVDYNAMIC_ICONV178,4175
#undef	HAVE_STRFTIMEHAVE_STRFTIME179,4197
#define HAVE_SELECTHAVE_SELECT181,4224
#define HAVE_FCNTL_HHAVE_FCNTL_H182,4244
#define HAVE_UNISTD_H HAVE_UNISTD_H183,4265
#define HAVE_SYS_TIME_HHAVE_SYS_TIME_H184,4289
#define HAVE_LOCALE_HHAVE_LOCALE_H185,4313
#define BROKEN_LOCALEBROKEN_LOCALE186,4335
#undef  DYNAMIC_ICONVDYNAMIC_ICONV187,4357
#define	HAVE_STRFTIMEHAVE_STRFTIME188,4379
#define HAVE_ICONV_HHAVE_ICONV_H192,4432
#define HAVE_ICONVHAVE_ICONV193,4453
#undef HAVE_ICONV_HHAVE_ICONV_H195,4478
#undef HAVE_ICONVHAVE_ICONV196,4498
#define HAVE_X11HAVE_X11201,4600
#define HAVE_X11_XPM_HHAVE_X11_XPM_H203,4633
#define USE_FONTSETUSE_FONTSET205,4663
#undef  X_LOCALEX_LOCALE206,4683

src/os_win32.h,2788
#define BINARY_FILE_IOBINARY_FILE_IO21,474
#define USE_EXE_NAME	USE_EXE_NAME22,497
#define USE_TERM_CONSOLEUSE_TERM_CONSOLE23,543
# define HAVE_STRING_HHAVE_STRING_H25,590
# define HAVE_MATH_HHAVE_MATH_H28,640
#define HAVE_STRCSPNHAVE_STRCSPN30,668
#define HAVE_STRICMPHAVE_STRICMP32,706
#define HAVE_STRNICMPHAVE_STRNICMP33,727
# define HAVE_STRFTIME	HAVE_STRFTIME36,778
#define HAVE_MEMSETHAVE_MEMSET38,820
# define HAVE_LOCALE_H HAVE_LOCALE_H40,862
# define HAVE_FCNTL_HHAVE_FCNTL_H43,915
#define HAVE_QSORTHAVE_QSORT45,944
#define HAVE_ST_MODE	HAVE_ST_MODE46,963
#define FEAT_SHORTCUT	FEAT_SHORTCUT48,1007
# define HAVE_ACLHAVE_ACL55,1221
#define USE_FNAME_CASE	USE_FNAME_CASE58,1247
# define FEAT_CLIPBOARD	FEAT_CLIPBOARD60,1329
# define HAVE_DATE_TIMEHAVE_DATE_TIME63,1433
# define BREAKCHECK_SKIP BREAKCHECK_SKIP66,1511
#define HAVE_TOTAL_MEMHAVE_TOTAL_MEM69,1595
#define HAVE_PUTENV	HAVE_PUTENV71,1619
# define NO_CONSOLE	NO_CONSOLE74,1725
#define BROKEN_TOUPPERBROKEN_TOUPPER79,1907
#define FNAME_ILLEGAL FNAME_ILLEGAL81,1931
# define STRICTSTRICT89,2098
# define COBJMACROS	COBJMACROS92,2140
#  define SM_CXPADDEDBORDER SM_CXPADDEDBORDER97,2280
#define CMDBUFFSIZE CMDBUFFSIZE104,2387
#define MAXPATHL	MAXPATHL108,2560
# define BASENAMELEN	BASENAMELEN111,2603
#define TEMPNAMELEN	TEMPNAMELEN114,2679
# define DFLT_MAXMEM	DFLT_MAXMEM117,2763
# define DFLT_MAXMEMTOT	DFLT_MAXMEMTOT121,2861
# define FILE_ATTRIBUTE_REPARSE_POINT	FILE_ATTRIBUTE_REPARSE_POINT128,2995
# define IO_REPARSE_TAG_MOUNT_POINT	IO_REPARSE_TAG_MOUNT_POINT131,3086
# define IO_REPARSE_TAG_SYMLINK	IO_REPARSE_TAG_SYMLINK134,3171
# define HAVE_TRY_EXCEPT HAVE_TRY_EXCEPT140,3376
#  define RESETSTKOFLW RESETSTKOFLW143,3493
#  define RESETSTKOFLW RESETSTKOFLW145,3537
#  define MYRESETSTKOFLWMYRESETSTKOFLW146,3575
#  define ASSERT(ASSERT160,3850
#  define ASSERT(ASSERT163,3910
# define TRACE	TRACE166,3949
# define TRACE0(TRACE0167,3972
# define TRACE1(TRACE1168,4017
# define TRACE2(TRACE2169,4060
# define TRACE3(TRACE3170,4110
# define TRACE4(TRACE4171,4168
# define ASSERT(ASSERT180,4408
# define TRACE	TRACE181,4438
# define TRACE0(TRACE0182,4476
# define TRACE1(TRACE1183,4496
# define TRACE2(TRACE2184,4520
# define TRACE3(TRACE3185,4548
# define TRACE4(TRACE4186,4580
#define ASSERT_POINTER(ASSERT_POINTER191,4637
#define ASSERT_NULL_OR_POINTER(ASSERT_NULL_OR_POINTER194,4744
# define HAVE_SETENVHAVE_SETENV198,4879
#define mch_getenv(mch_getenv200,4907
#define vim_mkdir(vim_mkdir201,4959
#define pDispatchMessage pDispatchMessage204,5058
#define pGetMessage pGetMessage205,5100
#define pIsDialogMessage pIsDialogMessage206,5132
#define pPeekMessage pPeekMessage207,5174

src/protodef.h,252
typedef double _Float16;_Float1611,289
typedef double _Float32;_Float3212,314
typedef double _Float64;_Float6413,339
typedef double _Float128;_Float12814,364
typedef double _Float32x;_Float32x15,390
typedef double _Float64x;_Float64x16,416

src/proto.h,246
#  define Display Display24,571
#  define Widget Widget25,593
#  define GdkEvent GdkEvent28,644
#  define GdkEventKey GdkEventKey29,667
#  define XImage XImage32,719
#  define BalloonEval BalloonEval264,6032
#  define CV CV345,8186

src/regexp.h,3469
#define _REGEXP_H_REGEXP_H14,480
#define NSUBEXP NSUBEXP22,758
#define NFA_MAX_BRACES NFA_MAX_BRACES28,909
#define NFA_MAX_STATES NFA_MAX_STATES33,993
#define NFA_TOO_EXPENSIVE NFA_TOO_EXPENSIVE34,1023
#define	    AUTOMATIC_ENGINE	AUTOMATIC_ENGINE38,1145
#define	    BACKTRACKING_ENGINE	BACKTRACKING_ENGINE39,1176
#define	    NFA_ENGINE	NFA_ENGINE40,1210
typedef struct regengine regengine_T;regengine_T42,1237
typedef struct regprogregprog49,1462
    regengine_T		*engine;engine51,1487
    unsigned		regflags;regflags52,1513
    unsigned		re_engine;   // automatic, backtracking or nfa enginere_engine53,1537
    unsigned		re_flags;    // second argument for vim_regcomp()re_flags54,1605
    int			re_in_use;   // prog is being executedre_in_use55,1669
} regprog_T;regprog_T56,1718
    regengine_T		*engine;engine66,1932
    unsigned		regflags;regflags67,1958
    unsigned		re_engine;re_engine68,1982
    unsigned		re_flags;re_flags69,2007
    int			re_in_use;re_in_use70,2031
    int			regstart;regstart72,2053
    char_u		reganch;reganch73,2073
    char_u		*regmust;regmust74,2094
    int			regmlen;regmlen75,2116
    char_u		reghasz;reghasz77,2154
    char_u		program[1];	// actually longer..program79,2182
} bt_regprog_T;bt_regprog_T80,2227
typedef struct nfa_state nfa_state_T;nfa_state_T86,2363
struct nfa_statenfa_state87,2401
    int			c;c89,2420
    nfa_state_T		*out;out90,2433
    nfa_state_T		*out1;out191,2456
    int			id;id92,2480
    int			lastlist[2]; // 0: normal, 1: recursivelastlist93,2494
    int			val;val94,2544
    regengine_T		*engine;engine103,2672
    unsigned		regflags;regflags104,2698
    unsigned		re_engine;re_engine105,2722
    unsigned		re_flags;re_flags106,2747
    int			re_in_use;re_in_use107,2771
    nfa_state_T		*start;		// points into state[]start109,2793
    int			reganch;	// pattern starts with ^reganch111,2843
    int			regstart;	// char at start of patternregstart112,2887
    char_u		*match_text;	// plain text to match withmatch_text113,2935
    int			has_zend;	// pattern contains \zehas_zend115,2989
    int			has_backref;	// pattern contains \1 .. \9has_backref116,3033
    int			reghasz;reghasz118,3104
    char_u		*pattern;pattern120,3130
    int			nsubexp;	// number of ()nsubexp121,3152
    int			nstate;nstate122,3187
    nfa_state_T		state[1];	// actually longer..state123,3205
} nfa_regprog_T;nfa_regprog_T124,3253
    regprog_T		*regprog;regprog133,3467
    char_u		*startp[NSUBEXP];startp134,3492
    char_u		*endp[NSUBEXP];endp135,3522
    int			rm_ic;rm_ic136,3550
} regmatch_T;regmatch_T137,3567
    regprog_T		*regprog;regprog149,3949
    lpos_T		startpos[NSUBEXP];startpos150,3974
    lpos_T		endpos[NSUBEXP];endpos151,4005
    int			rmm_ic;rmm_ic152,4034
    colnr_T		rmm_maxcol;	// when not zero: maximum columnrmm_maxcol153,4052
} regmmatch_T;regmmatch_T154,4110
    short		refcnt;refcnt163,4344
    char_u		*matches[NSUBEXP];matches164,4363
} reg_extmatch_T;reg_extmatch_T165,4394
struct regengineregengine167,4413
    regprog_T	*(*regcomp)(char_u*, int);regcomp169,4432
    void	(*regfree)(regprog_T *);regfree170,4473
    int		(*regexec_nl)(regmatch_T *, char_u *, colnr_T, int);regexec_nl171,4507
    long	(*regexec_multi)(regmmatch_T *, win_T *, buf_T *, linenr_T, colnr_T, proftime_T *, int *);regexec_multi172,4569
    char_u	*expr;expr173,4669

src/spell.h,8701
#define MAXWLEN MAXWLEN32,822
#define MAXREGIONS MAXREGIONS37,1013
typedef int idx_T;idx_T41,1203
typedef int salfirst_T;salfirst_T43,1223
typedef struct slang_S slang_T;slang_T60,1971
struct slang_Sslang_S61,2003
    slang_T	*sl_next;	// next languagesl_next63,2020
    char_u	*sl_name;	// language name "en", "en.rare", "nl", etc.sl_name64,2059
    char_u	*sl_fname;	// name of .spl filesl_fname65,2125
    int		sl_add;		// TRUE if it's a .add file.sl_add66,2168
    char_u	*sl_fbyts;	// case-folded word bytessl_fbyts68,2216
    idx_T	*sl_fidxs;	// case-folded word indexessl_fidxs69,2264
    char_u	*sl_kbyts;	// keep-case word bytessl_kbyts70,2313
    idx_T	*sl_kidxs;	// keep-case word indexessl_kidxs71,2359
    char_u	*sl_pbyts;	// prefix tree word bytessl_pbyts72,2406
    idx_T	*sl_pidxs;	// prefix tree word indexessl_pidxs73,2454
    char_u	*sl_info;	// infotext string or NULLsl_info75,2504
    char_u	sl_regions[MAXREGIONS * 2 + 1];sl_regions77,2553
    char_u	*sl_midword;	// MIDWORD string or NULLsl_midword80,2645
    hashtab_T	sl_wordcount;	// hashtable with word count, wordcount_Tsl_wordcount82,2696
    int		sl_compmax;	// COMPOUNDWORDMAX (default: MAXWLEN)sl_compmax84,2767
    int		sl_compminlen;	// COMPOUNDMIN (default: 0)sl_compminlen85,2826
    int		sl_compsylmax;	// COMPOUNDSYLMAX (default: MAXWLEN)sl_compsylmax86,2878
    int		sl_compoptions;	// COMP_* flagssl_compoptions87,2939
    garray_T	sl_comppat;	// CHECKCOMPOUNDPATTERN itemssl_comppat88,2980
    regprog_T	*sl_compprog;	// COMPOUNDRULE turned into a regexp progrmsl_compprog89,3035
    char_u	*sl_comprules;	// all COMPOUNDRULE concatenated (or NULL)sl_comprules91,3141
    char_u	*sl_compstartflags; // flags for first compound wordsl_compstartflags92,3210
    char_u	*sl_compallflags; // all flags for compound wordssl_compallflags93,3274
    char_u	sl_nobreak;	// When TRUE: no spaces between wordssl_nobreak94,3335
    char_u	*sl_syllable;	// SYLLABLE repeatable chars or NULLsl_syllable95,3396
    garray_T	sl_syl_items;	// syllable itemssl_syl_items96,3458
    int		sl_prefixcnt;	// number of items in "sl_prefprog"sl_prefixcnt98,3504
    regprog_T	**sl_prefprog;	// table with regprogs for prefixessl_prefprog99,3563
    garray_T	sl_rep;		// list of fromto_T entries from REP linessl_rep101,3629
    short	sl_rep_first[256];  // indexes where byte first appears, -1 ifsl_rep_first102,3694
    garray_T	sl_sal;		// list of salitem_T entries from SAL linessl_sal104,3792
    salfirst_T	sl_sal_first[256];  // indexes where byte first appears, -1 ifsl_sal_first105,3858
    int		sl_followup;	// SAL followupsl_followup107,3961
    int		sl_collapse;	// SAL collapse_resultsl_collapse108,3999
    int		sl_rem_accents;	// SAL remove_accentssl_rem_accents109,4044
    int		sl_sofo;	// SOFOFROM and SOFOTO instead of SAL items:sl_sofo110,4091
    garray_T	sl_repsal;	// list of fromto_T entries from REPSAL linessl_repsal113,4249
    short	sl_repsal_first[256];  // sl_rep_first for REPSAL linessl_repsal_first114,4319
    int		sl_nosplitsugs;	// don't suggest splitting a wordsl_nosplitsugs115,4385
    int		sl_nocompoundsugs; // don't suggest compoundingsl_nocompoundsugs116,4444
    time_t	sl_sugtime;	// timestamp for .sug filesl_sugtime119,4553
    char_u	*sl_sbyts;	// soundfolded word bytessl_sbyts120,4603
    idx_T	*sl_sidxs;	// soundfolded word indexessl_sidxs121,4651
    buf_T	*sl_sugbuf;	// buffer with word number tablesl_sugbuf122,4700
    int		sl_sugloaded;	// TRUE when .sug file was loaded or failed tosl_sugloaded123,4755
    int		sl_has_map;	// TRUE if there is a MAP linesl_has_map126,4838
    hashtab_T	sl_map_hash;	// MAP for multi-byte charssl_map_hash127,4890
    int		sl_map_array[256]; // MAP for first 256 charssl_map_array128,4945
    hashtab_T	sl_sounddone;	// table with soundfolded words that havesl_sounddone129,5000
# define SPL_FNAME_TMPL SPL_FNAME_TMPL134,5125
# define SPL_FNAME_ADD SPL_FNAME_ADD135,5162
# define SPL_FNAME_ASCII SPL_FNAME_ASCII136,5195
# define SPL_FNAME_TMPL SPL_FNAME_TMPL138,5236
# define SPL_FNAME_ADD SPL_FNAME_ADD139,5273
# define SPL_FNAME_ASCII SPL_FNAME_ASCII140,5306
#define WF_REGION WF_REGION145,5445
#define WF_ONECAP WF_ONECAP146,5493
#define WF_ALLCAP WF_ALLCAP147,5561
#define WF_RARE	WF_RARE148,5615
#define WF_BANNED WF_BANNED149,5653
#define WF_AFX	WF_AFX150,5690
#define WF_FIXCAP WF_FIXCAP151,5734
#define WF_KEEPCAP WF_KEEPCAP152,5797
#define WF_CAPMASK WF_CAPMASK154,5841
#define WF_HAS_AFF WF_HAS_AFF157,5970
#define WF_NEEDCOMP WF_NEEDCOMP158,6020
#define WF_NOSUGGEST WF_NOSUGGEST159,6078
#define WF_COMPROOT WF_COMPROOT160,6134
#define WF_NOCOMPBEF WF_NOCOMPBEF161,6202
#define WF_NOCOMPAFT WF_NOCOMPAFT162,6265
#define WFP_RARE	WFP_RARE165,6350
#define WFP_NC	WFP_NC166,6391
#define WFP_UP	WFP_UP167,6443
#define WFP_COMPPERMIT	WFP_COMPPERMIT168,6487
#define WFP_COMPFORBID	WFP_COMPFORBID169,6553
#define WF_RAREPFX WF_RAREPFX173,6732
#define WF_PFX_NC WF_PFX_NC174,6794
#define WF_PFX_UP WF_PFX_UP175,6863
#define WF_PFX_COMPPERMIT WF_PFX_COMPPERMIT176,6927
#define WF_PFX_COMPFORBID WF_PFX_COMPFORBID178,7030
#define COMP_CHECKDUP	COMP_CHECKDUP182,7161
#define COMP_CHECKREP	COMP_CHECKREP183,7206
#define COMP_CHECKCASE	COMP_CHECKCASE184,7251
#define COMP_CHECKTRIPLE	COMP_CHECKTRIPLE185,7298
typedef struct fromto_Sfromto_S190,7525
    char_u	*ft_from;ft_from192,7551
    char_u	*ft_to;ft_to193,7572
} fromto_T;fromto_T194,7591
typedef struct salitem_Ssalitem_S199,7785
    char_u	*sm_lead;	// leading letterssm_lead201,7812
    int		sm_leadlen;	// length of "sm_lead"sm_leadlen202,7852
    char_u	*sm_oneof;	// letters from () or NULLsm_oneof203,7896
    char_u	*sm_rules;	// rules like ^, $, prioritysm_rules204,7945
    char_u	*sm_to;		// replacement.sm_to205,7996
    int		*sm_lead_w;	// wide character copy of "sm_lead"sm_lead_w206,8032
    int		*sm_oneof_w;	// wide character copy of "sm_oneof"sm_oneof_w207,8089
    int		*sm_to_w;	// wide character copy of "sm_to"sm_to_w208,8148
} salitem_T;salitem_T209,8201
#define	SP_TRUNCERROR	SP_TRUNCERROR213,8303
#define	SP_FORMERROR	SP_FORMERROR214,8358
#define SP_OTHERERROR	SP_OTHERERROR215,8412
typedef struct langp_Slangp_S220,8542
    slang_T	*lp_slang;	// info for this languagelp_slang222,8567
    slang_T	*lp_sallang;	// language used for sound folding or NULLlp_sallang223,8616
    slang_T	*lp_replang;	// language used for REP items or NULLlp_replang224,8684
    int		lp_region;	// bitmask for region or REGION_ALLlp_region225,8748
} langp_T;langp_T226,8804
#define LANGP_ENTRY(LANGP_ENTRY228,8816
#define VIMSUGMAGIC VIMSUGMAGIC230,8878
#define VIMSUGMAGICL VIMSUGMAGICL231,8943
#define VIMSUGVERSION VIMSUGVERSION232,8966
typedef struct spelltab_Sspelltab_S238,9139
    char_u  st_isw[256];	// flags: is word charst_isw240,9167
    char_u  st_isu[256];	// flags: is uppercase charst_isu241,9215
    char_u  st_fold[256];	// chars: folded casest_fold242,9268
    char_u  st_upper[256];	// chars: upper casest_upper243,9316
} spelltab_T;spelltab_T244,9364
# define SPELL_TOFOLD(SPELL_TOFOLD258,9884
# define SPELL_TOFOLD(SPELL_TOFOLD261,10019
# define SPELL_TOUPPER(SPELL_TOUPPER266,10164
# define SPELL_TOUPPER(SPELL_TOUPPER269,10304
# define SPELL_ISUPPER(SPELL_ISUPPER274,10454
# define SPELL_ISUPPER(SPELL_ISUPPER277,10582
#  define SPELL_EXTERNSPELL_EXTERN285,10828
#  define SPELL_INIT(SPELL_INIT286,10851
#  define SPELL_EXTERN SPELL_EXTERN288,10884
#  define SPELL_INIT(SPELL_INIT289,10914
SPELL_EXTERN slang_T	*first_lang SPELL_INIT(= NULL);first_lang292,10947
SPELL_EXTERN char_u	*int_wordlist SPELL_INIT(= NULL);int_wordlist295,11032
SPELL_EXTERN char e_format[] SPELL_INIT(= N_("E759: Format error in spell file"));e_format298,11088
SPELL_EXTERN spelltab_T   spelltab;spelltab300,11172
SPELL_EXTERN int	  did_set_spelltab;did_set_spelltab301,11208
#define SPELL_ADD_GOOD	SPELL_ADD_GOOD304,11296
#define SPELL_ADD_BAD	SPELL_ADD_BAD305,11321
#define SPELL_ADD_RARE	SPELL_ADD_RARE306,11345
typedef struct wordcount_Swordcount_S308,11371
    short_u	wc_count;	    // nr of times word was seenwc_count310,11400
    char_u	wc_word[1];	    // word, actually longerwc_word311,11455
} wordcount_T;wordcount_T312,11507
#define WC_KEY_OFF WC_KEY_OFF314,11523
#define HI2WC(HI2WC315,11574
#define MAXWORDCOUNT MAXWORDCOUNT316,11641
SPELL_EXTERN char_u	*repl_from SPELL_INIT(= NULL);repl_from319,11702
SPELL_EXTERN char_u	*repl_to SPELL_INIT(= NULL);repl_to320,11753

src/structs.h,130143
typedef long		linenr_T;linenr_T18,475
typedef int		colnr_T;colnr_T19,499
typedef unsigned short	short_u;short_u20,521
    linenr_T	lnum;	// line numberlnum28,616
    colnr_T	col;	// column numbercol29,650
    colnr_T	coladd; // extra virtual columncoladd30,684
} pos_T;pos_T31,728
    linenr_T	lnum;	// line numberlnum39,792
    colnr_T	col;	// column numbercol40,826
} lpos_T;lpos_T41,860
typedef struct growarraygrowarray48,1063
    int	    ga_len;		    // current number of items usedga_len50,1090
    int	    ga_maxlen;		    // maximum number of items possiblega_maxlen51,1147
    int	    ga_itemsize;	    // sizeof(item)ga_itemsize52,1211
    int	    ga_growsize;	    // number of items to grow each timega_growsize53,1256
    void    *ga_data;		    // pointer to the first itemga_data54,1322
} garray_T;garray_T55,1378
#define GA_EMPTY GA_EMPTY57,1391
typedef struct window_S		win_T;win_T59,1431
typedef struct wininfo_S	wininfo_T;wininfo_T60,1463
typedef struct frame_S		frame_T;frame_T61,1499
typedef int			scid_T;		// script IDscid_T62,1532
typedef struct file_buffer	buf_T;		// forward declarationbuf_T63,1568
typedef struct terminal_S	term_T;term_T64,1626
typedef struct VimMenu vimmenu_T;vimmenu_T67,1678
#define SCRIPT_VERSION_VIM9 SCRIPT_VERSION_VIM971,1766
    scid_T	sc_sid;		// script IDsc_sid84,2273
    int		sc_seq;		// sourcing sequence numbersc_seq85,2306
    linenr_T	sc_lnum;	// line numbersc_lnum86,2352
    int		sc_version;	// :scriptversionsc_version87,2389
} sctx_T;sctx_T88,2428
    buf_T   *br_buf;br_buf95,2597
    int	    br_fnum;br_fnum96,2618
    int	    br_buf_free_count;br_buf_free_count97,2639
} bufref_T;bufref_T98,2670
# define guicolor_T guicolor_T115,2992
# define INVALCOLOR INVALCOLOR116,3017
# define CTERMCOLOR CTERMCOLOR118,3129
#define COLOR_INVALID(COLOR_INVALID120,3180
#define NMARKS	NMARKS130,3541
#define EXTRA_MARKS	EXTRA_MARKS131,3598
#define JUMPLISTSIZE	JUMPLISTSIZE132,3635
#define TAGSTACKSIZE	TAGSTACKSIZE133,3693
typedef struct filemarkfilemark135,3750
    pos_T	mark;		// cursor positionmark137,3776
    int		fnum;		// file numberfnum138,3812
} fmark_T;fmark_T139,3843
typedef struct xfilemarkxfilemark142,3898
    fmark_T	fmark;fmark144,3925
    char_u	*fname;		// file name, used when fnum == 0fname145,3944
    time_T	time_set;time_set147,4018
} xfmark_T;xfmark_T149,4046
typedef struct taggytaggy154,4141
    char_u	*tagname;	// tag nametagname156,4164
    fmark_T	fmark;		// cursor position BEFORE ":tag"fmark157,4197
    int		cur_match;	// match numbercur_match158,4250
    int		cur_fnum;	// buffer number used for cur_matchcur_fnum159,4286
    char_u	*user_data;	// used with tagfuncuser_data160,4341
} taggy_T;taggy_T161,4385
    int		wo_arab;wo_arab171,4605
# define w_p_arab w_p_arab172,4623
    int		wo_bri;wo_bri175,4703
# define w_p_bri w_p_bri176,4720
    char_u	*wo_briopt;wo_briopt177,4774
# define w_p_briopt w_p_briopt178,4797
    char_u	*wo_wcr;wo_wcr180,4867
# define w_p_wcr w_p_wcr181,4887
    int		wo_diff;wo_diff183,4955
# define w_p_diff w_p_diff184,4973
    long	wo_fdc;wo_fdc187,5049
# define w_p_fdc w_p_fdc188,5066
    int		wo_fdc_save;wo_fdc_save189,5119
# define w_p_fdc_save w_p_fdc_save190,5141
    int		wo_fen;wo_fen191,5224
# define w_p_fen w_p_fen192,5241
    int		wo_fen_save;wo_fen_save193,5294
# define w_p_fen_save w_p_fen_save194,5316
    char_u	*wo_fdi;wo_fdi195,5399
# define w_p_fdi w_p_fdi196,5419
    long	wo_fdl;wo_fdl197,5472
# define w_p_fdl w_p_fdl198,5489
    int		wo_fdl_save;wo_fdl_save199,5541
# define w_p_fdl_save w_p_fdl_save200,5563
    char_u	*wo_fdm;wo_fdm201,5651
# define w_p_fdm w_p_fdm202,5671
    char_u	*wo_fdm_save;wo_fdm_save203,5724
# define w_p_fdm_save w_p_fdm_save204,5749
    long	wo_fml;wo_fml205,5825
# define w_p_fml w_p_fml206,5842
    long	wo_fdn;wo_fdn207,5897
# define w_p_fdn w_p_fdn208,5914
    char_u	*wo_fde;wo_fde210,5986
# define w_p_fde w_p_fde211,6006
    char_u	*wo_fdt;wo_fdt212,6057
#  define w_p_fdt w_p_fdt213,6077
    char_u	*wo_fmr;wo_fmr215,6137
# define w_p_fmr w_p_fmr216,6157
    int		wo_lbr;wo_lbr219,6239
# define w_p_lbr w_p_lbr220,6256
    int		wo_list;wo_list222,6315
#define w_p_list w_p_list223,6333
    int		wo_nu;wo_nu224,6381
#define w_p_nu w_p_nu225,6397
    int		wo_rnu;wo_rnu226,6443
#define w_p_rnu w_p_rnu227,6460
    long	wo_nuw;wo_nuw229,6538
# define w_p_nuw w_p_nuw230,6555
    int		wo_wfh;wo_wfh232,6616
# define w_p_wfh w_p_wfh233,6633
    int		wo_wfw;wo_wfw234,6688
# define w_p_wfw w_p_wfw235,6705
    int		wo_pvw;wo_pvw237,6786
# define w_p_pvw w_p_pvw238,6803
    int		wo_rl;wo_rl241,6888
# define w_p_rl w_p_rl242,6904
    char_u	*wo_rlc;wo_rlc243,6954
# define w_p_rlc w_p_rlc244,6974
    long	wo_scr;wo_scr246,7036
#define w_p_scr w_p_scr247,7053
    int		wo_spell;wo_spell249,7119
# define w_p_spell w_p_spell250,7138
    int		wo_cuc;wo_cuc253,7216
# define w_p_cuc w_p_cuc254,7233
    int		wo_cul;wo_cul255,7288
# define w_p_cul w_p_cul256,7305
    char_u	*wo_culopt;wo_culopt257,7358
# define w_p_culopt w_p_culopt258,7381
    char_u	*wo_cc;wo_cc259,7443
# define w_p_cc w_p_cc260,7462
    char_u	*wo_sbr;wo_sbr263,7543
#define w_p_sbr w_p_sbr264,7563
    char_u	*wo_stl;wo_stl267,7641
#define w_p_stl w_p_stl268,7661
    int		wo_scb;wo_scb270,7720
#define w_p_scb w_p_scb271,7737
    int		wo_diff_saved; // options were saved for starting diff modewo_diff_saved272,7789
#define w_p_diff_saved w_p_diff_saved273,7858
    int		wo_scb_save;	// 'scrollbind' saved for diff modewo_scb_save274,7908
#define w_p_scb_save w_p_scb_save275,7966
    int		wo_wrap;wo_wrap276,8012
#define w_p_wrap w_p_wrap277,8030
    int		wo_wrap_save;	// 'wrap' state saved for diff modewo_wrap_save279,8095
# define w_p_wrap_save w_p_wrap_save280,8154
    char_u	*wo_cocu;		// 'concealcursor'wo_cocu283,8230
# define w_p_cocu w_p_cocu284,8271
    long	wo_cole;		// 'conceallevel'wo_cole285,8310
# define w_p_cole w_p_cole286,8347
    int		wo_crb;wo_crb288,8393
#define w_p_crb w_p_crb289,8410
    int		wo_crb_save;	// 'cursorbind' state saved for diff modewo_crb_save290,8462
#define w_p_crb_save w_p_crb_save291,8526
    char_u	*wo_scl;wo_scl293,8590
# define w_p_scl w_p_scl294,8610
    char_u	*wo_twk;wo_twk297,8691
# define w_p_twk w_p_twk298,8711
    char_u	*wo_tws;wo_tws299,8764
# define w_p_tws w_p_tws300,8784
    sctx_T	wo_script_ctx[WV_COUNT];	// SCTXs for window-local optionswo_script_ctx304,8863
# define w_p_script_ctx w_p_script_ctx305,8933
} winopt_T;winopt_T307,8991
struct wininfo_Swininfo_S319,9381
    wininfo_T	*wi_next;	// next entry or NULL for last entrywi_next321,9400
    wininfo_T	*wi_prev;	// previous entry or NULL for first entrywi_prev322,9461
    win_T	*wi_win;	// pointer to window that did set wi_fposwi_win323,9527
    pos_T	wi_fpos;	// last cursor position in the filewi_fpos324,9588
    int		wi_optset;	// TRUE when wi_opt has useful valueswi_optset325,9643
    winopt_T	wi_opt;		// local window optionswi_opt326,9701
    int		wi_fold_manual;	// copy of w_fold_manualwi_fold_manual328,9767
    garray_T	wi_folds;	// clone of w_foldswi_folds329,9817
typedef struct foldinfofoldinfo337,9991
    int		fi_level;	// level of the fold; when this is zero thefi_level339,10017
    int		fi_lnum;	// line number where fold startsfi_lnum341,10112
    int		fi_low_level;	// lowest fold level that starts in the samefi_low_level342,10163
} foldinfo_T;foldinfo_T344,10243
    pos_T	vi_start;	// start pos of last VIsualvi_start351,10332
    pos_T	vi_end;		// end position of last VIsualvi_end352,10380
    int		vi_mode;	// VIsual_mode of last VIsualvi_mode353,10430
    colnr_T	vi_curswant;	// MAXCOL from w_curswantvi_curswant354,10478
} visualinfo_T;visualinfo_T355,10529
    char_u	*ul_line;	// text of the lineul_line364,10745
    long	ul_len;		// length of the line including NUL, plus textul_len365,10786
} undoline_T;undoline_T367,10869
typedef struct u_entry u_entry_T;u_entry_T369,10884
typedef struct u_header u_header_T;u_header_T370,10918
struct u_entryu_entry371,10954
    u_entry_T	*ue_next;	// pointer to next entry in listue_next373,10971
    linenr_T	ue_top;		// number of line above undo blockue_top374,11028
    linenr_T	ue_bot;		// number of line below undo blockue_bot375,11085
    linenr_T	ue_lcount;	// linecount when u_save calledue_lcount376,11142
    undoline_T	*ue_array;	// array of lines in undo blockue_array377,11198
    long	ue_size;	// number of lines in ue_arrayue_size378,11256
    int		ue_magic;	// magic number to check allocationue_magic380,11320
struct u_headeru_header384,11386
	u_header_T *ptr;	// pointer to next undo header in listptr389,11536
	long	   seq;seq390,11593
    } uh_next;uh_next391,11607
	u_header_T *ptr;	// pointer to previous header in listptr393,11634
	long	   seq;seq394,11690
    } uh_prev;uh_prev395,11704
	u_header_T *ptr;	// pointer to next header for alt. redoptr397,11731
	long	   seq;seq398,11789
    } uh_alt_next;uh_alt_next399,11803
	u_header_T *ptr;	// pointer to previous header for alt. redoptr401,11834
	long	   seq;seq402,11896
    } uh_alt_prev;uh_alt_prev403,11910
    long	uh_seq;		// sequence number, higher == newer undouh_seq404,11929
    int		uh_walk;	// used by undo_time()uh_walk405,11988
    u_entry_T	*uh_entry;	// pointer to first entryuh_entry406,12029
    u_entry_T	*uh_getbot_entry; // pointer to where ue_bot must be setuh_getbot_entry407,12080
    pos_T	uh_cursor;	// cursor position before savinguh_cursor408,12151
    long	uh_cursor_vcol;uh_cursor_vcol409,12205
    int		uh_flags;	// see belowuh_flags410,12230
    pos_T	uh_namedm[NMARKS];	// marks before undo/after redouh_namedm411,12262
    visualinfo_T uh_visual;	// Visual areas before undo/after redouh_visual412,12323
    time_T	uh_time;	// timestamp when the change was madeuh_time413,12390
    long	uh_save_nr;	// set when the file was saved after theuh_save_nr414,12448
    int		uh_magic;	// magic number to check allocationuh_magic417,12554
#define UH_CHANGED UH_CHANGED422,12643
#define UH_EMPTYBUF UH_EMPTYBUF423,12709
#define ALIGN_LONG	ALIGN_LONG428,12791
#define ALIGN_SIZE ALIGN_SIZE429,12852
#define ALIGN_MASK ALIGN_MASK431,12887
typedef struct m_info minfo_T;minfo_T433,12924
struct m_infom_info438,13028
    long_u	m_size;		// size of the chunk (including m_info)m_size441,13062
    minfo_T	*m_next;	// pointer to next free chunk in the listm_next445,13196
typedef struct block_hdr    bhdr_T;bhdr_T452,13299
typedef struct memfile	    memfile_T;memfile_T453,13335
typedef long		    blocknr_T;blocknr_T454,13373
typedef struct mf_hashitem_S mf_hashitem_T;mf_hashitem_T463,13695
struct mf_hashitem_Smf_hashitem_S465,13740
    mf_hashitem_T   *mhi_next;mhi_next467,13763
    mf_hashitem_T   *mhi_prev;mhi_prev468,13794
    blocknr_T	    mhi_key;mhi_key469,13825
#define MHT_INIT_SIZE MHT_INIT_SIZE472,13856
typedef struct mf_hashtab_Smf_hashtab_S474,13884
    long_u	    mht_mask;	    // mask used for hash value (nr of itemsmht_mask476,13914
    long_u	    mht_count;	    // nr of items inserted into hashtablemht_count478,14023
    mf_hashitem_T   **mht_buckets;  // points to mht_small_buckets ormht_buckets479,14092
    mf_hashitem_T   *mht_small_buckets[MHT_INIT_SIZE];   // initial bucketsmht_small_buckets481,14200
    char	    mht_fixed;	    // non-zero value forbids growthmht_fixed482,14276
} mf_hashtab_T;mf_hashtab_T483,14337
struct block_hdrblock_hdr500,15013
    mf_hashitem_T bh_hashitem;      // header for hash table and keybh_hashitem502,15032
#define bh_bnum bh_bnum503,15101
    bhdr_T	*bh_next;	    // next block_hdr in free or used listbh_next505,15175
    bhdr_T	*bh_prev;	    // previous block_hdr in used listbh_prev506,15239
    char_u	*bh_data;	    // pointer to memory (for used block)bh_data507,15299
    int		bh_page_count;	    // number of pages in this blockbh_page_count508,15362
#define BH_DIRTY BH_DIRTY510,15424
#define BH_LOCKED BH_LOCKED511,15446
    char	bh_flags;	    // BH_DIRTY or BH_LOCKEDbh_flags512,15468
typedef struct nr_trans NR_TRANS;NR_TRANS521,15825
struct nr_transnr_trans523,15860
    mf_hashitem_T nt_hashitem;		// header for hash table and keynt_hashitem525,15878
#define nt_old_bnum nt_old_bnum526,15943
    blocknr_T	nt_new_bnum;		// new, positive, numbernt_new_bnum528,16009
typedef struct buffblock buffblock_T;buffblock_T532,16067
typedef struct buffheader buffheader_T;buffheader_T533,16105
struct buffblockbuffblock538,16226
    buffblock_T	*b_next;	// pointer to next buffblockb_next540,16245
    char_u	b_str[1];	// contents (actually longer)b_str541,16299
struct buffheaderbuffheader547,16417
    buffblock_T	bh_first;	// first (dummy) block of listbh_first549,16437
    buffblock_T	*bh_curr;	// buffblock for appendingbh_curr550,16494
    int		bh_index;	// index for readingbh_index551,16547
    int		bh_space;	// space in bh_curr for appendingbh_space552,16587
    buffheader_T sr_redobuff;sr_redobuff557,16661
    buffheader_T sr_old_redobuff;sr_old_redobuff558,16691
} save_redo_T;save_redo_T559,16725
typedef struct expandexpand564,16791
    char_u	*xp_pattern;		// start of item to expandxp_pattern566,16815
    int		xp_context;		// type of expansionxp_context567,16867
    int		xp_pattern_len;		// bytes in xp_pattern before cursorxp_pattern_len568,16910
    char_u	*xp_arg;		// completion functionxp_arg570,16996
    sctx_T	xp_script_ctx;		// SCTX for completion functionxp_script_ctx571,17040
    int		xp_backslash;		// one of the XP_BS_ valuesxp_backslash573,17106
    int		xp_shell;		// TRUE for a shell command, morexp_shell575,17188
    int		xp_numfiles;		// number of files found byxp_numfiles578,17287
    int		xp_col;			// cursor position in linexp_col580,17367
    char_u	**xp_files;		// list of filesxp_files581,17413
    char_u	*xp_line;		// text being completedxp_line582,17454
} expand_T;expand_T583,17500
#define XP_BS_NONE	XP_BS_NONE588,17547
#define XP_BS_ONE	XP_BS_ONE589,17603
#define XP_BS_THREE	XP_BS_THREE590,17660
    char_u	*cmdbuff;	// pointer to command line buffercmdbuff599,17904
    int		cmdbufflen;	// length of cmdbuffcmdbufflen600,17959
    int		cmdlen;		// number of chars in command linecmdlen601,18001
    int		cmdpos;		// current cursor positioncmdpos602,18054
    int		cmdspos;	// cursor column on screencmdspos603,18099
    int		cmdfirstc;	// ':', '/', '?', '=', '>' or NULcmdfirstc604,18144
    int		cmdindent;	// number of spaces before cmdlinecmdindent605,18198
    char_u	*cmdprompt;	// message in front of cmdlinecmdprompt606,18253
    int		cmdattr;	// attributes for promptcmdattr607,18307
    int		overstrike;	// Typing mode on the command line.  Shared byoverstrike608,18350
    expand_T	*xpc;		// struct being used for expansion, xp_patternxpc610,18460
    int		xp_context;	// type of expansionxp_context612,18557
    char_u	*xp_arg;	// user-defined expansion argxp_arg614,18617
    int		input_fn;	// when TRUE Invoked for input() functioninput_fn615,18667
} cmdline_info_T;cmdline_info_T617,18736
    int		hide;			// TRUE when ":hide" was usedhide626,18959
    int		browse;			// TRUE to invoke file dialogbrowse628,19030
    int		split;			// flags for win_split()split630,19087
    int		tab;			// > 0 when ":tab" was usedtab631,19130
    int		confirm;		// TRUE to invoke yes/no dialogconfirm633,19232
    int		keepalt;		// TRUE when ":keepalt" was usedkeepalt635,19291
    int		keepmarks;		// TRUE when ":keepmarks" was usedkeepmarks636,19343
    int		keepjumps;		// TRUE when ":keepjumps" was usedkeepjumps637,19399
    int		lockmarks;		// TRUE when ":lockmarks" was usedlockmarks638,19455
    int		keeppatterns;		// TRUE when ":keeppatterns" was usedkeeppatterns639,19511
    int		noswapfile;		// TRUE when ":noswapfile" was usednoswapfile640,19573
    char_u	*save_ei;		// saved value of 'eventignore'save_ei641,19631
    regmatch_T	filter_regmatch;	// set by :filter /pat/filter_regmatch642,19685
    int		filter_force;		// set for :filter!filter_force643,19741
} cmdmod_T;cmdmod_T644,19785
#define MF_SEED_LEN	MF_SEED_LEN646,19798
struct memfilememfile648,19821
    char_u	*mf_fname;		// name of the filemf_fname650,19838
    char_u	*mf_ffname;		// idem, full pathmf_ffname651,19881
    int		mf_fd;			// file descriptormf_fd652,19924
    int		mf_flags;		// flags used when opening this memfilemf_flags653,19961
    int		mf_reopen;		// mf_fd was closed, retry openingmf_reopen654,20021
    bhdr_T	*mf_free_first;		// first block_hdr in free listmf_free_first655,20077
    bhdr_T	*mf_used_first;		// mru block_hdr in used listmf_used_first656,20137
    bhdr_T	*mf_used_last;		// lru block_hdr in used listmf_used_last657,20195
    unsigned	mf_used_count;		// number of pages in used listmf_used_count658,20252
    unsigned	mf_used_count_max;	// maximum number of pages in memorymf_used_count_max659,20313
    mf_hashtab_T mf_hash;		// hash listsmf_hash660,20382
    mf_hashtab_T mf_trans;		// trans listsmf_trans661,20423
    blocknr_T	mf_blocknr_max;		// highest positive block number + 1mf_blocknr_max662,20466
    blocknr_T	mf_blocknr_min;		// lowest negative block number - 1mf_blocknr_min663,20534
    blocknr_T	mf_neg_count;		// number of negative blocks numbersmf_neg_count664,20601
    blocknr_T	mf_infile_count;	// number of pages in the filemf_infile_count665,20667
    unsigned	mf_page_size;		// number of bytes in a pagemf_page_size666,20729
    int		mf_dirty;		// TRUE if there are dirty blocksmf_dirty667,20786
    buf_T	*mf_buffer;		// buffer this memfile is formf_buffer669,20858
    char_u	mf_seed[MF_SEED_LEN];	// seed for encryptionmf_seed670,20911
    char_u	*mf_old_key;mf_old_key674,21118
    int		mf_old_cm;mf_old_cm675,21142
    char_u	mf_old_seed[MF_SEED_LEN];mf_old_seed676,21162
typedef struct info_pointerinfo_pointer688,21482
    blocknr_T	ip_bnum;	// block numberip_bnum690,21512
    linenr_T	ip_low;		// lowest lnum in this blockip_low691,21551
    linenr_T	ip_high;	// highest lnum in this blockip_high692,21602
    int		ip_index;	// index for block with current lnumip_index693,21654
} infoptr_T;	// block/index pairinfoptr_T694,21710
typedef struct ml_chunksizeml_chunksize697,21764
    int		mlcs_numlines;mlcs_numlines699,21794
    long	mlcs_totalsize;mlcs_totalsize700,21818
} chunksize_T;chunksize_T701,21843
# define ML_CHNK_ADDLINE ML_CHNK_ADDLINE706,21905
# define ML_CHNK_DELLINE ML_CHNK_DELLINE707,21932
# define ML_CHNK_UPDLINE ML_CHNK_UPDLINE708,21959
typedef struct memlinememline714,22068
    linenr_T	ml_line_count;	// number of lines in the bufferml_line_count716,22093
    memfile_T	*ml_mfp;	// pointer to associated memfileml_mfp718,22155
    infoptr_T	*ml_stack;	// stack of pointer blocks (array of IPTRs)ml_stack720,22212
    int		ml_stack_top;	// current top of ml_stackml_stack_top721,22281
    int		ml_stack_size;	// total number of entries in ml_stackml_stack_size722,22331
#define ML_EMPTY	ML_EMPTY724,22395
#define ML_LINE_DIRTY	ML_LINE_DIRTY725,22430
#define ML_LOCKED_DIRTY	ML_LOCKED_DIRTY726,22495
#define ML_LOCKED_POS	ML_LOCKED_POS727,22546
    int		ml_flags;ml_flags728,22611
    colnr_T	ml_line_len;	// length of the cached line, including NULml_line_len730,22631
    linenr_T	ml_line_lnum;	// line number of cached line, 0 if not validml_line_lnum731,22700
    char_u	*ml_line_ptr;	// pointer to cached lineml_line_ptr732,22773
    bhdr_T	*ml_locked;	// block used by last ml_getml_locked734,22825
    linenr_T	ml_locked_low;	// first line in ml_lockedml_locked_low735,22877
    linenr_T	ml_locked_high;	// last line in ml_lockedml_locked_high736,22932
    int		ml_locked_lineadd;  // number of lines inserted in ml_lockedml_locked_lineadd737,22987
    chunksize_T *ml_chunksize;ml_chunksize739,23077
    int		ml_numchunks;ml_numchunks740,23108
    int		ml_usedchunks;ml_usedchunks741,23131
} memline_T;memline_T743,23162
typedef struct textprop_Stextprop_S751,23357
    colnr_T	tp_col;		// start column (one based, in bytes)tp_col753,23385
    colnr_T	tp_len;		// length in bytestp_len754,23444
    int		tp_id;		// identifiertp_id755,23484
    int		tp_type;	// property typetp_type756,23515
    int		tp_flags;	// TP_FLAG_ valuestp_flags757,23550
} textprop_T;textprop_T758,23588
#define TP_FLAG_CONT_NEXT	TP_FLAG_CONT_NEXT760,23603
#define TP_FLAG_CONT_PREV	TP_FLAG_CONT_PREV761,23666
typedef struct proptype_Sproptype_S766,23782
    int		pt_id;		// value used for tp_idpt_id768,23810
    int		pt_type;	// number used for tp_typept_type769,23851
    int		pt_hl_id;	// highlightingpt_hl_id770,23896
    int		pt_priority;	// prioritypt_priority771,23931
    int		pt_flags;	// PT_FLAG_ valuespt_flags772,23965
    char_u	pt_name[1];	// property type name, actually longerpt_name773,24003
} proptype_T;proptype_T774,24065
#define PT_FLAG_INS_START_INCL	PT_FLAG_INS_START_INCL776,24080
#define PT_FLAG_INS_END_INCL	PT_FLAG_INS_END_INCL777,24153
#define PT_FLAG_COMBINE	PT_FLAG_COMBINE778,24222
typedef struct signgroup_Ssigngroup_S781,24297
    int		sg_next_sign_id;	// next sign id for this groupsg_next_sign_id783,24326
    short_u	sg_refcount;		// number of signs in this groupsg_refcount784,24383
    char_u	sg_name[1];		// sign group name, actually longersg_name785,24442
} signgroup_T;signgroup_T786,24502
typedef struct sign_entry sign_entry_T;sign_entry_T788,24518
struct sign_entrysign_entry789,24558
    int		 se_id;		// unique identifier for each placed signse_id791,24578
    int		 se_typenr;	// typenr of signse_typenr792,24638
    int		 se_priority;	// priority for highlightingse_priority793,24677
    linenr_T	 se_lnum;	// line number which has this signse_lnum794,24729
    signgroup_T	 *se_group;	// sign groupse_group795,24787
    sign_entry_T *se_next;	// next entry in a list of signsse_next796,24829
    sign_entry_T *se_prev;	// previous entry -- for easy reorderingse_prev797,24889
typedef struct sign_attrs_S {sign_attrs_S803,25025
    int		sat_typenr;sat_typenr804,25055
    void	*sat_icon;sat_icon805,25076
    char_u	*sat_text;sat_text806,25096
    int		sat_texthl;sat_texthl807,25118
    int		sat_linehl;sat_linehl808,25139
} sign_attrs_T;sign_attrs_T809,25160
#define SGN_KEY_OFF	SGN_KEY_OFF813,25281
#define HI2SG(HI2SG814,25332
#define SIGN_DEF_PRIO	SIGN_DEF_PRIO817,25439
typedef struct arglistarglist825,25598
    garray_T	al_ga;		// growarray with the array of file namesal_ga827,25623
    int		al_refcount;	// number of windows using this arglistal_refcount828,25686
    int		id;		// id of this arglistid829,25748
} alist_T;alist_T830,25784
typedef struct argentryargentry837,25964
    char_u	*ae_fname;	// file name as specifiedae_fname839,25990
    int		ae_fnum;	// buffer number with expanded file nameae_fnum840,26038
} aentry_T;aentry_T841,26097
#define ALIST(ALIST843,26110
#define GARGLIST	GARGLIST844,26144
#define ARGLIST	ARGLIST845,26202
#define WARGLIST(WARGLIST846,26262
#define AARGLIST(AARGLIST847,26322
#define GARGCOUNT	GARGCOUNT848,26379
#define ARGCOUNT	ARGCOUNT849,26425
#define WARGCOUNT(WARGCOUNT850,26472
typedef struct eslist_elem eslist_T;eslist_T858,26713
struct eslist_elemeslist_elem859,26750
    int		saved_emsg_silent;	// saved value of "emsg_silent"saved_emsg_silent861,26771
    eslist_T	*next;			// next element on the listnext862,26831
#define CSTACK_LEN	CSTACK_LEN869,27013
    short	cs_flags[CSTACK_LEN];	// CSF_ flagscs_flags872,27053
    char	cs_pending[CSTACK_LEN];	// CSTP_: what's pending in ":finally"cs_pending873,27099
	void	*csp_rv[CSTACK_LEN];	// return typeval for pending returncsp_rv875,27183
	void	*csp_ex[CSTACK_LEN];	// exception for pending throwcsp_ex876,27247
    }		cs_pend;cs_pend877,27305
    void	*cs_forinfo[CSTACK_LEN]; // info used by ":for"cs_forinfo878,27321
    int		cs_line[CSTACK_LEN];	// line nr of ":while"/":for" linecs_line879,27378
    int		cs_idx;			// current entry, or -1 if nonecs_idx880,27443
    int		cs_looplevel;		// nr of nested ":while"s and ":for"scs_looplevel881,27494
    int		cs_trylevel;		// nr of nested ":try"scs_trylevel882,27556
    eslist_T	*cs_emsg_silent_list;	// saved values of "emsg_silent"cs_emsg_silent_list883,27603
    char	cs_lflags;		// loop flags: CSL_ flagscs_lflags884,27671
} cstack_T;cstack_T885,27718
# define cs_rettv	cs_rettv886,27730
# define cs_exception	cs_exception887,27763
# define CSF_TRUE	CSF_TRUE891,27892
# define CSF_ACTIVE	CSF_ACTIVE892,27939
# define CSF_ELSE	CSF_ELSE893,27993
# define CSF_WHILE	CSF_WHILE894,28045
# define CSF_FOR	CSF_FOR895,28088
# define CSF_TRY	CSF_TRY897,28128
# define CSF_FINALLY	CSF_FINALLY898,28167
# define CSF_THROWN	CSF_THROWN899,28225
# define CSF_CAUGHT	CSF_CAUGHT900,28296
# define CSF_SILENT	CSF_SILENT901,28368
# define CSTP_NONE	CSTP_NONE909,28657
# define CSTP_ERROR	CSTP_ERROR910,28718
# define CSTP_INTERRUPT	CSTP_INTERRUPT911,28763
# define CSTP_THROW	CSTP_THROW912,28816
# define CSTP_BREAK	CSTP_BREAK913,28860
# define CSTP_CONTINUE	CSTP_CONTINUE914,28905
# define CSTP_RETURN	CSTP_RETURN915,28957
# define CSTP_FINISH	CSTP_FINISH916,29005
# define CSL_HAD_LOOP	CSL_HAD_LOOP921,29106
# define CSL_HAD_ENDLOOP CSL_HAD_ENDLOOP922,29164
# define CSL_HAD_CONT	CSL_HAD_CONT923,29230
# define CSL_HAD_FINA	CSL_HAD_FINA924,29281
struct msglistmsglist932,29627
    char		*msg;		// original messagemsg934,29644
    char		*throw_msg;	// msg to throw: usually original onethrow_msg935,29681
    struct msglist	*next;		// next of several messages in a rownext936,29741
    ET_USER,		// exception caused by ":throw" commandET_USER944,29855
    ET_ERROR,		// error exceptionET_ERROR945,29909
    ET_INTERRUPT,	// interrupt exception triggered by Ctrl-CET_INTERRUPT946,29943
} except_type_T;except_type_T947,30004
typedef struct vim_exception except_T;except_T953,30133
struct vim_exceptionvim_exception954,30172
    except_type_T	type;		// exception typetype956,30195
    char		*value;		// exception valuevalue957,30238
    struct msglist	*messages;	// message(s) causing error exceptionmessages958,30276
    char_u		*throw_name;	// name of the throw pointthrow_name959,30344
    linenr_T		throw_lnum;	// line number of the throw pointthrow_lnum960,30396
    except_T		*caught;	// next exception on the caught stackcaught961,30456
typedef struct cleanup_stuff cleanup_T;cleanup_T969,30732
struct cleanup_stuffcleanup_stuff970,30772
    int pending;		// error/interrupt/exception statepending972,30795
    except_T *exception;	// exception valueexception973,30848
struct sp_synsp_syn978,30948
    int		inc_tag;	// ":syn include" unique taginc_tag980,30964
    short	id;		// highlight group ID of itemid981,31011
    short	*cont_in_list;	// cont.in group IDs, if non-zerocont_in_list982,31056
typedef struct keyentry keyentry_T;keyentry_T988,31192
struct keyentrykeyentry990,31229
    keyentry_T	*ke_next;	// next entry with identical "keyword[]"ke_next992,31247
    struct sp_syn k_syn;	// struct passed to in_id_list()k_syn993,31313
    short	*next_list;	// ID list for next match (if non-zero)next_list994,31371
    int		flags;flags995,31433
    int		k_char;		// conceal substitute characterk_char996,31449
    char_u	keyword[1];	// actually longerkeyword997,31499
typedef struct buf_statebuf_state1003,31606
    int		    bs_idx;	 // index of patternbs_idx1005,31633
    int		    bs_flags;	 // flags for patternbs_flags1006,31675
    int		    bs_seqnr;	 // stores si_seqnrbs_seqnr1008,31740
    int		    bs_cchar;	 // stores si_ccharbs_cchar1009,31783
    reg_extmatch_T *bs_extmatch; // external matches from start patternbs_extmatch1011,31833
} bufstate_T;bufstate_T1012,31905
typedef struct syn_state synstate_T;synstate_T1018,32025
struct syn_statesyn_state1020,32063
    synstate_T	*sst_next;	// next entry in used or free listsst_next1022,32082
    linenr_T	sst_lnum;	// line number for this statesst_lnum1023,32143
	bufstate_T	sst_stack[SST_FIX_STATES]; // short state stacksst_stack1026,32212
	garray_T	sst_ga;	// growarray for long state stacksst_ga1027,32272
    } sst_union;sst_union1028,32324
    int		sst_next_flags;	// flags for sst_next_listsst_next_flags1029,32341
    int		sst_stacksize;	// number of states on the stacksst_stacksize1030,32393
    short	*sst_next_list;	// "nextgroup" list in this statesst_next_list1031,32450
    disptick_T	sst_tick;	// tick when last displayedsst_tick1033,32549
    linenr_T	sst_change_lnum;// when non-zero, change in this linesst_change_lnum1034,32602
#define MAX_HL_ID MAX_HL_ID1039,32734
typedef struct attr_entryattr_entry1044,32871
    short	    ae_attr;		// HL_BOLD, etc.ae_attr1046,32899
	    char_u	    *start;	// start escape sequencestart1051,32967
	    char_u	    *stop;	// stop escape sequencestop1052,33016
	} term;term1053,33063
	    short_u	    fg_color;	// foreground color numberfg_color1057,33137
	    short_u	    bg_color;	// background color numberbg_color1058,33191
	    guicolor_T	    fg_rgb;	// foreground color RGBfg_rgb1060,33272
	    guicolor_T	    bg_rgb;	// background color RGBbg_rgb1061,33324
	} cterm;cterm1063,33384
	    guicolor_T	    fg_color;	// foreground color handlefg_color1067,33422
	    guicolor_T	    bg_color;	// background color handlebg_color1068,33479
	    guicolor_T	    sp_color;	// special color handlesp_color1069,33536
	    GuiFont	    font;	// font handlefont1070,33590
	    GuiFontset	    fontset;	// fontset handlefontset1072,33651
	} gui;gui1074,33707
    } ae_u;ae_u1076,33723
} attrentry_T;attrentry_T1077,33735
#    define EILSEQ EILSEQ1086,33884
typedef struct _iconv_t *iconv_t;iconv_t1088,33958
typedef void *iconv_t;iconv_t1092,34031
    char_u	*tb_buf;	// buffer for typed characterstb_buf1101,34137
    char_u	*tb_noremap;	// mapping flags for characters in tb_buf[]tb_noremap1102,34188
    int		tb_buflen;	// size of tb_buf[]tb_buflen1103,34256
    int		tb_off;		// current position in tb_buf[]tb_off1104,34296
    int		tb_len;		// number of valid bytes in tb_buf[]tb_len1105,34346
    int		tb_maplen;	// nr of mapped bytes in tb_buf[]tb_maplen1106,34401
    int		tb_silent;	// nr of silently mapped bytes in tb_buf[]tb_silent1107,34455
    int		tb_no_abbr_cnt; // nr of bytes without abbrev. in tb_buf[]tb_no_abbr_cnt1108,34518
    int		tb_change_cnt;	// nr of time tb_buf was changed; never zerotb_change_cnt1109,34586
} typebuf_T;typebuf_T1110,34655
    typebuf_T		save_typebuf;save_typebuf1115,34746
    int			typebuf_valid;	    // TRUE when save_typebuf validtypebuf_valid1116,34775
    int			old_char;old_char1117,34836
    int			old_mod_mask;old_mod_mask1118,34856
    buffheader_T	save_readbuf1;save_readbuf11119,34880
    buffheader_T	save_readbuf2;save_readbuf21120,34912
    char_u		*save_inputbuf;save_inputbuf1122,34965
} tasave_T;tasave_T1124,35000
    int		vc_type;	// zero or one of the CONV_ valuesvc_type1131,35094
    int		vc_factor;	// max. expansion factorvc_factor1132,35147
    int		vc_cpfrom;	// codepage to convert from (CONV_CODEPAGE)vc_cpfrom1134,35206
    int		vc_cpto;	// codepage to convert to (CONV_CODEPAGE)vc_cpto1135,35270
    iconv_t	vc_fd;		// for CONV_ICONVvc_fd1138,35356
    int		vc_fail;	// fail for invalid char, don't use '?'vc_fail1140,35402
} vimconv_T;vimconv_T1141,35460
typedef struct hist_entryhist_entry1146,35529
    int		hisnum;		// identifying numberhisnum1148,35557
    int		viminfo;	// when TRUE hisstr comes from viminfoviminfo1149,35597
    char_u	*hisstr;	// actual entry, separator char after the NULhisstr1150,35654
    time_t	time_set;	// when it was typed, zero if unknowntime_set1151,35720
} histentry_T;histentry_T1152,35779
#define CONV_NONE	CONV_NONE1154,35795
#define CONV_TO_UTF8	CONV_TO_UTF81155,35816
#define CONV_9_TO_UTF8	CONV_9_TO_UTF81156,35840
#define CONV_TO_LATIN1	CONV_TO_LATIN11157,35866
#define CONV_TO_LATIN9	CONV_TO_LATIN91158,35892
#define CONV_ICONV	CONV_ICONV1159,35918
# define CONV_CODEPAGE	CONV_CODEPAGE1161,35953
# define CONV_MAC_LATIN1	CONV_MAC_LATIN11164,36026
# define CONV_LATIN1_MAC	CONV_LATIN1_MAC1165,36054
# define CONV_MAC_UTF8	CONV_MAC_UTF81166,36082
# define CONV_UTF8_MAC	CONV_UTF8_MAC1167,36109
typedef struct mapblock mapblock_T;mapblock_T1173,36201
struct mapblockmapblock1174,36237
    mapblock_T	*m_next;	// next mapblock in listm_next1176,36255
    char_u	*m_keys;	// mapped from, lhsm_keys1177,36304
    char_u	*m_str;		// mapped to, rhsm_str1178,36344
    char_u	*m_orig_str;	// rhs as entered by the userm_orig_str1179,36382
    int		m_keylen;	// strlen(m_keys)m_keylen1180,36436
    int		m_mode;		// valid modem_mode1181,36473
    int		m_simplified;	// m_keys was simplified, do not use this mapm_simplified1182,36505
    int		m_noremap;	// if non-zero no re-mapping for m_strm_noremap1184,36612
    char	m_silent;	// <silent> used, don't echo commandsm_silent1185,36671
    char	m_nowait;	// <nowait> usedm_nowait1186,36728
    char	m_expr;		// <expr> used, m_str is an expressionm_expr1188,36781
    sctx_T	m_script_ctx;	// SCTX where map was definedm_script_ctx1189,36838
struct stl_hlrecstl_hlrec1196,36956
    char_u	*start;start1198,36975
    int		userhl;		// 0: no HL, 1-9: User HL, < 0 for syn IDuserhl1199,36994
typedef struct hashitem_Shashitem_S1215,37428
    long_u	hi_hash;	// cached hash number of hi_keyhi_hash1217,37456
    char_u	*hi_key;hi_key1218,37508
} hashitem_T;hashitem_T1219,37528
#define HI_KEY_REMOVED HI_KEY_REMOVED1223,37644
#define HASHITEM_EMPTY(HASHITEM_EMPTY1224,37681
#define HT_INIT_SIZE HT_INIT_SIZE1229,37981
typedef struct hashtable_Shashtable_S1231,38006
    long_u	ht_mask;	// mask used for hash value (nr of items inht_mask1233,38035
    long_u	ht_used;	// number of items usedht_used1235,38130
    long_u	ht_filled;	// number of items used + removedht_filled1236,38174
    int		ht_locked;	// counter for hash_lock()ht_locked1237,38230
    int		ht_error;	// when set growing failed, can't add moreht_error1238,38277
    hashitem_T	*ht_array;	// points to the array, allocated when it'sht_array1240,38373
    hashitem_T	ht_smallarray[HT_INIT_SIZE];   // initial arrayht_smallarray1242,38470
} hashtab_T;hashtab_T1243,38533
typedef long_u hash_T;		// Type for hi_hashhash_T1245,38547
   typedef long			varnumber_T;varnumber_T1252,38701
   typedef unsigned long	uvarnumber_T;uvarnumber_T1253,38732
#  define VARNUM_MIN	VARNUM_MIN1254,38771
#  define VARNUM_MAX	VARNUM_MAX1255,38802
#  define UVARNUM_MAX	UVARNUM_MAX1256,38833
   typedef __int64		varnumber_T;varnumber_T1258,38873
   typedef unsigned __int64	uvarnumber_T;uvarnumber_T1259,38906
#  define VARNUM_MIN	VARNUM_MIN1260,38948
#  define VARNUM_MAX	VARNUM_MAX1261,38979
#  define UVARNUM_MAX	UVARNUM_MAX1262,39010
   typedef int64_t		varnumber_T;varnumber_T1266,39112
   typedef uint64_t		uvarnumber_T;uvarnumber_T1267,39145
#  define VARNUM_MIN	VARNUM_MIN1268,39180
#  define VARNUM_MAX	VARNUM_MAX1269,39212
#  define UVARNUM_MAX	UVARNUM_MAX1270,39244
   typedef long			varnumber_T;varnumber_T1273,39351
   typedef unsigned long	uvarnumber_T;uvarnumber_T1274,39382
#  define VARNUM_MIN	VARNUM_MIN1275,39421
#  define VARNUM_MAX	VARNUM_MAX1276,39452
#  define UVARNUM_MAX	UVARNUM_MAX1277,39483
  typedef long long		varnumber_T;varnumber_T1280,39530
  typedef unsigned long long	uvarnumber_T;uvarnumber_T1281,39564
#  define VARNUM_MIN	VARNUM_MIN1283,39625
#  define VARNUM_MAX	VARNUM_MAX1284,39657
#  define UVARNUM_MAX	UVARNUM_MAX1285,39689
#  define VARNUM_MIN	VARNUM_MIN1287,39730
#  define VARNUM_MAX	VARNUM_MAX1288,39766
#  define UVARNUM_MAX	UVARNUM_MAX1289,39802
typedef double	float_T;float_T1293,39856
typedef struct listvar_S list_T;list_T1295,39881
typedef struct dictvar_S dict_T;dict_T1296,39914
typedef struct partial_S partial_T;partial_T1297,39947
typedef struct blobvar_S blob_T;blob_T1298,39983
    char_u	*cb_name;cb_name1306,40319
    partial_T	*cb_partial;cb_partial1307,40340
    int		cb_free_name;	    // cb_name was allocatedcb_free_name1308,40367
} callback_T;callback_T1309,40419
typedef struct dfunc_S dfunc_T;	    // :def functiondfunc_T1311,40434
typedef struct jobvar_S job_T;job_T1313,40488
typedef struct readq_S readq_T;readq_T1314,40519
typedef struct writeq_S writeq_T;writeq_T1315,40551
typedef struct jsonq_S jsonq_T;jsonq_T1316,40585
typedef struct cbq_S cbq_T;cbq_T1317,40617
typedef struct channel_S channel_T;channel_T1318,40645
typedef struct cctx_S cctx_T;cctx_T1319,40681
    VAR_UNKNOWN = 0,	// not set, also used for "any" typeVAR_UNKNOWN1323,40727
    VAR_VOID,		// no valueVAR_VOID1324,40785
    VAR_BOOL,		// "v_number" is used: VVAL_TRUE or VVAL_FALSEVAR_BOOL1325,40812
    VAR_SPECIAL,	// "v_number" is used: VVAL_NULL or VVAL_NONEVAR_SPECIAL1326,40874
    VAR_NUMBER,		// "v_number" is usedVAR_NUMBER1327,40937
    VAR_FLOAT,		// "v_float" is usedVAR_FLOAT1328,40976
    VAR_STRING,		// "v_string" is usedVAR_STRING1329,41013
    VAR_BLOB,		// "v_blob" is usedVAR_BLOB1330,41052
    VAR_FUNC,		// "v_string" is function nameVAR_FUNC1331,41087
    VAR_PARTIAL,	// "v_partial" is usedVAR_PARTIAL1332,41133
    VAR_LIST,		// "v_list" is usedVAR_LIST1333,41173
    VAR_DICT,		// "v_dict" is usedVAR_DICT1334,41208
    VAR_JOB,		// "v_job" is usedVAR_JOB1335,41243
    VAR_CHANNEL,	// "v_channel" is usedVAR_CHANNEL1336,41276
} vartype_T;vartype_T1337,41316
typedef struct type_S type_T;type_T1340,41355
struct type_S {type_S1341,41385
    vartype_T	    tt_type;tt_type1342,41401
    short	    tt_argcount;    // for func, partial, -1 for unknowntt_argcount1343,41428
    type_T	    *tt_member;	    // for list, dict, func return typett_member1344,41495
    type_T	    *tt_args;	    // func argumentstt_args1345,41562
    vartype_T	v_type;v_type1353,41695
    char	v_lock;	    // see below: VAR_LOCKED, VAR_FIXEDv_lock1354,41717
	varnumber_T	v_number;	// number valuev_number1357,41790
	float_T		v_float;	// floating number valuev_float1359,41847
	char_u		*v_string;	// string value (can be NULL!)v_string1361,41898
	list_T		*v_list;	// list value (can be NULL!)v_list1362,41949
	dict_T		*v_dict;	// dict value (can be NULL!)v_dict1363,41996
	partial_T	*v_partial;	// closure: function with argsv_partial1364,42043
	job_T		*v_job;		// job value (can be NULL!)v_job1366,42121
	channel_T	*v_channel;	// channel value (can be NULL!)v_channel1367,42166
	blob_T		*v_blob;	// blob value (can be NULL!)v_blob1369,42228
    }		vval;vval1370,42275
} typval_T;typval_T1371,42288
#define VAR_SCOPE VAR_SCOPE1374,42327
#define VAR_DEF_SCOPE VAR_DEF_SCOPE1375,42390
#define VAR_LOCKED VAR_LOCKED1379,42532
#define VAR_FIXED VAR_FIXED1380,42594
typedef struct listitem_S listitem_T;listitem_T1385,42719
struct listitem_Slistitem_S1387,42758
    listitem_T	*li_next;	// next item in listli_next1389,42778
    listitem_T	*li_prev;	// previous item in listli_prev1390,42824
    typval_T	li_tv;		// type and value of the variableli_tv1391,42874
typedef struct listwatch_S listwatch_T;listwatch_T1395,42991
struct listwatch_Slistwatch_S1397,43032
    listitem_T		*lw_item;	// item being watchedlw_item1399,43053
    listwatch_T		*lw_next;	// next watcherlw_next1400,43101
struct listvar_Slistvar_S1410,43385
    listitem_T	*lv_first;	// first item, NULL if nonelv_first1412,43404
    listwatch_T	*lv_watch;	// first watcher, NULL if nonelv_watch1413,43458
	    varnumber_T lv_start;lv_start1417,43616
	    varnumber_T lv_end;lv_end1418,43643
	    int		lv_stride;lv_stride1419,43668
	} nonmat;nonmat1420,43689
	    listitem_T	*lv_last;	// last item, NULL if nonelv_last1422,43740
	    listitem_T	*lv_idx_item;	// when not NULL item at index "lv_idx"lv_idx_item1423,43793
	    int		lv_idx;		// cached index of an itemlv_idx1424,43863
	} mat;mat1425,43909
    } lv_u;lv_u1426,43917
    list_T	*lv_copylist;	// copied list used by deepcopy()lv_copylist1427,43929
    list_T	*lv_used_next;	// next list in used lists listlv_used_next1428,43988
    list_T	*lv_used_prev;	// previous list in used lists listlv_used_prev1429,44046
    int		lv_refcount;	// reference countlv_refcount1430,44108
    int		lv_len;		// number of itemslv_len1431,44149
    int		lv_with_items;	// number of items following this struct thatlv_with_items1432,44186
    int		lv_copyID;	// ID used by deepcopy()lv_copyID1434,44283
    char	lv_lock;	// zero, VAR_LOCKED, VAR_FIXEDlv_lock1435,44328
    list_T	sl_list;	// must be firstsl_list1442,44474
    listitem_T	sl_items[10];sl_items1443,44511
} staticList10_T;staticList10_T1444,44540
struct dictitem_Sdictitem_S1451,44713
    typval_T	di_tv;		// type and value of the variabledi_tv1453,44733
    char_u	di_flags;	// DI_FLAGS_ flags (only used for variable)di_flags1454,44788
    char_u	di_key[1];	// key (actually longer!)di_key1455,44853
typedef struct dictitem_S dictitem_T;dictitem_T1457,44904
#define DICTITEM16_KEY_LEN DICTITEM16_KEY_LEN1463,45060
struct dictitem16_Sdictitem16_S1464,45090
    typval_T	di_tv;		// type and value of the variabledi_tv1466,45112
    char_u	di_flags;	// DI_FLAGS_ flags (only used for variable)di_flags1467,45167
    char_u	di_key[DICTITEM16_KEY_LEN + 1];	// keydi_key1468,45232
typedef struct dictitem16_S dictitem16_T;dictitem16_T1470,45285
#define DI_FLAGS_RO	DI_FLAGS_RO1473,45352
#define DI_FLAGS_RO_SBX	DI_FLAGS_RO_SBX1474,45406
#define DI_FLAGS_FIX	DI_FLAGS_FIX1475,45470
#define DI_FLAGS_LOCK	DI_FLAGS_LOCK1476,45535
#define DI_FLAGS_ALLOC	DI_FLAGS_ALLOC1477,45588
#define DI_FLAGS_RELOAD	DI_FLAGS_RELOAD1478,45647
struct dictvar_Sdictvar_S1483,45770
    char	dv_lock;	// zero, VAR_LOCKED, VAR_FIXEDdv_lock1485,45789
    char	dv_scope;	// zero, VAR_SCOPE, VAR_DEF_SCOPEdv_scope1486,45838
    int		dv_refcount;	// reference countdv_refcount1487,45891
    int		dv_copyID;	// ID used by deepcopy()dv_copyID1488,45932
    hashtab_T	dv_hashtab;	// hashtab that refers to the itemsdv_hashtab1489,45977
    dict_T	*dv_copydict;	// copied dict used by deepcopy()dv_copydict1490,46039
    dict_T	*dv_used_next;	// next dict in used dicts listdv_used_next1491,46098
    dict_T	*dv_used_prev;	// previous dict in used dicts listdv_used_prev1492,46156
struct blobvar_Sblobvar_S1498,46269
    garray_T	bv_ga;		// growarray with the databv_ga1500,46288
    int		bv_refcount;	// reference countbv_refcount1501,46336
    char	bv_lock;	// zero, VAR_LOCKED, VAR_FIXEDbv_lock1502,46377
typedef struct funccall_S funccall_T;funccall_T1506,46471
    int		uf_varargs;	// variable nr of arguments (old style)uf_varargs1513,46581
    int		uf_flags;	// FC_ flagsuf_flags1514,46642
    int		uf_calls;	// nr of active callsuf_calls1515,46674
    int		uf_cleared;	// func_clear() was already calleduf_cleared1516,46715
    int		uf_dfunc_idx;	// >= 0 for :def function onlyuf_dfunc_idx1517,46771
    garray_T	uf_args;	// argumentsuf_args1518,46825
    garray_T	uf_def_args;	// default argument expressionsuf_def_args1519,46860
    type_T	**uf_arg_types;	// argument types (count == uf_args.ga_len)uf_arg_types1522,46971
    type_T	*uf_ret_type;	// return typeuf_ret_type1523,47042
    garray_T	uf_type_list;	// types used in arg and return typesuf_type_list1524,47082
    int		*uf_def_arg_idx; // instruction indexes for evaluatinguf_def_arg_idx1525,47147
    char_u	*uf_va_name;	// name from "...name" or NULLuf_va_name1527,47262
    type_T	*uf_va_type;	// type from "...name: type" or NULLuf_va_type1528,47317
    garray_T	uf_lines;	// function linesuf_lines1530,47379
    int		uf_profiling;	// TRUE when func is being profileduf_profiling1532,47441
    int		uf_prof_initialized;uf_prof_initialized1533,47500
    int		uf_tm_count;	// nr of callsuf_tm_count1535,47571
    proftime_T	uf_tm_total;	// time spent in function + childrenuf_tm_total1536,47608
    proftime_T	uf_tm_self;	// time spent in function itselfuf_tm_self1537,47673
    proftime_T	uf_tm_children;	// time spent in children this calluf_tm_children1538,47733
    int		*uf_tml_count;	// nr of times line was executeduf_tml_count1540,47839
    proftime_T	*uf_tml_total;	// time spent in a line + childrenuf_tml_total1541,47896
    proftime_T	*uf_tml_self;	// time spent in a line itselfuf_tml_self1542,47961
    proftime_T	uf_tml_start;	// start time for current lineuf_tml_start1543,48021
    proftime_T	uf_tml_children; // time spent in children for this lineuf_tml_children1544,48081
    proftime_T	uf_tml_wait;	// start wait time for current lineuf_tml_wait1545,48153
    int		uf_tml_idx;	// index of line being timed; -1 if noneuf_tml_idx1546,48217
    int		uf_tml_execed;	// line being timed was executeduf_tml_execed1547,48279
    sctx_T	uf_script_ctx;	// SCTX where function was defined,uf_script_ctx1549,48344
    int		uf_refcount;	// reference count, see func_name_refcount()uf_refcount1551,48435
    funccall_T	*uf_scoped;	// l: local variables for closureuf_scoped1552,48502
    char_u	*uf_name_exp;	// if "uf_name[]" starts with SNR the name withuf_name_exp1553,48563
    char_u	uf_name[1];	// name of function (actually longer); canuf_name1555,48679
} ufunc_T;ufunc_T1558,48817
#define MAX_FUNC_ARGS	MAX_FUNC_ARGS1560,48829
#define VAR_SHORT_LEN	VAR_SHORT_LEN1561,48894
#define FIXVAR_CNT	FIXVAR_CNT1562,48949
struct funccall_Sfunccall_S1567,49083
    ufunc_T	*func;		// function being calledfunc1569,49103
    int		linenr;		// next line to be executedlinenr1570,49148
    int		returned;	// ":return" usedreturned1571,49194
	dictitem_T	var;		// variable (without room for name)var1574,49283
	char_u	room[VAR_SHORT_LEN];	// room for the nameroom1575,49337
    } fixvar[FIXVAR_CNT];fixvar1576,49387
    dict_T	l_vars;		// l: local function variablesl_vars1577,49413
    dictitem_T	l_vars_var;	// variable for l: scopel_vars_var1578,49464
    dict_T	l_avars;	// a: argument variablesl_avars1579,49516
    dictitem_T	l_avars_var;	// variable for a: scopel_avars_var1580,49561
    list_T	l_varlist;	// list for a:000l_varlist1581,49614
    listitem_T	l_listitems[MAX_FUNC_ARGS];	// listitems for a:000l_listitems1582,49654
    typval_T	*rettv;		// return valuerettv1583,49720
    linenr_T	breakpoint;	// next line with breakpoint or zerobreakpoint1584,49758
    int		dbg_tick;	// debug_tick when breakpoint was setdbg_tick1585,49820
    int		level;		// top nesting level of executed functionlevel1586,49877
    proftime_T	prof_child;	// time spent in a childprof_child1588,49956
    funccall_T	*caller;	// calling function or NULLcaller1590,50015
    int		fc_refcount;	// number of user functions that reference thisfc_refcount1593,50087
    int		fc_copyID;	// for garbage collectionfc_copyID1595,50172
    garray_T	fc_funcs;	// list of ufunc_T* which keep a reference tofc_funcs1596,50218
    dict_T	*fd_dict;	// Dictionary usedfd_dict1605,50369
    char_u	*fd_newkey;	// new key in "dict" in allocated memoryfd_newkey1606,50409
    dictitem_T	*fd_di;		// Dictionary item usedfd_di1607,50473
} funcdict_T;funcdict_T1608,50521
typedef struct funccal_entry funccal_entry_T;funccal_entry_T1610,50536
struct funccal_entry {funccal_entry1611,50582
    void	    *top_funccal;top_funccal1612,50605
    funccal_entry_T *next;next1613,50632
#define UF2HIKEY(UF2HIKEY1617,50707
#define HIKEY2UF(HIKEY2UF1618,50744
#define HI2UF(HI2UF1619,50813
    dictitem_T	sv_var;sv_var1627,51017
    dict_T	sv_dict;sv_dict1628,51040
} scriptvar_T;scriptvar_T1629,51060
    char_u	*sv_name;	// points into "sn_vars" di_keysv_name1635,51162
    typval_T	*sv_tv;		// points into "sn_vars" di_tvsv_tv1636,51215
    type_T	*sv_type;sv_type1637,51268
    int		sv_const;sv_const1638,51289
    int		sv_export;	// "export let var = val"sv_export1639,51308
} svar_T;svar_T1640,51354
    char_u	*imp_name;	    // name imported as (allocated)imp_name1643,51382
    int		imp_sid;	    // script ID of "from"imp_sid1644,51440
    int		imp_all;imp_all1647,51538
    type_T	*imp_type;imp_type1650,51577
    int		imp_var_vals_idx;   // index in sn_var_vals of "from"imp_var_vals_idx1651,51599
    char_u	*imp_funcname;	    // user func name (NOT allocated)imp_funcname1654,51683
} imported_T;imported_T1655,51747
    char_u	*sn_name;sn_name1664,51956
    scriptvar_T	*sn_vars;	// stores s: variables for this scriptsn_vars1666,51978
    garray_T	sn_var_vals;	// same variables as a list of svar_Tsn_var_vals1667,52043
    garray_T	sn_imports;	// imported items, imported_Tsn_imports1669,52108
    garray_T	sn_type_list;	// keeps types used by variablessn_type_list1671,52164
    int		sn_version;	// :scriptversionsn_version1673,52225
    int		sn_had_command;	// TRUE if any command was executedsn_had_command1674,52264
    char_u	*sn_save_cpo;	// 'cpo' value when :vim9script foundsn_save_cpo1675,52325
    int		sn_prof_on;	// TRUE when script is/was profiledsn_prof_on1678,52410
    int		sn_pr_force;	// forceit: profile functions in this scriptsn_pr_force1679,52467
    proftime_T	sn_pr_child;	// time set when going into first childsn_pr_child1680,52534
    int		sn_pr_nest;	// nesting for sn_pr_childsn_pr_nest1681,52602
    int		sn_pr_count;	// nr of times sourcedsn_pr_count1683,52689
    proftime_T	sn_pr_total;	// time spent in script + childrensn_pr_total1684,52734
    proftime_T	sn_pr_self;	// time spent in script itselfsn_pr_self1685,52797
    proftime_T	sn_pr_start;	// time at script startsn_pr_start1686,52855
    proftime_T	sn_pr_children; // time in children after script startsn_pr_children1687,52907
    garray_T	sn_prl_ga;	// things stored for every linesn_prl_ga1689,53014
    proftime_T	sn_prl_start;	// start time for current linesn_prl_start1690,53070
    proftime_T	sn_prl_children; // time spent in children for this linesn_prl_children1691,53130
    proftime_T	sn_prl_wait;	// wait start time for current linesn_prl_wait1692,53202
    int		sn_prl_idx;	// index of line being timed; -1 if nonesn_prl_idx1693,53266
    int		sn_prl_execed;	// line being timed was executedsn_prl_execed1694,53328
} scriptitem_T;scriptitem_T1696,53393
typedef struct sn_prl_Ssn_prl_S1702,53494
    int		snp_count;	// nr of times line was executedsnp_count1704,53520
    proftime_T	sn_prl_total;	// time spent in a line + childrensn_prl_total1705,53573
    proftime_T	sn_prl_self;	// time spent in a line itselfsn_prl_self1706,53637
} sn_prl_T;sn_prl_T1707,53696
#  define PRL_ITEM(PRL_ITEM1709,53709
    int	    dummy;dummy1715,53864
} ufunc_T;ufunc_T1716,53883
    int	    dummy;dummy1719,53911
} funccall_T;funccall_T1720,53930
    int	    dummy;dummy1723,53961
} funcdict_T;funcdict_T1724,53980
    int	    dummy;dummy1727,54011
} funccal_entry_T;funccal_entry_T1728,54030
    int	    dummy;dummy1731,54066
} scriptitem_T;scriptitem_T1732,54085
    int		(* argv_func)(int, typval_T *, int, int);argv_func1743,54442
    linenr_T	firstline;	// first line of rangefirstline1744,54493
    linenr_T	lastline;	// last line of rangelastline1745,54540
    int		*doesrange;	// if not NULL: return: function handled rangedoesrange1746,54585
    int		evaluate;	// actually evaluate expressionsevaluate1747,54653
    partial_T	*partial;	// for extra argumentspartial1748,54705
    dict_T	*selfdict;	// Dictionary for "self"selfdict1749,54752
    typval_T	*basetv;	// base for base->method()basetv1750,54799
} funcexe_T;funcexe_T1751,54848
struct partial_Spartial_S1753,54862
    int		pt_refcount;	// reference countpt_refcount1755,54881
    char_u	*pt_name;	// function name; when NULL usept_name1756,54922
    ufunc_T	*pt_func;	// function pointer; when NULL lookup functionpt_func1758,54999
    int		pt_auto;	// when TRUE the partial was created for usingpt_auto1760,55088
    int		pt_argc;	// number of argumentspt_argc1762,55194
    typval_T	*pt_argv;	// arguments in allocated arraypt_argv1763,55235
    dict_T	*pt_dict;	// dict for "self"pt_dict1764,55290
typedef struct AutoPatCmd_S AutoPatCmd;AutoPatCmd1767,55334
    ETYPE_TOP,		    // toplevelETYPE_TOP1773,55441
    ETYPE_SCRIPT,           // sourcing script, use es_info.sctxETYPE_SCRIPT1774,55473
    ETYPE_UFUNC,            // user function, use es_info.ufuncETYPE_UFUNC1775,55538
    ETYPE_AUCMD,            // autocomand, use es_info.aucmdETYPE_AUCMD1776,55602
    ETYPE_MODELINE,         // modeline, use es_info.sctxETYPE_MODELINE1777,55663
    ETYPE_EXCEPT,           // exception, use es_info.exceptionETYPE_EXCEPT1778,55721
    ETYPE_ARGS,             // command line argumentETYPE_ARGS1779,55785
    ETYPE_ENV,              // environment variableETYPE_ENV1780,55838
    ETYPE_INTERNAL,         // internal operationETYPE_INTERNAL1781,55890
    ETYPE_SPELL,            // loading spell fileETYPE_SPELL1782,55940
} etype_T;etype_T1783,55990
    long      es_lnum;      // replaces "sourcing_lnum"es_lnum1786,56019
    char_u    *es_name;     // replaces "sourcing_name"es_name1787,56075
    etype_T   es_type;es_type1788,56131
	sctx_T  *sctx;      // script and modeline infosctx1790,56166
	ufunc_T *ufunc;     // function infoufunc1792,56238
	AutoPatCmd *aucmd;  // autocommand infoaucmd1794,56283
	except_T   *except; // exception infoexcept1795,56324
    } es_info;es_info1796,56363
} estack_T;estack_T1797,56378
    int backspace;	// what the Backspace key producesbackspace1801,56451
    int enter;		// what the Enter key producesenter1802,56505
    int interrupt;	// interrupt characterinterrupt1803,56552
    int nl_does_cr;	// TRUE when a NL is expanded to CR-NL on outputnl_does_cr1804,56594
} ttyinfo_T;ttyinfo_T1805,56663
    JOB_FAILED,JOB_FAILED1810,56728
    JOB_STARTED,JOB_STARTED1811,56744
    JOB_ENDED,	    // detected job doneJOB_ENDED1812,56761
    JOB_FINISHED,   // job done and cleanup doneJOB_FINISHED1813,56801
} jobstatus_T;jobstatus_T1814,56850
struct jobvar_Sjobvar_S1819,56912
    job_T	*jv_next;jv_next1821,56930
    job_T	*jv_prev;jv_prev1822,56950
    pid_t	jv_pid;jv_pid1824,56982
    PROCESS_INFORMATION	jv_proc_info;jv_proc_info1827,57020
    HANDLE		jv_job_object;jv_job_object1828,57058
    char_u	*jv_tty_in;	// controlling tty input, allocatedjv_tty_in1830,57092
    char_u	*jv_tty_out;	// controlling tty output, allocatedjv_tty_out1831,57151
    jobstatus_T	jv_status;jv_status1832,57212
    char_u	*jv_stoponexit;	// allocatedjv_stoponexit1833,57239
    char_u	*jv_termsig;	// allocatedjv_termsig1835,57291
    char_u	*jv_tty_type;	// allocatedjv_tty_type1838,57348
    int		jv_exitval;jv_exitval1840,57393
    callback_T	jv_exit_cb;jv_exit_cb1841,57414
    buf_T	*jv_in_buf;	// buffer from "in-name"jv_in_buf1843,57442
    int		jv_refcount;	// reference countjv_refcount1845,57490
    int		jv_copyID;jv_copyID1846,57531
    channel_T	*jv_channel;	// channel for I/O, reference countedjv_channel1848,57552
    char	**jv_argv;	// command line used to start the jobjv_argv1849,57617
struct readq_Sreadq_S1855,57730
    char_u	*rq_buffer;rq_buffer1857,57747
    long_u	rq_buflen;rq_buflen1858,57770
    readq_T	*rq_next;rq_next1859,57792
    readq_T	*rq_prev;rq_prev1860,57814
struct writeq_Swriteq_S1863,57840
    garray_T	wq_ga;wq_ga1865,57858
    writeq_T	*wq_next;wq_next1866,57878
    writeq_T	*wq_prev;wq_prev1867,57901
struct jsonq_Sjsonq_S1870,57928
    typval_T	*jq_value;jq_value1872,57945
    jsonq_T	*jq_next;jq_next1873,57969
    jsonq_T	*jq_prev;jq_prev1874,57991
    int		jq_no_callback; // TRUE when no callback was foundjq_no_callback1875,58013
struct cbq_Scbq_S1878,58077
    callback_T	cq_callback;cq_callback1880,58092
    int		cq_seq_nr;cq_seq_nr1881,58120
    cbq_T	*cq_next;cq_next1882,58140
    cbq_T	*cq_prev;cq_prev1883,58160
    MODE_NL = 0,MODE_NL1889,58221
    MODE_RAW,MODE_RAW1890,58238
    MODE_JSON,MODE_JSON1891,58252
    MODE_JS,MODE_JS1892,58267
} ch_mode_T;ch_mode_T1893,58280
    JIO_PIPE,	    // defaultJIO_PIPE1896,58309
    JIO_NULL,JIO_NULL1897,58338
    JIO_FILE,JIO_FILE1898,58352
    JIO_BUFFER,JIO_BUFFER1899,58366
    JIO_OUTJIO_OUT1900,58382
} job_io_T;job_io_T1901,58394
#define CH_PART_FD(CH_PART_FD1903,58407
    PART_SOCK = 0,PART_SOCK1908,58559
#define CH_SOCK_FD	CH_SOCK_FD1909,58578
    PART_OUT,PART_OUT1911,58643
# define CH_OUT_FD	CH_OUT_FD1912,58657
    PART_ERR,PART_ERR1913,58697
# define CH_ERR_FD	CH_ERR_FD1914,58711
    PART_IN,PART_IN1915,58751
# define CH_IN_FD	CH_IN_FD1916,58764
    PART_COUNT,PART_COUNT1918,58809
} ch_part_T;ch_part_T1919,58825
#define INVALID_FD	INVALID_FD1921,58839
    sock_T	ch_fd;	    // socket/stdin/stdout/stderr, -1 if not usedch_fd1925,58915
    int		ch_poll_idx;	// used by channel_poll_setup()ch_poll_idx1928,59028
    XtInputId	ch_inputHandler; // Cookie for inputch_inputHandler1932,59111
    gint	ch_inputHandler; // Cookie for inputch_inputHandler1935,59189
    ch_mode_T	ch_mode;ch_mode1938,59243
    job_io_T	ch_io;ch_io1939,59266
    int		ch_timeout;	// request timeout in msecch_timeout1940,59286
    readq_T	ch_head;	// header for circular raw read queuech_head1942,59335
    jsonq_T	ch_json_head;	// header for circular json read queuech_json_head1943,59394
    garray_T	ch_block_ids;	// list of IDs that channel_read_json_block()ch_block_ids1944,59459
    size_t	ch_wait_len;ch_wait_len1950,59818
    DWORD	ch_deadline;ch_deadline1952,59855
    struct timeval ch_deadline;ch_deadline1954,59884
    int		ch_block_write;	// for testing: 0 when not used, -1 when writech_block_write1956,59923
    int		ch_nonblocking;	// write() is non-blockingch_nonblocking1958,60038
    writeq_T	ch_writeque;	// header for write queuech_writeque1959,60090
    cbq_T	ch_cb_head;	// dummy node for per-request callbacksch_cb_head1961,60143
    callback_T	ch_callback;	// call when a msg is not handledch_callback1962,60205
    bufref_T	ch_bufref;	// buffer to read from or write toch_bufref1964,60268
    int		ch_nomodifiable; // TRUE when buffer can be 'nomodifiable'ch_nomodifiable1965,60327
    int		ch_nomod_error;	// TRUE when e_modifiable was givench_nomod_error1966,60395
    int		ch_buf_append;	// write appended lines instead top-botch_buf_append1967,60456
    linenr_T	ch_buf_top;	// next line to sendch_buf_top1968,60520
    linenr_T	ch_buf_bot;	// last line to sendch_buf_bot1969,60566
} chanpart_T;chanpart_T1970,60612
struct channel_S {channel_S1972,60627
    channel_T	*ch_next;ch_next1973,60646
    channel_T	*ch_prev;ch_prev1974,60670
    int		ch_id;		// ID of the channelch_id1976,60695
    int		ch_last_msg_id;	// ID of the last messagech_last_msg_id1977,60733
    chanpart_T	ch_part[PART_COUNT]; // info for socket, out, err and inch_part1979,60785
    int		ch_write_text_mode; // write buffer lines with CR, not NLch_write_text_mode1980,60857
    char	*ch_hostname;	// only for socket, allocatedch_hostname1982,60925
    int		ch_port;	// only for socketch_port1983,60978
    int		ch_to_be_closed; // bitset of readable fds to be closed.ch_to_be_closed1985,61016
    int		ch_to_be_freed; // When TRUE channel must be freed when it'sch_to_be_freed1988,61164
    int		ch_error;	// When TRUE an error was reported.  Avoidsch_error1990,61267
    void	(*ch_nb_close_cb)(void);ch_nb_close_cb1996,61490
    int		ch_named_pipe;	// using named pipe instead of ptych_named_pipe2001,61597
    callback_T	ch_callback;	// call when any msg is not handledch_callback2003,61663
    callback_T	ch_close_cb;	// call when channel is closedch_close_cb2004,61727
    int		ch_drop_never;ch_drop_never2005,61786
    int		ch_keep_open;	// do not close on read errorch_keep_open2006,61810
    int		ch_nonblock;ch_nonblock2007,61863
    job_T	*ch_job;	// Job that uses this channel; this does notch_job2009,61886
    int		ch_job_killed;	// TRUE when there was a job and it was killedch_job_killed2012,62047
    int		ch_anonymous_pipe;  // ConPTYch_anonymous_pipe2014,62145
    int		ch_killing;	    // TerminateJobObject() was calledch_killing2015,62184
    int		ch_refcount;	// reference countch_refcount2017,62245
    int		ch_copyID;ch_copyID2018,62286
#define JO_MODE	JO_MODE2021,62310
#define JO_IN_MODE	JO_IN_MODE2022,62354
#define JO_OUT_MODE	JO_OUT_MODE2023,62398
#define JO_ERR_MODE	JO_ERR_MODE2024,62444
#define JO_CALLBACK	JO_CALLBACK2025,62490
#define JO_OUT_CALLBACK	JO_OUT_CALLBACK2026,62541
#define JO_ERR_CALLBACK	JO_ERR_CALLBACK2027,62595
#define JO_CLOSE_CALLBACK JO_CLOSE_CALLBACK2028,62649
#define JO_WAITTIME	JO_WAITTIME2029,62698
#define JO_TIMEOUT	JO_TIMEOUT2030,62751
#define JO_OUT_TIMEOUT	JO_OUT_TIMEOUT2031,62797
#define JO_ERR_TIMEOUT	JO_ERR_TIMEOUT2032,62850
#define JO_PART	JO_PART2033,62903
#define JO_ID	JO_ID2034,62941
#define JO_STOPONEXIT	JO_STOPONEXIT2035,62975
#define JO_EXIT_CB	JO_EXIT_CB2036,63024
#define JO_OUT_IO	JO_OUT_IO2037,63067
#define JO_ERR_IO	JO_ERR_IO2038,63109
#define JO_IN_IO	JO_IN_IO2039,63168
#define JO_OUT_NAME	JO_OUT_NAME2040,63225
#define JO_ERR_NAME	JO_ERR_NAME2041,63271
#define JO_IN_NAME	JO_IN_NAME2042,63337
#define JO_IN_TOP	JO_IN_TOP2043,63401
#define JO_IN_BOT	JO_IN_BOT2044,63444
#define JO_OUT_BUF	JO_OUT_BUF2045,63487
#define JO_ERR_BUF	JO_ERR_BUF2046,63533
#define JO_IN_BUF	JO_IN_BUF2047,63597
#define JO_CHANNEL	JO_CHANNEL2048,63659
#define JO_BLOCK_WRITE	JO_BLOCK_WRITE2049,63705
#define JO_OUT_MODIFIABLE JO_OUT_MODIFIABLE2050,63760
#define JO_ERR_MODIFIABLE JO_ERR_MODIFIABLE2051,63819
#define JO_ALL	JO_ALL2052,63893
#define JO2_OUT_MSG	JO2_OUT_MSG2054,63925
#define JO2_ERR_MSG	JO2_ERR_MSG2055,63969
#define JO2_TERM_NAME	JO2_TERM_NAME2056,64028
#define JO2_TERM_FINISH	JO2_TERM_FINISH2057,64076
#define JO2_ENV	JO2_ENV2058,64128
#define JO2_CWD	JO2_CWD2059,64165
#define JO2_TERM_ROWS	JO2_TERM_ROWS2060,64202
#define JO2_TERM_COLS	JO2_TERM_COLS2061,64250
#define JO2_VERTICAL	JO2_VERTICAL2062,64298
#define JO2_CURWIN	JO2_CURWIN2063,64344
#define JO2_HIDDEN	JO2_HIDDEN2064,64386
#define JO2_TERM_OPENCMD JO2_TERM_OPENCMD2065,64428
#define JO2_EOF_CHARS	JO2_EOF_CHARS2066,64481
#define JO2_NORESTORE	JO2_NORESTORE2067,64529
#define JO2_TERM_KILL	JO2_TERM_KILL2068,64577
#define JO2_ANSI_COLORS	JO2_ANSI_COLORS2069,64625
#define JO2_TTY_TYPE	JO2_TTY_TYPE2070,64677
#define JO2_BUFNR	JO2_BUFNR2071,64724
#define JO2_TERM_API	JO2_TERM_API2072,64765
#define JO_MODE_ALL	JO_MODE_ALL2074,64813
#define JO_CB_ALL JO_CB_ALL2075,64884
#define JO_TIMEOUT_ALL	JO_TIMEOUT_ALL2077,64978
    int		jo_set;		// JO_ bits for values that were setjo_set2084,65114
    int		jo_set2;	// JO2_ bits for values that were setjo_set22085,65169
    ch_mode_T	jo_mode;jo_mode2087,65226
    ch_mode_T	jo_in_mode;jo_in_mode2088,65249
    ch_mode_T	jo_out_mode;jo_out_mode2089,65275
    ch_mode_T	jo_err_mode;jo_err_mode2090,65302
    int		jo_noblock;jo_noblock2091,65329
    job_io_T	jo_io[4];	// PART_OUT, PART_ERR, PART_INjo_io2093,65351
    char_u	jo_io_name_buf[4][NUMBUFLEN];jo_io_name_buf2094,65405
    char_u	*jo_io_name[4];	// not allocated!jo_io_name2095,65446
    int		jo_io_buf[4];jo_io_buf2096,65491
    int		jo_pty;jo_pty2097,65514
    int		jo_modifiable[4];jo_modifiable2098,65531
    int		jo_message[4];jo_message2099,65558
    channel_T	*jo_channel;jo_channel2100,65582
    linenr_T	jo_in_top;jo_in_top2102,65610
    linenr_T	jo_in_bot;jo_in_bot2103,65634
    callback_T	jo_callback;jo_callback2105,65659
    callback_T	jo_out_cb;jo_out_cb2106,65687
    callback_T	jo_err_cb;jo_err_cb2107,65713
    callback_T	jo_close_cb;jo_close_cb2108,65739
    callback_T	jo_exit_cb;jo_exit_cb2109,65767
    int		jo_drop_never;jo_drop_never2110,65794
    int		jo_waittime;jo_waittime2111,65818
    int		jo_timeout;jo_timeout2112,65840
    int		jo_out_timeout;jo_out_timeout2113,65861
    int		jo_err_timeout;jo_err_timeout2114,65886
    int		jo_block_write;	// for testing onlyjo_block_write2115,65911
    int		jo_part;jo_part2116,65956
    int		jo_id;jo_id2117,65974
    char_u	jo_stoponexit_buf[NUMBUFLEN];jo_stoponexit_buf2118,65990
    char_u	*jo_stoponexit;jo_stoponexit2119,66031
    dict_T	*jo_env;	// environment variablesjo_env2120,66058
    char_u	jo_cwd_buf[NUMBUFLEN];jo_cwd_buf2121,66103
    char_u	*jo_cwd;jo_cwd2122,66137
    int		jo_term_rows;jo_term_rows2126,66246
    int		jo_term_cols;jo_term_cols2127,66269
    int		jo_vertical;jo_vertical2128,66292
    int		jo_curwin;jo_curwin2129,66314
    buf_T	*jo_bufnr_buf;jo_bufnr_buf2130,66334
    int		jo_hidden;jo_hidden2131,66359
    int		jo_term_norestore;jo_term_norestore2132,66379
    char_u	jo_term_name_buf[NUMBUFLEN];jo_term_name_buf2133,66407
    char_u	*jo_term_name;jo_term_name2134,66447
    char_u	jo_term_opencmd_buf[NUMBUFLEN];jo_term_opencmd_buf2135,66473
    char_u	*jo_term_opencmd;jo_term_opencmd2136,66516
    int		jo_term_finish;jo_term_finish2137,66545
    char_u	jo_eof_chars_buf[NUMBUFLEN];jo_eof_chars_buf2138,66570
    char_u	*jo_eof_chars;jo_eof_chars2139,66610
    char_u	jo_term_kill_buf[NUMBUFLEN];jo_term_kill_buf2140,66636
    char_u	*jo_term_kill;jo_term_kill2141,66676
    long_u	jo_ansi_colors[16];jo_ansi_colors2143,66756
    int		jo_tty_type;	    // first character of "tty_type"jo_tty_type2145,66795
    char_u	jo_term_api_buf[NUMBUFLEN];jo_term_api_buf2146,66854
    char_u	*jo_term_api;jo_term_api2147,66893
} jobopt_T;jobopt_T2149,66925
typedef struct listener_S listener_T;listener_T2155,67021
struct listener_Slistener_S2156,67059
    listener_T	*lr_next;lr_next2158,67079
    int		lr_id;lr_id2159,67104
    callback_T	lr_callback;lr_callback2160,67120
typedef struct ht_stack_Sht_stack_S2167,67240
    hashtab_T		*ht;ht2169,67268
    struct ht_stack_S	*prev;prev2170,67288
} ht_stack_T;ht_stack_T2171,67317
typedef struct list_stack_Slist_stack_S2176,67407
    list_T		*list;list2178,67437
    struct list_stack_S	*prev;prev2179,67456
} list_stack_T;list_stack_T2180,67487
    long_u	dit_todo;dit_todo2188,67624
    hashitem_T	*dit_hi;dit_hi2189,67645
} dict_iterator_T;dict_iterator_T2190,67669
#define SYNSPL_DEFAULT	SYNSPL_DEFAULT2193,67746
#define SYNSPL_TOP	SYNSPL_TOP2194,67808
#define SYNSPL_NOTOP	SYNSPL_NOTOP2195,67858
# define B_SPELL(B_SPELL2199,67986
# define B_SPELL(B_SPELL2201,68032
typedef struct qf_info_S qf_info_T;qf_info_T2204,68067
    proftime_T	total;		// total time usedtotal2211,68208
    proftime_T	slowest;	// time of slowest callslowest2212,68250
    long	count;		// nr of times usedcount2213,68298
    long	match;		// nr of times matchedmatch2214,68335
} syn_time_T;syn_time_T2215,68375
typedef struct timer_S timer_T;timer_T2218,68397
struct timer_Stimer_S2219,68429
    long	tr_id;tr_id2221,68446
    timer_T	*tr_next;tr_next2223,68481
    timer_T	*tr_prev;tr_prev2224,68503
    proftime_T	tr_due;		    // when the callback is to be invokedtr_due2225,68525
    char	tr_firing;	    // when TRUE callback is being calledtr_firing2226,68591
    char	tr_paused;	    // when TRUE callback is not invokedtr_paused2227,68653
    int		tr_repeat;	    // number of times to repeat, -1 forevertr_repeat2228,68714
    long	tr_interval;	    // msectr_interval2229,68779
    callback_T	tr_callback;tr_callback2230,68813
    int		tr_emsg_count;tr_emsg_count2231,68841
    int	    method_nr;method_nr2241,69008
    void    *method_state;  // method-specific state informationmethod_state2242,69031
} cryptstate_T;cryptstate_T2243,69096
# define CRYPT_M_ZIP	CRYPT_M_ZIP2246,69137
# define CRYPT_M_BF	CRYPT_M_BF2247,69160
# define CRYPT_M_BF2	CRYPT_M_BF22248,69182
# define CRYPT_M_COUNT	CRYPT_M_COUNT2249,69205
    POPPOS_BOTLEFT,POPPOS_BOTLEFT2258,69431
    POPPOS_TOPLEFT,POPPOS_TOPLEFT2259,69451
    POPPOS_BOTRIGHT,POPPOS_BOTRIGHT2260,69471
    POPPOS_TOPRIGHT,POPPOS_TOPRIGHT2261,69492
    POPPOS_CENTER,POPPOS_CENTER2262,69513
    POPPOS_NONEPOPPOS_NONE2263,69532
} poppos_T;poppos_T2264,69548
    POPCLOSE_NONE,POPCLOSE_NONE2267,69576
    POPCLOSE_BUTTON,POPCLOSE_BUTTON2268,69595
    POPCLOSE_CLICKPOPCLOSE_CLICK2269,69616
} popclose_T;popclose_T2270,69635
# define POPUPWIN_DEFAULT_ZINDEX	POPUPWIN_DEFAULT_ZINDEX2272,69650
# define POPUPMENU_ZINDEX	POPUPMENU_ZINDEX2273,69687
# define POPUPWIN_DIALOG_ZINDEX	POPUPWIN_DIALOG_ZINDEX2274,69718
# define POPUPWIN_NOTIFICATION_ZINDEX POPUPWIN_NOTIFICATION_ZINDEX2275,69755
    hashtab_T	b_keywtab;		// syntax keywords hash tableb_keywtab2284,69967
    hashtab_T	b_keywtab_ic;		// idem, ignore caseb_keywtab_ic2285,70023
    int		b_syn_error;		// TRUE when error occurred in HLb_syn_error2286,70073
    int		b_syn_slow;		// TRUE when 'redrawtime' reachedb_syn_slow2288,70151
    int		b_syn_ic;		// ignore case for :syn cmdsb_syn_ic2290,70215
    int		b_syn_spell;		// SYNSPL_ valuesb_syn_spell2291,70264
    garray_T	b_syn_patterns;		// table for syntax patternsb_syn_patterns2292,70305
    garray_T	b_syn_clusters;		// table for syntax clustersb_syn_clusters2293,70364
    int		b_spell_cluster_id;	// @Spell cluster ID or 0b_spell_cluster_id2294,70423
    int		b_nospell_cluster_id;	// @NoSpell cluster ID or 0b_nospell_cluster_id2295,70478
    int		b_syn_containedin;	// TRUE when there is an item with ab_syn_containedin2296,70537
    int		b_syn_sync_flags;	// flags about how to syncb_syn_sync_flags2298,70633
    short	b_syn_sync_id;		// group to sync onb_syn_sync_id2299,70687
    long	b_syn_sync_minlines;	// minimal sync lines offsetb_syn_sync_minlines2300,70733
    long	b_syn_sync_maxlines;	// maximal sync lines offsetb_syn_sync_maxlines2301,70792
    long	b_syn_sync_linebreaks;	// offset for multi-line patternb_syn_sync_linebreaks2302,70851
    char_u	*b_syn_linecont_pat;	// line continuation patternb_syn_linecont_pat2303,70916
    regprog_T	*b_syn_linecont_prog;	// line continuation programb_syn_linecont_prog2304,70977
    syn_time_T  b_syn_linecont_time;b_syn_linecont_time2306,71062
    int		b_syn_linecont_ic;	// ignore-case flag for aboveb_syn_linecont_ic2308,71106
    int		b_syn_topgrp;		// for ":syntax include"b_syn_topgrp2309,71164
    int		b_syn_conceal;		// auto-conceal for :syn cmdsb_syn_conceal2311,71234
    int		b_syn_folditems;	// number of patterns with the HL_FOLDb_syn_folditems2314,71318
    synstate_T	*b_sst_array;b_sst_array2331,72173
    int		b_sst_len;b_sst_len2332,72202
    synstate_T	*b_sst_first;b_sst_first2333,72222
    synstate_T	*b_sst_firstfree;b_sst_firstfree2334,72251
    int		b_sst_freecount;b_sst_freecount2335,72284
    linenr_T	b_sst_check_lnum;b_sst_check_lnum2336,72310
    short_u	b_sst_lasttick;	// last display tickb_sst_lasttick2337,72341
    garray_T	b_langp;	    // list of pointers to slang_T, see spell.cb_langp2342,72457
    char_u	b_spell_ismw[256];  // flags: is midword charb_spell_ismw2343,72527
    char_u	*b_spell_ismw_mb;   // multi-byte midword charsb_spell_ismw_mb2344,72584
    char_u	*b_p_spc;	    // 'spellcapcheck'b_p_spc2345,72643
    regprog_T	*b_cap_prog;	    // program for 'spellcapcheck'b_cap_prog2346,72687
    char_u	*b_p_spf;	    // 'spellfile'b_p_spf2347,72749
    char_u	*b_p_spl;	    // 'spelllang'b_p_spl2348,72789
    int		b_cjk;		    // all CJK letters as OKb_cjk2349,72829
    int		dummy;dummy2352,72932
    char_u	b_syn_chartab[32];  // syntax iskeyword optionb_syn_chartab2354,72955
    char_u	*b_syn_isk;	    // iskeyword optionb_syn_isk2355,73013
} synblock_T;synblock_T2356,73060
struct file_bufferfile_buffer2367,73318
    memline_T	b_ml;		// associated memline (also contains lineb_ml2369,73339
    buf_T	*b_next;	// links in list of buffersb_next2372,73417
    buf_T	*b_prev;b_prev2373,73464
    int		b_nwindows;	// nr of windows open on this bufferb_nwindows2375,73484
    int		b_flags;	// various BF_ flagsb_flags2377,73543
    int		b_locked;	// Buffer is being closed or referenced, don'tb_locked2378,73582
    char_u	*b_ffname;	// full path file name, allocatedb_ffname2387,73955
    char_u	*b_sfname;	// short file name, allocated, may be equal tob_sfname2388,74011
    char_u	*b_fname;	// current file name, points to b_ffname orb_fname2390,74096
    int		b_dev_valid;	// TRUE when b_dev has a valid numberb_dev_valid2394,74190
    dev_t	b_dev;		// device numberb_dev2395,74250
    ino_t	b_ino;		// inode numberb_ino2396,74285
    FSSpec	b_FSSpec;	// MacOS File Identificationb_FSSpec2399,74348
    char	 b_fab_rfm;	// Record formatb_fab_rfm2402,74416
    char	 b_fab_rat;	// Record attributeb_fab_rat2403,74454
    unsigned int b_fab_mrs;	// Max record sizeb_fab_mrs2404,74495
    int		b_fnum;		// buffer number for this file.b_fnum2406,74549
    char_u	b_key[VIM_SIZEOF_INT * 2 + 1];b_key2407,74599
    int		b_changed;	// 'modified': Set to TRUE if something in theb_changed2411,74709
    dictitem16_T b_ct_di;	// holds the b:changedtick value inb_ct_di2413,74826
#define CHANGEDTICK(CHANGEDTICK2416,74974
    varnumber_T	b_last_changedtick; // b:changedtick when TextChanged orb_last_changedtick2418,75037
    varnumber_T	b_last_changedtick_pum; // b:changedtick when TextChangedP wasb_last_changedtick_pum2420,75154
    int		b_saving;	// Set to TRUE if we are in the middle ofb_saving2423,75258
    int		b_mod_set;	// TRUE when there are changes since the lastb_mod_set2430,75504
    linenr_T	b_mod_top;	// topmost lnum that was changedb_mod_top2432,75606
    linenr_T	b_mod_bot;	// lnum below last changed line, AFTER theb_mod_bot2433,75663
    long	b_mod_xlines;	// number of extra buffer lines inserted;b_mod_xlines2435,75744
    wininfo_T	*b_wininfo;	// list of last used info for each windowb_wininfo2438,75850
    long	b_mtime;	// last change time of original fileb_mtime2440,75919
    long	b_mtime_read;	// last change time when readingb_mtime_read2441,75974
    off_T	b_orig_size;	// size of original file in bytesb_orig_size2442,76030
    int		b_orig_mode;	// mode of original fileb_orig_mode2443,76087
    time_T	b_last_used;	// time when the buffer was last used; usedb_last_used2445,76154
    pos_T	b_namedm[NMARKS]; // current named marks (mark.c)b_namedm2449,76249
    visualinfo_T b_visual;b_visual2452,76374
    int		b_visual_mode_eval;  // b_visual.vi_mode for visualmode()b_visual_mode_eval2454,76418
    pos_T	b_last_cursor;	// cursor position when last unloading thisb_last_cursor2457,76493
    pos_T	b_last_insert;	// where Insert mode was leftb_last_insert2459,76576
    pos_T	b_last_change;	// position of last change: '. markb_last_change2460,76631
    pos_T	b_changelist[JUMPLISTSIZE];b_changelist2466,76781
    int		b_changelistlen;	// number of active entriesb_changelistlen2467,76819
    int		b_new_change;		// set by u_savecommon()b_new_change2468,76873
    char_u	b_chartab[32];b_chartab2475,77062
    mapblock_T	*(b_maphash[256]);b_maphash2478,77139
    mapblock_T	*b_first_abbr;b_first_abbr2481,77219
    garray_T	b_ucmds;b_ucmds2484,77292
    pos_T	b_op_start;b_op_start2486,77375
    pos_T	b_op_start_orig;  // used for Insstart_origb_op_start_orig2487,77397
    pos_T	b_op_end;b_op_end2488,77451
    int		b_marks_read;	// Have we read viminfo marks yet?b_marks_read2491,77492
    u_header_T	*b_u_oldhead;	// pointer to oldest headerb_u_oldhead2497,77615
    u_header_T	*b_u_newhead;	// pointer to newest header; may not be validb_u_newhead2498,77672
    u_header_T	*b_u_curhead;	// pointer to current headerb_u_curhead2500,77781
    int		b_u_numhead;	// current number of headersb_u_numhead2501,77839
    int		b_u_synced;	// entry lists are syncedb_u_synced2502,77890
    long	b_u_seq_last;	// last used undo sequence numberb_u_seq_last2503,77937
    long	b_u_save_nr_last; // counter for last file writeb_u_save_nr_last2504,77994
    long	b_u_seq_cur;	// hu_seq of header below which we are nowb_u_seq_cur2505,78052
    time_T	b_u_time_cur;	// uh_time of header below which we are nowb_u_time_cur2506,78117
    long	b_u_save_nr_cur; // file write nr after which we are nowb_u_save_nr_cur2507,78186
    undoline_T	b_u_line_ptr;	// saved line for "U" commandb_u_line_ptr2512,78311
    linenr_T	b_u_line_lnum;	// line number of line in u_lineb_u_line_lnum2513,78370
    colnr_T	b_u_line_colnr;	// optional column numberb_u_line_colnr2514,78431
    int		b_scanned;	// ^N/^P have scanned this bufferb_scanned2516,78486
    long	b_p_iminsert;	// input mode for insertb_p_iminsert2519,78588
    long	b_p_imsearch;	// input mode for searchb_p_imsearch2520,78636
#define B_IMODE_USE_INSERT B_IMODE_USE_INSERT2521,78684
#define B_IMODE_NONE B_IMODE_NONE2522,78751
#define B_IMODE_LMAP B_IMODE_LMAP2523,78793
#define B_IMODE_IM B_IMODE_IM2524,78838
#define B_IMODE_LAST B_IMODE_LAST2525,78886
    short	b_kmap_state;	// using "lmap" mappingsb_kmap_state2528,78929
# define KEYMAP_INIT	KEYMAP_INIT2529,78978
# define KEYMAP_LOADED	KEYMAP_LOADED2530,79041
    garray_T	b_kmap_ga;	// the keymap tableb_kmap_ga2531,79104
    int		b_p_initialized;	// set when options initializedb_p_initialized2539,79319
    sctx_T	b_p_script_ctx[BV_COUNT]; // SCTXs for buffer-local optionsb_p_script_ctx2542,79395
    int		b_p_ai;		// 'autoindent'b_p_ai2545,79474
    int		b_p_ai_nopaste;	// b_p_ai saved for paste modeb_p_ai_nopaste2546,79508
    char_u	*b_p_bkc;	// 'backupcopy'b_p_bkc2547,79564
    unsigned	b_bkc_flags;    // flags for 'backupcopy'b_bkc_flags2548,79601
    int		b_p_ci;		// 'copyindent'b_p_ci2549,79656
    int		b_p_bin;	// 'binary'b_p_bin2550,79690
    int		b_p_bomb;	// 'bomb'b_p_bomb2551,79720
    char_u	*b_p_bh;	// 'bufhidden'b_p_bh2552,79749
    char_u	*b_p_bt;	// 'buftype'b_p_bt2553,79784
#define BUF_HAS_QF_ENTRY BUF_HAS_QF_ENTRY2555,79838
#define BUF_HAS_LL_ENTRY BUF_HAS_LL_ENTRY2556,79865
    int		b_has_qf_entry;b_has_qf_entry2557,79892
    int		b_p_bl;		// 'buflisted'b_p_bl2559,79924
    int		b_p_cin;	// 'cindent'b_p_cin2561,79977
    char_u	*b_p_cino;	// 'cinoptions'b_p_cino2562,80008
    char_u	*b_p_cink;	// 'cinkeys'b_p_cink2563,80046
    char_u	*b_p_cinw;	// 'cinwords'b_p_cinw2566,80143
    char_u	*b_p_com;	// 'comments'b_p_com2568,80186
    char_u	*b_p_cms;	// 'commentstring'b_p_cms2570,80241
    char_u	*b_p_cpt;	// 'complete'b_p_cpt2572,80288
    char_u	*b_p_csl;	// 'completeslash'b_p_csl2574,80352
    char_u	*b_p_cfu;	// 'completefunc'b_p_cfu2577,80422
    char_u	*b_p_ofu;	// 'omnifunc'b_p_ofu2578,80461
    char_u	*b_p_tfu;	// 'tagfunc'b_p_tfu2581,80520
    int		b_p_eol;	// 'endofline'b_p_eol2583,80561
    int		b_p_fixeol;	// 'fixendofline'b_p_fixeol2584,80594
    int		b_p_et;		// 'expandtab'b_p_et2585,80633
    int		b_p_et_nobin;	// b_p_et saved for binary modeb_p_et_nobin2586,80666
    int		b_p_et_nopaste; // b_p_et saved for paste modeb_p_et_nopaste2587,80721
    char_u	*b_p_fenc;	// 'fileencoding'b_p_fenc2588,80777
    char_u	*b_p_ff;	// 'fileformat'b_p_ff2589,80817
    char_u	*b_p_ft;	// 'filetype'b_p_ft2590,80853
    char_u	*b_p_fo;	// 'formatoptions'b_p_fo2591,80887
    char_u	*b_p_flp;	// 'formatlistpat'b_p_flp2592,80926
    int		b_p_inf;	// 'infercase'b_p_inf2593,80966
    char_u	*b_p_isk;	// 'iskeyword'b_p_isk2594,80999
    char_u	*b_p_def;	// 'define' local valueb_p_def2596,81055
    char_u	*b_p_inc;	// 'include'b_p_inc2597,81100
    char_u	*b_p_inex;	// 'includeexpr'b_p_inex2599,81152
    long_u	b_p_inex_flags;	// flags for 'includeexpr'b_p_inex_flags2600,81191
    char_u	*b_p_inde;	// 'indentexpr'b_p_inde2604,81308
    long_u	b_p_inde_flags;	// flags for 'indentexpr'b_p_inde_flags2605,81346
    char_u	*b_p_indk;	// 'indentkeys'b_p_indk2606,81399
    char_u	*b_p_fp;	// 'formatprg'b_p_fp2608,81444
    char_u	*b_p_fex;	// 'formatexpr'b_p_fex2610,81502
    long_u	b_p_fex_flags;	// flags for 'formatexpr'b_p_fex_flags2611,81539
    char_u	*b_p_key;	// 'key'b_p_key2614,81616
    char_u	*b_p_kp;	// 'keywordprg'b_p_kp2616,81653
    int		b_p_lisp;	// 'lisp'b_p_lisp2618,81706
    char_u	*b_p_menc;	// 'makeencoding'b_p_menc2620,81742
    char_u	*b_p_mps;	// 'matchpairs'b_p_mps2621,81782
    int		b_p_ml;		// 'modeline'b_p_ml2622,81819
    int		b_p_ml_nobin;	// b_p_ml saved for binary modeb_p_ml_nobin2623,81851
    int		b_p_ma;		// 'modifiable'b_p_ma2624,81906
    char_u	*b_p_nf;	// 'nrformats'b_p_nf2625,81940
    int		b_p_pi;		// 'preserveindent'b_p_pi2626,81975
    char_u	*b_p_qe;	// 'quoteescape'b_p_qe2628,82033
    int		b_p_ro;		// 'readonly'b_p_ro2630,82077
    long	b_p_sw;		// 'shiftwidth'b_p_sw2631,82109
    int		b_p_sn;		// 'shortname'b_p_sn2632,82143
    int		b_p_si;		// 'smartindent'b_p_si2634,82200
    long	b_p_sts;	// 'softtabstop'b_p_sts2636,82242
    long	b_p_sts_nopaste; // b_p_sts saved for paste modeb_p_sts_nopaste2637,82277
    char_u	*b_p_sua;	// 'suffixesadd'b_p_sua2639,82358
    int		b_p_swf;	// 'swapfile'b_p_swf2641,82403
    long	b_p_smc;	// 'synmaxcol'b_p_smc2643,82454
    char_u	*b_p_syn;	// 'syntax'b_p_syn2644,82487
    long	b_p_ts;		// 'tabstop'b_p_ts2646,82527
    int		b_p_tx;		// 'textmode'b_p_tx2647,82558
    long	b_p_tw;		// 'textwidth'b_p_tw2648,82590
    long	b_p_tw_nobin;	// b_p_tw saved for binary modeb_p_tw_nobin2649,82623
    long	b_p_tw_nopaste;	// b_p_tw saved for paste modeb_p_tw_nopaste2650,82678
    long	b_p_wm;		// 'wrapmargin'b_p_wm2651,82734
    long	b_p_wm_nobin;	// b_p_wm saved for binary modeb_p_wm_nobin2652,82768
    long	b_p_wm_nopaste;	// b_p_wm saved for paste modeb_p_wm_nopaste2653,82823
    char_u	*b_p_vsts;	// 'varsofttabstop'b_p_vsts2655,82899
    int		*b_p_vsts_array;   // 'varsofttabstop' in internal formatb_p_vsts_array2656,82941
    char_u	*b_p_vsts_nopaste; // b_p_vsts saved for paste modeb_p_vsts_nopaste2657,83008
    char_u	*b_p_vts;	// 'vartabstop'b_p_vts2658,83071
    int		*b_p_vts_array;	// 'vartabstop' in internal formatb_p_vts_array2659,83108
    char_u	*b_p_keymap;	// 'keymap'b_p_keymap2662,83194
    char_u	*b_p_gp;	// 'grepprg' local valueb_p_gp2669,83332
    char_u	*b_p_mp;	// 'makeprg' local valueb_p_mp2670,83377
    char_u	*b_p_efm;	// 'errorformat' local valueb_p_efm2671,83422
    char_u	*b_p_ep;	// 'equalprg' local valueb_p_ep2673,83479
    char_u	*b_p_path;	// 'path' local valueb_p_path2674,83525
    int		b_p_ar;		// 'autoread' local valueb_p_ar2675,83569
    char_u	*b_p_tags;	// 'tags' local valueb_p_tags2676,83613
    char_u	*b_p_tc;	// 'tagcase' local valueb_p_tc2677,83657
    unsigned	b_tc_flags;     // flags for 'tagcase'b_tc_flags2678,83702
    char_u	*b_p_dict;	// 'dictionary' local valueb_p_dict2679,83754
    char_u	*b_p_tsr;	// 'thesaurus' local valueb_p_tsr2680,83804
    long	b_p_ul;		// 'undolevels' local valueb_p_ul2681,83852
    int		b_p_udf;	// 'undofile'b_p_udf2683,83926
    char_u	*b_p_lw;	// 'lispwords' local valueb_p_lw2686,83982
    long	b_p_twsl;	// 'termwinscroll'b_p_twsl2689,84057
    int		b_ind_level;b_ind_level2698,84200
    int		b_ind_open_imag;b_ind_open_imag2699,84222
    int		b_ind_no_brace;b_ind_no_brace2700,84248
    int		b_ind_first_open;b_ind_first_open2701,84273
    int		b_ind_open_extra;b_ind_open_extra2702,84300
    int		b_ind_close_extra;b_ind_close_extra2703,84327
    int		b_ind_open_left_imag;b_ind_open_left_imag2704,84355
    int		b_ind_jump_label;b_ind_jump_label2705,84386
    int		b_ind_case;b_ind_case2706,84413
    int		b_ind_case_code;b_ind_case_code2707,84434
    int		b_ind_case_break;b_ind_case_break2708,84460
    int		b_ind_param;b_ind_param2709,84487
    int		b_ind_func_type;b_ind_func_type2710,84509
    int		b_ind_comment;b_ind_comment2711,84535
    int		b_ind_in_comment;b_ind_in_comment2712,84559
    int		b_ind_in_comment2;b_ind_in_comment22713,84586
    int		b_ind_cpp_baseclass;b_ind_cpp_baseclass2714,84614
    int		b_ind_continuation;b_ind_continuation2715,84644
    int		b_ind_unclosed;b_ind_unclosed2716,84673
    int		b_ind_unclosed2;b_ind_unclosed22717,84698
    int		b_ind_unclosed_noignore;b_ind_unclosed_noignore2718,84724
    int		b_ind_unclosed_wrapped;b_ind_unclosed_wrapped2719,84758
    int		b_ind_unclosed_whiteok;b_ind_unclosed_whiteok2720,84791
    int		b_ind_matching_paren;b_ind_matching_paren2721,84824
    int		b_ind_paren_prev;b_ind_paren_prev2722,84855
    int		b_ind_maxparen;b_ind_maxparen2723,84882
    int		b_ind_maxcomment;b_ind_maxcomment2724,84907
    int		b_ind_scopedecl;b_ind_scopedecl2725,84934
    int		b_ind_scopedecl_code;b_ind_scopedecl_code2726,84960
    int		b_ind_java;b_ind_java2727,84991
    int		b_ind_js;b_ind_js2728,85012
    int		b_ind_keep_case_label;b_ind_keep_case_label2729,85031
    int		b_ind_hash_comment;b_ind_hash_comment2730,85063
    int		b_ind_cpp_namespace;b_ind_cpp_namespace2731,85092
    int		b_ind_if_for_while;b_ind_if_for_while2732,85122
    int		b_ind_cpp_extern_c;b_ind_cpp_extern_c2733,85151
    linenr_T	b_no_eol_lnum;	// non-zero lnum when last line of next binaryb_no_eol_lnum2736,85188
    int		b_start_eol;	// last line had eol when it was readb_start_eol2739,85308
    int		b_start_ffc;	// first char of 'ff' when edit startedb_start_ffc2740,85368
    char_u	*b_start_fenc;	// 'fileencoding' when edit started or NULLb_start_fenc2741,85430
    int		b_bad_char;	// "++bad=" argument when edit started or 0b_bad_char2742,85500
    int		b_start_bomb;	// 'bomb' when it was readb_start_bomb2743,85565
    dictitem_T	b_bufvar;	// variable for "b:" Dictionaryb_bufvar2746,85633
    dict_T	*b_vars;	// internal variables, local to bufferb_vars2747,85690
    listener_T	*b_listener;b_listener2749,85750
    list_T	*b_recorded_changes;b_recorded_changes2750,85778
    int		b_has_textprop;	// TRUE when text props were addedb_has_textprop2753,85840
    hashtab_T	*b_proptypes;	// text property types local to bufferb_proptypes2754,85900
    char_u	*b_p_bexpr;	// 'balloonexpr' local valueb_p_bexpr2758,86021
    long_u	b_p_bexpr_flags;// flags for 'balloonexpr'b_p_bexpr_flags2759,86073
    char_u	*b_p_cm;	// 'cryptmethod'b_p_cm2762,86152
    int		b_may_swap;b_may_swap2768,86398
    int		b_did_warn;	// Set to 1 if user has been warned on firstb_did_warn2769,86419
    int		b_help;		// TRUE for help file buffer (when set b_p_btb_help2776,86726
    int		b_spell;	// TRUE for a spell file buffer, most fieldsb_spell2779,86826
    int		b_shortname;	// this file has an 8.3 file nameb_shortname2784,86982
    char_u	*b_prompt_text;		// set by prompt_setprompt()b_prompt_text2787,87063
    callback_T	b_prompt_callback;	// set by prompt_setcallback()b_prompt_callback2788,87120
    callback_T	b_prompt_interrupt;	// set by prompt_setinterrupt()b_prompt_interrupt2789,87185
    int		b_prompt_insert;	// value for restart_edit when enteringb_prompt_insert2790,87252
    void	*b_mzscheme_ref; // The MzScheme reference to this bufferb_mzscheme_ref2794,87378
    void	*b_perl_private;b_perl_private2798,87470
    void	*b_python_ref;	// The Python reference to this bufferb_python_ref2802,87523
    void	*b_python3_ref;	// The Python3 reference to this bufferb_python3_ref2806,87614
    void	*b_tcl_ref;b_tcl_ref2810,87703
    void	*b_ruby_ref;b_ruby_ref2814,87749
    synblock_T	b_s;		// Info related to syntax highlighting.  w_sb_s2818,87827
    sign_entry_T *b_signlist;	   // list of placed signsb_signlist2824,88007
    int		b_has_sign_column; // Flag that is set when a first sign isb_has_sign_column2826,88091
    int		b_netbeans_file;    // TRUE when buffer is owned by NetBeansb_netbeans_file2833,88283
    int		b_was_netbeans_file;// TRUE if b_netbeans_file was once setb_was_netbeans_file2834,88353
    int		b_write_to_channel; // TRUE when appended lines are written tob_write_to_channel2837,88453
    cryptstate_T *b_cryptstate;	// Encryption state while reading or writingb_cryptstate2842,88573
    int		b_mapped_ctrl_c; // modes where CTRL-C is mappedb_mapped_ctrl_c2845,88706
    term_T	*b_term;	// When not NULL this buffer is for a terminalb_term2848,88786
    int		b_diff_failed;	// internal diff failed for this bufferb_diff_failed2852,88892
# define DB_COUNT DB_COUNT2861,89031
typedef struct diffblock_S diff_T;diff_T2877,89889
struct diffblock_Sdiffblock_S2878,89924
    diff_T	*df_next;df_next2880,89945
    linenr_T	df_lnum[DB_COUNT];	// line number in bufferdf_lnum2881,89966
    linenr_T	df_count[DB_COUNT];	// nr of inserted/changed linesdf_count2882,90023
#define SNAP_HELP_IDX	SNAP_HELP_IDX2886,90099
#define SNAP_AUCMD_IDX SNAP_AUCMD_IDX2887,90123
#define SNAP_COUNT	SNAP_COUNT2888,90148
typedef struct tabpage_S tabpage_T;tabpage_T2896,90440
struct tabpage_Stabpage_S2897,90476
    tabpage_T	    *tp_next;	    // next tabpage or NULLtp_next2899,90495
    frame_T	    *tp_topframe;   // topframe for the windowstp_topframe2900,90551
    win_T	    *tp_curwin;	    // current window in this Tab pagetp_curwin2901,90611
    win_T	    *tp_prevwin;    // previous window in this Tab pagetp_prevwin2902,90676
    win_T	    *tp_firstwin;   // first window in this Tab pagetp_firstwin2903,90742
    win_T	    *tp_lastwin;    // last window in this Tab pagetp_lastwin2904,90805
    win_T	    *tp_first_popupwin; // first popup window in this Tab pagetp_first_popupwin2906,90890
    long	    tp_old_Rows;    // Rows when Tab page was lefttp_old_Rows2908,90970
    long	    tp_old_Columns; // Columns when Tab page was lefttp_old_Columns2909,91030
    long	    tp_ch_used;	    // value of 'cmdheight' when frame sizetp_ch_used2910,91093
    int		    tp_prev_which_scrollbars[3];tp_prev_which_scrollbars2913,91197
    char_u	    *tp_localdir;	// absolute path of local directory ortp_localdir2917,91293
    diff_T	    *tp_first_diff;tp_first_diff2920,91391
    buf_T	    *(tp_diffbuf[DB_COUNT]);tp_diffbuf2921,91422
    int		    tp_diff_invalid;	// list of diffs is outdatedtp_diff_invalid2922,91461
    int		    tp_diff_update;	// update diffs before redrawingtp_diff_update2923,91520
    frame_T	    *(tp_snapshot[SNAP_COUNT]);  // window layout snapshotstp_snapshot2925,91589
    dictitem_T	    tp_winvar;	    // variable for "t:" Dictionarytp_winvar2927,91678
    dict_T	    *tp_vars;	    // internal variables, local to tab pagetp_vars2928,91744
    void	    *tp_python_ref;	// The Python value for this tab pagetp_python_ref2932,91841
    void	    *tp_python3_ref;	// The Python value for this tab pagetp_python3_ref2936,91936
typedef struct w_linew_line2952,92637
    linenr_T	wl_lnum;	// buffer line number for logical linewl_lnum2954,92661
    short_u	wl_size;	// height in screen lineswl_size2955,92722
    char	wl_valid;	// TRUE values are valid for text in bufferwl_valid2956,92769
    char	wl_folded;	// TRUE when this is a range of folded lineswl_folded2958,92852
    linenr_T	wl_lastlnum;	// last buffer line number for logical linewl_lastlnum2959,92917
} wline_T;wline_T2961,92994
struct frame_Sframe_S2967,93148
    char	fr_layout;	// FR_LEAF, FR_COL or FR_ROWfr_layout2969,93165
    int		fr_width;fr_width2970,93214
    int		fr_newwidth;	// new width used in win_equal_rec()fr_newwidth2971,93233
    int		fr_height;fr_height2972,93292
    int		fr_newheight;	// new height used in win_equal_rec()fr_newheight2973,93312
    frame_T	*fr_parent;	// containing frame or NULLfr_parent2974,93373
    frame_T	*fr_next;	// frame right or below in same parent, NULLfr_next2975,93425
    frame_T	*fr_prev;	// frame left or above in same parent, NULLfr_prev2977,93508
    frame_T	*fr_child;	// first contained framefr_child2980,93641
    win_T	*fr_win;	// window that fills this framefr_win2981,93689
#define FR_LEAF	FR_LEAF2984,93744
#define FR_ROW	FR_ROW2985,93781
#define FR_COL	FR_COL2986,93829
    regmmatch_T	rm;	    // points to the regexp program; contains lastrm2996,94171
    buf_T	*buf;	    // the buffer to search for a matchbuf2998,94292
    linenr_T	lnum;	    // the line to search for a matchlnum2999,94348
    int		attr;	    // attributes to be used for a matchattr3000,94405
    int		attr_cur;   // attributes currently active in win_line()attr_cur3001,94461
    linenr_T	first_lnum; // first lnum to search for multi-line patfirst_lnum3002,94527
    colnr_T	startcol;   // in win_line() points to char where HL startsstartcol3003,94595
    colnr_T	endcol;	    // in win_line() points to char where HL endsendcol3004,94667
    int		is_addpos;  // position specified directly byis_addpos3005,94737
    proftime_T	tm;	    // for a time limittm3008,94848
} match_T;match_T3010,94898
#define MAXPOSMATCH MAXPOSMATCH3013,94960
    linenr_T	lnum;	// line numberlnum3020,95057
    colnr_T	col;	// column numbercol3021,95091
    int		len;	// length: 0 - to the end of linelen3022,95125
} llpos_T;llpos_T3023,95173
typedef struct posmatch posmatch_T;posmatch_T3029,95279
struct posmatchposmatch3030,95315
    llpos_T	pos[MAXPOSMATCH];	// array of positionspos3032,95333
    int		cur;			// internal position countercur3033,95385
    linenr_T	toplnum;		// top buffer linetoplnum3034,95430
    linenr_T	botlnum;		// bottom buffer linebotlnum3035,95472
typedef struct matchitem matchitem_T;matchitem_T3042,95631
struct matchitemmatchitem3043,95669
    matchitem_T	*next;next3045,95688
    int		id;	    // match IDid3046,95711
    int		priority;   // match prioritypriority3047,95740
    char_u	*pattern;   // pattern to highlightpattern3048,95779
    regmmatch_T	match;	    // regexp program for patternmatch3049,95826
    posmatch_T	pos;	    // position matchespos3050,95883
    match_T	hl;	    // struct for doing the actual highlightinghl3051,95927
    int		hlg_id;	    // highlight group IDhlg_id3052,95991
    int		conceal_char; // cchar for Conceal highlightingconceal_char3054,96054
    int		w_topline_save;	// original topline valuew_topline_save3062,96240
    int		w_topline_corr;	// corrected topline valuew_topline_corr3063,96291
    pos_T	w_cursor_save;	// original cursor positionw_cursor_save3064,96343
    pos_T	w_cursor_corr;	// corrected cursor positionw_cursor_corr3065,96396
} pos_save_T;pos_save_T3066,96450
    int		wb_startcol;wb_startcol3070,96499
    int		wb_endcol;wb_endcol3071,96521
    vimmenu_T	*wb_menu;wb_menu3072,96541
} winbar_item_T;winbar_item_T3073,96565
struct window_Swindow_S3081,96746
    int		w_id;		    // unique window IDw_id3083,96764
    buf_T	*w_buffer;	    // buffer we are a window intow_buffer3085,96805
    win_T	*w_prev;	    // link to previous windoww_prev3087,96862
    win_T	*w_next;	    // link to next windoww_next3088,96912
    synblock_T	*w_s;		    // for :ownsyntaxw_s3091,97007
    int		w_closing;	    // window is being closed, don't letw_closing3094,97059
    frame_T	*w_frame;	    // frame containing this windoww_frame3097,97159
    pos_T	w_cursor;	    // cursor position in bufferw_cursor3099,97218
    colnr_T	w_curswant;	    // The column we'd like to be at.  This isw_curswant3101,97272
    int		w_set_curswant;	    // If set, then update w_curswant the nextw_set_curswant3105,97433
    linenr_T	w_last_cursorline;  // where last time 'cursorline' was drawnw_last_cursorline3110,97603
    char	w_old_visual_mode;  // last known VIsual_modew_old_visual_mode3116,97766
    linenr_T	w_old_cursor_lnum;  // last known end of visual partw_old_cursor_lnum3117,97821
    colnr_T	w_old_cursor_fcol;  // first column for block visual partw_old_cursor_fcol3118,97887
    colnr_T	w_old_cursor_lcol;  // last column for block visual partw_old_cursor_lcol3119,97957
    linenr_T	w_old_visual_lnum;  // last known start of visual partw_old_visual_lnum3120,98026
    colnr_T	w_old_visual_col;   // last known start of visual partw_old_visual_col3121,98094
    colnr_T	w_old_curswant;	    // last known value of Curswantw_old_curswant3122,98161
    linenr_T	w_topline;	    // buffer line number of the line at thew_topline3128,98343
    char	w_topline_was_set;  // flag set to TRUE when topline is set,w_topline_was_set3130,98441
    int		w_topfill;	    // number of filler lines above w_toplinew_topfill3133,98561
    int		w_old_topfill;	    // w_topfill at last redraww_old_topfill3134,98627
    int		w_botfill;	    // TRUE when filler lines are actuallyw_botfill3135,98683
    int		w_old_botfill;	    // w_botfill at last redraww_old_botfill3137,98790
    colnr_T	w_leftcol;	    // window column number of the left mostw_leftcol3139,98853
    colnr_T	w_skipcol;	    // starting column when a single linew_skipcol3142,98992
    int		w_winrow;	    // first row of window in screenw_winrow3149,99225
    int		w_height;	    // number of rows in window, excludingw_height3150,99281
    int		w_status_height;    // number of status lines (0 or 1)w_status_height3152,99384
    int		w_wincol;	    // Leftmost column of window in screen.w_wincol3153,99448
    int		w_width;	    // Width of window, excluding separation.w_width3154,99511
    int		w_vsep_width;	    // Number of separator columns (0 or 1).w_vsep_width3155,99575
    pos_save_T	w_save_cursor;	    // backup of cursor pos and toplinew_save_cursor3156,99643
    int		w_popup_flags;	    // POPF_ valuesw_popup_flags3158,99736
    int		w_popup_handled;    // POPUP_HANDLE[0-9] flagsw_popup_handled3159,99780
    char_u	*w_popup_title;w_popup_title3160,99836
    poppos_T	w_popup_pos;w_popup_pos3161,99863
    int		w_popup_fixed;	    // do not shift popup to fit on screenw_popup_fixed3162,99889
    int		w_popup_prop_type;  // when not zero: textprop type IDw_popup_prop_type3163,99956
    win_T	*w_popup_prop_win;  // window to search for textpropw_popup_prop_win3164,100020
    int		w_popup_prop_id;    // when not zero: textprop IDw_popup_prop_id3165,100083
    int		w_zindex;w_zindex3166,100142
    int		w_minheight;	    // "minheight" for popup windoww_minheight3167,100161
    int		w_minwidth;	    // "minwidth" for popup windoww_minwidth3168,100219
    int		w_maxheight;	    // "maxheight" for popup windoww_maxheight3169,100275
    int		w_maxwidth;	    // "maxwidth" for popup windoww_maxwidth3170,100333
    int		w_wantline;	    // "line" for popup windoww_wantline3171,100389
    int		w_wantcol;	    // "col" for popup windoww_wantcol3172,100441
    int		w_firstline;	    // "firstline" for popup windoww_firstline3173,100491
    int		w_want_scrollbar;   // when zero don't use a scrollbarw_want_scrollbar3174,100549
    int		w_has_scrollbar;    // 1 if scrollbar displayed, 0 otherwisew_has_scrollbar3175,100613
    char_u	*w_scrollbar_highlight; // "scrollbarhighlight"w_scrollbar_highlight3176,100683
    char_u	*w_thumb_highlight; // "thumbhighlight"w_thumb_highlight3177,100742
    int		w_popup_padding[4]; // popup padding top/right/bot/leftw_popup_padding3178,100793
    int		w_popup_border[4];  // popup border top/right/bot/leftw_popup_border3179,100858
    char_u	*w_border_highlight[4];  // popup border highlightw_border_highlight3180,100922
    int		w_border_char[8];   // popup border charactersw_border_char3181,100984
    int		w_popup_leftoff;    // columns left of the screenw_popup_leftoff3183,101041
    int		w_popup_rightoff;   // columns right of the screenw_popup_rightoff3184,101100
    varnumber_T	w_popup_last_changedtick; // b:changedtick of popup bufferw_popup_last_changedtick3185,101160
    varnumber_T	w_popup_prop_changedtick; // b:changedtick of buffer withw_popup_prop_changedtick3187,101272
    int		w_popup_prop_topline; // w_topline of window withw_popup_prop_topline3190,101411
    linenr_T	w_popup_last_curline; // last known w_cursor.lnum of windoww_popup_last_curline3193,101541
    callback_T	w_close_cb;	    // popup close callbackw_close_cb3195,101649
    callback_T	w_filter_cb;	    // popup filter callbackw_filter_cb3196,101704
    int		w_filter_mode;	    // mode when filter callback is usedw_filter_mode3197,101761
    win_T	*w_popup_curwin;    // close popup if curwin differsw_popup_curwin3199,101827
    linenr_T	w_popup_lnum;	    // close popup if cursor not on this linew_popup_lnum3200,101890
    colnr_T	w_popup_mincol;	    // close popup if cursor before this colw_popup_mincol3201,101963
    colnr_T	w_popup_maxcol;	    // close popup if cursor after this colw_popup_maxcol3202,102036
    int		w_popup_mouse_row;  // close popup if mouse moves awayw_popup_mouse_row3203,102108
    int		w_popup_mouse_mincol;  // close popup if mouse moves awayw_popup_mouse_mincol3204,102172
    int		w_popup_mouse_maxcol;  // close popup if mouse moves awayw_popup_mouse_maxcol3205,102239
    popclose_T	w_popup_close;	    // allow closing the popup with the mousew_popup_close3206,102306
    list_T	*w_popup_mask;	     // list of lists for "mask"w_popup_mask3208,102383
    char_u	*w_popup_mask_cells; // cached mask cellsw_popup_mask_cells3209,102442
    int		w_popup_mask_height; // height of w_popup_mask_cellsw_popup_mask_height3210,102495
    int		w_popup_mask_width;  // width of w_popup_mask_cellsw_popup_mask_width3211,102557
    timer_T	*w_popup_timer;	    // timer for closing popup windoww_popup_timer3213,102644
    int		w_valid;w_valid3227,103083
    pos_T	w_valid_cursor;	    // last known position of w_cursor, usedw_valid_cursor3228,103101
    colnr_T	w_valid_leftcol;    // last known w_leftcolw_valid_leftcol3230,103201
    int		w_cline_height;	    // current size of cursor linew_cline_height3236,103429
    int		w_cline_folded;	    // cursor line is foldedw_cline_folded3238,103509
    int		w_cline_row;	    // starting row of the cursor linew_cline_row3241,103571
    colnr_T	w_virtcol;	    // column number of the cursor in thew_virtcol3243,103633
    int		w_wrow, w_wcol;	    // cursor position in windoww_wrow3255,104132
    int		w_wrow, w_wcol;	    // cursor position in windoww_wcol3255,104132
    linenr_T	w_botline;	    // number of the line below the bottom ofw_botline3257,104191
    int		w_empty_rows;	    // number of ~ rows in windoww_empty_rows3259,104283
    int		w_filler_rows;	    // number of filler rows at the end of thew_filler_rows3261,104357
    int		w_lines_valid;	    // number of valid entriesw_lines_valid3275,105020
    wline_T	*w_lines;w_lines3276,105075
    garray_T	w_folds;	    // array of nested foldsw_folds3279,105118
    char	w_fold_manual;	    // when TRUE: some folds are opened/closedw_fold_manual3280,105169
    char	w_foldinvalid;	    // when TRUE: folding needs to bew_foldinvalid3282,105260
    int		w_nrwidth;	    // width of 'number' and 'relativenumber'w_nrwidth3286,105373
    int		w_redr_type;	    // type of redraw to be performed on winw_redr_type3294,105528
    int		w_upd_rows;	    // number of window lines to update whenw_upd_rows3295,105595
    linenr_T	w_redraw_top;	    // when != 0: first line needing redraww_redraw_top3297,105698
    linenr_T	w_redraw_bot;	    // when != 0: last line needing redraww_redraw_bot3298,105769
    int		w_redr_status;	    // if TRUE status line must be redrawnw_redr_status3299,105839
    pos_T	w_ru_cursor;	    // cursor position shown in rulerw_ru_cursor3303,106005
    colnr_T	w_ru_virtcol;	    // virtcol shown in rulerw_ru_virtcol3304,106066
    linenr_T	w_ru_topline;	    // topline shown in rulerw_ru_topline3305,106122
    linenr_T	w_ru_line_count;    // line count used for rulerw_ru_line_count3306,106179
    int		w_ru_topfill;	    // topfill shown in rulerw_ru_topfill3308,106259
    char	w_ru_empty;	    // TRUE if ruler shows 0-1 (empty line)w_ru_empty3310,106320
    int		w_alt_fnum;	    // alternate file (for # and CTRL-^)w_alt_fnum3313,106393
    alist_T	*w_alist;	    // pointer to arglist for this windoww_alist3315,106456
    int		w_arg_idx;	    // current index in argument list (can bew_arg_idx3316,106520
    int		w_arg_idx_invalid;  // editing another file than w_arg_idxw_arg_idx_invalid3318,106612
    char_u	*w_localdir;	    // absolute path of local directory orw_localdir3320,106681
    vimmenu_T	*w_winbar;	    // The root of the WinBar menu hierarchy.w_winbar3323,106781
    winbar_item_T *w_winbar_items;  // list of items in the WinBarw_winbar_items3324,106852
    int		w_winbar_height;    // 1 if there is a window toolbarw_winbar_height3325,106919
    winopt_T	w_onebuf_opt;w_onebuf_opt3335,107294
    winopt_T	w_allbuf_opt;w_allbuf_opt3336,107321
    long_u	w_p_stl_flags;	    // flags for 'statusline'w_p_stl_flags3340,107423
    long_u	w_p_fde_flags;	    // flags for 'foldexpr'w_p_fde_flags3343,107503
    long_u	w_p_fdt_flags;	    // flags for 'foldtext'w_p_fdt_flags3344,107557
    int		*w_p_cc_cols;	    // array of columns to highlight or NULLw_p_cc_cols3347,107637
    char_u	w_p_culopt_flags;   // flags for cursorline highlightingw_p_culopt_flags3348,107705
    long	w_p_siso;	    // 'sidescrolloff' local valuew_p_siso3350,107780
    long	w_p_so;		    // 'scrolloff' local valuew_p_so3351,107834
    int		w_briopt_min;	    // minimum width for breakindentw_briopt_min3354,107906
    int		w_briopt_shift;	    // additional shift for breakindentw_briopt_shift3355,107966
    int		w_briopt_sbr;	    // sbr in 'briopt'w_briopt_sbr3356,108031
#define GLOBAL_WO(GLOBAL_WO3360,108156
    long	w_scbind_pos;w_scbind_pos3362,108209
    dictitem_T	w_winvar;	// variable for "w:" Dictionaryw_winvar3365,108250
    dict_T	*w_vars;	// internal variables, local to windoww_vars3366,108307
    pos_T	w_pcmark;	// previous context markw_pcmark3374,108576
    pos_T	w_prev_pcmark;	// previous w_pcmarkw_prev_pcmark3375,108621
    xfmark_T	w_jumplist[JUMPLISTSIZE];w_jumplist3381,108754
    int		w_jumplistlen;		// number of active entriesw_jumplistlen3382,108793
    int		w_jumplistidx;		// current positionw_jumplistidx3383,108846
    int		w_changelistidx;	// current position in b_changelistw_changelistidx3385,108892
    matchitem_T	*w_match_head;		// head of match listw_match_head3389,108987
    int		w_next_match_id;	// next match IDw_next_match_id3390,109041
    taggy_T	w_tagstack[TAGSTACKSIZE];   // the tag stackw_tagstack3399,109216
    int		w_tagstackidx;		    // idx just below active entryw_tagstackidx3400,109273
    int		w_tagstacklen;		    // number of tags on stackw_tagstacklen3401,109333
    int		w_fraction;w_fraction3409,109638
    int		w_prev_fraction_row;w_prev_fraction_row3410,109659
    scrollbar_T	w_scrollbars[2];	// vert. Scrollbars for this windoww_scrollbars3413,109706
    linenr_T	w_nrwidth_line_count;	// line count when ml_nrwidth_widthw_nrwidth_line_count3416,109804
    long	w_nuw_cached;		// 'numberwidth' option cachedw_nuw_cached3418,109897
    int		w_nrwidth_width;	// nr of chars to print line count.w_nrwidth_width3419,109952
    qf_info_T	*w_llist;		// Location list for this windoww_llist3423,110043
    qf_info_T	*w_llist_ref;w_llist_ref3428,110240
    void	*w_mzscheme_ref;	// The MzScheme value for this windoww_mzscheme_ref3432,110297
    void	*w_perl_private;w_perl_private3436,110386
    void	*w_python_ref;		// The Python value for this windoww_python_ref3440,110439
    void	*w_python3_ref;		// The Python value for this windoww_python3_ref3444,110528
    void	*w_tcl_ref;w_tcl_ref3448,110614
    void	*w_ruby_ref;w_ruby_ref3452,110660
typedef struct oparg_Soparg_S3459,110728
    int		op_type;	// current pending operator typeop_type3461,110753
    int		regname;	// register to use for the operatorregname3462,110804
    int		motion_type;	// type of the current cursor motionmotion_type3463,110858
    int		motion_force;	// force motion type: 'v', 'V' or CTRL-Vmotion_force3464,110917
    int		use_reg_one;	// TRUE if delete uses reg 1 even when notuse_reg_one3465,110981
    int		inclusive;	// TRUE if char motion is inclusive (onlyinclusive3467,111062
    int		end_adjusted;	// backuped b_op_end one char (only used byend_adjusted3469,111163
    pos_T	start;		// start of the operatorstart3471,111250
    pos_T	end;		// end of the operatorend3472,111293
    pos_T	cursor_start;	// cursor position before motion for "gw"cursor_start3473,111332
    long	line_count;	// number of lines from op_start to op_endline_count3475,111399
    int		empty;		// op_start and op_end the same (only used byempty3477,111482
    int		is_VIsual;	// operator on Visual areais_VIsual3479,111565
    int		block_mode;	// current operator is Visual block modeblock_mode3480,111612
    colnr_T	start_vcol;	// start col for block mode operatorstart_vcol3481,111674
    colnr_T	end_vcol;	// end col for block mode operatorend_vcol3482,111735
    long	prev_opcount;	// ca.opcount saved for K_CURSORHOLDprev_opcount3483,111792
    long	prev_count0;	// ca.count0 saved for K_CURSORHOLDprev_count03484,111852
} oparg_T;oparg_T3485,111910
typedef struct cmdarg_Scmdarg_S3490,111968
    oparg_T	*oap;		// Operator argumentsoap3492,111994
    int		prechar;	// prefix character (optional, always 'g')prechar3493,112035
    int		cmdchar;	// command charactercmdchar3494,112096
    int		nchar;		// next command character (optional)nchar3495,112135
    int		ncharC1;	// first composing character (optional)ncharC13496,112189
    int		ncharC2;	// second composing character (optional)ncharC23497,112247
    int		extra_char;	// yet another character (optional)extra_char3498,112306
    long	opcount;	// count before an operatoropcount3499,112363
    long	count0;		// count before command, default 0count03500,112409
    long	count1;		// count before command, default 1count13501,112462
    int		arg;		// extra argument from nv_cmds[]arg3502,112515
    int		retval;		// return: CA_* valuesretval3503,112563
    char_u	*searchbuf;	// return: pointer to search pattern or NULLsearchbuf3504,112604
} cmdarg_T;cmdarg_T3505,112672
#define CA_COMMAND_BUSY	CA_COMMAND_BUSY3508,112707
#define CA_NO_ADJ_OP_END CA_NO_ADJ_OP_END3509,112768
#define SHAPE_IDX_N	SHAPE_IDX_N3516,112943
#define SHAPE_IDX_V	SHAPE_IDX_V3517,112980
#define SHAPE_IDX_I	SHAPE_IDX_I3518,113017
#define SHAPE_IDX_R	SHAPE_IDX_R3519,113054
#define SHAPE_IDX_C	SHAPE_IDX_C3520,113092
#define SHAPE_IDX_CI	SHAPE_IDX_CI3521,113142
#define SHAPE_IDX_CR	SHAPE_IDX_CR3522,113193
#define SHAPE_IDX_O	SHAPE_IDX_O3523,113245
#define SHAPE_IDX_VE	SHAPE_IDX_VE3524,113292
#define SHAPE_IDX_CLINE	SHAPE_IDX_CLINE3525,113357
#define SHAPE_IDX_STATUS SHAPE_IDX_STATUS3526,113402
#define SHAPE_IDX_SDRAG SHAPE_IDX_SDRAG3527,113447
#define SHAPE_IDX_VSEP	SHAPE_IDX_VSEP3528,113500
#define SHAPE_IDX_VDRAG SHAPE_IDX_VDRAG3529,113555
#define SHAPE_IDX_MORE	SHAPE_IDX_MORE3530,113620
#define SHAPE_IDX_MOREL	SHAPE_IDX_MOREL3531,113668
#define SHAPE_IDX_SM	SHAPE_IDX_SM3532,113730
#define SHAPE_IDX_COUNT	SHAPE_IDX_COUNT3533,113780
#define SHAPE_BLOCK	SHAPE_BLOCK3535,113808
#define SHAPE_HOR	SHAPE_HOR3536,113846
#define SHAPE_VER	SHAPE_VER3537,113891
#define MSHAPE_NUMBERED	MSHAPE_NUMBERED3539,113935
#define MSHAPE_HIDE	MSHAPE_HIDE3540,114006
#define SHAPE_MOUSE	SHAPE_MOUSE3542,114051
#define SHAPE_CURSOR	SHAPE_CURSOR3543,114105
typedef struct cursor_entrycursor_entry3545,114159
    int		shape;		// one of the SHAPE_ definesshape3547,114189
    int		mshape;		// one of the MSHAPE definesmshape3548,114235
    int		percentage;	// percentage of cell for barpercentage3549,114282
    long	blinkwait;	// blinking, wait time before blinking startsblinkwait3550,114333
    long	blinkon;	// blinking, on timeblinkon3551,114399
    long	blinkoff;	// blinking, off timeblinkoff3552,114438
    int		id;		// highlight group IDid3553,114479
    int		id_lm;		// highlight group ID for :lmap modeid_lm3554,114515
    char	*name;		// mode name (fixed)name3555,114569
    char	used_for;	// SHAPE_MOUSE and/or SHAPE_CURSORused_for3556,114607
} cursorentry_T;cursorentry_T3557,114661
#define MENU_INDEX_INVALID	MENU_INDEX_INVALID3563,114796
#define MENU_INDEX_NORMAL	MENU_INDEX_NORMAL3564,114826
#define MENU_INDEX_VISUAL	MENU_INDEX_VISUAL3565,114854
#define MENU_INDEX_SELECT	MENU_INDEX_SELECT3566,114882
#define MENU_INDEX_OP_PENDING	MENU_INDEX_OP_PENDING3567,114910
#define MENU_INDEX_INSERT	MENU_INDEX_INSERT3568,114942
#define MENU_INDEX_CMDLINE	MENU_INDEX_CMDLINE3569,114970
#define MENU_INDEX_TERMINAL	MENU_INDEX_TERMINAL3570,114999
#define MENU_INDEX_TIP	MENU_INDEX_TIP3571,115029
#define MENU_MODES	MENU_MODES3572,115055
#define MENU_NORMAL_MODE	MENU_NORMAL_MODE3575,115092
#define MENU_VISUAL_MODE	MENU_VISUAL_MODE3576,115142
#define MENU_SELECT_MODE	MENU_SELECT_MODE3577,115192
#define MENU_OP_PENDING_MODE	MENU_OP_PENDING_MODE3578,115242
#define MENU_INSERT_MODE	MENU_INSERT_MODE3579,115300
#define MENU_CMDLINE_MODE	MENU_CMDLINE_MODE3580,115350
#define MENU_TERMINAL_MODE	MENU_TERMINAL_MODE3581,115402
#define MENU_TIP_MODE	MENU_TIP_MODE3582,115456
#define MENU_ALL_MODES	MENU_ALL_MODES3583,115501
#define MNU_HIDDEN_CHAR	MNU_HIDDEN_CHAR3587,115668
struct VimMenuVimMenu3589,115698
    int		modes;		    // Which modes is this menu visible for?modes3591,115715
    int		enabled;	    // for which modes the menu is enabledenabled3592,115777
    char_u	*name;		    // Name of menu, possibly translatedname3593,115838
    char_u	*dname;		    // Displayed Name ("name" without '&')dname3594,115898
    char_u	*en_name;	    // "name" untranslated, NULL when "name"en_name3596,115984
    char_u	*en_dname;	    // "dname" untranslated, NULL when "dname"en_dname3598,116080
    int		mnemonic;	    // mnemonic key (after '&')mnemonic3601,116186
    char_u	*actext;	    // accelerator text (after TAB)actext3602,116237
    int		priority;	    // Menu order prioritypriority3603,116293
    void	(*cb)(vimmenu_T *); // Call-back functioncb3605,116355
    char_u	*iconfile;	    // name of file for icon or NULLiconfile3608,116433
    int		iconidx;	    // icon index (-1 if not set)iconidx3609,116492
    int		icon_builtin;	    // icon names is BuiltIn{nr}icon_builtin3610,116544
    char_u	*strings[MENU_MODES]; // Mapped string for each modestrings3612,116607
    int		noremap[MENU_MODES]; // A REMAP_ flag for each modenoremap3613,116671
    char	silent[MENU_MODES]; // A silent flag for each modesilent3614,116732
    vimmenu_T	*children;	    // Children of sub-menuchildren3615,116792
    vimmenu_T	*parent;	    // Parent of menuparent3616,116845
    vimmenu_T	*next;		    // Next item in menunext3617,116890
    Widget	id;		    // Manage this to enable itemid3619,116957
    Widget	submenu_id;	    // If this is submenu, add children heresubmenu_id3620,117007
    GtkWidget	*id;		    // Manage this to enable itemid3623,117102
    GtkWidget	*submenu_id;	    // If this is submenu, add children heresubmenu_id3624,117156
    GtkWidget	*tearoff_handle;tearoff_handle3626,117289
    GtkWidget   *label;		    // Used by "set wak=" code.label3628,117328
    int		sensitive;	    // turn button on/offsensitive3631,117414
    char	**xpm;		    // pixmap dataxpm3632,117460
    char	*xpm_fname;	    // file with pixmap dataxpm_fname3633,117496
    Pixmap	image;		    // Toolbar imageimage3636,117576
    BalloonEval *tip;		    // tooltip for this menu itemtip3639,117645
    UINT	id;		    // Id of menu itemid3642,117731
    HMENU	submenu_id;	    // If this is submenu, add children heresubmenu_id3643,117768
    HWND	tearoff_handle;	    // hWnd of tearoff if createdtearoff_handle3644,117835
    BMenuItem  *id;		    // Id of menu itemid3647,117920
    BMenu  *submenu_id;		    // If this is submenu, add children heresubmenu_id3648,117964
    BPictureButton *button;button3650,118055
    short	menu_id;	    // the menu id to which this item belongsmenu_id3656,118200
    short	submenu_id;	    // the menu id of the children (could besubmenu_id3657,118265
    MenuHandle	menu_handle;menu_handle3659,118368
    MenuHandle	submenu_handle;submenu_handle3660,118396
    PtWidget_t	*id;id3663,118457
    PtWidget_t	*submenu_id;submenu_id3664,118477
typedef int vimmenu_T;vimmenu_T3669,118580
    buf_T	*save_curbuf;	// saved curbufsave_curbuf3679,118755
    int		use_aucmd_win;	// using aucmd_winuse_aucmd_win3680,118795
    win_T	*save_curwin;	// saved curwinsave_curwin3681,118838
    win_T	*new_curwin;	// new curwinnew_curwin3682,118878
    win_T	*save_prevwin;	// saved prevwinsave_prevwin3683,118915
    bufref_T	new_curbuf;	// new curbufnew_curbuf3684,118957
    char_u	*globaldir;	// saved value of globaldirglobaldir3685,118996
} aco_save_T;aco_save_T3686,119047
    const char	*name;name3693,119153
    int		hasnum;hasnum3694,119175
    long	number;number3695,119192
    char_u	*string;	// points into option stringstring3696,119209
    int		strlen;strlen3697,119258
    int		present;present3698,119275
} option_table_T;option_table_T3699,119293
    long_u	fg_color;fg_color3706,119393
    long_u	bg_color;bg_color3707,119414
    int		bold;bold3708,119435
    int		italic;italic3709,119450
    int		underline;underline3710,119467
    int		undercurl;undercurl3711,119487
} prt_text_attr_T;prt_text_attr_T3712,119507
    int		n_collated_copies;n_collated_copies3719,119605
    int		n_uncollated_copies;n_uncollated_copies3720,119633
    int		duplex;duplex3721,119663
    int		chars_per_line;chars_per_line3722,119680
    int		lines_per_page;lines_per_page3723,119705
    int		has_color;has_color3724,119730
    prt_text_attr_T number;number3725,119750
    int		modec;modec3727,119797
    int		do_syntax;do_syntax3728,119813
    int		user_abort;user_abort3730,119840
    char_u	*jobname;jobname3731,119861
    char_u	*outfile;outfile3733,119905
    char_u	*arguments;arguments3734,119926
} prt_settings_T;prt_settings_T3736,119956
#define PRINT_NUMBER_WIDTH PRINT_NUMBER_WIDTH3738,119975
    char_u	*pum_text;	// main menu textpum_text3745,120059
    char_u	*pum_kind;	// extra kind text (may be truncated)pum_kind3746,120099
    char_u	*pum_extra;	// extra menu text (may be truncated)pum_extra3747,120159
    char_u	*pum_info;	// extra infopum_info3748,120220
} pumitem_T;pumitem_T3749,120256
    char_u	*tn_tags;	// value of 'tags' when startingtn_tags3756,120332
    char_u	*tn_np;		// current position in tn_tagstn_np3757,120386
    int		tn_did_filefind_init;tn_did_filefind_init3758,120437
    int		tn_hf_idx;tn_hf_idx3759,120468
    void	*tn_search_ctx;tn_search_ctx3760,120488
} tagname_T;tagname_T3761,120513
  UINT32_T total[2];total3764,120544
  UINT32_T state[8];state3765,120565
  char_u   buffer[64];buffer3766,120586
} context_sha256_T;context_sha256_T3767,120609
    EXPR_UNKNOWN = 0,EXPR_UNKNOWN3774,120678
    EXPR_EQUAL,		// ==EXPR_EQUAL3775,120700
    EXPR_NEQUAL,	// !=EXPR_NEQUAL3776,120723
    EXPR_GREATER,	// >EXPR_GREATER3777,120746
    EXPR_GEQUAL,	// >=EXPR_GEQUAL3778,120769
    EXPR_SMALLER,	// <EXPR_SMALLER3779,120792
    EXPR_SEQUAL,	// <=EXPR_SEQUAL3780,120815
    EXPR_MATCH,		// =~EXPR_MATCH3781,120838
    EXPR_NOMATCH,	// !~EXPR_NOMATCH3782,120861
    EXPR_IS,		// isEXPR_IS3783,120885
    EXPR_ISNOT,		// isnotEXPR_ISNOT3784,120905
    EXPR_ADD,		// +EXPR_ADD3786,120957
    EXPR_SUB,		// -EXPR_SUB3787,120977
    EXPR_MULT,		// *EXPR_MULT3788,120997
    EXPR_DIV,		// /EXPR_DIV3789,121018
    EXPR_REM,		// %EXPR_REM3790,121038
} exptype_T;exptype_T3791,121058
struct js_readerjs_reader3796,121127
    char_u	*js_buf;	// text to be decodedjs_buf3798,121146
    char_u	*js_end;	// NUL in js_bufjs_end3799,121188
    int		js_used;	// bytes used from js_bufjs_used3800,121225
    int		(*js_fill)(struct js_reader *);js_fill3801,121269
    void	*js_cookie;	// can be used by js_filljs_cookie3804,121400
    int		js_cookie_arg;	// can be used by js_filljs_cookie_arg3805,121447
typedef struct js_reader js_read_T;js_read_T3807,121500
#define MAX_ARG_CMDS MAX_ARG_CMDS3810,121591
#define WIN_HOR	WIN_HOR3813,121646
#define	WIN_VER	WIN_VER3814,121707
#define	WIN_TABS WIN_TABS3815,121766
    int		argc;argc3820,121915
    char	**argv;argv3821,121930
    char_u	*fname;			// first file to editfname3823,121948
    int		evim_mode;		// started as "evim"evim_mode3825,121992
    char_u	*use_vimrc;		// vimrc from -u argumentuse_vimrc3826,122034
    int		clean;			// --clean argumentclean3827,122084
    int		n_commands;		     // no. of commands from + or -cn_commands3829,122123
    char_u	*commands[MAX_ARG_CMDS];     // commands from + or -c arg.commands3830,122182
    char_u	cmds_tofree[MAX_ARG_CMDS];   // commands that need free()cmds_tofree3831,122252
    int		n_pre_commands;		     // no. of commands from --cmdn_pre_commands3832,122321
    char_u	*pre_commands[MAX_ARG_CMDS]; // commands from --cmd argumentpre_commands3833,122382
    int		edit_type;		// type of editing to doedit_type3835,122455
    char_u	*tagname;		// tag from -t argumenttagname3836,122501
    char_u	*use_ef;		// 'errorfile' from -q argumentuse_ef3838,122568
    int		want_full_screen;want_full_screen3841,122629
    int		not_a_term;		// no warning for missing term?not_a_term3842,122656
    int		tty_fail;		// exit if not a ttytty_fail3843,122710
    char_u	*term;			// specified terminal nameterm3844,122751
    int		ask_for_key;		// -x argumentask_for_key3846,122816
    int		no_swap_file;		// "-n" argument usedno_swap_file3848,122861
    int		use_debug_break_level;use_debug_break_level3850,122924
    int		window_count;		// number of windows to usewindow_count3852,122963
    int		window_layout;		// 0, WIN_HOR, WIN_VER or WIN_TABSwindow_layout3853,123015
    int		serverArg;		// TRUE when argument for a serverserverArg3856,123101
    char_u	*serverName_arg;	// cmdline arg for server nameserverName_arg3857,123157
    char_u	*serverStr;		// remote server commandserverStr3858,123216
    char_u	*serverStrEnc;		// encoding of serverStrserverStrEnc3859,123265
    char_u	*servername;		// allocated name for our serverservername3860,123317
# define EXPAND_FILENAMESEXPAND_FILENAMES3863,123401
    int		literal;		// don't expand file namesliteral3864,123427
    int		full_path;		// file name argument was full pathfull_path3867,123493
    int		diff_mode;		// start with 'diff' setdiff_mode3870,123574
} mparm_T;mparm_T3872,123627
typedef struct lval_Slval_S3901,124688
    char_u	*ll_name;	// start of variable name (can be NULL)ll_name3903,124712
    char_u	*ll_name_end;	// end of variable name (can be NULL)ll_name_end3904,124773
    type_T	*ll_type;	// type of variable (can be NULL)ll_type3905,124836
    char_u	*ll_exp_name;	// NULL or expanded name in allocated memory.ll_exp_name3906,124891
    typval_T	*ll_tv;		// Typeval of item being used.  If "newkey"ll_tv3907,124962
    listitem_T	*ll_li;		// The list item or NULL.ll_li3910,125093
    list_T	*ll_list;	// The list or NULL.ll_list3911,125143
    int		ll_range;	// TRUE when a [i:j] range was usedll_range3912,125185
    int		ll_empty2;	// Second index is empty: [i:]ll_empty23913,125240
    long	ll_n1;		// First index for listll_n13914,125291
    long	ll_n2;		// Second index for list rangell_n23915,125332
    dict_T	*ll_dict;	// The Dictionary or NULLll_dict3916,125380
    dictitem_T	*ll_di;		// The dictitem or NULLll_di3917,125427
    char_u	*ll_newkey;	// New key for Dict in alloc. mem or NULL.ll_newkey3918,125475
    blob_T	*ll_blob;	// The Blob or NULLll_blob3919,125541
} lval_T;lval_T3920,125582
    int		save_msg_scroll;save_msg_scroll3925,125725
    int		save_restart_edit;save_restart_edit3926,125751
    int		save_msg_didout;save_msg_didout3927,125779
    int		save_State;save_State3928,125805
    int		save_insertmode;save_insertmode3929,125826
    int		save_finish_op;save_finish_op3930,125852
    int		save_opcount;save_opcount3931,125877
    int		save_reg_executing;save_reg_executing3932,125900
    tasave_T	tabuf;tabuf3933,125929
} save_state_T;save_state_T3934,125949
    varnumber_T vv_prevcount;vv_prevcount3937,125983
    varnumber_T vv_count;vv_count3938,126013
    varnumber_T vv_count1;vv_count13939,126039
} vimvars_save_T;vimvars_save_T3940,126066
    CDSCOPE_GLOBAL,	// :cdCDSCOPE_GLOBAL3944,126132
    CDSCOPE_TABPAGE,	// :tcdCDSCOPE_TABPAGE3945,126159
    CDSCOPE_WINDOW	// :lcdCDSCOPE_WINDOW3946,126188
} cdscope_T;cdscope_T3947,126215
    VAR_FLAVOUR_DEFAULT,	// doesn't start with uppercaseVAR_FLAVOUR_DEFAULT3952,126263
    VAR_FLAVOUR_SESSION,	// starts with uppercase, some lowerVAR_FLAVOUR_SESSION3953,126320
    VAR_FLAVOUR_VIMINFO		// all uppercaseVAR_FLAVOUR_VIMINFO3954,126382
} var_flavour_T;var_flavour_T3955,126424
    IGNORE_POPUP,	// only check non-popup windowsIGNORE_POPUP3959,126490
    FIND_POPUP,		// also find popup windowsFIND_POPUP3960,126540
    FAIL_POPUP		// return NULL if mouse on popup windowFAIL_POPUP3961,126584
} mouse_find_T;mouse_find_T3962,126640
#define DELETION_REGISTER	DELETION_REGISTER3965,126695
# define STAR_REGISTER	STAR_REGISTER3967,126746
#   define PLUS_REGISTER	PLUS_REGISTER3969,126791
#   define PLUS_REGISTER	PLUS_REGISTER3971,126827
# define TILDE_REGISTER	TILDE_REGISTER3975,126923
#  define NUM_REGISTERS	NUM_REGISTERS3980,127015
#  define NUM_REGISTERS	NUM_REGISTERS3982,127068
# define NUM_REGISTERS	NUM_REGISTERS3985,127127
struct block_defblock_def3990,127301
    int		startspaces;	// 'extra' cols before first charstartspaces3992,127320
    int		endspaces;	// 'extra' cols after last charendspaces3993,127376
    int		textlen;	// chars in blocktextlen3994,127428
    char_u	*textstart;	// pointer to 1st char (partially) in blocktextstart3995,127464
    colnr_T	textcol;	// index of chars (partially) in blocktextcol3996,127531
    colnr_T	start_vcol;	// start col of 1st char wholly inside blockstart_vcol3997,127591
    colnr_T	end_vcol;	// start col of 1st char wholly after blockend_vcol3998,127660
    int		is_short;	// TRUE if line is too short to fit in blockis_short3999,127726
    int		is_MAX;		// TRUE if curswant==MAXCOL when startingis_MAX4000,127790
    int		is_oneChar;	// TRUE if block within one characteris_oneChar4001,127850
    int		pre_whitesp;	// screen cols of ws before blockpre_whitesp4002,127909
    int		pre_whitesp_c;	// chars of ws before blockpre_whitesp_c4003,127965
    colnr_T	end_char_vcols;	// number of vcols of post-block charend_char_vcols4004,128017
    colnr_T	start_char_vcols; // number of vcols of pre-block charstart_char_vcols4005,128083
    char_u	**y_array;	// pointer to array of line pointersy_array4011,128228
    linenr_T	y_size;		// number of lines in y_arrayy_size4012,128287
    char_u	y_type;		// MLINE, MCHAR or MBLOCKy_type4013,128339
    colnr_T	y_width;	// only set if y_type == MBLOCKy_width4014,128385
    time_t	y_time_set;y_time_set4016,128458
} yankreg_T;yankreg_T4018,128488
typedef struct soffsetsoffset4022,128605
    int		dir;		// search direction, '/' or '?'dir4024,128630
    int		line;		// search has line offsetline4025,128677
    int		end;		// search set cursor at endend4026,128719
    long	off;		// line or char offsetoff4027,128762
} soffset_T;soffset_T4028,128800
typedef struct spatspat4031,128881
    char_u	    *pat;	// the pattern (in allocated memory) or NULLpat4033,128903
    int		    magic;	// magicness of the patternmagic4034,128969
    int		    no_scs;	// no smartcase for this patternno_scs4035,129017
    soffset_T	    off;off4036,129071
} spat_T;spat_T4037,129094
    linenr_T	sa_stop_lnum;	// stop after this line number when != 0sa_stop_lnum4044,129173
    proftime_T	*sa_tm;		// timeout limit or NULLsa_tm4046,129261
    int		sa_timed_out;	// set when timed outsa_timed_out4047,129310
    int		sa_wrapped;	// search wrapped aroundsa_wrapped4049,129362
} searchit_arg_T;searchit_arg_T4050,129408
#define WRITEBUFSIZE	WRITEBUFSIZE4052,129427
#define FIO_LATIN1	FIO_LATIN14054,129485
#define FIO_UTF8	FIO_UTF84055,129527
#define FIO_UCS2	FIO_UCS24056,129566
#define FIO_UCS4	FIO_UCS44057,129605
#define FIO_UTF16	FIO_UTF164058,129644
# define FIO_CODEPAGE	FIO_CODEPAGE4060,129698
# define FIO_PUT_CP(FIO_PUT_CP4061,129756
# define FIO_GET_CP(FIO_GET_CP4062,129830
# define FIO_MACROMAN	FIO_MACROMAN4065,129932
#define FIO_ENDIAN_L	FIO_ENDIAN_L4067,129986
#define FIO_ENCRYPTED	FIO_ENCRYPTED4068,130029
#define FIO_NOCONVERT	FIO_NOCONVERT4069,130083
#define FIO_UCSBOM	FIO_UCSBOM4070,130140
#define FIO_ALL	FIO_ALL4071,130200
#define CONV_RESTLEN CONV_RESTLEN4075,130365
#define ICONV_MULT ICONV_MULT4079,130515

src/term.h,7012
typedef unsigned char char_u;char_u20,590
enum SpecialKeySpecialKey26,692
    KS_NAME = 0,// name of this terminal entryKS_NAME28,710
    KS_CE,	// clear to end of lineKS_CE29,757
    KS_AL,	// add new blank lineKS_AL30,792
    KS_CAL,	// add number of blank linesKS_CAL31,825
    KS_DL,	// delete lineKS_DL32,866
    KS_CDL,	// delete number of linesKS_CDL33,892
    KS_CS,	// scroll regionKS_CS34,930
    KS_CL,	// clear screenKS_CL35,958
    KS_CD,	// clear to end of displayKS_CD36,985
    KS_UT,	// clearing uses current background colorKS_UT37,1023
    KS_DA,	// text may be scrolled down from upKS_DA38,1076
    KS_DB,	// text may be scrolled up from downKS_DB39,1124
    KS_VI,	// cursor invisibleKS_VI40,1172
    KS_VE,	// cursor visibleKS_VE41,1203
    KS_VS,	// cursor very visible (blink)KS_VS42,1232
    KS_CVS,	// cursor normally visible (no blink)KS_CVS43,1274
    KS_CSH,	// cursor shapeKS_CSH44,1324
    KS_CRC,	// request cursor blinkingKS_CRC45,1352
    KS_CRS,	// request cursor styleKS_CRS46,1391
    KS_ME,	// normal modeKS_ME47,1427
    KS_MR,	// reverse modeKS_MR48,1453
    KS_MD,	// bold modeKS_MD49,1480
    KS_SE,	// normal modeKS_SE50,1504
    KS_SO,	// standout modeKS_SO51,1530
    KS_CZH,	// italic mode startKS_CZH52,1558
    KS_CZR,	// italic mode endKS_CZR53,1591
    KS_UE,	// exit underscore (underline) modeKS_UE54,1622
    KS_US,	// underscore (underline) modeKS_US55,1669
    KS_UCE,	// exit undercurl modeKS_UCE56,1711
    KS_UCS,	// undercurl modeKS_UCS57,1746
    KS_STE,	// exit strikethrough modeKS_STE58,1776
    KS_STS,	// strikethrough modeKS_STS59,1815
    KS_MS,	// save to move cur in reverse modeKS_MS60,1849
    KS_CM,	// cursor motionKS_CM61,1896
    KS_SR,	// scroll reverse (backward)KS_SR62,1924
    KS_CRI,	// cursor number of chars rightKS_CRI63,1964
    KS_VB,	// visual bellKS_VB64,2008
    KS_KS,	// put term in "keypad transmit" modeKS_KS65,2034
    KS_KE,	// out of "keypad transmit" modeKS_KE66,2083
    KS_TI,	// put terminal in termcap modeKS_TI67,2127
    KS_CTI,	// put terminal in "raw" modeKS_CTI68,2170
    KS_TE,	// end of termcap modeKS_TE69,2212
    KS_CTE,	// end of "raw" modeKS_CTE70,2246
    KS_BC,	// backspace character (cursor left)KS_BC71,2279
    KS_CCS,	// cur is relative to scroll regionKS_CCS72,2327
    KS_CCO,	// number of colorsKS_CCO73,2375
    KS_CSF,	// set foreground colorKS_CSF74,2407
    KS_CSB,	// set background colorKS_CSB75,2443
    KS_XS,	// standout not erased by overwriting (hpterm)KS_XS76,2479
    KS_XN,	// newline glitchKS_XN77,2537
    KS_MB,	// blink modeKS_MB78,2566
    KS_CAF,	// set foreground color (ANSI)KS_CAF79,2591
    KS_CAB,	// set background color (ANSI)KS_CAB80,2634
    KS_LE,	// cursor left (mostly backspace)KS_LE81,2677
    KS_ND,	// cursor rightKS_ND82,2722
    KS_CIS,	// set icon text startKS_CIS83,2749
    KS_CIE,	// set icon text endKS_CIE84,2784
    KS_CSC,	// set cursor color startKS_CSC85,2817
    KS_CEC,	// set cursor color endKS_CEC86,2855
    KS_TS,	// set window title start (to status line)KS_TS87,2891
    KS_FS,	// set window title end (from status line)KS_FS88,2945
    KS_CWP,	// set window position in pixelsKS_CWP89,2999
    KS_CGP,	// get window positionKS_CGP90,3044
    KS_CWS,	// set window size in charactersKS_CWS91,3079
    KS_CRV,	// request version stringKS_CRV92,3124
    KS_RFG,	// request foreground colorKS_RFG93,3162
    KS_RBG,	// request background colorKS_RBG94,3202
    KS_CSI,	// start insert mode (bar cursor)KS_CSI95,3242
    KS_CEI,	// end insert mode (block cursor)KS_CEI96,3288
    KS_CSR,	// start replace mode (underline cursor)KS_CSR97,3334
    KS_CSV,	// scroll region verticalKS_CSV98,3387
    KS_OP,	// original color pairKS_OP99,3425
    KS_U7,	// request cursor positionKS_U7100,3459
    KS_8F,	// set foreground color (RGB)KS_8F101,3497
    KS_8B,	// set background color (RGB)KS_8B102,3538
    KS_CBE,	// enable bracketed paste modeKS_CBE103,3579
    KS_CBD,	// disable bracketed paste modeKS_CBD104,3622
    KS_CPS,	// start of bracketed pasteKS_CPS105,3666
    KS_CPE,	// end of bracketed pasteKS_CPE106,3706
    KS_CST,	// save window titleKS_CST107,3744
    KS_CRT,	// restore window titleKS_CRT108,3777
    KS_SSI,	// save icon textKS_SSI109,3813
    KS_SRI	// restore icon textKS_SRI110,3843
#define KS_LAST	KS_LAST113,3879
#define T_NAME	T_NAME128,4323
#define T_CE	T_CE129,4375
#define T_AL	T_AL130,4430
#define T_CAL	T_CAL131,4483
#define T_DL	T_DL132,4545
#define T_CDL	T_CDL133,4591
#define T_CS	T_CS134,4650
#define T_CSV	T_CSV135,4698
#define T_CL	T_CL136,4757
#define T_CD	T_CD137,4804
#define T_UT	T_UT138,4862
#define T_DA	T_DA139,4927
#define T_DB	T_DB140,4995
#define T_VI	T_VI141,5063
#define T_VE	T_VE142,5114
#define T_VS	T_VS143,5163
#define T_CVS	T_CVS144,5225
#define T_CSH	T_CSH145,5296
#define T_CRC	T_CRC146,5345
#define T_CRS	T_CRS147,5405
#define T_ME	T_ME148,5462
#define T_MR	T_MR149,5508
#define T_MD	T_MD150,5555
#define T_SE	T_SE151,5599
#define T_SO	T_SO152,5645
#define T_CZH	T_CZH153,5693
#define T_CZR	T_CZR154,5747
#define T_UE	T_UE155,5799
#define T_US	T_US156,5866
#define T_UCE	T_UCE157,5928
#define T_UCS	T_UCS158,5984
#define T_STE	T_STE159,6035
#define T_STS	T_STS160,6095
#define T_MS	T_MS161,6150
#define T_CM	T_CM162,6217
#define T_SR	T_SR163,6265
#define T_CRI	T_CRI164,6325
#define T_VB	T_VB165,6390
#define T_KS	T_KS166,6436
#define T_KE	T_KE167,6505
#define T_TI	T_TI168,6569
#define T_CTI	T_CTI169,6632
#define T_TE	T_TE170,6695
#define T_CTE	T_CTE171,6749
#define T_BC	T_BC172,6803
#define T_CCS	T_CCS173,6857
#define T_CCO	T_CCO174,6926
#define T_CSF	T_CSF175,6979
#define T_CSB	T_CSB176,7036
#define T_XS	T_XS177,7093
#define T_XN	T_XN178,7162
#define T_MB	T_MB179,7211
#define T_CAF	T_CAF180,7256
#define T_CAB	T_CAB181,7320
#define T_LE	T_LE182,7384
#define T_ND	T_ND183,7430
#define T_CIS	T_CIS184,7477
#define T_CIE	T_CIE185,7533
#define T_TS	T_TS186,7587
#define T_FS	T_FS187,7644
#define T_CSC	T_CSC188,7699
#define T_CEC	T_CEC189,7758
#define T_CWP	T_CWP190,7815
#define T_CGP	T_CGP191,7871
#define T_CWS	T_CWS192,7927
#define T_CSI	T_CSI193,7975
#define T_CEI	T_CEI194,8029
#define T_CSR	T_CSR195,8081
#define T_CRV	T_CRV196,8136
#define T_RFG	T_RFG197,8195
#define T_RBG	T_RBG198,8254
#define T_OP	T_OP199,8313
#define T_U7	T_U7200,8367
#define T_8F	T_8F201,8425
#define T_8B	T_8B202,8486
#define T_BE	T_BE203,8547
#define T_BD	T_BD204,8610
#define T_PS	T_PS205,8674
#define T_PE	T_PE206,8734
#define T_CST	T_CST207,8792
#define T_CRT	T_CRT208,8846
#define T_SSI	T_SSI209,8903
#define T_SRI	T_SRI210,8954
#define TMODE_COOK TMODE_COOK212,9009
#define TMODE_SLEEP TMODE_SLEEP213,9078
#define TMODE_RAW TMODE_RAW214,9151

src/version.h,1164
#define VIM_TOSTR_(VIM_TOSTR_15,368
#define VIM_TOSTR(VIM_TOSTR16,395
#define VIM_VERSION_MAJOR	VIM_VERSION_MAJOR19,474
#define VIM_VERSION_MINOR	VIM_VERSION_MINOR20,503
#define VIM_VERSION_BUILD	VIM_VERSION_BUILD21,532
#define VIM_VERSION_BUILD_BCD	VIM_VERSION_BUILD_BCD22,563
#define VIM_VERSION_DATE_ONLY	VIM_VERSION_DATE_ONLY23,600
#define VIM_VERSION_MAJOR_STR	VIM_VERSION_MAJOR_STR26,675
#define VIM_VERSION_MINOR_STR	VIM_VERSION_MINOR_STR27,735
#define VIM_VERSION_100	VIM_VERSION_10028,795
#define VIM_VERSION_BUILD_STR	VIM_VERSION_BUILD_STR30,870
# define VIM_VERSION_PATCHLEVEL	VIM_VERSION_PATCHLEVEL32,961
#define VIM_VERSION_PATCHLEVEL_STR	VIM_VERSION_PATCHLEVEL_STR34,1003
#define VIM_VERSION_RELEASE	VIM_VERSION_RELEASE36,1145
#define VIM_VERSION_NODOT VIM_VERSION_NODOT44,1448
#define VIM_VERSION_SHORT VIM_VERSION_SHORT45,1528
#define VIM_VERSION_MEDIUM VIM_VERSION_MEDIUM46,1606
#define VIM_VERSION_LONG_ONLY VIM_VERSION_LONG_ONLY47,1654
#define VIM_VERSION_LONG_HEAD VIM_VERSION_LONG_HEAD48,1724
#define VIM_VERSION_LONG VIM_VERSION_LONG49,1803
#define VIM_VERSION_LONG_DATE VIM_VERSION_LONG_DATE50,1859

src/vim9.h,9000
    ISN_EXEC,	    // execute Ex command line isn_arg.stringISN_EXEC15,351
    ISN_ECHO,	    // echo isn_arg.echo.echo_count items on top of stackISN_ECHO16,411
    ISN_EXECUTE,    // execute Ex commands isn_arg.number items on top of stackISN_EXECUTE17,483
    ISN_LOAD,	    // push local variable isn_arg.numberISN_LOAD20,593
    ISN_LOADV,	    // push v: variable isn_arg.numberISN_LOADV21,649
    ISN_LOADG,	    // push g: variable isn_arg.stringISN_LOADG22,703
    ISN_LOADS,	    // push s: variable isn_arg.loadstoreISN_LOADS23,757
    ISN_LOADSCRIPT, // push script-local variable isn_arg.script.ISN_LOADSCRIPT24,814
    ISN_LOADOPT,    // push option isn_arg.stringISN_LOADOPT25,880
    ISN_LOADENV,    // push environment variable isn_arg.stringISN_LOADENV26,930
    ISN_LOADREG,    // push register isn_arg.numberISN_LOADREG27,994
    ISN_STORE,	    // pop into local variable isn_arg.numberISN_STORE29,1047
    ISN_STOREV,	    // pop into v: variable isn_arg.numberISN_STOREV30,1108
    ISN_STOREG,	    // pop into global variable isn_arg.stringISN_STOREG31,1167
    ISN_STORES,	    // pop into scirpt variable isn_arg.loadstoreISN_STORES32,1230
    ISN_STORESCRIPT, // pop into scirpt variable isn_arg.scriptISN_STORESCRIPT33,1296
    ISN_STOREOPT,   // pop into option isn_arg.stringISN_STOREOPT34,1360
    ISN_STOREENV,    // pop into environment variable isn_arg.stringISN_STOREENV35,1414
    ISN_STOREREG,    // pop into register isn_arg.numberISN_STOREREG36,1483
    ISN_STORENR,    // store number into local variable isn_arg.storenr.stnr_idxISN_STORENR39,1613
    ISN_PUSHNR,		// push number isn_arg.numberISN_PUSHNR42,1712
    ISN_PUSHBOOL,	// push bool value isn_arg.numberISN_PUSHBOOL43,1759
    ISN_PUSHSPEC,	// push special value isn_arg.numberISN_PUSHSPEC44,1811
    ISN_PUSHF,		// push float isn_arg.fnumberISN_PUSHF45,1866
    ISN_PUSHS,		// push string isn_arg.stringISN_PUSHS46,1912
    ISN_PUSHBLOB,	// push blob isn_arg.blobISN_PUSHBLOB47,1958
    ISN_PUSHFUNC,	// push func isn_arg.stringISN_PUSHFUNC48,2002
    ISN_PUSHPARTIAL,	// push partial ?ISN_PUSHPARTIAL49,2048
    ISN_PUSHCHANNEL,	// push channel isn_arg.channelISN_PUSHCHANNEL50,2087
    ISN_PUSHJOB,	// push channel isn_arg.jobISN_PUSHJOB51,2140
    ISN_NEWLIST,	// push list from stack items, size is isn_arg.numberISN_NEWLIST52,2185
    ISN_NEWDICT,	// push dict from stack items, size is isn_arg.numberISN_NEWDICT53,2256
    ISN_BCALL,	    // call builtin function isn_arg.bfuncISN_BCALL56,2349
    ISN_DCALL,	    // call def function isn_arg.dfuncISN_DCALL57,2407
    ISN_UCALL,	    // call user function or funcref/partial isn_arg.ufuncISN_UCALL58,2461
    ISN_PCALL,	    // call partial, use isn_arg.pfuncISN_PCALL59,2535
    ISN_RETURN,	    // return, result is on top of stackISN_RETURN60,2589
    ISN_FUNCREF,    // push a function ref to dfunc isn_arg.numberISN_FUNCREF61,2646
    ISN_JUMP,	    // jump if condition is matched isn_arg.jumpISN_JUMP64,2743
    ISN_FOR,	    // get next item from a list, uses isn_arg.forloopISN_FOR67,2819
    ISN_TRY,	    // add entry to ec_trystack, uses isn_arg.tryISN_TRY69,2888
    ISN_THROW,	    // pop value of stack, store in v:exceptionISN_THROW70,2951
    ISN_PUSHEXC,    // push v:exceptionISN_PUSHEXC71,3014
    ISN_CATCH,	    // drop v:exceptionISN_CATCH72,3054
    ISN_ENDTRY,	    // take entry off from ec_trystackISN_ENDTRY73,3093
    ISN_ADDLIST,ISN_ADDLIST76,3182
    ISN_ADDBLOB,ISN_ADDBLOB77,3199
    ISN_OPNR,ISN_OPNR80,3286
    ISN_OPFLOAT,ISN_OPFLOAT81,3300
    ISN_OPANY,ISN_OPANY82,3317
    ISN_COMPAREBOOL,ISN_COMPAREBOOL85,3408
    ISN_COMPARESPECIAL,ISN_COMPARESPECIAL86,3429
    ISN_COMPARENR,ISN_COMPARENR87,3453
    ISN_COMPAREFLOAT,ISN_COMPAREFLOAT88,3472
    ISN_COMPARESTRING,ISN_COMPARESTRING89,3494
    ISN_COMPAREBLOB,ISN_COMPAREBLOB90,3517
    ISN_COMPARELIST,ISN_COMPARELIST91,3538
    ISN_COMPAREDICT,ISN_COMPAREDICT92,3559
    ISN_COMPAREFUNC,ISN_COMPAREFUNC93,3580
    ISN_COMPAREPARTIAL,ISN_COMPAREPARTIAL94,3601
    ISN_COMPAREANY,ISN_COMPAREANY95,3625
    ISN_CONCAT,ISN_CONCAT98,3675
    ISN_INDEX,	    // [expr] list indexISN_INDEX99,3691
    ISN_MEMBER,	    // dict.member using isn_arg.stringISN_MEMBER100,3731
    ISN_2BOOL,	    // convert value to bool, invert if isn_arg.number != 0ISN_2BOOL101,3787
    ISN_2STRING,    // convert value to string at isn_arg.number on stackISN_2STRING102,3862
    ISN_NEGATENR,   // apply "-" to numberISN_NEGATENR103,3936
    ISN_CHECKNR,    // check value can be used as a numberISN_CHECKNR105,3980
    ISN_CHECKTYPE,  // check value type is isn_arg.type.tc_typeISN_CHECKTYPE106,4039
    ISN_DROP	    // pop stack and discard valueISN_DROP108,4104
} isntype_T;isntype_T109,4152
    int	    cbf_idx;	    // index in "global_functions"cbf_idx114,4210
    int	    cbf_argcount;   // number of arguments on top of stackcbf_argcount115,4266
} cbfunc_T;cbfunc_T116,4333
    int	    cdf_idx;	    // index in "def_functions" for ISN_DCALLcdf_idx120,4389
    int	    cdf_argcount;   // number of arguments on top of stackcdf_argcount121,4456
} cdfunc_T;cdfunc_T122,4523
    int	    cpf_top;	    // when TRUE partial is above the argumentscpf_top126,4579
    int	    cpf_argcount;   // number of arguments on top of stackcpf_argcount127,4648
} cpfunc_T;cpfunc_T128,4715
    char_u  *cuf_name;cuf_name132,4785
    int	    cuf_argcount;   // number of arguments on top of stackcuf_argcount133,4808
} cufunc_T;cufunc_T134,4875
    JUMP_ALWAYS,JUMP_ALWAYS137,4903
    JUMP_IF_FALSE,		// pop and jump if falseJUMP_IF_FALSE138,4920
    JUMP_AND_KEEP_IF_TRUE,	// jump if top of stack is true, drop if notJUMP_AND_KEEP_IF_TRUE139,4965
    JUMP_AND_KEEP_IF_FALSE,	// jump if top of stack is false, drop if notJUMP_AND_KEEP_IF_FALSE140,5037
} jumpwhen_T;jumpwhen_T141,5111
    jumpwhen_T	jump_when;jump_when145,5168
    int		jump_where;	    // position to jump tojump_where146,5194
} jump_T;jump_T147,5242
    int	    for_idx;	    // loop variable indexfor_idx151,5294
    int	    for_end;	    // position to jump to after donefor_end152,5342
} forloop_T;forloop_T153,5401
    int	    try_catch;	    // position to jump to on throwtry_catch157,5456
    int	    try_finally;    // position to jump to for returntry_finally158,5515
} try_T;try_T159,5577
    int	    echo_with_white;    // :echo instead of :echonecho_with_white163,5629
    int	    echo_count;		// number of expressionsecho_count164,5688
} echo_T;echo_T165,5738
    exptype_T	op_type;op_type169,5810
    int		op_ic;	    // TRUE with '#', FALSE with '?', else MAYBEop_ic170,5833
} opexpr_T;opexpr_T171,5898
    vartype_T	ct_type;ct_type175,5958
    int		ct_off;	    // offset in stack, -1 is bottomct_off176,5981
} checktype_T;checktype_T177,6035
    int		stnr_idx;stnr_idx181,6096
    varnumber_T	stnr_val;stnr_val182,6115
} storenr_T;storenr_T183,6141
    char_u	*so_name;so_name187,6201
    int		so_flags;so_flags188,6222
} storeopt_T;storeopt_T189,6241
    char_u	*ls_name;	// variable namels_name193,6314
    int		ls_sid;		// script IDls_sid194,6352
} loadstore_T;loadstore_T195,6383
    int		script_sid;	// script IDscript_sid199,6467
    int		script_idx;	// index in sn_var_valsscript_idx200,6501
} script_T;script_T201,6546
    isntype_T	isn_type;isn_type207,6598
    int		isn_lnum;isn_lnum208,6622
	char_u		    *string;string210,6653
	varnumber_T	    number;number211,6675
	blob_T		    *blob;blob212,6700
	float_T		    fnumber;fnumber214,6738
	channel_T	    *channel;channel216,6768
	job_T		    *job;job217,6793
	partial_T	    *partial;partial218,6811
	jump_T		    jump;jump219,6836
	forloop_T	    forloop;forloop220,6855
	cbfunc_T	    bfunc;bfunc222,6896
	cdfunc_T	    dfunc;dfunc223,6917
	cpfunc_T	    pfunc;pfunc224,6938
	cufunc_T	    ufunc;ufunc225,6959
	echo_T		    echo;echo226,6980
	opexpr_T	    op;op227,6999
	checktype_T	    type;type228,7017
	storenr_T	    storenr;storenr229,7040
	storeopt_T	    storeopt;storeopt230,7064
	loadstore_T	    loadstore;loadstore231,7090
	script_T	    script;script232,7118
    } isn_arg;isn_arg233,7140
} isn_T;isn_T234,7155
struct dfunc_S {dfunc_S239,7242
    ufunc_T	*df_ufunc;	    // struct containing most stuffdf_ufunc240,7259
    int		df_idx;		    // index in def_functionsdf_idx241,7318
    int		df_deleted;	    // if TRUE function was deleteddf_deleted242,7366
    garray_T	df_def_args_isn;    // default argument instructionsdf_def_args_isn244,7424
    isn_T	*df_instr;	    // function body to be executeddf_instr245,7490
    int		df_instr_count;df_instr_count246,7547
    int		df_varcount;	    // number of local variablesdf_varcount248,7573
#define STACK_FRAME_SIZE STACK_FRAME_SIZE252,7694
garray_T def_functions = {0, 0, sizeof(dfunc_T), 50, NULL};def_functions259,7925

src/vim.h,63441
# define VIM__HVIM__H10,234
# define MSWINMSWIN17,450
# define HAVE_PATHDEFHAVE_PATHDEF28,668
#   define _XOPEN_SOURCE _XOPEN_SOURCE45,1323
#  undef HAVE_FCHDIRHAVE_FCHDIR57,1632
# define UINT32_TYPEDEF UINT32_TYPEDEF62,1796
#  define UINT32_TYPEDEF UINT32_TYPEDEF67,1936
#  define UINT32_TYPEDEF UINT32_TYPEDEF71,2090
#  define _TANDEM_SOURCE_TANDEM_SOURCE78,2242
# define ROOT_UID ROOT_UID81,2295
# define OLDXAWOLDXAW82,2319
#  define SA_ONSTACK_COMPATIBILITYSA_ONSTACK_COMPATIBILITY84,2386
# define ROOT_UID ROOT_UID87,2435
# define MACOS_XMACOS_X95,2621
# define UNIXUNIX99,2748
# define FEAT_GUI_MACFEAT_GUI_MAC100,2762
# define FEAT_GUI_ENABLED FEAT_GUI_ENABLED110,3016
#  define FEAT_GUIFEAT_GUI112,3133
#  define FEAT_RENDER_OPTIONSFEAT_RENDER_OPTIONS119,3250
# define VIM_SIZEOF_INT VIM_SIZEOF_INT128,3464
#   define VIM_SIZEOF_INT	VIM_SIZEOF_INT135,3655
#   define VIM_SIZEOF_INT	VIM_SIZEOF_INT137,3691
#  define VIM_SIZEOF_INT VIM_SIZEOF_INT142,3791
#  define FEAT_CLIPBOARDFEAT_CLIPBOARD157,4158
# define FEAT_X11FEAT_X11163,4303
#  undef FEAT_X11FEAT_X11170,4517
#  undef FEAT_GUI_X11FEAT_GUI_X11173,4564
#  undef FEAT_XCLIPBOARDFEAT_XCLIPBOARD176,4618
#  undef FEAT_GUI_MOTIFFEAT_GUI_MOTIF179,4674
#  undef FEAT_GUI_ATHENAFEAT_GUI_ATHENA182,4730
#  undef FEAT_GUI_GTKFEAT_GUI_GTK185,4784
#  undef FEAT_BEVAL_TIPFEAT_BEVAL_TIP188,4837
#  undef FEAT_XIMFEAT_XIM191,4886
#  undef FEAT_CLIENTSERVERFEAT_CLIENTSERVER194,4938
# define MACOS_CONVERTMACOS_CONVERT200,5061
# define VIMPACKAGE	VIMPACKAGE205,5176
# define __ARGS(__ARGS229,5518
#  define UNUSED UNUSED241,5904
# define UNUSEDUNUSED244,5959
# define SUN_SYSTEMSUN_SYSTEM249,6066
#  define MAXPATHL MAXPATHL297,7177
#  define MAXPATHL MAXPATHL299,7215
# define PATH_ESC_CHARS PATH_ESC_CHARS303,7283
#  define PATH_ESC_CHARS PATH_ESC_CHARS307,7413
#  define SHELL_ESC_CHARS SHELL_ESC_CHARS308,7471
#  define PATH_ESC_CHARS PATH_ESC_CHARS310,7538
#  define SHELL_ESC_CHARS SHELL_ESC_CHARS311,7599
#define NUMBUFLEN NUMBUFLEN316,7754
#define STR2NR_BIN STR2NR_BIN319,7802
#define STR2NR_OCT STR2NR_OCT320,7826
#define STR2NR_HEX STR2NR_HEX321,7850
#define STR2NR_ALL STR2NR_ALL322,7874
#define STR2NR_NO_OCT STR2NR_NO_OCT323,7932
#define STR2NR_FORCE STR2NR_FORCE325,7981
#define STR2NR_QUOTE STR2NR_QUOTE327,8048
typedef unsigned char	char_u;char_u333,8248
typedef unsigned short	short_u;short_u334,8278
typedef unsigned int	int_u;int_u335,8310
typedef unsigned __int64	long_u;long_u341,8537
typedef		 __int64	long_i;long_i342,8570
# define SCANF_HEX_LONG_U SCANF_HEX_LONG_U343,8596
# define SCANF_DECIMAL_LONG_U SCANF_DECIMAL_LONG_U344,8634
# define PRINTF_HEX_LONG_U PRINTF_HEX_LONG_U345,8672
#  define __w64__w64352,9066
typedef unsigned long __w64	long_u;long_u354,9090
typedef		 long __w64     long_i;long_i355,9126
# define SCANF_HEX_LONG_U SCANF_HEX_LONG_U356,9159
# define SCANF_DECIMAL_LONG_U SCANF_DECIMAL_LONG_U357,9197
# define PRINTF_HEX_LONG_U PRINTF_HEX_LONG_U358,9235
#define PRINTF_DECIMAL_LONG_U PRINTF_DECIMAL_LONG_U360,9282
# define LONG_LONG_OFF_TLONG_LONG_OFF_T369,9696
typedef __int64 off_T;off_T379,10076
#  define vim_lseek vim_lseek381,10119
#  define vim_fseek vim_fseek382,10147
#  define vim_ftell vim_ftell383,10176
#  define vim_lseek vim_lseek385,10212
#  define vim_fseek vim_fseek386,10242
#  define vim_ftell vim_ftell387,10272
typedef long off_T;off_T391,10330
typedef off_t off_T;off_T393,10357
#  define vim_lseek vim_lseek396,10406
#  define vim_ftell vim_ftell397,10432
#  define vim_fseek vim_fseek398,10459
#  define vim_lseek vim_lseek400,10493
#  define vim_ftell vim_ftell401,10519
#  define vim_fseek(vim_fseek402,10545
typedef char_u schar_T;schar_T409,10674
typedef unsigned short sattr_T;sattr_T410,10698
#define MAX_TYPENR MAX_TYPENR411,10730
typedef unsigned int u8char_T;	// int is 32 bits or moreu8char_T417,10886
#  define HAVE_SELECTHAVE_SELECT490,12374
#  define FEAT_MBYTE_IMEFEAT_MBYTE_IME505,12653
#  define FEAT_GETTEXTFEAT_GETTEXT514,12817
#  define _(_536,13694
#  define NGETTEXT(NGETTEXT537,13745
#  define N_(N_538,13830
#  define bindtextdomain(bindtextdomain539,13848
#  define bind_textdomain_codeset(bind_textdomain_codeset540,13933
#   define HAVE_BIND_TEXTDOMAIN_CODESET HAVE_BIND_TEXTDOMAIN_CODESET542,14089
#  define textdomain(textdomain544,14140
#  define libintl_wputenv(libintl_wputenv545,14203
#  define _(_548,14304
#  define NGETTEXT(NGETTEXT549,14340
#   define N_(N_551,14416
#   define N_(N_553,14457
# define _(_557,14499
# define NGETTEXT(NGETTEXT558,14527
# define N_(N_559,14597
#  undef bindtextdomainbindtextdomain561,14637
# define bindtextdomain(bindtextdomain563,14669
#  undef bind_textdomain_codesetbind_textdomain_codeset565,14740
# define bind_textdomain_codeset(bind_textdomain_codeset567,14781
#  undef textdomaintextdomain569,14848
# define textdomain(textdomain571,14876
#define VALID_NO_UPDATE	VALID_NO_UPDATE578,15001
#define VALID	VALID580,15094
#define INVERTED	INVERTED582,15179
#define INVERTED_ALL	INVERTED_ALL583,15241
#define REDRAW_TOP	REDRAW_TOP584,15300
#define SOME_VALID	SOME_VALID585,15365
#define NOT_VALID	NOT_VALID586,15422
#define CLEAR	CLEAR587,15477
#define SLF_RIGHTLEFT	SLF_RIGHTLEFT590,15555
#define SLF_POPUP	SLF_POPUP591,15579
#define MB_FILLER_CHAR MB_FILLER_CHAR593,15600
#define VALID_WROW	VALID_WROW615,16370
#define VALID_WCOL	VALID_WCOL616,16426
#define VALID_VIRTCOL	VALID_VIRTCOL617,16482
#define VALID_CHEIGHT	VALID_CHEIGHT618,16542
#define VALID_CROW	VALID_CROW619,16612
#define VALID_BOTLINE	VALID_BOTLINE620,16660
#define VALID_BOTLINE_AP VALID_BOTLINE_AP621,16726
#define VALID_TOPLINE	VALID_TOPLINE622,16784
#define POPF_IS_POPUP	POPF_IS_POPUP625,16885
#define POPF_HIDDEN	POPF_HIDDEN626,16938
#define POPF_CURSORLINE	POPF_CURSORLINE627,16989
#define POPF_ON_CMDLINE	POPF_ON_CMDLINE628,17061
#define POPF_DRAG	POPF_DRAG629,17121
#define POPF_RESIZE	POPF_RESIZE630,17178
#define POPF_MAPPING	POPF_MAPPING631,17239
#define POPF_INFO	POPF_INFO632,17281
#define POPF_INFO_MENU	POPF_INFO_MENU633,17335
#define POPF_POSINVERT	POPF_POSINVERT634,17400
#define POPUP_HANDLED_1	POPUP_HANDLED_1637,17500
#define POPUP_HANDLED_2	POPUP_HANDLED_2638,17564
#define POPUP_HANDLED_3	POPUP_HANDLED_3639,17629
#define POPUP_HANDLED_4	POPUP_HANDLED_4640,17701
#define POPUP_HANDLED_5	POPUP_HANDLED_5641,17772
#define HL_NORMAL	HL_NORMAL647,17945
#define HL_INVERSE	HL_INVERSE648,17969
#define HL_BOLD	HL_BOLD649,17994
#define HL_ITALIC	HL_ITALIC650,18017
#define HL_UNDERLINE	HL_UNDERLINE651,18041
#define HL_UNDERCURL	HL_UNDERCURL652,18068
#define HL_STANDOUT	HL_STANDOUT653,18095
#define HL_NOCOMBINE	HL_NOCOMBINE654,18121
#define HL_STRIKETHROUGH	HL_STRIKETHROUGH655,18148
#define HL_ALL	HL_ALL656,18178
#define MSG_HIST	MSG_HIST659,18255
#define NORMAL	NORMAL669,18571
#define VISUAL	VISUAL670,18625
#define OP_PENDING	OP_PENDING671,18684
#define CMDLINE	CMDLINE673,18774
#define INSERT	INSERT674,18820
#define LANGMAP	LANGMAP675,18856
#define REPLACE_FLAG	REPLACE_FLAG678,18947
#define REPLACE	REPLACE679,18994
#define VREPLACE_FLAG	VREPLACE_FLAG680,19035
#define VREPLACE	VREPLACE681,19091
#define LREPLACE	LREPLACE682,19148
#define NORMAL_BUSY	NORMAL_BUSY684,19191
#define HITRETURN	HITRETURN685,19264
#define ASKMORE	ASKMORE686,19332
#define SETWSIZE	SETWSIZE687,19386
#define ABBREV	ABBREV688,19436
#define EXTERNCMD	EXTERNCMD689,19493
#define SHOWMATCH	SHOWMATCH690,19550
#define CONFIRM	CONFIRM691,19608
#define SELECTMODE	SELECTMODE692,19652
#define TERMINAL TERMINAL693,19712
#define MODE_ALL	MODE_ALL694,19761
#define MAP_ALL_MODES	MAP_ALL_MODES697,19820
#define FORWARD	FORWARD700,19888
#define BACKWARD	BACKWARD701,19908
#define FORWARD_FILE	FORWARD_FILE702,19931
#define BACKWARD_FILE	BACKWARD_FILE703,19955
# define OK	OK708,20103
#define FAIL	FAIL710,20126
#define NOTDONE	NOTDONE711,20143
#define BF_RECOVERED	BF_RECOVERED714,20217
#define BF_CHECK_RO	BF_CHECK_RO715,20272
#define BF_NEVERLOADED	BF_NEVERLOADED718,20404
#define BF_NOTEDITED	BF_NOTEDITED720,20518
#define BF_NEW	BF_NEW723,20647
#define BF_NEW_W	BF_NEW_W724,20710
#define BF_READERR	BF_READERR725,20770
#define BF_DUMMY	BF_DUMMY726,20831
#define BF_PRESERVED	BF_PRESERVED727,20891
#define BF_SYN_SET	BF_SYN_SET728,20942
#define BF_NO_SEA	BF_NO_SEA729,20994
#define BF_WRITE_MASK	BF_WRITE_MASK732,21118
#define EXPAND_UNSUCCESSFUL	EXPAND_UNSUCCESSFUL737,21245
#define EXPAND_OK	EXPAND_OK738,21278
#define EXPAND_NOTHING	EXPAND_NOTHING739,21302
#define EXPAND_COMMANDS	EXPAND_COMMANDS740,21328
#define EXPAND_FILES	EXPAND_FILES741,21355
#define EXPAND_DIRECTORIES	EXPAND_DIRECTORIES742,21379
#define EXPAND_SETTINGS	EXPAND_SETTINGS743,21408
#define EXPAND_BOOL_SETTINGS	EXPAND_BOOL_SETTINGS744,21435
#define EXPAND_TAGS	EXPAND_TAGS745,21466
#define EXPAND_OLD_SETTING	EXPAND_OLD_SETTING746,21489
#define EXPAND_HELP	EXPAND_HELP747,21518
#define EXPAND_BUFFERS	EXPAND_BUFFERS748,21541
#define EXPAND_EVENTS	EXPAND_EVENTS749,21567
#define EXPAND_MENUS	EXPAND_MENUS750,21593
#define EXPAND_SYNTAX	EXPAND_SYNTAX751,21618
#define EXPAND_HIGHLIGHT	EXPAND_HIGHLIGHT752,21644
#define EXPAND_AUGROUP	EXPAND_AUGROUP753,21672
#define EXPAND_USER_VARS	EXPAND_USER_VARS754,21699
#define EXPAND_MAPPINGS	EXPAND_MAPPINGS755,21727
#define EXPAND_TAGS_LISTFILES	EXPAND_TAGS_LISTFILES756,21755
#define EXPAND_FUNCTIONS	EXPAND_FUNCTIONS757,21788
#define EXPAND_USER_FUNC	EXPAND_USER_FUNC758,21816
#define EXPAND_EXPRESSION	EXPAND_EXPRESSION759,21844
#define EXPAND_MENUNAMES	EXPAND_MENUNAMES760,21873
#define EXPAND_USER_COMMANDS	EXPAND_USER_COMMANDS761,21901
#define EXPAND_USER_CMD_FLAGS	EXPAND_USER_CMD_FLAGS762,21933
#define EXPAND_USER_NARGS	EXPAND_USER_NARGS763,21966
#define EXPAND_USER_COMPLETE	EXPAND_USER_COMPLETE764,21995
#define EXPAND_ENV_VARS	EXPAND_ENV_VARS765,22027
#define EXPAND_LANGUAGE	EXPAND_LANGUAGE766,22055
#define EXPAND_COLORS	EXPAND_COLORS767,22083
#define EXPAND_COMPILER	EXPAND_COMPILER768,22109
#define EXPAND_USER_DEFINED	EXPAND_USER_DEFINED769,22137
#define EXPAND_USER_LIST	EXPAND_USER_LIST770,22168
#define EXPAND_SHELLCMD	EXPAND_SHELLCMD771,22196
#define EXPAND_CSCOPE	EXPAND_CSCOPE772,22224
#define EXPAND_SIGN	EXPAND_SIGN773,22250
#define EXPAND_PROFILE	EXPAND_PROFILE774,22274
#define EXPAND_BEHAVE	EXPAND_BEHAVE775,22301
#define EXPAND_FILETYPE	EXPAND_FILETYPE776,22327
#define EXPAND_FILES_IN_PATH	EXPAND_FILES_IN_PATH777,22355
#define EXPAND_OWNSYNTAX	EXPAND_OWNSYNTAX778,22387
#define EXPAND_LOCALES	EXPAND_LOCALES779,22415
#define EXPAND_HISTORY	EXPAND_HISTORY780,22442
#define EXPAND_USER	EXPAND_USER781,22469
#define EXPAND_SYNTIME	EXPAND_SYNTIME782,22493
#define EXPAND_USER_ADDR_TYPE	EXPAND_USER_ADDR_TYPE783,22520
#define EXPAND_PACKADD	EXPAND_PACKADD784,22553
#define EXPAND_MESSAGES	EXPAND_MESSAGES785,22580
#define EXPAND_MAPCLEAR	EXPAND_MAPCLEAR786,22608
#define EXPAND_ARGLIST	EXPAND_ARGLIST787,22636
#define EXPAND_DIFF_BUFFERS	EXPAND_DIFF_BUFFERS788,22663
#define EXMODE_NORMAL	EXMODE_NORMAL791,22740
#define EXMODE_VIM	EXMODE_VIM792,22765
#define WILD_FREE	WILD_FREE795,22860
#define WILD_EXPAND_FREE	WILD_EXPAND_FREE796,22881
#define WILD_EXPAND_KEEP	WILD_EXPAND_KEEP797,22908
#define WILD_NEXT	WILD_NEXT798,22935
#define WILD_PREV	WILD_PREV799,22956
#define WILD_ALL	WILD_ALL800,22977
#define WILD_LONGEST	WILD_LONGEST801,22997
#define WILD_ALL_KEEP	WILD_ALL_KEEP802,23021
#define WILD_LIST_NOTFOUND	WILD_LIST_NOTFOUND804,23047
#define WILD_HOME_REPLACE	WILD_HOME_REPLACE805,23083
#define WILD_USE_NL	WILD_USE_NL806,23118
#define WILD_NO_BEEP	WILD_NO_BEEP807,23148
#define WILD_ADD_SLASH	WILD_ADD_SLASH808,23179
#define WILD_KEEP_ALL	WILD_KEEP_ALL809,23212
#define WILD_SILENT	WILD_SILENT810,23244
#define WILD_ESCAPE	WILD_ESCAPE811,23274
#define WILD_ICASE	WILD_ICASE812,23304
#define WILD_ALLLINKS	WILD_ALLLINKS813,23334
#define WILD_IGNORE_COMPLETESLASH WILD_IGNORE_COMPLETESLASH814,23367
#define WILD_NOERROR	WILD_NOERROR815,23409
#define WILD_BUFLASTUSED	WILD_BUFLASTUSED816,23461
#define BUF_DIFF_FILTER	BUF_DIFF_FILTER817,23497
#define EW_DIR	EW_DIR820,23566
#define EW_FILE	EW_FILE821,23614
#define EW_NOTFOUND	EW_NOTFOUND822,23658
#define EW_ADDSLASH	EW_ADDSLASH823,23710
#define EW_KEEPALL	EW_KEEPALL824,23769
#define EW_SILENT	EW_SILENT825,23813
#define EW_EXEC	EW_EXEC826,23875
#define EW_PATH	EW_PATH827,23917
#define EW_ICASE	EW_ICASE828,23963
#define EW_NOERROR	EW_NOERROR829,24001
#define EW_NOTWILD	EW_NOTWILD830,24053
#define EW_KEEPDOLLAR	EW_KEEPDOLLAR831,24119
#define EW_ALLLINKS	EW_ALLLINKS834,24338
#define EW_SHELLCMD	EW_SHELLCMD835,24409
#define EW_DODOT	EW_DODOT837,24515
#define EW_EMPTYOK	EW_EMPTYOK838,24573
#define EW_NOTENV	EW_NOTENV839,24629
#define FINDFILE_FILE	FINDFILE_FILE842,24733
#define FINDFILE_DIR	FINDFILE_DIR843,24771
#define FINDFILE_BOTH	FINDFILE_BOTH844,24814
#define W_ENDCOL(W_ENDCOL846,24864
# define W_WINROW(W_WINROW848,24931
# define W_WINROW(W_WINROW850,24996
#define FIND_ANY	FIND_ANY854,25117
#define FIND_DEFINE	FIND_DEFINE855,25136
#define CHECK_PATH	CHECK_PATH856,25158
#define ACTION_SHOW	ACTION_SHOW858,25180
#define ACTION_GOTO	ACTION_GOTO859,25202
#define ACTION_SPLIT	ACTION_SPLIT860,25224
#define ACTION_SHOW_ALL	ACTION_SHOW_ALL861,25247
#define ACTION_EXPAND	ACTION_EXPAND862,25273
# define SST_MIN_ENTRIES SST_MIN_ENTRIES865,25317
# define SST_MAX_ENTRIES SST_MAX_ENTRIES866,25384
# define SST_FIX_STATES	SST_FIX_STATES867,25452
# define SST_DIST	SST_DIST868,25503
# define SST_INVALID	SST_INVALID869,25560
# define HL_CONTAINED	HL_CONTAINED871,25628
# define HL_TRANSP	HL_TRANSP872,25679
# define HL_ONELINE	HL_ONELINE873,25726
# define HL_HAS_EOL	HL_HAS_EOL874,25781
# define HL_SYNC_HERE	HL_SYNC_HERE875,25841
# define HL_SYNC_THERE	HL_SYNC_THERE876,25913
# define HL_MATCH	HL_MATCH877,25986
# define HL_SKIPNL	HL_SKIPNL878,26044
# define HL_SKIPWHITE	HL_SKIPWHITE879,26099
# define HL_SKIPEMPTY	HL_SKIPEMPTY880,26161
# define HL_KEEPEND	HL_KEEPEND881,26223
# define HL_EXCLUDENL	HL_EXCLUDENL882,26274
# define HL_DISPLAY	HL_DISPLAY883,26327
# define HL_FOLD	HL_FOLD884,26395
# define HL_EXTEND	HL_EXTEND885,26434
# define HL_MATCHCONT	HL_MATCHCONT886,26480
# define HL_TRANS_CONT	HL_TRANS_CONT887,26547
# define HL_CONCEAL	HL_CONCEAL888,26619
# define HL_CONCEALENDS	HL_CONCEALENDS889,26667
#define SEARCH_REV SEARCH_REV893,26790
#define SEARCH_ECHO SEARCH_ECHO894,26852
#define SEARCH_MSG SEARCH_MSG895,26926
#define SEARCH_NFMSG SEARCH_NFMSG896,26992
#define SEARCH_OPT SEARCH_OPT897,27058
#define SEARCH_HIS SEARCH_HIS898,27114
#define SEARCH_END SEARCH_END899,27175
#define SEARCH_NOOF SEARCH_NOOF900,27233
#define SEARCH_START SEARCH_START901,27293
#define SEARCH_MARK SEARCH_MARK902,27356
#define SEARCH_KEEP SEARCH_KEEP903,27413
#define SEARCH_PEEK SEARCH_PEEK904,27473
#define SEARCH_COL SEARCH_COL905,27539
#define FIND_IDENT	FIND_IDENT908,27653
#define FIND_STRING	FIND_STRING909,27700
#define FIND_EVAL	FIND_EVAL910,27748
#define FIND_NOERROR	FIND_NOERROR911,27798
#define FNAME_MESS	FNAME_MESS914,27887
#define FNAME_EXP	FNAME_EXP915,27930
#define FNAME_HYP	FNAME_HYP916,27968
#define FNAME_INCL	FNAME_INCL917,28016
#define FNAME_REL	FNAME_REL918,28060
#define FNAME_UNESC	FNAME_UNESC920,28173
#define GETF_SETMARK	GETF_SETMARK923,28269
#define GETF_ALT	GETF_ALT924,28324
#define GETF_SWITCH	GETF_SWITCH925,28389
#define GETFILE_ERROR	GETFILE_ERROR928,28490
#define GETFILE_NOT_WRITTEN GETFILE_NOT_WRITTEN929,28534
#define GETFILE_SAME_FILE GETFILE_SAME_FILE930,28587
#define GETFILE_OPEN_OTHER GETFILE_OPEN_OTHER931,28639
#define GETFILE_UNUSED	GETFILE_UNUSED932,28701
#define GETFILE_SUCCESS(GETFILE_SUCCESS933,28730
#define BLN_CURBUF	BLN_CURBUF936,28804
#define BLN_LISTED	BLN_LISTED937,28861
#define BLN_DUMMY	BLN_DUMMY938,28915
#define BLN_NEW	BLN_NEW939,28962
#define BLN_NOOPT	BLN_NOOPT940,29004
#define BLN_DUMMY_OK	BLN_DUMMY_OK941,29066
#define BLN_REUSE	BLN_REUSE942,29128
#define KEY_OPEN_FORW	KEY_OPEN_FORW945,29213
#define KEY_OPEN_BACK	KEY_OPEN_BACK946,29241
#define KEY_COMPLETE	KEY_COMPLETE947,29269
#define REMAP_YES	REMAP_YES951,29423
#define REMAP_NONE	REMAP_NONE952,29462
#define REMAP_SCRIPT	REMAP_SCRIPT953,29500
#define REMAP_SKIP	REMAP_SKIP954,29560
#define SHELL_FILTER	SHELL_FILTER957,29661
#define SHELL_EXPAND	SHELL_EXPAND958,29702
#define SHELL_COOKED	SHELL_COOKED959,29748
#define SHELL_DOOUT	SHELL_DOOUT960,29798
#define SHELL_SILENT	SHELL_SILENT961,29842
#define SHELL_READ	SHELL_READ962,29907
#define SHELL_WRITE	SHELL_WRITE963,29966
#define NODE_NORMAL	NODE_NORMAL966,30054
#define NODE_WRITABLE	NODE_WRITABLE967,30121
#define NODE_OTHER	NODE_OTHER969,30218
#define READ_NEW	READ_NEW972,30314
#define READ_FILTER	READ_FILTER973,30369
#define READ_STDIN	READ_STDIN974,30416
#define READ_BUFFER	READ_BUFFER975,30459
#define READ_DUMMY	READ_DUMMY976,30523
#define READ_KEEP_UNDO	READ_KEEP_UNDO977,30578
#define READ_FIFO	READ_FIFO978,30624
#define INDENT_SET	INDENT_SET981,30706
#define INDENT_INC	INDENT_INC982,30741
#define INDENT_DEC	INDENT_DEC983,30781
#define FM_BACKWARD	FM_BACKWARD986,30872
#define FM_FORWARD	FM_FORWARD987,30917
#define FM_BLOCKSTOP	FM_BLOCKSTOP988,30960
#define FM_SKIPCOMM	FM_SKIPCOMM989,31016
#define DOBUF_GOTO	DOBUF_GOTO992,31124
#define DOBUF_SPLIT	DOBUF_SPLIT993,31171
#define DOBUF_UNLOAD	DOBUF_UNLOAD994,31236
#define DOBUF_DEL	DOBUF_DEL995,31289
#define DOBUF_WIPE	DOBUF_WIPE996,31352
#define DOBUF_WIPE_REUSE DOBUF_WIPE_REUSE997,31410
#define DOBUF_CURRENT	DOBUF_CURRENT1000,31527
#define DOBUF_FIRST	DOBUF_FIRST1001,31589
#define DOBUF_LAST	DOBUF_LAST1002,31647
#define DOBUF_MOD	DOBUF_MOD1003,31703
#define RE_SEARCH	RE_SEARCH1007,31884
#define RE_SUBST	RE_SUBST1008,31943
#define RE_BOTH	RE_BOTH1009,32000
#define RE_LAST	RE_LAST1010,32048
#define RE_MAGIC	RE_MAGIC1013,32148
#define RE_STRING	RE_STRING1014,32185
#define RE_STRICT	RE_STRICT1015,32247
#define RE_AUTO	RE_AUTO1016,32298
# define REX_SET	REX_SET1020,32397
# define REX_USE	REX_USE1021,32439
# define REX_ALL	REX_ALL1022,32482
#define FPC_SAME	FPC_SAME1027,32631
#define FPC_DIFF	FPC_DIFF1028,32687
#define FPC_NOTX	FPC_NOTX1029,32745
#define FPC_DIFFX	FPC_DIFFX1030,32785
#define FPC_SAMEX	FPC_SAMEX1031,32835
#define ECMD_HIDE	ECMD_HIDE1034,32924
#define ECMD_SET_HELP	ECMD_SET_HELP1035,32980
#define ECMD_OLDBUF	ECMD_OLDBUF1037,33069
#define ECMD_FORCEIT	ECMD_FORCEIT1038,33130
#define ECMD_ADDBUF	ECMD_ADDBUF1039,33180
#define ECMD_LASTL	ECMD_LASTL1042,33279
#define ECMD_LAST	ECMD_LAST1043,33346
#define ECMD_ONE	ECMD_ONE1044,33411
#define DOCMD_VERBOSE	DOCMD_VERBOSE1047,33485
#define DOCMD_NOWAIT	DOCMD_NOWAIT1048,33549
#define DOCMD_REPEAT	DOCMD_REPEAT1049,33615
#define DOCMD_KEYTYPED	DOCMD_KEYTYPED1050,33686
#define DOCMD_EXCRESET	DOCMD_EXCRESET1051,33738
#define DOCMD_KEEPLINE DOCMD_KEEPLINE1052,33813
#define BL_WHITE	BL_WHITE1055,33910
#define BL_SOL	BL_SOL1056,33970
#define BL_FIX	BL_FIX1057,34008
#define MFS_ALL	MFS_ALL1060,34081
#define MFS_STOP	MFS_STOP1061,34142
#define MFS_FLUSH	MFS_FLUSH1062,34207
#define MFS_ZERO	MFS_ZERO1063,34251
#define BCO_ENTER	BCO_ENTER1066,34325
#define BCO_ALWAYS	BCO_ALWAYS1067,34374
#define BCO_NOHELP	BCO_NOHELP1068,34422
#define PUT_FIXINDENT	PUT_FIXINDENT1071,34506
#define PUT_CURSEND	PUT_CURSEND1072,34555
#define PUT_CURSLINE	PUT_CURSLINE1073,34615
#define PUT_LINE	PUT_LINE1074,34679
#define PUT_LINE_SPLIT	PUT_LINE_SPLIT1075,34723
#define PUT_LINE_FORWARD PUT_LINE_FORWARD1076,34785
#define SIN_CHANGED	SIN_CHANGED1079,34883
#define SIN_INSERT	SIN_INSERT1080,34947
#define SIN_UNDO	SIN_UNDO1081,35006
#define INSCHAR_FORMAT	INSCHAR_FORMAT1084,35093
#define INSCHAR_DO_COM	INSCHAR_DO_COM1085,35138
#define INSCHAR_CTRLV	INSCHAR_CTRLV1086,35182
#define INSCHAR_NO_FEX	INSCHAR_NO_FEX1087,35238
#define INSCHAR_COM_LIST INSCHAR_COM_LIST1088,35289
#define OPENLINE_DELSPACES OPENLINE_DELSPACES1091,35388
#define OPENLINE_DO_COM	OPENLINE_DO_COM1092,35448
#define OPENLINE_KEEPTRAIL OPENLINE_KEEPTRAIL1093,35497
#define OPENLINE_MARKFIX OPENLINE_MARKFIX1094,35551
#define OPENLINE_COM_LIST OPENLINE_COM_LIST1095,35603
#define HIST_CMD	HIST_CMD1098,35713
#define HIST_SEARCH	HIST_SEARCH1099,35750
#define HIST_EXPR	HIST_EXPR1100,35791
#define HIST_INPUT	HIST_INPUT1101,35853
#define HIST_DEBUG	HIST_DEBUG1102,35891
#define HIST_COUNT	HIST_COUNT1103,35930
#define BARTYPE_VERSION BARTYPE_VERSION1106,36039
#define BARTYPE_HISTORY BARTYPE_HISTORY1107,36065
#define BARTYPE_REGISTER BARTYPE_REGISTER1108,36091
#define BARTYPE_MARK BARTYPE_MARK1109,36118
#define VIMINFO_VERSION VIMINFO_VERSION1111,36142
#define VIMINFO_VERSION_WITH_HISTORY VIMINFO_VERSION_WITH_HISTORY1112,36168
#define VIMINFO_VERSION_WITH_REGISTERS VIMINFO_VERSION_WITH_REGISTERS1113,36207
#define VIMINFO_VERSION_WITH_MARKS VIMINFO_VERSION_WITH_MARKS1114,36248
#define DT_TAG	DT_TAG1119,36317
#define DT_POP	DT_POP1120,36379
#define DT_NEXT	DT_NEXT1121,36423
#define DT_PREV	DT_PREV1122,36476
#define DT_FIRST	DT_FIRST1123,36533
#define DT_LAST	DT_LAST1124,36587
#define DT_SELECT	DT_SELECT1125,36641
#define DT_HELP	DT_HELP1126,36692
#define DT_JUMP	DT_JUMP1127,36744
#define DT_CSCOPE	DT_CSCOPE1128,36805
#define DT_LTAG	DT_LTAG1129,36862
#define DT_FREE	DT_FREE1130,36909
#define TAG_HELP	TAG_HELP1135,36986
#define TAG_NAMES	TAG_NAMES1136,37034
#define	TAG_REGEXP	TAG_REGEXP1137,37081
#define	TAG_NOIC	TAG_NOIC1138,37131
# define TAG_CSCOPE	TAG_CSCOPE1140,37197
#define TAG_VERBOSE	TAG_VERBOSE1142,37241
#define TAG_INS_COMP	TAG_INS_COMP1143,37285
#define TAG_KEEP_LANG	TAG_KEEP_LANG1144,37346
#define TAG_NO_TAGFUNC	TAG_NO_TAGFUNC1145,37397
#define TAG_MANY	TAG_MANY1147,37449
#define VIM_GENERIC	VIM_GENERIC1153,37602
#define VIM_ERROR	VIM_ERROR1154,37624
#define VIM_WARNING	VIM_WARNING1155,37644
#define VIM_INFO	VIM_INFO1156,37666
#define VIM_QUESTION	VIM_QUESTION1157,37685
#define VIM_LAST_TYPE	VIM_LAST_TYPE1158,37708
#define VIM_YES	VIM_YES1163,37812
#define VIM_NO	VIM_NO1164,37831
#define VIM_CANCEL	VIM_CANCEL1165,37849
#define VIM_ALL	VIM_ALL1166,37870
#define VIM_DISCARDALL VIM_DISCARDALL1167,37889
#define WSP_ROOM	WSP_ROOM1172,37952
#define WSP_VERT	WSP_VERT1173,37994
#define WSP_TOP	WSP_TOP1174,38033
#define WSP_BOT	WSP_BOT1175,38083
#define WSP_HELP	WSP_HELP1176,38137
#define WSP_BELOW	WSP_BELOW1177,38185
#define WSP_ABOVE	WSP_ABOVE1178,38236
#define WSP_NEWLOC	WSP_NEWLOC1179,38286
#define RESIZE_VERT	RESIZE_VERT1184,38382
#define RESIZE_HOR	RESIZE_HOR1185,38425
#define RESIZE_BOTH	RESIZE_BOTH1186,38469
#define CCGD_AW	CCGD_AW1191,38558
#define CCGD_MULTWIN	CCGD_MULTWIN1192,38615
#define CCGD_FORCEIT	CCGD_FORCEIT1193,38682
#define CCGD_ALLBUF	CCGD_ALLBUF1194,38715
#define CCGD_EXCMD	CCGD_EXCMD1195,38762
#define OPT_FREE	OPT_FREE1202,38968
#define OPT_GLOBAL	OPT_GLOBAL1203,39028
#define OPT_LOCAL	OPT_LOCAL1204,39072
#define OPT_MODELINE	OPT_MODELINE1205,39114
#define OPT_WINONLY	OPT_WINONLY1206,39162
#define OPT_NOWIN	OPT_NOWIN1207,39220
#define OPT_ONECOLUMN	OPT_ONECOLUMN1208,39277
#define DLG_BUTTON_SEP	DLG_BUTTON_SEP1211,39380
#define DLG_HOTKEY_CHAR	DLG_HOTKEY_CHAR1212,39408
#define NO_SCREEN	NO_SCREEN1215,39462
#define NO_BUFFERS	NO_BUFFERS1216,39508
#define SEA_NONE	SEA_NONE1220,39666
#define SEA_DIALOG	SEA_DIALOG1221,39705
#define SEA_QUIT	SEA_QUIT1222,39754
#define SEA_RECOVER	SEA_RECOVER1223,39798
#define MIN_SWAP_PAGE_SIZE MIN_SWAP_PAGE_SIZE1231,40069
#define MAX_SWAP_PAGE_SIZE MAX_SWAP_PAGE_SIZE1232,40101
#define SID_MODELINE	SID_MODELINE1235,40178
#define SID_CMDARG	SID_CMDARG1236,40227
#define SID_CARG	SID_CARG1237,40273
#define SID_ENV	SID_ENV1238,40314
#define SID_ERROR	SID_ERROR1239,40371
#define SID_NONE	SID_NONE1240,40432
enum auto_eventauto_event1245,40510
    EVENT_BUFADD = 0,		// after adding a buffer to the buffer listEVENT_BUFADD1247,40528
    EVENT_BUFDELETE,		// deleting a buffer from the buffer listEVENT_BUFDELETE1248,40595
    EVENT_BUFENTER,		// after entering a bufferEVENT_BUFENTER1249,40659
    EVENT_BUFFILEPOST,		// after renaming a bufferEVENT_BUFFILEPOST1250,40707
    EVENT_BUFFILEPRE,		// before renaming a bufferEVENT_BUFFILEPRE1251,40758
    EVENT_BUFHIDDEN,		// just after buffer becomes hiddenEVENT_BUFHIDDEN1252,40809
    EVENT_BUFLEAVE,		// before leaving a bufferEVENT_BUFLEAVE1253,40867
    EVENT_BUFNEW,		// after creating any bufferEVENT_BUFNEW1254,40915
    EVENT_BUFNEWFILE,		// when creating a buffer for a new fileEVENT_BUFNEWFILE1255,40963
    EVENT_BUFREADCMD,		// read buffer using commandEVENT_BUFREADCMD1256,41027
    EVENT_BUFREADPOST,		// after reading a bufferEVENT_BUFREADPOST1257,41079
    EVENT_BUFREADPRE,		// before reading a bufferEVENT_BUFREADPRE1258,41129
    EVENT_BUFUNLOAD,		// just before unloading a bufferEVENT_BUFUNLOAD1259,41179
    EVENT_BUFWINENTER,		// after showing a buffer in a windowEVENT_BUFWINENTER1260,41235
    EVENT_BUFWINLEAVE,		// just after buffer removed from windowEVENT_BUFWINLEAVE1261,41297
    EVENT_BUFWIPEOUT,		// just before really deleting a bufferEVENT_BUFWIPEOUT1262,41362
    EVENT_BUFWRITECMD,		// write buffer using commandEVENT_BUFWRITECMD1263,41425
    EVENT_BUFWRITEPOST,		// after writing a bufferEVENT_BUFWRITEPOST1264,41479
    EVENT_BUFWRITEPRE,		// before writing a bufferEVENT_BUFWRITEPRE1265,41530
    EVENT_CMDLINECHANGED,	// command line was modifiedEVENT_CMDLINECHANGED1266,41581
    EVENT_CMDLINEENTER,		// after entering the command lineEVENT_CMDLINEENTER1267,41636
    EVENT_CMDLINELEAVE,		// before leaving the command lineEVENT_CMDLINELEAVE1268,41696
    EVENT_CMDUNDEFINED,		// command undefinedEVENT_CMDUNDEFINED1269,41756
    EVENT_CMDWINENTER,		// after entering the cmdline windowEVENT_CMDWINENTER1270,41802
    EVENT_CMDWINLEAVE,		// before leaving the cmdline windowEVENT_CMDWINLEAVE1271,41863
    EVENT_COLORSCHEME,		// after loading a colorschemeEVENT_COLORSCHEME1272,41924
    EVENT_COLORSCHEMEPRE,	// before loading a colorschemeEVENT_COLORSCHEMEPRE1273,41979
    EVENT_COMPLETECHANGED,	// after completion popup menu changedEVENT_COMPLETECHANGED1274,42037
    EVENT_COMPLETEDONE,		// after finishing insert completeEVENT_COMPLETEDONE1275,42103
    EVENT_COMPLETEDONEPRE,	// idem, before clearing infoEVENT_COMPLETEDONEPRE1276,42163
    EVENT_CURSORHOLD,		// cursor in same position for a whileEVENT_CURSORHOLD1277,42220
    EVENT_CURSORHOLDI,		// idem, in Insert modeEVENT_CURSORHOLDI1278,42282
    EVENT_CURSORMOVED,		// cursor was movedEVENT_CURSORMOVED1279,42330
    EVENT_CURSORMOVEDI,		// cursor was moved in Insert modeEVENT_CURSORMOVEDI1280,42374
    EVENT_DIFFUPDATED,		// after diffs were updatedEVENT_DIFFUPDATED1281,42434
    EVENT_DIRCHANGED,		// after user changed directoryEVENT_DIRCHANGED1282,42486
    EVENT_ENCODINGCHANGED,	// after changing the 'encoding' optionEVENT_ENCODINGCHANGED1283,42541
    EVENT_EXITPRE,		// before exitingEVENT_EXITPRE1284,42608
    EVENT_FILEAPPENDCMD,	// append to a file using commandEVENT_FILEAPPENDCMD1285,42646
    EVENT_FILEAPPENDPOST,	// after appending to a fileEVENT_FILEAPPENDPOST1286,42705
    EVENT_FILEAPPENDPRE,	// before appending to a fileEVENT_FILEAPPENDPRE1287,42760
    EVENT_FILECHANGEDRO,	// before first change to read-only fileEVENT_FILECHANGEDRO1288,42815
    EVENT_FILECHANGEDSHELL,	// after shell command that changed fileEVENT_FILECHANGEDSHELL1289,42881
    EVENT_FILECHANGEDSHELLPOST,	// after (not) reloading changed fileEVENT_FILECHANGEDSHELLPOST1290,42950
    EVENT_FILEREADCMD,		// read from a file using commandEVENT_FILEREADCMD1291,43020
    EVENT_FILEREADPOST,		// after reading a fileEVENT_FILEREADPOST1292,43078
    EVENT_FILEREADPRE,		// before reading a fileEVENT_FILEREADPRE1293,43127
    EVENT_FILETYPE,		// new file type detected (user defined)EVENT_FILETYPE1294,43176
    EVENT_FILEWRITECMD,		// write to a file using commandEVENT_FILEWRITECMD1295,43238
    EVENT_FILEWRITEPOST,	// after writing a fileEVENT_FILEWRITEPOST1296,43296
    EVENT_FILEWRITEPRE,		// before writing a fileEVENT_FILEWRITEPRE1297,43345
    EVENT_FILTERREADPOST,	// after reading from a filterEVENT_FILTERREADPOST1298,43395
    EVENT_FILTERREADPRE,	// before reading from a filterEVENT_FILTERREADPRE1299,43452
    EVENT_FILTERWRITEPOST,	// after writing to a filterEVENT_FILTERWRITEPOST1300,43509
    EVENT_FILTERWRITEPRE,	// before writing to a filterEVENT_FILTERWRITEPRE1301,43565
    EVENT_FOCUSGAINED,		// got the focusEVENT_FOCUSGAINED1302,43621
    EVENT_FOCUSLOST,		// lost the focus to another appEVENT_FOCUSLOST1303,43662
    EVENT_FUNCUNDEFINED,	// if calling a function which doesn't existEVENT_FUNCUNDEFINED1304,43717
    EVENT_GUIENTER,		// after starting the GUIEVENT_GUIENTER1305,43787
    EVENT_GUIFAILED,		// after starting the GUI failedEVENT_GUIFAILED1306,43834
    EVENT_INSERTCHANGE,		// when changing Insert/Replace modeEVENT_INSERTCHANGE1307,43889
    EVENT_INSERTCHARPRE,	// before inserting a charEVENT_INSERTCHARPRE1308,43951
    EVENT_INSERTENTER,		// when entering Insert modeEVENT_INSERTENTER1309,44003
    EVENT_INSERTLEAVE,		// when leaving Insert modeEVENT_INSERTLEAVE1310,44056
    EVENT_MENUPOPUP,		// just before popup menu is displayedEVENT_MENUPOPUP1311,44108
    EVENT_OPTIONSET,		// option was setEVENT_OPTIONSET1312,44169
    EVENT_QUICKFIXCMDPOST,	// after :make, :grep etc.EVENT_QUICKFIXCMDPOST1313,44209
    EVENT_QUICKFIXCMDPRE,	// before :make, :grep etc.EVENT_QUICKFIXCMDPRE1314,44263
    EVENT_QUITPRE,		// before :quitEVENT_QUITPRE1315,44317
    EVENT_REMOTEREPLY,		// upon string reception from a remote vimEVENT_REMOTEREPLY1316,44353
    EVENT_SAFESTATE,		// going to wait for a characterEVENT_SAFESTATE1317,44420
    EVENT_SAFESTATEAGAIN,	// still waiting for a characterEVENT_SAFESTATEAGAIN1318,44475
    EVENT_SESSIONLOADPOST,	// after loading a session fileEVENT_SESSIONLOADPOST1319,44534
    EVENT_SHELLCMDPOST,		// after ":!cmd"EVENT_SHELLCMDPOST1320,44593
    EVENT_SHELLFILTERPOST,	// after ":1,2!cmd", ":w !cmd", ":r !cmd".EVENT_SHELLFILTERPOST1321,44635
    EVENT_SOURCECMD,		// sourcing a Vim script using commandEVENT_SOURCECMD1322,44705
    EVENT_SOURCEPRE,		// before sourcing a Vim scriptEVENT_SOURCEPRE1323,44766
    EVENT_SOURCEPOST,		// after sourcing a Vim scriptEVENT_SOURCEPOST1324,44820
    EVENT_SPELLFILEMISSING,	// spell file missingEVENT_SPELLFILEMISSING1325,44874
    EVENT_STDINREADPOST,	// after reading from stdinEVENT_STDINREADPOST1326,44924
    EVENT_STDINREADPRE,		// before reading from stdinEVENT_STDINREADPRE1327,44977
    EVENT_SWAPEXISTS,		// found existing swap fileEVENT_SWAPEXISTS1328,45031
    EVENT_SYNTAX,		// syntax selectedEVENT_SYNTAX1329,45082
    EVENT_TABCLOSED,		// after closing a tab pageEVENT_TABCLOSED1330,45120
    EVENT_TABENTER,		// after entering a tab pageEVENT_TABENTER1331,45170
    EVENT_TABLEAVE,		// before leaving a tab pageEVENT_TABLEAVE1332,45220
    EVENT_TABNEW,		// when entering a new tab pageEVENT_TABNEW1333,45270
    EVENT_TERMCHANGED,		// after changing 'term'EVENT_TERMCHANGED1334,45321
    EVENT_TERMINALOPEN,		// after a terminal buffer was createdEVENT_TERMINALOPEN1335,45370
    EVENT_TERMINALWINOPEN,	// after a terminal buffer was created and entering its windowEVENT_TERMINALWINOPEN1336,45434
    EVENT_TERMRESPONSE,		// after setting "v:termresponse"EVENT_TERMRESPONSE1337,45524
    EVENT_TEXTCHANGED,		// text was modified not in Insert modeEVENT_TEXTCHANGED1338,45583
    EVENT_TEXTCHANGEDI,         // text was modified in Insert modeEVENT_TEXTCHANGEDI1339,45647
    EVENT_TEXTCHANGEDP,         // TextChangedI with popup menu visibleEVENT_TEXTCHANGEDP1340,45715
    EVENT_TEXTYANKPOST,		// after some text was yankedEVENT_TEXTYANKPOST1341,45787
    EVENT_USER,			// user defined autocommandEVENT_USER1342,45842
    EVENT_VIMENTER,		// after starting VimEVENT_VIMENTER1343,45888
    EVENT_VIMLEAVE,		// before exiting VimEVENT_VIMLEAVE1344,45931
    EVENT_VIMLEAVEPRE,		// before exiting Vim and writing .viminfoEVENT_VIMLEAVEPRE1345,45974
    EVENT_VIMRESIZED,		// after Vim window was resizedEVENT_VIMRESIZED1346,46041
    EVENT_WINENTER,		// after entering a windowEVENT_WINENTER1347,46096
    EVENT_WINLEAVE,		// before leaving a windowEVENT_WINLEAVE1348,46144
    EVENT_WINNEW,		// when entering a new windowEVENT_WINNEW1349,46192
    NUM_EVENTS			// MUST be the last oneNUM_EVENTS1351,46242
typedef enum auto_event event_T;event_T1354,46287
    HLF_8 = 0	    // Meta & special keys listed with ":map", text that isHLF_81363,46497
    , HLF_EOB	    // after the last line in the bufferHLF_EOB1365,46616
    , HLF_AT	    // @ characters at end of screen, characters thatHLF_AT1366,46671
    , HLF_D	    // directories in CTRL-D listingHLF_D1368,46778
    , HLF_E	    // error messagesHLF_E1369,46827
    , HLF_H	    // obsolete, ignoredHLF_H1370,46861
    , HLF_I	    // incremental searchHLF_I1371,46898
    , HLF_L	    // last search stringHLF_L1372,46936
    , HLF_M	    // "--More--" messageHLF_M1373,46974
    , HLF_CM	    // Mode (e.g., "-- INSERT --")HLF_CM1374,47012
    , HLF_N	    // line number for ":number" and ":#" commandsHLF_N1375,47060
    , HLF_LNA	    // LineNrAboveHLF_LNA1376,47123
    , HLF_LNB	    // LineNrBelowHLF_LNB1377,47156
    , HLF_CLN	    // current line numberHLF_CLN1378,47189
    , HLF_R	    // return to continue message and yes/no questionsHLF_R1379,47230
    , HLF_S	    // status linesHLF_S1380,47297
    , HLF_SNC	    // status lines of not-current windowsHLF_SNC1381,47329
    , HLF_C	    // column to separate vertically split windowsHLF_C1382,47386
    , HLF_T	    // Titles for output from ":set all", ":autocmd" etc.HLF_T1383,47449
    , HLF_V	    // Visual modeHLF_V1384,47519
    , HLF_VNC	    // Visual mode, autoselecting and not clipboard ownerHLF_VNC1385,47550
    , HLF_W	    // warning messagesHLF_W1386,47622
    , HLF_WM	    // Wildmenu highlightHLF_WM1387,47658
    , HLF_FL	    // Folded lineHLF_FL1388,47697
    , HLF_FC	    // Fold columnHLF_FC1389,47729
    , HLF_ADD	    // Added diff lineHLF_ADD1390,47761
    , HLF_CHD	    // Changed diff lineHLF_CHD1391,47798
    , HLF_DED	    // Deleted diff lineHLF_DED1392,47837
    , HLF_TXD	    // Text Changed in diff lineHLF_TXD1393,47876
    , HLF_CONCEAL   // Concealed textHLF_CONCEAL1394,47923
    , HLF_SC	    // Sign columnHLF_SC1395,47961
    , HLF_SPB	    // SpellBadHLF_SPB1396,47993
    , HLF_SPC	    // SpellCapHLF_SPC1397,48023
    , HLF_SPR	    // SpellRareHLF_SPR1398,48053
    , HLF_SPL	    // SpellLocalHLF_SPL1399,48084
    , HLF_PNI	    // popup menu normal itemHLF_PNI1400,48116
    , HLF_PSI	    // popup menu selected itemHLF_PSI1401,48160
    , HLF_PSB	    // popup menu scrollbarHLF_PSB1402,48206
    , HLF_PST	    // popup menu scrollbar thumbHLF_PST1403,48248
    , HLF_TP	    // tabpage lineHLF_TP1404,48296
    , HLF_TPS	    // tabpage line selectedHLF_TPS1405,48329
    , HLF_TPF	    // tabpage line fillerHLF_TPF1406,48372
    , HLF_CUC	    // 'cursorcolumn'HLF_CUC1407,48413
    , HLF_CUL	    // 'cursorline'HLF_CUL1408,48449
    , HLF_MC	    // 'colorcolumn'HLF_MC1409,48483
    , HLF_QFL	    // quickfix window line currently selectedHLF_QFL1410,48517
    , HLF_ST	    // status lines of terminal windowsHLF_ST1411,48578
    , HLF_STNC	    // status lines of not-current terminal windowsHLF_STNC1412,48631
    , HLF_COUNT	    // MUST be the last oneHLF_COUNT1413,48698
} hlf_T;hlf_T1414,48742
#define HL_FLAGS HL_FLAGS1418,48876
# define FALSE	FALSE1429,49206
# define TRUE	TRUE1430,49264
#define MAYBE	MAYBE1433,49288
typedef UINT32_TYPEDEF UINT32_T;UINT32_T1436,49366
#define OP_NOP	OP_NOP1442,49480
#define OP_DELETE	OP_DELETE1443,49522
#define OP_YANK	OP_YANK1444,49566
#define OP_CHANGE	OP_CHANGE1445,49607
#define OP_LSHIFT	OP_LSHIFT1446,49651
#define OP_RSHIFT	OP_RSHIFT1447,49699
#define OP_FILTER	OP_FILTER1448,49748
#define OP_TILDE	OP_TILDE1449,49792
#define OP_INDENT	OP_INDENT1450,49840
#define OP_FORMAT	OP_FORMAT1451,49884
#define OP_COLON	OP_COLON1452,49928
#define OP_UPPER	OP_UPPER1453,49971
#define OP_LOWER	OP_LOWER1454,50024
#define OP_JOIN	OP_JOIN1455,50077
#define OP_JOIN_NS	OP_JOIN_NS1456,50141
#define OP_ROT13	OP_ROT131457,50208
#define OP_REPLACE	OP_REPLACE1458,50252
#define OP_INSERT	OP_INSERT1459,50318
#define OP_APPEND	OP_APPEND1460,50383
#define OP_FOLD	OP_FOLD1461,50448
#define OP_FOLDOPEN	OP_FOLDOPEN1462,50490
#define OP_FOLDOPENREC	OP_FOLDOPENREC1463,50532
#define OP_FOLDCLOSE	OP_FOLDCLOSE1464,50589
#define OP_FOLDCLOSEREC	OP_FOLDCLOSEREC1465,50633
#define OP_FOLDDEL	OP_FOLDDEL1466,50692
#define OP_FOLDDELREC	OP_FOLDDELREC1467,50735
#define OP_FORMAT2	OP_FORMAT21468,50793
#define OP_FUNCTION	OP_FUNCTION1469,50857
#define OP_NR_ADD	OP_NR_ADD1470,50908
#define OP_NR_SUB	OP_NR_SUB1472,51018
#define MCHAR	MCHAR1478,51181
#define MLINE	MLINE1479,51234
#define MBLOCK	MBLOCK1480,51282
#define MAUTO	MAUTO1482,51324
#define MIN_COLUMNS	MIN_COLUMNS1487,51405
#define MIN_LINES	MIN_LINES1488,51458
#define STATUS_HEIGHT	STATUS_HEIGHT1489,51506
# define WINBAR_HEIGHT(WINBAR_HEIGHT1491,51632
# define VISIBLE_HEIGHT(VISIBLE_HEIGHT1492,51681
# define WINBAR_HEIGHT(WINBAR_HEIGHT1494,51756
# define VISIBLE_HEIGHT(VISIBLE_HEIGHT1495,51785
#define QF_WINHEIGHT	QF_WINHEIGHT1497,51835
# define CMDBUFFSIZE	CMDBUFFSIZE1503,51941
#define LSIZE	LSIZE1506,52015
#define IOSIZE	IOSIZE1508,52079
#define DIALOG_MSG_SIZE DIALOG_MSG_SIZE1510,52143
#define MSG_BUF_LEN MSG_BUF_LEN1512,52205
#define MSG_BUF_CLEN MSG_BUF_CLEN1513,52268
#define FOLD_TEXT_LEN FOLD_TEXT_LEN1516,52385
#define TBUFSZ TBUFSZ1522,52691
#define MAXMAPLEN MAXMAPLEN1528,52849
#define UNDO_HASH_SIZE UNDO_HASH_SIZE1531,52925
# define WRITEBIN WRITEBIN1538,53022
# define READBIN READBIN1539,53071
# define APPENDBIN APPENDBIN1540,53096
# define WRITEBIN WRITEBIN1542,53127
# define READBIN READBIN1543,53151
# define APPENDBIN APPENDBIN1544,53175
# define O_EXTRA O_EXTRA1552,53344
# define O_EXTRA O_EXTRA1554,53379
# define O_NOFOLLOW O_NOFOLLOW1558,53428
# define W_OK W_OK1562,53471
# define R_OK R_OK1565,53556
#define ALLOC_ONE(ALLOC_ONE1570,53732
#define ALLOC_MULT(ALLOC_MULT1571,53785
#define ALLOC_CLEAR_ONE(ALLOC_CLEAR_ONE1572,53856
#define ALLOC_CLEAR_MULT(ALLOC_CLEAR_MULT1573,53921
#define LALLOC_CLEAR_ONE(LALLOC_CLEAR_ONE1574,54004
#define LALLOC_CLEAR_MULT(LALLOC_CLEAR_MULT1575,54078
#define LALLOC_MULT(LALLOC_MULT1576,54170
#define STRLEN(STRLEN1582,54380
#define STRCPY(STRCPY1583,54422
#define STRNCPY(STRNCPY1584,54480
#define STRCMP(STRCMP1585,54555
#define STRNCMP(STRNCMP1586,54613
# define STRICMP(STRICMP1588,54711
#  define STRICMP(STRICMP1591,54802
#  define STRICMP(STRICMP1593,54871
#define STRMOVE(STRMOVE1598,55016
# define STRNICMP(STRNICMP1601,55104
#  define STRNICMP(STRNICMP1604,55211
#  define STRNICMP(STRNICMP1606,55294
# define MB_STRICMP(MB_STRICMP1616,55715
# define MB_STRNICMP(MB_STRNICMP1617,55796
#define STRCAT(STRCAT1619,55879
#define STRNCAT(STRNCAT1620,55937
# define vim_strpbrk(vim_strpbrk1623,56033
#define OUT_STR(OUT_STR1626,56114
#define OUT_STR_NF(OUT_STR_NF1627,56161
#  define GUI_FUNCTION(GUI_FUNCTION1631,56258
#  define GUI_FUNCTION2(GUI_FUNCTION21632,56325
#  define USE_24BIT	USE_24BIT1637,56490
#  define GUI_FUNCTION(GUI_FUNCTION1639,56544
#  define GUI_FUNCTION2(GUI_FUNCTION21640,56582
#  define USE_24BIT	USE_24BIT1643,56696
#  define GUI_FUNCTION(GUI_FUNCTION1647,56773
#  define GUI_FUNCTION2(GUI_FUNCTION21648,56815
#  define USE_24BIT	USE_24BIT1649,56872
# define IS_CTERM	IS_CTERM1653,56944
# define IS_CTERM	IS_CTERM1655,56997
# define GUI_MCH_GET_RGB	GUI_MCH_GET_RGB1658,57062
# define GUI_MCH_GET_RGB2(GUI_MCH_GET_RGB21659,57117
# define GUI_MCH_GET_COLOR	GUI_MCH_GET_COLOR1660,57189
# define GUI_GET_COLOR	GUI_GET_COLOR1661,57248
# define PERROR(PERROR1667,57443
# define PERROR(PERROR1669,57527
typedef long	linenr_T;		// line number typelinenr_T1672,57576
typedef int	colnr_T;		// column number typecolnr_T1673,57620
typedef unsigned short disptick_T;	// display tick typedisptick_T1674,57664
# define MAXCOL MAXCOL1686,58195
# define MAXLNUM MAXLNUM1687,58260
# define MAXCOL MAXCOL1689,58331
# define MAXLNUM MAXLNUM1690,58382
#define SHOWCMD_COLS SHOWCMD_COLS1693,58450
#define STL_MAX_ITEM STL_MAX_ITEM1694,58511
typedef void	    *vim_acl_T;		// dummy to pass an ACL to a functionvim_acl_T1696,58573
# define mch_memmove(mch_memmove1699,58662
#define fnamecmp(fnamecmp1708,58995
#define fnamencmp(fnamencmp1709,59061
# define vim_memset(vim_memset1712,59165
# define USE_INPUT_BUFUSE_INPUT_BUF1719,59369
# define read_eintr(read_eintr1723,59414
# define write_eintr(write_eintr1724,59481
# define vim_read(vim_read1730,59680
# define vim_write(vim_write1731,59765
# define vim_read(vim_read1733,59857
# define vim_write(vim_write1734,59937
#define HL_ATTR(HL_ATTR1740,60098
#define TERM_STR(TERM_STR1741,60142
# define EXTERN EXTERN1748,60317
# define INIT(INIT1749,60340
# define INIT2(INIT21750,60357
# define INIT3(INIT31751,60378
# define INIT4(INIT41752,60402
# define INIT5(INIT51753,60429
#  define INIT(INIT1756,60479
#  define INIT2(INIT21757,60499
#  define INIT3(INIT31758,60530
#  define INIT4(INIT41759,60567
#  define INIT5(INIT51760,60610
#  define DO_INITDO_INIT1761,60659
#define MAX_MCO	MAX_MCO1765,60693
#define MB_MAXBYTES	MB_MAXBYTES1770,60962
typedef LARGE_INTEGER proftime_T;proftime_T1774,61072
typedef struct timeval proftime_T;proftime_T1776,61113
typedef int proftime_T;	    // dummy for function prototypesproftime_T1779,61162
typedef long  time_T;time_T1788,61444
typedef __time64_t  time_T;time_T1791,61486
typedef time_t	    time_T;time_T1793,61521
typedef __int64 sock_T;sock_T1798,61578
typedef int sock_T;sock_T1800,61608
#define PROF_NONE	PROF_NONE1816,61982
#define PROF_YES	PROF_YES1817,62027
#define PROF_PAUSED	PROF_PAUSED1818,62064
#define MOUSE_LEFT	MOUSE_LEFT1822,62162
#define MOUSE_MIDDLE	MOUSE_MIDDLE1823,62186
#define MOUSE_RIGHT	MOUSE_RIGHT1824,62212
#define MOUSE_RELEASE	MOUSE_RELEASE1825,62237
#define MOUSE_SHIFT	MOUSE_SHIFT1828,62293
#define MOUSE_ALT	MOUSE_ALT1829,62318
#define MOUSE_CTRL	MOUSE_CTRL1830,62341
#define MOUSE_4	MOUSE_41836,62629
#define MOUSE_5	MOUSE_51837,62672
#define MOUSE_X1	MOUSE_X11839,62714
#define MOUSE_X2	MOUSE_X21840,62762
#define MOUSE_6	MOUSE_61842,62805
#define MOUSE_7	MOUSE_71843,62848
#define MOUSE_DRAG_XTERM MOUSE_DRAG_XTERM1846,62922
#define MOUSE_DRAG	MOUSE_DRAG1848,62955
#define MOUSEWHEEL_LOW	MOUSEWHEEL_LOW1851,63059
#define MOUSE_CLICK_MASK	MOUSE_CLICK_MASK1853,63089
#define NUM_MOUSE_CLICKS(NUM_MOUSE_CLICKS1855,63120
#define SET_NUM_MOUSE_CLICKS(SET_NUM_MOUSE_CLICKS1858,63197
#define MOUSE_COLOFF MOUSE_COLOFF1864,63501
#define IN_UNKNOWN	IN_UNKNOWN1870,63643
#define IN_BUFFER	IN_BUFFER1871,63665
#define IN_STATUS_LINE	IN_STATUS_LINE1872,63686
#define IN_SEP_LINE	IN_SEP_LINE1873,63741
#define IN_OTHER_WIN	IN_OTHER_WIN1874,63794
#define CURSOR_MOVED	CURSOR_MOVED1875,63856
#define MOUSE_FOLD_CLOSE	MOUSE_FOLD_CLOSE1876,63884
#define MOUSE_FOLD_OPEN	MOUSE_FOLD_OPEN1877,63948
#define MOUSE_WINBAR	MOUSE_WINBAR1878,64012
#define MOUSE_FOCUS	MOUSE_FOCUS1881,64091
#define MOUSE_MAY_VIS	MOUSE_MAY_VIS1882,64148
#define MOUSE_DID_MOVE	MOUSE_DID_MOVE1883,64201
#define MOUSE_SETPOS	MOUSE_SETPOS1884,64263
#define MOUSE_MAY_STOP_VIS	MOUSE_MAY_STOP_VIS1885,64325
#define MOUSE_RELEASED	MOUSE_RELEASED1886,64381
# define CHECK_DOUBLE_CLICK CHECK_DOUBLE_CLICK1889,64510
#define VALID_PATH	VALID_PATH1894,64617
#define VALID_HEAD	VALID_HEAD1895,64639
#define VV_COUNT	VV_COUNT1898,64731
#define VV_COUNT1	VV_COUNT11899,64750
#define VV_PREVCOUNT	VV_PREVCOUNT1900,64770
#define VV_ERRMSG	VV_ERRMSG1901,64793
#define VV_WARNINGMSG	VV_WARNINGMSG1902,64813
#define VV_STATUSMSG	VV_STATUSMSG1903,64837
#define VV_SHELL_ERROR	VV_SHELL_ERROR1904,64860
#define VV_THIS_SESSION	VV_THIS_SESSION1905,64885
#define VV_VERSION	VV_VERSION1906,64911
#define VV_LNUM	VV_LNUM1907,64932
#define VV_TERMRESPONSE	VV_TERMRESPONSE1908,64951
#define VV_FNAME	VV_FNAME1909,64978
#define VV_LANG	VV_LANG1910,64998
#define VV_LC_TIME	VV_LC_TIME1911,65018
#define VV_CTYPE	VV_CTYPE1912,65040
#define VV_CC_FROM	VV_CC_FROM1913,65060
#define VV_CC_TO	VV_CC_TO1914,65082
#define VV_FNAME_IN	VV_FNAME_IN1915,65102
#define VV_FNAME_OUT	VV_FNAME_OUT1916,65125
#define VV_FNAME_NEW	VV_FNAME_NEW1917,65149
#define VV_FNAME_DIFF	VV_FNAME_DIFF1918,65173
#define VV_CMDARG	VV_CMDARG1919,65198
#define VV_FOLDSTART	VV_FOLDSTART1920,65219
#define VV_FOLDEND	VV_FOLDEND1921,65243
#define VV_FOLDDASHES	VV_FOLDDASHES1922,65265
#define VV_FOLDLEVEL	VV_FOLDLEVEL1923,65290
#define VV_PROGNAME	VV_PROGNAME1924,65314
#define VV_SEND_SERVER	VV_SEND_SERVER1925,65337
#define VV_DYING	VV_DYING1926,65363
#define VV_EXCEPTION	VV_EXCEPTION1927,65383
#define VV_THROWPOINT	VV_THROWPOINT1928,65407
#define VV_REG	VV_REG1929,65432
#define VV_CMDBANG	VV_CMDBANG1930,65451
#define VV_INSERTMODE	VV_INSERTMODE1931,65473
#define VV_VAL	VV_VAL1932,65498
#define VV_KEY	VV_KEY1933,65517
#define VV_PROFILING	VV_PROFILING1934,65536
#define VV_FCS_REASON	VV_FCS_REASON1935,65560
#define VV_FCS_CHOICE	VV_FCS_CHOICE1936,65585
#define VV_BEVAL_BUFNR	VV_BEVAL_BUFNR1937,65610
#define VV_BEVAL_WINNR	VV_BEVAL_WINNR1938,65636
#define VV_BEVAL_WINID	VV_BEVAL_WINID1939,65662
#define VV_BEVAL_LNUM	VV_BEVAL_LNUM1940,65688
#define VV_BEVAL_COL	VV_BEVAL_COL1941,65713
#define VV_BEVAL_TEXT	VV_BEVAL_TEXT1942,65737
#define VV_SCROLLSTART	VV_SCROLLSTART1943,65762
#define VV_SWAPNAME	VV_SWAPNAME1944,65788
#define VV_SWAPCHOICE	VV_SWAPCHOICE1945,65811
#define VV_SWAPCOMMAND	VV_SWAPCOMMAND1946,65836
#define VV_CHAR	VV_CHAR1947,65862
#define VV_MOUSE_WIN	VV_MOUSE_WIN1948,65882
#define VV_MOUSE_WINID	VV_MOUSE_WINID1949,65906
#define VV_MOUSE_LNUM VV_MOUSE_LNUM1950,65932
#define VV_MOUSE_COL	VV_MOUSE_COL1951,65959
#define VV_OP	VV_OP1952,65983
#define VV_SEARCHFORWARD VV_SEARCHFORWARD1953,66001
#define VV_HLSEARCH	VV_HLSEARCH1954,66029
#define VV_OLDFILES	VV_OLDFILES1955,66052
#define VV_WINDOWID	VV_WINDOWID1956,66075
#define VV_PROGPATH	VV_PROGPATH1957,66098
#define VV_COMPLETED_ITEM VV_COMPLETED_ITEM1958,66121
#define VV_OPTION_NEW VV_OPTION_NEW1959,66150
#define VV_OPTION_OLD VV_OPTION_OLD1960,66177
#define VV_OPTION_OLDLOCAL VV_OPTION_OLDLOCAL1961,66204
#define VV_OPTION_OLDGLOBAL VV_OPTION_OLDGLOBAL1962,66234
#define VV_OPTION_COMMAND VV_OPTION_COMMAND1963,66265
#define VV_OPTION_TYPE VV_OPTION_TYPE1964,66294
#define VV_ERRORS	VV_ERRORS1965,66321
#define VV_FALSE	VV_FALSE1966,66342
#define VV_TRUE	VV_TRUE1967,66362
#define VV_NONE	VV_NONE1968,66382
#define VV_NULL	VV_NULL1969,66402
#define VV_NUMBERSIZE	VV_NUMBERSIZE1970,66422
#define VV_VIM_DID_ENTER VV_VIM_DID_ENTER1971,66447
#define VV_TESTING	VV_TESTING1972,66475
#define VV_TYPE_NUMBER	VV_TYPE_NUMBER1973,66497
#define VV_TYPE_STRING	VV_TYPE_STRING1974,66523
#define VV_TYPE_FUNC	VV_TYPE_FUNC1975,66549
#define VV_TYPE_LIST	VV_TYPE_LIST1976,66573
#define VV_TYPE_DICT	VV_TYPE_DICT1977,66597
#define VV_TYPE_FLOAT	VV_TYPE_FLOAT1978,66621
#define VV_TYPE_BOOL	VV_TYPE_BOOL1979,66646
#define VV_TYPE_NONE	VV_TYPE_NONE1980,66670
#define VV_TYPE_JOB	VV_TYPE_JOB1981,66694
#define VV_TYPE_CHANNEL	VV_TYPE_CHANNEL1982,66717
#define VV_TYPE_BLOB	VV_TYPE_BLOB1983,66744
#define VV_TERMRFGRESP	VV_TERMRFGRESP1984,66768
#define VV_TERMRBGRESP	VV_TERMRBGRESP1985,66794
#define VV_TERMU7RESP	VV_TERMU7RESP1986,66820
#define VV_TERMSTYLERESP VV_TERMSTYLERESP1987,66845
#define VV_TERMBLINKRESP VV_TERMBLINKRESP1988,66873
#define VV_EVENT	VV_EVENT1989,66901
#define VV_VERSIONLONG	VV_VERSIONLONG1990,66921
#define VV_ECHOSPACE	VV_ECHOSPACE1991,66947
#define VV_ARGV	VV_ARGV1992,66971
#define VV_LEN	VV_LEN1993,66991
#define VVAL_FALSE	VVAL_FALSE1996,67081
#define VVAL_TRUE	VVAL_TRUE1997,67115
#define VVAL_NONE	VVAL_NONE1998,67148
#define VVAL_NULL	VVAL_NULL1999,67184
#define VAR_TYPE_NUMBER	VAR_TYPE_NUMBER2002,67248
#define VAR_TYPE_STRING	VAR_TYPE_STRING2003,67278
#define VAR_TYPE_FUNC	VAR_TYPE_FUNC2004,67308
#define VAR_TYPE_LIST	VAR_TYPE_LIST2005,67336
#define VAR_TYPE_DICT	VAR_TYPE_DICT2006,67364
#define VAR_TYPE_FLOAT	VAR_TYPE_FLOAT2007,67392
#define VAR_TYPE_BOOL	VAR_TYPE_BOOL2008,67421
#define VAR_TYPE_NONE	VAR_TYPE_NONE2009,67449
#define VAR_TYPE_JOB	VAR_TYPE_JOB2010,67477
#define VAR_TYPE_CHANNEL VAR_TYPE_CHANNEL2011,67504
#define VAR_TYPE_BLOB	VAR_TYPE_BLOB2012,67534
#define DICT_MAXNEST DICT_MAXNEST2014,67564
# define VIM_ATOM_NAME VIM_ATOM_NAME2021,67871
# define VIMENC_ATOM_NAME VIMENC_ATOM_NAME2022,67906
# define SELECT_CLEARED	SELECT_CLEARED2025,67991
# define SELECT_IN_PROGRESS	SELECT_IN_PROGRESS2026,68018
# define SELECT_DONE	SELECT_DONE2027,68048
# define SELECT_MODE_CHAR	SELECT_MODE_CHAR2029,68073
# define SELECT_MODE_WORD	SELECT_MODE_WORD2030,68101
# define SELECT_MODE_LINE	SELECT_MODE_LINE2031,68129
#   define WM_OLE WM_OLE2035,68199
    int		available;	// Is clipboard available?available2042,68291
    int		owned;		// Flag: do we own the selection?owned2043,68338
    pos_T	start;		// Start of selected areastart2044,68389
    pos_T	end;		// End of selected areaend2045,68433
    int		vmode;		// Visual mode charactervmode2046,68473
    short_u	origin_row;origin_row2049,68573
    short_u	origin_start_col;origin_start_col2050,68597
    short_u	origin_end_col;origin_end_col2051,68627
    short_u	word_start_col;word_start_col2052,68655
    short_u	word_end_col;word_end_col2053,68683
    short_u	min_col;min_col2056,68782
    short_u	max_col;max_col2057,68803
    short_u	min_row;min_row2058,68824
    short_u	max_row;max_row2059,68845
    pos_T	prev;		// Previous positionprev2062,68874
    short_u	state;		// Current selection statestate2063,68912
    short_u	mode;		// Select by char, word, or line.mode2064,68959
    Atom	sel_atom;	// PRIMARY/CLIPBOARD selection IDsel_atom2067,69068
    GdkAtom     gtk_sel_atom;	// PRIMARY/CLIPBOARD selection IDgtk_sel_atom2071,69151
    int_u	format;		// Vim's own special clipboard formatformat2075,69284
    int_u	format_raw;	// Vim's raw text clipboard formatformat_raw2076,69341
} Clipboard_T;Clipboard_T2081,69478
typedef int Clipboard_T;	// This is required for the prototypes.Clipboard_T2083,69499
# define HAVE_STAT64HAVE_STAT642088,69685
typedef struct _stat64 stat_T;stat_T2089,69706
typedef struct stat stat_T;stat_T2091,69743
# define USE_PRINTF_FORMAT_ATTRIBUTEUSE_PRINTF_FORMAT_ATTRIBUTE2095,69826
    ASSERT_EQUAL,ASSERT_EQUAL2100,69886
    ASSERT_NOTEQUAL,ASSERT_NOTEQUAL2101,69904
    ASSERT_MATCH,ASSERT_MATCH2102,69925
    ASSERT_NOTMATCH,ASSERT_NOTMATCH2103,69943
    ASSERT_OTHERASSERT_OTHER2104,69964
} assert_type_T;assert_type_T2105,69981
    PASTE_INSERT,	// insert modePASTE_INSERT2109,70045
    PASTE_CMDLINE,	// command linePASTE_CMDLINE2110,70078
    PASTE_EX,		// ex mode linePASTE_EX2111,70113
    PASTE_ONE_CHAR	// return first characterPASTE_ONE_CHAR2112,70144
} paste_mode_T;paste_mode_T2113,70189
    FLUSH_MINIMAL,FLUSH_MINIMAL2117,70254
    FLUSH_TYPEAHEAD,	// flush current typebuf contentsFLUSH_TYPEAHEAD2118,70273
    FLUSH_INPUT		// flush typebuf and inchar() inputFLUSH_INPUT2119,70328
} flush_buffers_T;flush_buffers_T2120,70381
    USEPOPUP_NONE,USEPOPUP_NONE2124,70453
    USEPOPUP_NORMAL,	// use info popupUSEPOPUP_NORMAL2125,70472
    USEPOPUP_HIDDEN	// use info popup initially hiddenUSEPOPUP_HIDDEN2126,70511
} use_popup_T;use_popup_T2127,70566
#define LET_IS_CONST	LET_IS_CONST2130,70617
#define LET_NO_COMMAND	LET_NO_COMMAND2131,70654
# define mch_errmsg(mch_errmsg2144,71259
# define display_errors(display_errors2145,71313
# define mch_msg(mch_msg2146,71354
# define USE_MCH_ERRMSGUSE_MCH_ERRMSG2148,71403
# define IME_WITHOUT_XIMIME_WITHOUT_XIM2159,71854
# define HAVE_INPUT_METHODHAVE_INPUT_METHOD2168,72091
# define number_width(number_width2173,72218
# define mch_open(mch_open2179,72373
# define mch_fopen(mch_fopen2180,72420
# define do_dialog do_dialog2189,72665
#  define BROWSE_FILTER_MACROS BROWSE_FILTER_MACROS2201,73044
#  define BROWSE_FILTER_ALL_FILES BROWSE_FILTER_ALL_FILES2203,73149
#  define BROWSE_FILTER_DEFAULT BROWSE_FILTER_DEFAULT2204,73222
#  define BROWSE_FILTER_MACROS BROWSE_FILTER_MACROS2207,73468
#  define BROWSE_FILTER_ALL_FILES BROWSE_FILTER_ALL_FILES2209,73569
#  define BROWSE_FILTER_DEFAULT BROWSE_FILTER_DEFAULT2210,73638
# define BROWSE_SAVE BROWSE_SAVE2213,73844
# define BROWSE_DIR BROWSE_DIR2214,73895
# define vim_realloc(vim_realloc2238,74796
# define vim_realloc(vim_realloc2240,74862
#define MB_BYTE2LEN(MB_BYTE2LEN2249,75160
#define MB_BYTE2LEN_CHECK(MB_BYTE2LEN_CHECK2250,75202
#define ENC_8BIT	ENC_8BIT2253,75354
#define ENC_DBCS	ENC_DBCS2254,75376
#define ENC_UNICODE	ENC_UNICODE2255,75398
#define ENC_ENDIAN_B	ENC_ENDIAN_B2257,75424
#define ENC_ENDIAN_L	ENC_ENDIAN_L2258,75477
#define ENC_2BYTE	ENC_2BYTE2260,75534
#define ENC_4BYTE	ENC_4BYTE2261,75579
#define ENC_2WORD	ENC_2WORD2262,75624
#define ENC_LATIN1	ENC_LATIN12264,75672
#define ENC_LATIN9	ENC_LATIN92265,75711
#define ENC_MACROMAN	ENC_MACROMAN2266,75750
#  define EILSEQ EILSEQ2270,75848
#  define ICONV_ERRNO ICONV_ERRNO2274,75944
#  define ICONV_E2BIG ICONV_E2BIG2275,75983
#  define ICONV_EINVAL ICONV_EINVAL2276,76008
#  define ICONV_EILSEQ ICONV_EILSEQ2277,76034
#  define ICONV_ERRNO ICONV_ERRNO2279,76067
#  define ICONV_E2BIG ICONV_E2BIG2280,76095
#  define ICONV_EINVAL ICONV_EINVAL2281,76124
#  define ICONV_EILSEQ ICONV_EILSEQ2282,76154
#define SIGN_BYTE SIGN_BYTE2286,76200
# define MULTISIGN_BYTE MULTISIGN_BYTE2290,76334
#  define X_DISPLAY	X_DISPLAY2298,76660
#  define X_DISPLAY	X_DISPLAY2300,76738
#   define X_DISPLAY	X_DISPLAY2305,76846
#   define X_DISPLAY	X_DISPLAY2307,76932
#  define X_DISPLAY	X_DISPLAY2310,76977
#  define USE_FILE_CHOOSERUSE_FILE_CHOOSER2316,77108
#  define gtk_widget_get_window(gtk_widget_get_window2322,77203
#  define gtk_plug_get_socket_window(gtk_plug_get_socket_window2323,77256
#  define gtk_selection_data_get_data(gtk_selection_data_get_data2324,77321
#  define gtk_selection_data_get_data_type(gtk_selection_data_get_data_type2325,77378
#  define gtk_selection_data_get_format(gtk_selection_data_get_format2326,77440
#  define gtk_selection_data_get_length(gtk_selection_data_get_length2327,77501
#  define gtk_adjustment_set_lower(gtk_adjustment_set_lower2328,77562
#  define gtk_adjustment_set_upper(gtk_adjustment_set_upper2330,77650
#  define gtk_adjustment_set_page_size(gtk_adjustment_set_page_size2332,77736
#  define gtk_adjustment_set_page_increment(gtk_adjustment_set_page_increment2334,77834
#  define gtk_adjustment_set_step_increment(gtk_adjustment_set_step_increment2336,77940
#  define gtk_selection_data_get_selection(gtk_selection_data_get_selection2340,78086
#  define gtk_widget_get_allocation(gtk_widget_get_allocation2343,78193
#  define gtk_widget_set_allocation(gtk_widget_set_allocation2345,78294
#  define gtk_widget_get_has_window(gtk_widget_get_has_window2347,78395
#  define gtk_widget_get_sensitive(gtk_widget_get_sensitive2348,78463
#  define gtk_widget_get_visible(gtk_widget_get_visible2349,78529
#  define gtk_widget_has_focus(gtk_widget_has_focus2350,78591
#  define gtk_widget_set_window(gtk_widget_set_window2351,78653
#  define gtk_widget_set_can_default(gtk_widget_set_can_default2353,78741
#  define gtk_widget_set_can_focus(gtk_widget_set_can_focus2356,78926
#  define gtk_widget_set_visible(gtk_widget_set_visible2359,79105
#  define gtk_widget_get_mapped(gtk_widget_get_mapped2364,79280
#  define gtk_widget_get_realized(gtk_widget_get_realized2365,79340
#  define gtk_widget_set_mapped(gtk_widget_set_mapped2366,79404
#  define gtk_widget_set_realized(gtk_widget_set_realized2369,79574
# undef NBDEBUGNBDEBUG2376,79793
# define nbdebug(nbdebug2381,79882
# undef NORMALNORMAL2388,79992
# undef STRLENSTRLEN2389,80007
# undef FFFF2390,80022
# undef OP_DELETEOP_DELETE2391,80033
# undef OP_JOINOP_JOIN2392,80051
#  undef MAXMAX2395,80149
#  undef MINMIN2398,80182
#  undef __2402,80284
#  undef DEBUGDEBUG2405,80317
#  undef _DEBUG_DEBUG2408,80355
#  undef instrinstr2411,80393
#  undef boolbool2417,80646
#define SIGNAL_BLOCK	SIGNAL_BLOCK2423,80733
#define SIGNAL_UNBLOCK SIGNAL_UNBLOCK2424,80757
# define vim_handle_signal(vim_handle_signal2426,80820
#define VGR_GLOBAL	VGR_GLOBAL2430,80892
#define VGR_NOJUMP	VGR_NOJUMP2431,80913
#define BAD_REPLACE	BAD_REPLACE2434,80984
#define BAD_KEEP	BAD_KEEP2435,81041
#define BAD_DROP	BAD_DROP2436,81073
#define DOSO_NONE	DOSO_NONE2439,81139
#define DOSO_VIMRC	DOSO_VIMRC2440,81159
#define DOSO_GVIMRC	DOSO_GVIMRC2441,81202
#define VIF_WANT_INFO	VIF_WANT_INFO2444,81289
#define VIF_WANT_MARKS	VIF_WANT_MARKS2445,81336
#define VIF_FORCEIT	VIF_FORCEIT2446,81381
#define VIF_GET_OLDFILES	VIF_GET_OLDFILES2447,81435
#define BFA_DEL	BFA_DEL2450,81509
#define BFA_WIPE	BFA_WIPE2451,81562
#define BFA_KEEP_UNDO	BFA_KEEP_UNDO2452,81617
#define BFA_IGNORE_ABORT BFA_IGNORE_ABORT2453,81674
#define MSCR_DOWN	MSCR_DOWN2456,81789
#define MSCR_UP	MSCR_UP2457,81831
#define MSCR_LEFT	MSCR_LEFT2458,81850
#define MSCR_RIGHT	MSCR_RIGHT2459,81871
#define KEYLEN_PART_KEY KEYLEN_PART_KEY2461,81894
#define KEYLEN_PART_MAP KEYLEN_PART_MAP2462,81961
#define KEYLEN_REMOVED KEYLEN_REMOVED2463,82027
#define FILEINFO_OK	FILEINFO_OK2466,82134
#define FILEINFO_ENC_FAIL FILEINFO_ENC_FAIL2467,82161
#define FILEINFO_READ_FAIL FILEINFO_READ_FAIL2468,82217
#define FILEINFO_INFO_FAIL FILEINFO_INFO_FAIL2469,82271
#define SOPT_BOOL	SOPT_BOOL2472,82387
#define SOPT_NUM	SOPT_NUM2473,82428
#define SOPT_STRING	SOPT_STRING2474,82467
#define SOPT_GLOBAL	SOPT_GLOBAL2475,82509
#define SOPT_WIN	SOPT_WIN2476,82561
#define SOPT_BUF	SOPT_BUF2477,82616
#define SOPT_UNSET	SOPT_UNSET2478,82671
#define SREQ_GLOBAL	SREQ_GLOBAL2481,82786
#define SREQ_WIN	SREQ_WIN2482,82833
#define SREQ_BUF	SREQ_BUF2483,82883
#define GREG_NO_EXPR	GREG_NO_EXPR2486,82964
#define GREG_EXPR_SRC	GREG_EXPR_SRC2487,83023
#define GREG_LIST	GREG_LIST2488,83092
#define AUTOLOAD_CHAR AUTOLOAD_CHAR2491,83196
# define MAX_OPEN_CHANNELS MAX_OPEN_CHANNELS2494,83247
# define MAX_OPEN_CHANNELS MAX_OPEN_CHANNELS2496,83283
# define MAX_NAMED_PIPE_SIZE MAX_NAMED_PIPE_SIZE2500,83339
#define JSON_JS	JSON_JS2504,83428
#define JSON_NO_NONE	JSON_NO_NONE2505,83475
#define JSON_NL	JSON_NL2506,83527
#define DIP_ALL	DIP_ALL2509,83598
#define DIP_DIR	DIP_DIR2510,83662
#define DIP_ERR	DIP_ERR2511,83725
#define DIP_START DIP_START2512,83792
#define DIP_OPT	DIP_OPT2513,83861
#define DIP_NORTP DIP_NORTP2514,83928
#define DIP_NOAFTER DIP_NOAFTER2515,83981
#define DIP_AFTER DIP_AFTER2516,84034
#define LOWEST_WIN_ID LOWEST_WIN_ID2519,84160
#define COPYID_INC COPYID_INC2522,84222
#define COPYID_MASK COPYID_MASK2523,84243
#define TFN_INT	TFN_INT2526,84317
#define TFN_QUIET	TFN_QUIET2527,84365
#define TFN_NO_AUTOLOAD	TFN_NO_AUTOLOAD2528,84406
#define TFN_NO_DEREF	TFN_NO_DEREF2529,84465
#define TFN_READ_ONLY	TFN_READ_ONLY2530,84520
#define GLV_QUIET	GLV_QUIET2533,84614
#define GLV_NO_AUTOLOAD	GLV_NO_AUTOLOAD2534,84663
#define GLV_READ_ONLY	GLV_READ_ONLY2535,84736
#define DO_NOT_FREE_CNT DO_NOT_FREE_CNT2537,84800
#define FCERR_UNKNOWN	FCERR_UNKNOWN2541,84931
#define FCERR_TOOMANY	FCERR_TOOMANY2542,84955
#define FCERR_TOOFEW	FCERR_TOOFEW2543,84979
#define FCERR_SCRIPT	FCERR_SCRIPT2544,85002
#define FCERR_DICT	FCERR_DICT2545,85025
#define FCERR_NONE	FCERR_NONE2546,85046
#define FCERR_OTHER	FCERR_OTHER2547,85067
#define FCERR_DELETED	FCERR_DELETED2548,85089
#define FCERR_NOTMETHOD	FCERR_NOTMETHOD2549,85113
#define FLEN_FIXED FLEN_FIXED2552,85226
#define FNE_INCL_BR	FNE_INCL_BR2555,85278
#define FNE_CHECK_START	FNE_CHECK_START2556,85322
# define OPEN_CHR_FILESOPEN_CHR_FILES2561,85566
#  define S_ISDIR(S_ISDIR2567,85645
#  define S_ISDIR(S_ISDIR2569,85701
#  define S_ISREG(S_ISREG2574,85771
#  define S_ISREG(S_ISREG2576,85827
#  define S_ISBLK(S_ISBLK2581,85897
#  define S_ISBLK(S_ISBLK2583,85953
#  define S_ISSOCK(S_ISSOCK2588,86025
#  define S_ISSOCK(S_ISSOCK2590,86083
#  define S_ISFIFO(S_ISFIFO2595,86155
#  define S_ISFIFO(S_ISFIFO2597,86212
#  define S_ISCHR(S_ISCHR2602,86283
#  define S_ISCHR(S_ISCHR2604,86339
#  define S_ISLNK(S_ISLNK2609,86409
#  define S_ISLNK(S_ISLNK2611,86465
# define ELAPSED_TIMEVALELAPSED_TIMEVAL2616,86563
# define ELAPSED_INIT(ELAPSED_INIT2617,86588
# define ELAPSED_FUNC(ELAPSED_FUNC2618,86636
typedef struct timeval elapsed_T;elapsed_T2619,86673
# define ELAPSED_TICKCOUNTELAPSED_TICKCOUNT2622,86768
# define ELAPSED_INIT(ELAPSED_INIT2623,86795
# define ELAPSED_FUNC(ELAPSED_FUNC2624,86839
typedef int DWORD;DWORD2626,86889
typedef DWORD elapsed_T;elapsed_T2628,86916
#define REPLACE_CR_NCHAR REPLACE_CR_NCHAR2635,87051
#define REPLACE_NL_NCHAR REPLACE_NL_NCHAR2636,87082
#define TERM_START_NOJOB	TERM_START_NOJOB2639,87140
#define TERM_START_FORCEIT	TERM_START_FORCEIT2640,87167
#define TERM_START_SYSTEM	TERM_START_SYSTEM2641,87196
#define SAVE_RESTORE_TITLE	SAVE_RESTORE_TITLE2644,87266
#define SAVE_RESTORE_ICON	SAVE_RESTORE_ICON2645,87295
#define SAVE_RESTORE_BOTH	SAVE_RESTORE_BOTH2646,87323
#define APC_SAVE_FOR_UNDO	APC_SAVE_FOR_UNDO2649,87426
#define APC_SUBSTITUTE	APC_SUBSTITUTE2650,87498
#define CLIP_ZINDEX CLIP_ZINDEX2652,87561
#define REPTERM_FROM_PART	REPTERM_FROM_PART2655,87621
#define REPTERM_DO_LT	REPTERM_DO_LT2656,87649
#define REPTERM_SPECIAL	REPTERM_SPECIAL2657,87674
#define REPTERM_NO_SIMPLIFY	REPTERM_NO_SIMPLIFY2658,87701

src/VisVim/Commands.h,1127
#define AFX_COMMANDS_H__AC726717_2977_11D1_B2F3_006008040780__INCLUDED_AFX_COMMANDS_H__AC726717_2977_11D1_B2F3_006008040780__INCLUDED_5,110
class CCommands :CCommands9,206
	IApplication * m_pApplication;m_pApplication18,404
	IApplication *GetApplicationObject ()GetApplicationObject24,540
		class XEventHandler :XEventHandler45,1091
		void Connect (IUnknown * pUnk)Connect59,1466
		void Disconnect (IUnknown * pUnk)Disconnect64,1593
		CCommands *m_pCommands;m_pCommands69,1686
		DWORD m_dwAdvise;m_dwAdvise72,1729
	class XApplicationEvents : public XEventHandler < IApplicationEvents,XApplicationEvents76,1817
	typedef CComObject < XApplicationEvents > XApplicationEventsObj;XApplicationEventsObj97,2672
	XApplicationEventsObj *m_pApplicationEventsObj;m_pApplicationEventsObj98,2738
	class XDebuggerEvents : public XEventHandler < IDebuggerEvents,XDebuggerEvents101,2851
	typedef CComObject < XDebuggerEvents > XDebuggerEventsObj;XDebuggerEventsObj111,3115
	XDebuggerEventsObj *m_pDebuggerEventsObj;m_pDebuggerEventsObj112,3175
typedef CComObject < CCommands > CCommandsObj;CCommandsObj123,3426

src/VisVim/DSAddIn.h,289
#define AFX_DSADDIN_H__AC726715_2977_11D1_B2F3_006008040780__INCLUDED_AFX_DSADDIN_H__AC726715_2977_11D1_B2F3_006008040780__INCLUDED_5,108
class CDSAddIn :CDSAddIn16,440
	CDSAddIn ()CDSAddIn27,704
	CCommandsObj * m_pCommands;m_pCommands47,1218
	DWORD m_dwCookie;m_dwCookie48,1247

src/VisVim/OleAut.h,1056
#define __OLEAUT_H____OLEAUT_H__2,21
class COleAutomationControl : public CObjectCOleAutomationControl4,43
	bool IsCreated ()IsCreated19,570
	HRESULT GetResult ()GetResult24,650
	UINT GetErrArgNr ()GetErrArgNr28,698
	EXCEPINFO* GetExceptionInfo ()GetExceptionInfo32,745
	LPVARIANT GetResultVariant ()GetResultVariant36,810
	IDispatch*	m_pDispatch;m_pDispatch46,1057
	HRESULT		m_hResult;m_hResult47,1082
	UINT		m_nErrArg;m_nErrArg48,1103
	EXCEPINFO	m_ExceptionInfo;m_ExceptionInfo49,1121
	VARIANTARG	m_VariantResult;m_VariantResult50,1149
    #define FROM_OLE_STRING(FROM_OLE_STRING54,1197
    #define FROM_OLE_STRING_BUF(FROM_OLE_STRING_BUF55,1235
    #define TO_OLE_STR(TO_OLE_STR56,1280
    #define TO_OLE_STR_BUF(TO_OLE_STR_BUF57,1314
    #define MAX_OLE_STR	MAX_OLE_STR58,1355
    #define FROM_OLE_STR(FROM_OLE_STR60,1390
    #define FROM_OLE_STR_BUF(FROM_OLE_STR_BUF61,1441
    #define TO_OLE_STR(TO_OLE_STR64,1610
    #define TO_OLE_STR_BUF(TO_OLE_STR_BUF65,1662
    #define MAX_OLE_STR	MAX_OLE_STR69,1914

src/VisVim/Resource.h,997
#define IDS_VISVIM_LONGNAME	IDS_VISVIM_LONGNAME5,100
#define IDS_VISVIM_DESCRIPTION	IDS_VISVIM_DESCRIPTION6,131
#define IDS_CMD_DIALOG	IDS_CMD_DIALOG7,165
#define IDS_CMD_ENABLE	IDS_CMD_ENABLE8,192
#define IDS_CMD_DISABLE	IDS_CMD_DISABLE9,219
#define IDS_CMD_TOGGLE	IDS_CMD_TOGGLE10,247
#define IDS_CMD_LOAD	IDS_CMD_LOAD11,274
#define IDR_TOOLBAR_MEDIUM	IDR_TOOLBAR_MEDIUM12,299
#define IDR_TOOLBAR_LARGE	IDR_TOOLBAR_LARGE13,331
#define IDD_ADDINMAIN	IDD_ADDINMAIN14,362
#define IDC_DEVSTUDIO_EDITOR	IDC_DEVSTUDIO_EDITOR15,390
#define IDC_CD_SOURCE_PATH	IDC_CD_SOURCE_PATH16,425
#define IDC_CD_SOURCE_PARENT	IDC_CD_SOURCE_PARENT17,458
#define IDC_CD_NONE	IDC_CD_NONE18,493
#define IDC_NEW_TABS	IDC_NEW_TABS19,520
#define _APS_NEXT_RESOURCE_VALUE	_APS_NEXT_RESOURCE_VALUE25,649
#define _APS_NEXT_COMMAND_VALUE	_APS_NEXT_COMMAND_VALUE26,686
#define _APS_NEXT_CONTROL_VALUE	_APS_NEXT_CONTROL_VALUE27,725
#define _APS_NEXT_SYMED_VALUE	_APS_NEXT_SYMED_VALUE28,763

src/VisVim/StdAfx.h,253
#define AFX_STDAFX_H__AC72670E_2977_11D1_B2F3_006008040780__INCLUDED_AFX_STDAFX_H__AC72670E_2977_11D1_B2F3_006008040780__INCLUDED_7,243
#define VC_EXTRALEAN	VC_EXTRALEAN9,314
#define VERIFY_OK(VERIFY_OK48,1748
#define VERIFY_OK(VERIFY_OK66,2090

src/VisVim/VisVim.h,138
#define AFX_VISVIM_H__AC72670B_2977_11D1_B2F3_006008040780__INCLUDED_AFX_VISVIM_H__AC72670B_2977_11D1_B2F3_006008040780__INCLUDED_5,130

src/xdiff/xdiff.h,3197
#define XDIFF_HXDIFF_H24,866
#define XDF_NEED_MINIMAL XDF_NEED_MINIMAL31,963
#define XDF_IGNORE_WHITESPACE XDF_IGNORE_WHITESPACE33,998
#define XDF_IGNORE_WHITESPACE_CHANGE XDF_IGNORE_WHITESPACE_CHANGE34,1037
#define XDF_IGNORE_WHITESPACE_AT_EOL XDF_IGNORE_WHITESPACE_AT_EOL35,1083
#define XDF_IGNORE_CR_AT_EOL XDF_IGNORE_CR_AT_EOL36,1129
#define XDF_WHITESPACE_FLAGS XDF_WHITESPACE_FLAGS37,1167
#define XDF_IGNORE_BLANK_LINES XDF_IGNORE_BLANK_LINES42,1339
#define XDF_PATIENCE_DIFF XDF_PATIENCE_DIFF44,1380
#define XDF_HISTOGRAM_DIFF XDF_HISTOGRAM_DIFF45,1416
#define XDF_DIFF_ALGORITHM_MASK XDF_DIFF_ALGORITHM_MASK46,1453
#define XDF_DIFF_ALG(XDF_DIFF_ALG47,1526
#define XDF_INDENT_HEURISTIC XDF_INDENT_HEURISTIC49,1583
#define XDL_EMIT_FUNCNAMES XDL_EMIT_FUNCNAMES52,1645
#define XDL_EMIT_FUNCCONTEXT XDL_EMIT_FUNCCONTEXT53,1681
#define XDL_MERGE_MINIMAL XDL_MERGE_MINIMAL56,1751
#define XDL_MERGE_EAGER XDL_MERGE_EAGER57,1779
#define XDL_MERGE_ZEALOUS XDL_MERGE_ZEALOUS58,1805
#define XDL_MERGE_ZEALOUS_ALNUM XDL_MERGE_ZEALOUS_ALNUM59,1833
#define XDL_MERGE_FAVOR_OURS XDL_MERGE_FAVOR_OURS62,1889
#define XDL_MERGE_FAVOR_THEIRS XDL_MERGE_FAVOR_THEIRS63,1920
#define XDL_MERGE_FAVOR_UNION XDL_MERGE_FAVOR_UNION64,1953
#define XDL_MERGE_DIFF3 XDL_MERGE_DIFF367,2009
typedef struct s_mmfile {s_mmfile69,2036
	char *ptr;ptr70,2062
	long size;size71,2074
} mmfile_t;mmfile_t72,2086
typedef struct s_mmbuffer {s_mmbuffer74,2099
	char *ptr;ptr75,2127
	long size;size76,2139
} mmbuffer_t;mmbuffer_t77,2151
typedef struct s_xpparam {s_xpparam79,2166
	unsigned long flags;flags80,2193
	char **anchors;anchors83,2256
	size_t anchors_nr;anchors_nr84,2273
} xpparam_t;xpparam_t85,2293
typedef struct s_xdemitcb {s_xdemitcb87,2307
	void *priv;priv88,2335
	int (*outf)(void *, mmbuffer_t *, int);outf89,2348
} xdemitcb_t;xdemitcb_t90,2389
typedef long (*find_func_t)(const char *line, long line_len, char *buffer, long buffer_size, void *priv);find_func_t92,2404
typedef int (*xdl_emit_hunk_consume_func_t)(long start_a, long count_a,xdl_emit_hunk_consume_func_t94,2511
typedef struct s_xdemitconf {s_xdemitconf98,2646
	long ctxlen;ctxlen99,2676
	long interhunkctxlen;interhunkctxlen100,2690
	unsigned long flags;flags101,2713
	find_func_t find_func;find_func102,2735
	void *find_func_priv;find_func_priv103,2759
	xdl_emit_hunk_consume_func_t hunk_func;hunk_func104,2782
} xdemitconf_t;xdemitconf_t105,2823
typedef struct s_bdiffparam {s_bdiffparam107,2840
	long bsize;bsize108,2870
} bdiffparam_t;bdiffparam_t109,2883
#define xdl_malloc(xdl_malloc117,2966
#define xdl_free(xdl_free118,3006
#define xdl_realloc(xdl_realloc119,3042
typedef struct s_xmparam {s_xmparam127,3299
	xpparam_t xpp;xpp128,3326
	int marker_size;marker_size129,3342
	int level;level130,3360
	int favor;favor131,3372
	int style;style132,3384
	const char *ancestor;	// label for origancestor133,3396
	const char *file1;	// label for mf1file1134,3437
	const char *file2;	// label for mf2file2135,3474
} xmparam_t;xmparam_t136,3511
#define DEFAULT_CONFLICT_MARKER_SIZE DEFAULT_CONFLICT_MARKER_SIZE138,3525

src/xdiff/xdiffi.h,664
#define XDIFFI_HXDIFFI_H24,867
typedef struct s_diffdata {s_diffdata27,886
	long nrec;nrec28,914
	unsigned long const *ha;ha29,926
	long *rindex;rindex30,952
	char *rchg;rchg31,967
} diffdata_t;diffdata_t32,980
typedef struct s_xdalgoenv {s_xdalgoenv34,995
	long mxcost;mxcost35,1024
	long snake_cnt;snake_cnt36,1038
	long heur_min;heur_min37,1055
} xdalgoenv_t;xdalgoenv_t38,1071
typedef struct s_xdchange {s_xdchange40,1087
	struct s_xdchange *next;next41,1115
	long i1, i2;i142,1141
	long i1, i2;i242,1141
	long chg1, chg2;chg143,1155
	long chg1, chg2;chg243,1155
	int ignore;ignore44,1173
} xdchange_t;xdchange_t45,1186

src/xdiff/xemit.h,126
#define XEMIT_HXEMIT_H24,866
typedef int (*emit_func_t)(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,emit_func_t27,884

src/xdiff/xinclude.h,133
# define UNUSED UNUSED35,1137
# define UNUSEDUNUSED37,1183
# define inline inline41,1229
#define XINCLUDE_HXINCLUDE_H45,1287

src/xdiff/xmacros.h,467
#define XMACROS_HXMACROS_H24,868
#define XDL_MIN(XDL_MIN29,890
#define XDL_MAX(XDL_MAX30,935
#define XDL_ABS(XDL_ABS31,980
#define XDL_ISDIGIT(XDL_ISDIGIT32,1022
#define XDL_ISSPACE(XDL_ISSPACE33,1072
#define XDL_ADDBITS(XDL_ADDBITS34,1125
#define XDL_MASKBITS(XDL_MASKBITS35,1171
#define XDL_HASHLONG(XDL_HASHLONG36,1215
#define XDL_PTRFREE(XDL_PTRFREE37,1296
#define XDL_LE32_PUT(XDL_LE32_PUT38,1372
#define XDL_LE32_GET(XDL_LE32_GET46,1620

src/xdiff/xprepare.h,37
#define XPREPARE_HXPREPARE_H24,869

src/xdiff/xtypes.h,1236
#define XTYPES_HXTYPES_H24,867
typedef struct s_chanode {s_chanode28,887
	struct s_chanode *next;next29,914
	long icurr;icurr30,939
} chanode_t;chanode_t31,952
typedef struct s_chastore {s_chastore33,966
	chanode_t *head, *tail;head34,994
	chanode_t *head, *tail;tail34,994
	long isize, nsize;isize35,1019
	long isize, nsize;nsize35,1019
	chanode_t *ancur;ancur36,1039
	chanode_t *sncur;sncur37,1058
	long scurr;scurr38,1077
} chastore_t;chastore_t39,1090
typedef struct s_xrecord {s_xrecord41,1105
	struct s_xrecord *next;next42,1132
	char const *ptr;ptr43,1157
	long size;size44,1175
	unsigned long ha;ha45,1187
} xrecord_t;xrecord_t46,1206
typedef struct s_xdfile {s_xdfile48,1220
	chastore_t rcha;rcha49,1246
	long nrec;nrec50,1264
	unsigned int hbits;hbits51,1276
	xrecord_t **rhash;rhash52,1297
	long dstart, dend;dstart53,1317
	long dstart, dend;dend53,1317
	xrecord_t **recs;recs54,1337
	char *rchg;rchg55,1356
	long *rindex;rindex56,1369
	long nreff;nreff57,1384
	unsigned long *ha;ha58,1397
} xdfile_t;xdfile_t59,1417
typedef struct s_xdfenv {s_xdfenv61,1430
	xdfile_t xdf1, xdf2;xdf162,1456
	xdfile_t xdf1, xdf2;xdf262,1456
} xdfenv_t;xdfenv_t63,1478

src/xdiff/xutils.h,33
#define XUTILS_HXUTILS_H24,867

src/xpm/include/simx.h,1122
#define _SIMX_H_SIMX_H38,2066
#define FUNC(FUNC52,2460
#define LFUNC(LFUNC53,2495
#define FUNC(FUNC55,2547
#define LFUNC(LFUNC56,2582
typedef HDC Display;			/* this should be similar */Display67,2896
typedef void *Screen;			/* not used */Screen68,2948
typedef void *Visual;			/* not used yet, is for GRAY, COLOR,Visual69,2987
typedef void *Colormap;			/* should be COLORPALETTE, not doneColormap72,3065
typedef COLORREF Pixel;Pixel75,3143
#define PIXEL_ALREADY_TYPEDEFED	PIXEL_ALREADY_TYPEDEFED77,3168
    Pixel pixel;pixel80,3252
    BYTE red, green, blue;red81,3269
    BYTE red, green, blue;green81,3269
    BYTE red, green, blue;blue81,3269
}      XColor;XColor82,3296
    HBITMAP bitmap;bitmap85,3329
    unsigned int width;width86,3349
    unsigned int height;height87,3373
    unsigned int depth;depth88,3398
}      XImage;XImage89,3422
#define ZPixmap ZPixmap123,4628
#define XYBitmap XYBitmap124,4670
#define True True127,4727
#define False False128,4742
typedef BOOL Bool;		/* take MSW bool */Bool131,4778
#undef LFUNCLFUNC134,4886
#undef FUNCFUNC135,4899

src/xpm/include/xpm.h,8628
#define XPM_hXPM_h46,2179
#define XpmFormat XpmFormat60,2680
#define XpmVersion XpmVersion61,2700
#define XpmRevision XpmRevision62,2721
#define XpmIncludeVersion XpmIncludeVersion63,2744
# define SYSV	SYSV68,2860
#define NEED_STRCASECMP	NEED_STRCASECMP71,2992
typedef unsigned long Pixel;	/* Index into colormap */Pixel83,3332
# define PIXEL_ALREADY_TYPEDEFEDPIXEL_ALREADY_TYPEDEFED84,3387
#  define NeedFunctionPrototypes NeedFunctionPrototypes90,3599
#  define NeedFunctionPrototypes NeedFunctionPrototypes92,3641
#define XpmColorError XpmColorError103,3809
#define XpmSuccess XpmSuccess104,3836
#define XpmOpenFailed XpmOpenFailed105,3863
#define XpmFileInvalid XpmFileInvalid106,3890
#define XpmNoMemory XpmNoMemory107,3917
#define XpmColorFailed XpmColorFailed108,3944
    char *name;			/* Symbolic color name */name111,3989
    char *value;		/* Color value */value112,4033
    Pixel pixel;		/* Color pixel */pixel113,4069
}      XpmColorSymbol;XpmColorSymbol114,4105
    char *name;			/* name of the extension */name117,4146
    unsigned int nlines;	/* number of lines in this extension */nlines118,4192
    char **lines;		/* pointer to the extension array of strings */lines119,4257
}      XpmExtension;XpmExtension120,4324
    char *string;		/* characters string */string123,4363
    char *symbolic;		/* symbolic name */symbolic124,4406
    char *m_color;		/* monochrom default */m_color125,4447
    char *g4_color;		/* 4 level grayscale default */g4_color126,4491
    char *g_color;		/* other level grayscale default */g_color127,4544
    char *c_color;		/* color default */c_color128,4600
}      XpmColor;XpmColor129,4640
    unsigned int width;		/* image width */width132,4675
    unsigned int height;	/* image height */height133,4718
    unsigned int cpp;		/* number of characters per pixel */cpp134,4762
    unsigned int ncolors;	/* number of colors */ncolors135,4822
    XpmColor *colorTable;	/* list of related colors */colorTable136,4871
    unsigned int *data;		/* image data */data137,4926
}      XpmImage;XpmImage138,4968
    unsigned long valuemask;	/* Specifies which attributes are defined */valuemask141,5003
    char *hints_cmt;		/* Comment of the hints section */hints_cmt142,5077
    char *colors_cmt;		/* Comment of the colors section */colors_cmt143,5134
    char *pixels_cmt;		/* Comment of the pixels section */pixels_cmt144,5193
    unsigned int x_hotspot;	/* Returns the x hotspot's coordinate */x_hotspot145,5252
    unsigned int y_hotspot;	/* Returns the y hotspot's coordinate */y_hotspot146,5321
    unsigned int nextensions;	/* number of extensions */nextensions147,5390
    XpmExtension *extensions;	/* pointer to array of extensions */extensions148,5447
}      XpmInfo;XpmInfo149,5514
typedef int (*XpmAllocColorFunc)(XpmAllocColorFunc151,5531
typedef int (*XpmFreeColorsFunc)(XpmFreeColorsFunc161,5747
    unsigned long valuemask;		/* Specifies which attributes arevaluemask172,5976
    Visual *visual;			/* Specifies the visual to use */visual175,6060
    Colormap colormap;			/* Specifies the colormap to use */colormap176,6116
    unsigned int depth;			/* Specifies the depth */depth177,6177
    unsigned int width;			/* Returns the width of the createdwidth178,6229
    unsigned int height;		/* Returns the height of the createdheight180,6309
    unsigned int x_hotspot;		/* Returns the x hotspot'sx_hotspot182,6390
    unsigned int y_hotspot;		/* Returns the y hotspot'sy_hotspot184,6468
    unsigned int cpp;			/* Specifies the number of char percpp186,6546
    Pixel *pixels;			/* List of used color pixels */pixels188,6623
    unsigned int npixels;		/* Number of used pixels */npixels189,6676
    XpmColorSymbol *colorsymbols;	/* List of color symbols to override */colorsymbols190,6731
    unsigned int numsymbols;		/* Number of symbols */numsymbols191,6805
    char *rgb_fname;			/* RGB text file name */rgb_fname192,6859
    unsigned int nextensions;		/* Number of extensions */nextensions193,6907
    XpmExtension *extensions;		/* List of extensions */extensions194,6965
    unsigned int ncolors;               /* Number of colors */ncolors196,7022
    XpmColor *colorTable;               /* List of colors */colorTable197,7085
    char *hints_cmt;                    /* Comment of the hints section */hints_cmt199,7184
    char *colors_cmt;                   /* Comment of the colors section */colors_cmt200,7259
    char *pixels_cmt;                   /* Comment of the pixels section */pixels_cmt201,7335
    unsigned int mask_pixel;            /* Color table index of transparentmask_pixel203,7428
    Bool exactColors;			/* Only use exact colors for visual */exactColors207,7595
    unsigned int closeness;		/* Allowable RGB deviation */closeness208,7658
    unsigned int red_closeness;		/* Allowable red deviation */red_closeness209,7717
    unsigned int green_closeness;	/* Allowable green deviation */green_closeness210,7780
    unsigned int blue_closeness;	/* Allowable blue deviation */blue_closeness211,7846
    int color_key;			/* Use colors from this color set */color_key212,7910
    Pixel *alloc_pixels;		/* Returns the list of alloc'ed coloralloc_pixels214,7969
    int nalloc_pixels;			/* Returns the number of alloc'ednalloc_pixels216,8051
    Bool alloc_close_colors;    	/* Specify whether close colors shouldalloc_close_colors219,8135
    int bitmap_format;			/* Specify the format of 1bit depthbitmap_format222,8264
    XpmAllocColorFunc alloc_color;	/* Application color allocator */alloc_color226,8391
    XpmFreeColorsFunc free_colors;	/* Application color de-allocator */free_colors227,8460
    void *color_closure;		/* Application private data to pass tocolor_closure228,8532
}      XpmAttributes;XpmAttributes231,8637
#define XpmVisual	XpmVisual234,8697
#define XpmColormap	XpmColormap235,8726
#define XpmDepth	XpmDepth236,8757
#define XpmSize	XpmSize237,8785
#define XpmHotspot	XpmHotspot238,8834
#define XpmCharsPerPixel XpmCharsPerPixel239,8892
#define XpmColorSymbols	XpmColorSymbols240,8927
#define XpmRgbFilename	XpmRgbFilename241,8962
#define XpmInfos	XpmInfos243,9034
#define XpmReturnInfos	XpmReturnInfos244,9062
#define XpmReturnPixels	XpmReturnPixels246,9114
#define XpmExtensions XpmExtensions247,9149
#define XpmReturnExtensions XpmReturnExtensions248,9185
#define XpmExactColors XpmExactColors250,9228
#define XpmCloseness	XpmCloseness251,9264
#define XpmRGBCloseness	XpmRGBCloseness252,9297
#define XpmColorKey	XpmColorKey253,9333
#define XpmColorTable XpmColorTable255,9366
#define XpmReturnColorTable XpmReturnColorTable256,9402
#define XpmReturnAllocPixels XpmReturnAllocPixels258,9445
#define XpmAllocCloseColors XpmAllocCloseColors259,9483
#define XpmBitmapFormat XpmBitmapFormat260,9520
#define XpmAllocColor XpmAllocColor262,9557
#define XpmFreeColors XpmFreeColors263,9593
#define XpmColorClosure XpmColorClosure264,9629
#define XpmComments XpmComments268,9698
#define XpmReturnComments XpmReturnComments269,9734
#define XpmUndefPixel XpmUndefPixel273,9849
#define XpmUndefPixel XpmUndefPixel276,9921
#define XPM_MONO	XPM_MONO283,10099
#define XPM_GREY4	XPM_GREY4284,10118
#define XPM_GRAY4	XPM_GRAY4285,10138
#define XPM_GREY XPM_GREY286,10158
#define XPM_GRAY XPM_GRAY287,10178
#define XPM_COLOR	XPM_COLOR288,10198
#define FUNC(FUNC293,10314
#define LFUNC(LFUNC294,10349
#define FUNC(FUNC296,10391
#define LFUNC(LFUNC297,10426
#define XpmPixmapColorError XpmPixmapColorError469,15383
#define XpmPixmapSuccess XpmPixmapSuccess470,15426
#define XpmPixmapOpenFailed XpmPixmapOpenFailed471,15466
#define XpmPixmapFileInvalid XpmPixmapFileInvalid472,15509
#define XpmPixmapNoMemory XpmPixmapNoMemory473,15553
#define XpmPixmapColorFailed XpmPixmapColorFailed474,15594
#define XpmReadPixmapFile(XpmReadPixmapFile476,15639
#define XpmWritePixmapFile(XpmWritePixmapFile478,15751
#define PixmapColorError PixmapColorError482,15885
#define PixmapSuccess PixmapSuccess483,15925
#define PixmapOpenFailed PixmapOpenFailed484,15962
#define PixmapFileInvalid PixmapFileInvalid485,16002
#define PixmapNoMemory PixmapNoMemory486,16043
#define PixmapColorFailed PixmapColorFailed487,16081
#define ColorSymbol ColorSymbol489,16123
#define XReadPixmapFile(XReadPixmapFile491,16159
#define XWritePixmapFile(XWritePixmapFile493,16269
#define XCreatePixmapFromData(XCreatePixmapFromData495,16377
#define XCreateDataFromPixmap(XCreateDataFromPixmap497,16497
